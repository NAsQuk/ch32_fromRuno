   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f10x_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.__WFI,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	__WFI:
  24              	.LFB5:
  25              		.file 1 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h"
   1:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /******************************************************************************
   2:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @file:    core_cm3.h
   3:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @version: V1.20
   5:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @date:    22. May 2009
   6:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *----------------------------------------------------------------------------
   7:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
   8:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  10:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  11:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  12:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  13:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  14:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  15:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  16:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  17:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  18:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  19:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  20:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
  21:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  22:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  23:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  24:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  25:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  26:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  extern "C" {
  27:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif 
  28:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  29:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  30:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  31:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  32:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  33:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  34:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  35:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
  36:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  Lint configuration \n
  37:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  ----------------------- \n
  38:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  39:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  40:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  \n
  41:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 10: --- \n
  42:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  43:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Error 10: Expecting ';' \n
  44:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  45:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 530: --- \n
  46:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    return(__regBasePri); \n
  47:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  48:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  49:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 550: --- \n
  50:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  51:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } \n
  52:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  53:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  54:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 754: --- \n
  55:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  56:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  57:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  58:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 750: --- \n
  59:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  60:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  61:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  62:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 528: --- \n
  63:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  64:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  65:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  66:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 751: --- \n
  67:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } InterruptType_Type; \n
  68:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  69:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  70:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  71:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  72:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  73:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
  74:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  75:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -save */
  76:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e10  */
  77:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e530 */
  78:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e550 */
  79:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e754 */
  80:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e750 */
  81:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e528 */
  82:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e751 */
  83:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  84:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  85:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  86:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  87:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  88:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  89:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  90:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  91:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  92:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  93:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  94:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  95:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  96:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  97:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  98:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  99:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * IO definitions
 101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* System Reset */
 121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug */
 127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];
 138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];
 140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];
 142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];
 144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];
 146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];
 148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }  NVIC_Type;
 150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for System Control Block */
 153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SCB_Type;
 175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for SysTick */
 178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SysTick_Type;
 185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping structur for ITM */
 188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  union  
 191:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   {
 192:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 193:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 194:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 195:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 196:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];
 197:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 198:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];
 199:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 200:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];
 201:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 202:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];
 203:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 204:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 205:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 206:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];
 207:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 208:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 209:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];
 210:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 211:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;
 212:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;
 213:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;
 214:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;
 215:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;
 216:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;
 217:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;
 218:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;
 219:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;
 220:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;
 221:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;
 222:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } ITM_Type;
 223:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 224:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 225:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 226:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 227:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 228:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 229:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 230:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 231:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 232:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 233:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 234:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 235:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } InterruptType_Type;
 236:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 237:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 238:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory Protection Unit */
 239:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 240:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 241:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 242:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 243:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 244:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 245:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 246:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 247:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 248:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 249:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 250:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 251:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 252:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 253:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } MPU_Type;
 254:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 255:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 256:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 257:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug Register */
 258:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 259:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 260:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 261:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 262:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 263:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 264:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 265:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 266:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 267:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 268:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 269:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 270:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 271:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 272:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 273:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 274:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 275:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 276:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 277:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 278:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 279:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 280:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 281:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 282:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 283:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 284:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 285:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 286:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 287:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 288:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 289:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 290:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 291:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 292:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 293:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 294:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 295:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 296:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 297:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 298:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 299:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 300:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 301:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 302:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 303:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 304:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 305:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 306:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 307:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 308:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 309:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 310:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 311:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 312:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 313:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 314:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 315:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 316:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 317:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 318:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 319:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 320:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 321:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 322:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 323:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 324:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 325:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 326:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 327:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 328:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __REV                             __rev
 329:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 330:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 331:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 332:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 333:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 334:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 335:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 336:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 337:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 338:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 339:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 340:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 341:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 342:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 343:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 344:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 345:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 346:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 347:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 348:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 349:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 350:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 351:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 352:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 353:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 354:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 355:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 356:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 357:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 358:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 359:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 360:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 361:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 362:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 363:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 364:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 365:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 366:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 367:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 368:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 369:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 370:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 371:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 372:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 373:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 374:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 375:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 376:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 377:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 378:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 379:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 380:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 381:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 382:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 383:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 384:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 385:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 386:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 387:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 388:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 389:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 390:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 391:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 392:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 393:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 394:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 395:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 396:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 397:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 398:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 399:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 400:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 401:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 402:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 403:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 404:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 405:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 406:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 407:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 408:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 409:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 410:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 411:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 412:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 413:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 414:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 415:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 416:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 417:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 418:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 419:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 420:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 421:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 422:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 423:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 424:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 425:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 426:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 427:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 428:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 429:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 430:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 431:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 432:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 433:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 434:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 435:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 436:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 437:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 438:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 439:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 440:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 441:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 442:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 443:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 444:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 445:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 446:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 447:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 448:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 449:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 450:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 451:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 452:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 453:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 454:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 455:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 456:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 457:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 458:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 459:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 460:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 461:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 462:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 463:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 464:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 465:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 466:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 467:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 468:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 469:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 470:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 471:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 472:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 473:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 474:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 475:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 476:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 477:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 478:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 479:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 480:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 481:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 482:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 483:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 484:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 485:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 486:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 487:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 488:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 489:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 490:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 491:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 492:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 493:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 494:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 495:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 496:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 497:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 498:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 499:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 500:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 501:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 502:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 503:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 504:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 505:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 506:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 507:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 508:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 509:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 510:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 511:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 512:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 513:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 514:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 515:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 516:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 517:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 518:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 519:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 520:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 521:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 522:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 523:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 524:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 525:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regBasePri);
 526:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 527:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 528:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 529:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 530:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 531:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 532:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 533:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 534:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 535:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 536:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 537:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 538:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 539:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 540:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 541:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 542:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 543:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 544:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 545:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 546:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 547:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 548:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 549:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 550:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 551:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 552:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 553:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 554:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regPriMask);
 555:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 556:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 557:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 558:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 559:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 560:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 561:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 562:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 563:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 564:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 565:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 566:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 567:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 568:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 569:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 570:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 571:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 572:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 573:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 574:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 575:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 576:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 577:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 578:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 579:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 580:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 581:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 582:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regFaultMask);
 583:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 584:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 585:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 586:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 587:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 588:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 589:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 590:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 591:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 592:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 593:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 594:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 595:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 596:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 597:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 598:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 599:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 600:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 601:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 602:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 603:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 604:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 605:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 606:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 607:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 608:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 609:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 610:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regControl);
 611:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 612:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 613:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 614:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 615:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 616:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 617:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 618:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 619:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 620:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 621:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 622:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 623:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 624:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regControl = control;
 625:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 626:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 627:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 628:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 629:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 630:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 631:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 632:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
 633:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 634:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 635:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 636:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 637:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 638:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 639:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 640:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 641:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 642:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 643:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 644:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 645:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 646:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 647:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 648:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 649:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 650:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 651:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 652:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 653:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 654:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 655:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 656:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 657:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 658:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 659:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 660:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 661:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 662:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 663:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 664:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 665:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 666:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 667:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 668:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 669:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 670:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 671:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 672:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 673:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 674:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 675:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 676:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 677:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 678:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 679:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 680:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 681:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 682:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 683:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 684:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 685:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 686:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 687:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 688:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 689:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 690:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 691:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 692:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 693:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 694:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 695:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 696:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 697:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 698:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 699:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 700:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 701:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 702:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 703:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 704:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 705:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 706:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 707:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 708:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 709:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 710:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 711:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 712:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 713:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 714:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 715:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 716:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 717:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 718:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 719:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 720:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 721:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 722:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 723:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 724:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 725:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 726:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 727:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 728:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 729:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 730:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 731:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 732:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 733:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 734:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 735:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 736:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 737:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 738:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 739:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 740:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 741:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 742:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 743:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 744:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 745:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 746:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 747:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 748:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 749:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 750:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 751:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 752:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 753:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 754:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 755:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
 756:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
 757:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 758:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 759:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 760:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 761:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 762:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 763:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 764:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 765:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 766:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
 767:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
 768:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 769:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 770:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 771:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 772:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 773:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 774:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 775:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 776:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 777:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
 778:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
 779:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 780:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 781:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 782:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 783:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 784:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 785:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 786:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 787:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 788:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
 789:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 790:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 791:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 792:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 793:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 794:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 795:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 796:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 797:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
  26              		.loc 1 797 51
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
  38              		.loc 1 797 53
  39              		.syntax unified
  40              	@ 797 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h" 1
  41 0004 30BF     		wfi
  42              	@ 0 "" 2
  43              		.loc 1 797 77
  44              		.thumb
  45              		.syntax unified
  46 0006 00BF     		nop
  47 0008 BD46     		mov	sp, r7
  48              	.LCFI2:
  49              		.cfi_def_cfa_register 13
  50              		@ sp needed
  51 000a 80BC     		pop	{r7}
  52              	.LCFI3:
  53              		.cfi_restore 7
  54              		.cfi_def_cfa_offset 0
  55 000c 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE5:
  59              		.section	.text.__WFE,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	__WFE:
  66              	.LFB6:
 798:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
  67              		.loc 1 798 51
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 1, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72 0000 80B4     		push	{r7}
  73              	.LCFI4:
  74              		.cfi_def_cfa_offset 4
  75              		.cfi_offset 7, -4
  76 0002 00AF     		add	r7, sp, #0
  77              	.LCFI5:
  78              		.cfi_def_cfa_register 7
  79              		.loc 1 798 53
  80              		.syntax unified
  81              	@ 798 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h" 1
  82 0004 20BF     		wfe
  83              	@ 0 "" 2
  84              		.loc 1 798 77
  85              		.thumb
  86              		.syntax unified
  87 0006 00BF     		nop
  88 0008 BD46     		mov	sp, r7
  89              	.LCFI6:
  90              		.cfi_def_cfa_register 13
  91              		@ sp needed
  92 000a 80BC     		pop	{r7}
  93              	.LCFI7:
  94              		.cfi_restore 7
  95              		.cfi_def_cfa_offset 0
  96 000c 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE6:
 100              		.section	.text.PWR_DeInit,"ax",%progbits
 101              		.align	1
 102              		.global	PWR_DeInit
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 107              	PWR_DeInit:
 108              	.LFB27:
 109              		.file 2 "common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c"
   1:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
   2:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
   3:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @file    stm32f10x_pwr.c
   4:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @author  MCD Application Team
   5:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @version V3.1.2
   6:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @date    09/28/2009
   7:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief   This file provides all the PWR firmware functions.
   8:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
   9:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @copy
  10:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  11:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  18:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  19:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */ 
  20:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  21:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Includes ------------------------------------------------------------------*/
  22:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #include "stm32f10x_pwr.h"
  23:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #include "stm32f10x_rcc.h"
  24:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  25:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  27:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  28:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  29:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR 
  30:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief PWR driver modules
  31:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  32:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */ 
  33:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  34:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_TypesDefinitions
  35:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  36:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  37:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  38:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  39:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  40:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  41:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  42:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Defines
  43:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  44:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  45:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  46:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  49:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --- CR Register ---*/
  50:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  51:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of DBP bit */
  52:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define DBP_BitNumber            0x08
  54:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  56:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of PVDE bit */
  57:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define PVDE_BitNumber           0x04
  58:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  60:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --- CSR Register ---*/
  61:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  62:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of EWUP bit */
  63:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  64:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define EWUP_BitNumber           0x08
  65:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  66:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  67:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  68:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  69:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* CR register bit mask */
  70:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PDDS_Set              ((uint32_t)0x00000002)
  71:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_DS_Mask               ((uint32_t)0xFFFFFFFC)
  72:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_CWUF_Set              ((uint32_t)0x00000004)
  73:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PLS_Mask              ((uint32_t)0xFFFFFF1F)
  74:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  75:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --------- Cortex System Control register bit mask ---------------- */
  76:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  77:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Cortex System Control register address */
  78:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define SCB_SysCtrl              ((uint32_t)0xE000ED10)
  79:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  80:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* SLEEPDEEP bit mask */
  81:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define SysCtrl_SLEEPDEEP_Set    ((uint32_t)0x00000004)
  82:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  83:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  84:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  85:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  86:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Macros
  87:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  88:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  89:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  90:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  91:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  92:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  93:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  94:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Variables
  95:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  96:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  97:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  98:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  99:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
 100:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 101:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 102:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_FunctionPrototypes
 103:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
 104:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 105:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 106:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 107:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
 108:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 109:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 110:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Functions
 111:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
 112:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 113:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 114:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 115:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
 116:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  None
 117:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 118:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 119:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_DeInit(void)
 120:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 110              		.loc 2 120 1
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 80B5     		push	{r7, lr}
 115              	.LCFI8:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 00AF     		add	r7, sp, #0
 120              	.LCFI9:
 121              		.cfi_def_cfa_register 7
 121:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 122              		.loc 2 121 3
 123 0004 0121     		movs	r1, #1
 124 0006 4FF08050 		mov	r0, #268435456
 125 000a 044B     		ldr	r3, .L4
 126 000c 9847     		blx	r3
 127              	.LVL0:
 122:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 128              		.loc 2 122 3
 129 000e 0021     		movs	r1, #0
 130 0010 4FF08050 		mov	r0, #268435456
 131 0014 014B     		ldr	r3, .L4
 132 0016 9847     		blx	r3
 133              	.LVL1:
 123:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 134              		.loc 2 123 1
 135 0018 00BF     		nop
 136 001a 80BD     		pop	{r7, pc}
 137              	.L5:
 138              		.align	2
 139              	.L4:
 140 001c 00000000 		.word	RCC_APB1PeriphResetCmd
 141              		.cfi_endproc
 142              	.LFE27:
 144              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
 145              		.align	1
 146              		.global	PWR_BackupAccessCmd
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 151              	PWR_BackupAccessCmd:
 152              	.LFB28:
 124:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 125:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 126:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables access to the RTC and backup registers.
 127:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the access to the RTC and backup registers.
 128:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 129:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 130:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 131:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 132:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 153              		.loc 2 132 1
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 8
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158 0000 80B4     		push	{r7}
 159              	.LCFI10:
 160              		.cfi_def_cfa_offset 4
 161              		.cfi_offset 7, -4
 162 0002 83B0     		sub	sp, sp, #12
 163              	.LCFI11:
 164              		.cfi_def_cfa_offset 16
 165 0004 00AF     		add	r7, sp, #0
 166              	.LCFI12:
 167              		.cfi_def_cfa_register 7
 168 0006 0346     		mov	r3, r0
 169 0008 FB71     		strb	r3, [r7, #7]
 133:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 134:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 135:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 170              		.loc 2 135 3
 171 000a 044A     		ldr	r2, .L7
 172              		.loc 2 135 34
 173 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 174              		.loc 2 135 32
 175 000e 1360     		str	r3, [r2]
 136:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 176              		.loc 2 136 1
 177 0010 00BF     		nop
 178 0012 0C37     		adds	r7, r7, #12
 179              	.LCFI13:
 180              		.cfi_def_cfa_offset 4
 181 0014 BD46     		mov	sp, r7
 182              	.LCFI14:
 183              		.cfi_def_cfa_register 13
 184              		@ sp needed
 185 0016 80BC     		pop	{r7}
 186              	.LCFI15:
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 0018 7047     		bx	lr
 190              	.L8:
 191 001a 00BF     		.align	2
 192              	.L7:
 193 001c 20000E42 		.word	1108213792
 194              		.cfi_endproc
 195              	.LFE28:
 197              		.section	.text.PWR_PVDCmd,"ax",%progbits
 198              		.align	1
 199              		.global	PWR_PVDCmd
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 204              	PWR_PVDCmd:
 205              	.LFB29:
 137:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 138:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 139:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 140:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the PVD.
 141:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 142:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 143:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 144:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 145:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 206              		.loc 2 145 1
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 0000 80B4     		push	{r7}
 212              	.LCFI16:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 7, -4
 215 0002 83B0     		sub	sp, sp, #12
 216              	.LCFI17:
 217              		.cfi_def_cfa_offset 16
 218 0004 00AF     		add	r7, sp, #0
 219              	.LCFI18:
 220              		.cfi_def_cfa_register 7
 221 0006 0346     		mov	r3, r0
 222 0008 FB71     		strb	r3, [r7, #7]
 146:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 147:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 148:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 223              		.loc 2 148 3
 224 000a 044A     		ldr	r2, .L10
 225              		.loc 2 148 35
 226 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 227              		.loc 2 148 33
 228 000e 1360     		str	r3, [r2]
 149:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 229              		.loc 2 149 1
 230 0010 00BF     		nop
 231 0012 0C37     		adds	r7, r7, #12
 232              	.LCFI19:
 233              		.cfi_def_cfa_offset 4
 234 0014 BD46     		mov	sp, r7
 235              	.LCFI20:
 236              		.cfi_def_cfa_register 13
 237              		@ sp needed
 238 0016 80BC     		pop	{r7}
 239              	.LCFI21:
 240              		.cfi_restore 7
 241              		.cfi_def_cfa_offset 0
 242 0018 7047     		bx	lr
 243              	.L11:
 244 001a 00BF     		.align	2
 245              	.L10:
 246 001c 10000E42 		.word	1108213776
 247              		.cfi_endproc
 248              	.LFE29:
 250              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 251              		.align	1
 252              		.global	PWR_PVDLevelConfig
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 257              	PWR_PVDLevelConfig:
 258              	.LFB30:
 150:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 151:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 152:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 153:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 154:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 155:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
 156:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
 157:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
 158:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
 159:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
 160:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
 161:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
 162:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
 163:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 164:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 165:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 166:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 259              		.loc 2 166 1
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 16
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264 0000 80B4     		push	{r7}
 265              	.LCFI22:
 266              		.cfi_def_cfa_offset 4
 267              		.cfi_offset 7, -4
 268 0002 85B0     		sub	sp, sp, #20
 269              	.LCFI23:
 270              		.cfi_def_cfa_offset 24
 271 0004 00AF     		add	r7, sp, #0
 272              	.LCFI24:
 273              		.cfi_def_cfa_register 7
 274 0006 7860     		str	r0, [r7, #4]
 167:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 275              		.loc 2 167 12
 276 0008 0023     		movs	r3, #0
 277 000a FB60     		str	r3, [r7, #12]
 168:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 169:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 170:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 278              		.loc 2 170 15
 279 000c 094B     		ldr	r3, .L13
 280              		.loc 2 170 10
 281 000e 1B68     		ldr	r3, [r3]
 282 0010 FB60     		str	r3, [r7, #12]
 171:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear PLS[7:5] bits */
 172:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg &= CR_PLS_Mask;
 283              		.loc 2 172 10
 284 0012 FB68     		ldr	r3, [r7, #12]
 285 0014 23F0E003 		bic	r3, r3, #224
 286 0018 FB60     		str	r3, [r7, #12]
 173:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 174:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg |= PWR_PVDLevel;
 287              		.loc 2 174 10
 288 001a FA68     		ldr	r2, [r7, #12]
 289 001c 7B68     		ldr	r3, [r7, #4]
 290 001e 1343     		orrs	r3, r3, r2
 291 0020 FB60     		str	r3, [r7, #12]
 175:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Store the new value */
 176:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 292              		.loc 2 176 6
 293 0022 044A     		ldr	r2, .L13
 294              		.loc 2 176 11
 295 0024 FB68     		ldr	r3, [r7, #12]
 296 0026 1360     		str	r3, [r2]
 177:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 297              		.loc 2 177 1
 298 0028 00BF     		nop
 299 002a 1437     		adds	r7, r7, #20
 300              	.LCFI25:
 301              		.cfi_def_cfa_offset 4
 302 002c BD46     		mov	sp, r7
 303              	.LCFI26:
 304              		.cfi_def_cfa_register 13
 305              		@ sp needed
 306 002e 80BC     		pop	{r7}
 307              	.LCFI27:
 308              		.cfi_restore 7
 309              		.cfi_def_cfa_offset 0
 310 0030 7047     		bx	lr
 311              	.L14:
 312 0032 00BF     		.align	2
 313              	.L13:
 314 0034 00700040 		.word	1073770496
 315              		.cfi_endproc
 316              	.LFE30:
 318              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 319              		.align	1
 320              		.global	PWR_WakeUpPinCmd
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	PWR_WakeUpPinCmd:
 326              	.LFB31:
 178:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 179:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 180:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 181:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 182:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 183:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 184:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 185:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 186:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 327              		.loc 2 186 1
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0000 80B4     		push	{r7}
 333              	.LCFI28:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 7, -4
 336 0002 83B0     		sub	sp, sp, #12
 337              	.LCFI29:
 338              		.cfi_def_cfa_offset 16
 339 0004 00AF     		add	r7, sp, #0
 340              	.LCFI30:
 341              		.cfi_def_cfa_register 7
 342 0006 0346     		mov	r3, r0
 343 0008 FB71     		strb	r3, [r7, #7]
 187:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 188:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 189:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 344              		.loc 2 189 3
 345 000a 044A     		ldr	r2, .L16
 346              		.loc 2 189 36
 347 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 348              		.loc 2 189 34
 349 000e 1360     		str	r3, [r2]
 190:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 350              		.loc 2 190 1
 351 0010 00BF     		nop
 352 0012 0C37     		adds	r7, r7, #12
 353              	.LCFI31:
 354              		.cfi_def_cfa_offset 4
 355 0014 BD46     		mov	sp, r7
 356              	.LCFI32:
 357              		.cfi_def_cfa_register 13
 358              		@ sp needed
 359 0016 80BC     		pop	{r7}
 360              	.LCFI33:
 361              		.cfi_restore 7
 362              		.cfi_def_cfa_offset 0
 363 0018 7047     		bx	lr
 364              	.L17:
 365 001a 00BF     		.align	2
 366              	.L16:
 367 001c A0000E42 		.word	1108213920
 368              		.cfi_endproc
 369              	.LFE31:
 371              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 372              		.align	1
 373              		.global	PWR_EnterSTOPMode
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 378              	PWR_EnterSTOPMode:
 379              	.LFB32:
 191:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 192:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 193:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enters STOP mode.
 194:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 195:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 196:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_ON: STOP mode with regulator ON
 197:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 198:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 199:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 200:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 201:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 202:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 203:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 204:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 205:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 380              		.loc 2 205 1
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 16
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384 0000 80B5     		push	{r7, lr}
 385              	.LCFI34:
 386              		.cfi_def_cfa_offset 8
 387              		.cfi_offset 7, -8
 388              		.cfi_offset 14, -4
 389 0002 84B0     		sub	sp, sp, #16
 390              	.LCFI35:
 391              		.cfi_def_cfa_offset 24
 392 0004 00AF     		add	r7, sp, #0
 393              	.LCFI36:
 394              		.cfi_def_cfa_register 7
 395 0006 7860     		str	r0, [r7, #4]
 396 0008 0B46     		mov	r3, r1
 397 000a FB70     		strb	r3, [r7, #3]
 206:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 398              		.loc 2 206 12
 399 000c 0023     		movs	r3, #0
 400 000e FB60     		str	r3, [r7, #12]
 207:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 208:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 209:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 210:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 211:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 212:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 401              		.loc 2 212 15
 402 0010 0F4B     		ldr	r3, .L22
 403              		.loc 2 212 10
 404 0012 1B68     		ldr	r3, [r3]
 405 0014 FB60     		str	r3, [r7, #12]
 213:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear PDDS and LPDS bits */
 214:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg &= CR_DS_Mask;
 406              		.loc 2 214 10
 407 0016 FB68     		ldr	r3, [r7, #12]
 408 0018 23F00303 		bic	r3, r3, #3
 409 001c FB60     		str	r3, [r7, #12]
 215:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 216:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg |= PWR_Regulator;
 410              		.loc 2 216 10
 411 001e FA68     		ldr	r2, [r7, #12]
 412 0020 7B68     		ldr	r3, [r7, #4]
 413 0022 1343     		orrs	r3, r3, r2
 414 0024 FB60     		str	r3, [r7, #12]
 217:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Store the new value */
 218:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 415              		.loc 2 218 6
 416 0026 0A4A     		ldr	r2, .L22
 417              		.loc 2 218 11
 418 0028 FB68     		ldr	r3, [r7, #12]
 419 002a 1360     		str	r3, [r2]
 219:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 220:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 420              		.loc 2 220 34
 421 002c 094B     		ldr	r3, .L22+4
 422 002e 1B68     		ldr	r3, [r3]
 423 0030 084A     		ldr	r2, .L22+4
 424 0032 43F00403 		orr	r3, r3, #4
 425 0036 1360     		str	r3, [r2]
 221:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 222:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 223:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 426              		.loc 2 223 5
 427 0038 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 428 003a 012B     		cmp	r3, #1
 429 003c 02D1     		bne	.L19
 224:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {   
 225:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     /* Request Wait For Interrupt */
 226:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     __WFI();
 430              		.loc 2 226 5
 431 003e 064B     		ldr	r3, .L22+8
 432 0040 9847     		blx	r3
 433              	.LVL2:
 227:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 228:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   else
 229:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 230:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     /* Request Wait For Event */
 231:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     __WFE();
 232:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 233:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 434              		.loc 2 233 1
 435 0042 01E0     		b	.L21
 436              	.L19:
 231:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 437              		.loc 2 231 5
 438 0044 054B     		ldr	r3, .L22+12
 439 0046 9847     		blx	r3
 440              	.LVL3:
 441              	.L21:
 442              		.loc 2 233 1
 443 0048 00BF     		nop
 444 004a 1037     		adds	r7, r7, #16
 445              	.LCFI37:
 446              		.cfi_def_cfa_offset 8
 447 004c BD46     		mov	sp, r7
 448              	.LCFI38:
 449              		.cfi_def_cfa_register 13
 450              		@ sp needed
 451 004e 80BD     		pop	{r7, pc}
 452              	.L23:
 453              		.align	2
 454              	.L22:
 455 0050 00700040 		.word	1073770496
 456 0054 10ED00E0 		.word	-536810224
 457 0058 00000000 		.word	__WFI
 458 005c 00000000 		.word	__WFE
 459              		.cfi_endproc
 460              	.LFE32:
 462              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 463              		.align	1
 464              		.global	PWR_EnterSTANDBYMode
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 469              	PWR_EnterSTANDBYMode:
 470              	.LFB33:
 234:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 235:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 236:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enters STANDBY mode.
 237:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  None
 238:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 239:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 240:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_EnterSTANDBYMode(void)
 241:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 471              		.loc 2 241 1
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 1, uses_anonymous_args = 0
 475 0000 80B5     		push	{r7, lr}
 476              	.LCFI39:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 00AF     		add	r7, sp, #0
 481              	.LCFI40:
 482              		.cfi_def_cfa_register 7
 242:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear Wake-up flag */
 243:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |= CR_CWUF_Set;
 483              		.loc 2 243 11
 484 0004 0A4B     		ldr	r3, .L25
 485 0006 1B68     		ldr	r3, [r3]
 486 0008 094A     		ldr	r2, .L25
 487 000a 43F00403 		orr	r3, r3, #4
 488 000e 1360     		str	r3, [r2]
 244:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select STANDBY mode */
 245:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |= CR_PDDS_Set;
 489              		.loc 2 245 11
 490 0010 074B     		ldr	r3, .L25
 491 0012 1B68     		ldr	r3, [r3]
 492 0014 064A     		ldr	r2, .L25
 493 0016 43F00203 		orr	r3, r3, #2
 494 001a 1360     		str	r3, [r2]
 246:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 247:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 495              		.loc 2 247 34
 496 001c 054B     		ldr	r3, .L25+4
 497 001e 1B68     		ldr	r3, [r3]
 498 0020 044A     		ldr	r2, .L25+4
 499 0022 43F00403 		orr	r3, r3, #4
 500 0026 1360     		str	r3, [r2]
 248:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* This option is used to ensure that store operations are completed */
 249:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #if defined ( __CC_ARM   )
 250:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   __force_stores();
 251:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #endif
 252:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Request Wait For Interrupt */
 253:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   __WFI();
 501              		.loc 2 253 3
 502 0028 034B     		ldr	r3, .L25+8
 503 002a 9847     		blx	r3
 504              	.LVL4:
 254:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 505              		.loc 2 254 1
 506 002c 00BF     		nop
 507 002e 80BD     		pop	{r7, pc}
 508              	.L26:
 509              		.align	2
 510              	.L25:
 511 0030 00700040 		.word	1073770496
 512 0034 10ED00E0 		.word	-536810224
 513 0038 00000000 		.word	__WFI
 514              		.cfi_endproc
 515              	.LFE33:
 517              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 518              		.align	1
 519              		.global	PWR_GetFlagStatus
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 524              	PWR_GetFlagStatus:
 525              	.LFB34:
 255:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 256:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 257:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 258:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 259:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 260:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 261:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 262:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_PVDO: PVD Output
 263:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 264:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 265:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 266:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 526              		.loc 2 266 1
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 16
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531 0000 80B4     		push	{r7}
 532              	.LCFI41:
 533              		.cfi_def_cfa_offset 4
 534              		.cfi_offset 7, -4
 535 0002 85B0     		sub	sp, sp, #20
 536              	.LCFI42:
 537              		.cfi_def_cfa_offset 24
 538 0004 00AF     		add	r7, sp, #0
 539              	.LCFI43:
 540              		.cfi_def_cfa_register 7
 541 0006 7860     		str	r0, [r7, #4]
 267:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   FlagStatus bitstatus = RESET;
 542              		.loc 2 267 14
 543 0008 0023     		movs	r3, #0
 544 000a FB73     		strb	r3, [r7, #15]
 268:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 269:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 270:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 271:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 545              		.loc 2 271 11
 546 000c 084B     		ldr	r3, .L31
 547 000e 5A68     		ldr	r2, [r3, #4]
 548              		.loc 2 271 17
 549 0010 7B68     		ldr	r3, [r7, #4]
 550 0012 1340     		ands	r3, r3, r2
 551              		.loc 2 271 6
 552 0014 002B     		cmp	r3, #0
 553 0016 02D0     		beq	.L28
 272:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 273:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     bitstatus = SET;
 554              		.loc 2 273 15
 555 0018 0123     		movs	r3, #1
 556 001a FB73     		strb	r3, [r7, #15]
 557 001c 01E0     		b	.L29
 558              	.L28:
 274:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 275:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   else
 276:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 277:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     bitstatus = RESET;
 559              		.loc 2 277 15
 560 001e 0023     		movs	r3, #0
 561 0020 FB73     		strb	r3, [r7, #15]
 562              	.L29:
 278:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 279:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Return the flag status */
 280:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   return bitstatus;
 563              		.loc 2 280 10
 564 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 281:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 565              		.loc 2 281 1
 566 0024 1846     		mov	r0, r3
 567 0026 1437     		adds	r7, r7, #20
 568              	.LCFI44:
 569              		.cfi_def_cfa_offset 4
 570 0028 BD46     		mov	sp, r7
 571              	.LCFI45:
 572              		.cfi_def_cfa_register 13
 573              		@ sp needed
 574 002a 80BC     		pop	{r7}
 575              	.LCFI46:
 576              		.cfi_restore 7
 577              		.cfi_def_cfa_offset 0
 578 002c 7047     		bx	lr
 579              	.L32:
 580 002e 00BF     		.align	2
 581              	.L31:
 582 0030 00700040 		.word	1073770496
 583              		.cfi_endproc
 584              	.LFE34:
 586              		.section	.text.PWR_ClearFlag,"ax",%progbits
 587              		.align	1
 588              		.global	PWR_ClearFlag
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 593              	PWR_ClearFlag:
 594              	.LFB35:
 282:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 283:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 284:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Clears the PWR's pending flags.
 285:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 286:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 287:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 288:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 289:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 290:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 291:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 292:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 595              		.loc 2 292 1
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 8
 598              		@ frame_needed = 1, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600 0000 80B4     		push	{r7}
 601              	.LCFI47:
 602              		.cfi_def_cfa_offset 4
 603              		.cfi_offset 7, -4
 604 0002 83B0     		sub	sp, sp, #12
 605              	.LCFI48:
 606              		.cfi_def_cfa_offset 16
 607 0004 00AF     		add	r7, sp, #0
 608              	.LCFI49:
 609              		.cfi_def_cfa_register 7
 610 0006 7860     		str	r0, [r7, #4]
 293:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 294:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 295:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****          
 296:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 611              		.loc 2 296 11
 612 0008 054B     		ldr	r3, .L34
 613 000a 1A68     		ldr	r2, [r3]
 614              		.loc 2 296 24
 615 000c 7B68     		ldr	r3, [r7, #4]
 616 000e 9B00     		lsls	r3, r3, #2
 617              		.loc 2 296 11
 618 0010 0349     		ldr	r1, .L34
 619 0012 1343     		orrs	r3, r3, r2
 620 0014 0B60     		str	r3, [r1]
 297:common/lib.stm32/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 621              		.loc 2 297 1
 622 0016 00BF     		nop
 623 0018 0C37     		adds	r7, r7, #12
 624              	.LCFI50:
 625              		.cfi_def_cfa_offset 4
 626 001a BD46     		mov	sp, r7
 627              	.LCFI51:
 628              		.cfi_def_cfa_register 13
 629              		@ sp needed
 630 001c 80BC     		pop	{r7}
 631              	.LCFI52:
 632              		.cfi_restore 7
 633              		.cfi_def_cfa_offset 0
 634 001e 7047     		bx	lr
 635              	.L35:
 636              		.align	2
 637              	.L34:
 638 0020 00700040 		.word	1073770496
 639              		.cfi_endproc
 640              	.LFE35:
 642              		.text
 643              	.Letext0:
 644              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 645              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 646              		.file 5 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 647              		.file 6 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_pwr.c
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:18     .text.__WFI:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:23     .text.__WFI:00000000 __WFI
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:60     .text.__WFE:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:65     .text.__WFE:00000000 __WFE
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:101    .text.PWR_DeInit:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:107    .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:140    .text.PWR_DeInit:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:145    .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:151    .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:193    .text.PWR_BackupAccessCmd:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:198    .text.PWR_PVDCmd:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:204    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:246    .text.PWR_PVDCmd:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:251    .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:257    .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:314    .text.PWR_PVDLevelConfig:00000034 $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:319    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:325    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:367    .text.PWR_WakeUpPinCmd:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:372    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:378    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:455    .text.PWR_EnterSTOPMode:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:463    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:469    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:511    .text.PWR_EnterSTANDBYMode:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:518    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:524    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:582    .text.PWR_GetFlagStatus:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:587    .text.PWR_ClearFlag:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:593    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
C:\Users\Admin\AppData\Local\Temp\ccdSKiqw.s:638    .text.PWR_ClearFlag:00000020 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
