   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"usart2.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB14:
  25              		.file 1 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h"
   1:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /******************************************************************************
   2:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @file:    core_cm3.h
   3:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @version: V1.20
   5:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @date:    22. May 2009
   6:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *----------------------------------------------------------------------------
   7:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
   8:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  10:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  11:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  12:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  13:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  14:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  15:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  16:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  17:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  18:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  19:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  20:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
  21:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  22:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  23:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  24:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  25:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  26:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  extern "C" {
  27:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif 
  28:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  29:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  30:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  31:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  32:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  33:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  34:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  35:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
  36:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  Lint configuration \n
  37:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  ----------------------- \n
  38:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  39:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  40:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  \n
  41:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 10: --- \n
  42:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  43:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Error 10: Expecting ';' \n
  44:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  45:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 530: --- \n
  46:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    return(__regBasePri); \n
  47:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  48:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  49:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 550: --- \n
  50:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  51:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } \n
  52:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  53:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  54:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 754: --- \n
  55:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  56:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  57:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  58:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 750: --- \n
  59:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  60:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  61:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  62:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 528: --- \n
  63:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  64:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  65:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  66:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 751: --- \n
  67:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } InterruptType_Type; \n
  68:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  69:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  70:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  71:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  72:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  73:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
  74:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  75:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -save */
  76:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e10  */
  77:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e530 */
  78:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e550 */
  79:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e754 */
  80:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e750 */
  81:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e528 */
  82:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e751 */
  83:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  84:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  85:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  86:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  87:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  88:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  89:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  90:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  91:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  92:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  93:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  94:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  95:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  96:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  97:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  98:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  99:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * IO definitions
 101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* System Reset */
 121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug */
 127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];
 138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];
 140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];
 142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];
 144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];
 146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];
 148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }  NVIC_Type;
 150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for System Control Block */
 153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SCB_Type;
 175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for SysTick */
 178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SysTick_Type;
 185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping structur for ITM */
 188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  union  
 191:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   {
 192:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 193:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 194:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 195:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 196:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];
 197:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 198:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];
 199:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 200:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];
 201:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 202:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];
 203:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 204:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 205:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 206:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];
 207:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 208:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 209:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];
 210:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 211:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;
 212:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;
 213:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;
 214:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;
 215:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;
 216:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;
 217:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;
 218:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;
 219:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;
 220:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;
 221:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;
 222:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } ITM_Type;
 223:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 224:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 225:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 226:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 227:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 228:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 229:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 230:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 231:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 232:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 233:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 234:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 235:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } InterruptType_Type;
 236:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 237:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 238:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory Protection Unit */
 239:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 240:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 241:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 242:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 243:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 244:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 245:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 246:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 247:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 248:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 249:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 250:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 251:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 252:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 253:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } MPU_Type;
 254:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 255:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 256:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 257:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug Register */
 258:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 259:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 260:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 261:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 262:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 263:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 264:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 265:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 266:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 267:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 268:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 269:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 270:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 271:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 272:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 273:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 274:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 275:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 276:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 277:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 278:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 279:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 280:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 281:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 282:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 283:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 284:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 285:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 286:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 287:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 288:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 289:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 290:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 291:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 292:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 293:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 294:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 295:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 296:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 297:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 298:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 299:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 300:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 301:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 302:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 303:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 304:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 305:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 306:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 307:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 308:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 309:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 310:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 311:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 312:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 313:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 314:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 315:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 316:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 317:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 318:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 319:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 320:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 321:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 322:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 323:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 324:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 325:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 326:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 327:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 328:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __REV                             __rev
 329:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 330:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 331:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 332:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 333:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 334:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 335:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 336:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 337:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 338:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 339:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 340:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 341:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 342:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 343:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 344:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 345:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 346:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 347:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 348:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 349:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 350:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 351:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 352:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 353:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 354:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 355:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 356:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 357:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 358:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 359:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 360:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 361:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 362:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 363:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 364:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 365:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 366:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 367:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 368:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 369:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 370:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 371:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 372:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 373:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 374:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 375:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 376:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 377:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 378:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 379:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 380:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 381:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 382:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 383:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 384:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 385:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 386:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 387:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 388:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 389:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 390:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 391:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 392:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 393:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 394:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 395:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 396:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 397:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 398:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 399:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 400:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 401:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 402:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 403:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 404:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 405:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 406:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 407:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 408:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 409:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 410:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 411:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 412:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 413:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 414:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 415:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 416:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 417:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 418:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 419:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 420:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 421:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 422:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 423:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 424:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 425:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 426:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 427:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 428:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 429:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 430:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 431:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 432:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 433:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 434:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 435:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 436:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 437:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 438:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 439:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 440:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 441:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 442:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 443:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 444:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 445:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 446:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 447:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 448:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 449:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 450:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 451:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 452:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 453:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 454:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 455:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 456:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 457:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 458:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 459:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 460:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 461:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 462:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 463:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 464:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 465:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 466:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 467:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 468:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 469:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 470:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 471:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 472:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 473:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 474:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 475:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 476:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 477:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 478:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 479:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 480:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 481:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 482:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 483:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 484:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 485:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 486:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 487:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 488:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 489:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 490:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 491:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 492:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 493:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 494:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 495:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 496:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 497:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 498:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 499:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 500:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 501:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 502:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 503:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 504:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 505:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 506:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 507:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 508:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 509:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 510:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 511:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 512:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 513:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 514:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 515:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 516:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 517:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 518:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 519:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 520:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 521:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 522:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 523:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 524:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 525:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regBasePri);
 526:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 527:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 528:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 529:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 530:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 531:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 532:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 533:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 534:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 535:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 536:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 537:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 538:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 539:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 540:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 541:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 542:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 543:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 544:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 545:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 546:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 547:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 548:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 549:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 550:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 551:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 552:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 553:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 554:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regPriMask);
 555:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 556:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 557:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 558:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 559:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 560:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 561:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 562:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 563:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 564:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 565:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 566:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 567:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 568:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 569:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 570:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 571:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 572:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 573:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 574:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 575:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 576:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 577:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 578:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 579:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 580:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 581:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 582:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regFaultMask);
 583:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 584:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 585:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 586:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 587:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 588:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 589:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 590:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 591:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 592:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 593:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 594:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 595:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 596:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 597:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 598:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 599:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 600:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 601:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 602:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 603:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 604:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 605:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 606:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 607:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 608:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 609:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 610:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regControl);
 611:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 612:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 613:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 614:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 615:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 616:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 617:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 618:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 619:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 620:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 621:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 622:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 623:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 624:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regControl = control;
 625:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 626:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 627:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 628:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 629:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 630:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 631:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 632:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
 633:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 634:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 635:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 636:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 637:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 638:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 639:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 640:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 641:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 642:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 643:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 644:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 645:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 646:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 647:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 648:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 649:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 650:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 651:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 652:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 653:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 654:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 655:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 656:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 657:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 658:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 659:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 660:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 661:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 662:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 663:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 664:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 665:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 666:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 667:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 668:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 669:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 670:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 671:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 672:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 673:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 674:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 675:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 676:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 677:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 678:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 679:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 680:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 681:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 682:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 683:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 684:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 685:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 686:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 687:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 688:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 689:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 690:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 691:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 692:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 693:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 694:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 695:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 696:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 697:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 698:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 699:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 700:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 701:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 702:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 703:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 704:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 705:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 706:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 707:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 708:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 709:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 710:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 711:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 712:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 713:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 714:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 715:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 716:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 717:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 718:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 719:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 720:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 721:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 722:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 723:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 724:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 725:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 726:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 727:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 728:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 729:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 730:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 731:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 732:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 733:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 734:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 735:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 736:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 737:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 738:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 739:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 740:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 741:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 742:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 743:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 744:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 745:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 746:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 747:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 748:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 749:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 750:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 751:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 752:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 753:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 754:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 755:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
 756:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
 757:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 758:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 759:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 760:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 761:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 762:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 763:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 764:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 765:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 766:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
 767:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
 768:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 769:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 770:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 771:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 772:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 773:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 774:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 775:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 776:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 777:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
 778:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
 779:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 780:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 781:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 782:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 783:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 784:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 785:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 786:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 787:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 788:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
 789:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 790:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 791:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 792:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 793:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 794:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 795:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 796:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 797:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 798:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 799:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 800:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 801:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 802:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 803:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
 804:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 805:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 806:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 807:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 808:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 809:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 810:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 811:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 812:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 813:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 814:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 815:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 816:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 817:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 818:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 819:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 820:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 821:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 822:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 823:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 824:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 825:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 826:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 827:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 828:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 829:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 830:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 831:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 832:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 833:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 834:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 835:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 836:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 837:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 838:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 839:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 840:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 841:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 842:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 843:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 844:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 845:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 846:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 847:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 848:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 849:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 850:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 851:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 852:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 853:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 854:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 855:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 856:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 857:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 858:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 859:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 860:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 861:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 862:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 863:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 864:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 865:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 866:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 867:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 868:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 869:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 870:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 871:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 872:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 873:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 874:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 875:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 876:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 877:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 878:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
 879:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 880:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 881:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 882:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 883:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 884:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 885:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 886:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 887:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 888:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 889:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 890:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 891:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 892:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 893:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 894:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 895:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 896:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 897:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 898:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 899:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 900:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 901:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 902:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 903:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 904:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 905:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 906:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 907:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 908:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 909:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 910:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 911:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 912:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** * 
 913:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @param  none
 914:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @return uint32_t Control value
 915:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 916:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 917:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 918:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 919:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 920:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 921:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 922:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 923:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 924:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 925:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 926:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 927:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 928:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 929:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 930:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 931:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
 932:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 933:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 934:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 935:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 936:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
 937:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 938:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
 939:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 940:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 941:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 942:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 943:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 944:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 945:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 946:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 947:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 948:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 949:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 950:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 951:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 952:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 953:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 954:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 955:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 956:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 957:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 958:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 959:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 960:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 961:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 962:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 963:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 964:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 965:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 966:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 967:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 968:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 969:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 970:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 971:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 972:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 973:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 974:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 975:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 976:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 977:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 978:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 979:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 980:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 981:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 982:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 983:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 984:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 985:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 986:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 987:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 988:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 989:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 990:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 991:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 992:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 993:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 994:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 995:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 996:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 997:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 998:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 999:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1000:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1001:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1002:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1003:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
1004:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
1005:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1006:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1007:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1008:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1009:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1010:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1011:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1012:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1013:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1014:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
1015:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
1016:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1017:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1018:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1019:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1020:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1021:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1022:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1023:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1024:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1025:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
1026:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
1027:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1028:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1029:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1030:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1031:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1032:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1033:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1034:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1035:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1036:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1037:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
1038:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1039:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1040:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1041:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1042:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1043:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
1044:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1045:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1046:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1047:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1048:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1049:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1050:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1051:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1052:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1053:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t priority_grouping is priority grouping field
1054:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1055:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1056:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1057:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1058:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1059:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1060:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1061:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1062:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1063:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1064:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1065:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1066:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   
1067:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = SCB->AIRCR;                                                    /* read old register 
1068:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value &= ~((0xFFFFU << 16) | (0x0F << 8));                              /* clear bits to chan
1069:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = ((reg_value | NVIC_AIRCR_VECTKEY | (PriorityGroupTmp << 8)));  /* Insert write key a
1070:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   SCB->AIRCR = reg_value;
1071:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1072:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1073:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1074:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1075:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1076:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
1077:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   priority grouping field 
1078:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1079:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1080:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1081:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1082:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1083:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1084:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR >> 8) & 0x07);                                          /* read priority grou
1085:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1086:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1087:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1088:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1089:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1090:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn specifies the interrupt number
1091:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1092:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1093:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1094:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1095:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1096:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1097:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  26              		.loc 1 1097 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 0346     		mov	r3, r0
  42 0008 FB71     		strb	r3, [r7, #7]
1098:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              		.loc 1 1098 65
  44 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  45 000c 03F01F03 		and	r3, r3, #31
  46              		.loc 1 1098 44
  47 0010 0122     		movs	r2, #1
  48 0012 02FA03F1 		lsl	r1, r2, r3
  49              		.loc 1 1098 7
  50 0016 054A     		ldr	r2, .L2
  51              		.loc 1 1098 15
  52 0018 97F90730 		ldrsb	r3, [r7, #7]
  53              		.loc 1 1098 32
  54 001c 5B09     		lsrs	r3, r3, #5
  55              		.loc 1 1098 39
  56 001e 42F82310 		str	r1, [r2, r3, lsl #2]
1099:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
  57              		.loc 1 1099 1
  58 0022 00BF     		nop
  59 0024 0C37     		adds	r7, r7, #12
  60              	.LCFI3:
  61              		.cfi_def_cfa_offset 4
  62 0026 BD46     		mov	sp, r7
  63              	.LCFI4:
  64              		.cfi_def_cfa_register 13
  65              		@ sp needed
  66 0028 80BC     		pop	{r7}
  67              	.LCFI5:
  68              		.cfi_restore 7
  69              		.cfi_def_cfa_offset 0
  70 002a 7047     		bx	lr
  71              	.L3:
  72              		.align	2
  73              	.L2:
  74 002c 00E100E0 		.word	-536813312
  75              		.cfi_endproc
  76              	.LFE14:
  78              		.section	.text.NVIC_SetPriority,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	NVIC_SetPriority:
  85              	.LFB20:
1100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the positive number of the external interrupt
1105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the number of the device specifc interrupt
1119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t 1 if pending interrupt else 0
1120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * otherwise it returns 0
1123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type  IRQn is the Number of the interrupt
1161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   1 if active else 0
1162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * otherwise it returns 0.
1165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the priority for an interrupt
1173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  priority is the priority for the interrupt
1176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt. \n
1181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  86              		.loc 1 1185 1
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              	.LCFI6:
  93              		.cfi_def_cfa_offset 4
  94              		.cfi_offset 7, -4
  95 0002 83B0     		sub	sp, sp, #12
  96              	.LCFI7:
  97              		.cfi_def_cfa_offset 16
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI8:
 100              		.cfi_def_cfa_register 7
 101 0006 0346     		mov	r3, r0
 102 0008 3960     		str	r1, [r7]
 103 000a FB71     		strb	r3, [r7, #7]
1186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   if(IRQn < 0) {
 104              		.loc 1 1186 5
 105 000c 97F90730 		ldrsb	r3, [r7, #7]
 106 0010 002B     		cmp	r3, #0
 107 0012 0BDA     		bge	.L5
1187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 108              		.loc 1 1187 55
 109 0014 3B68     		ldr	r3, [r7]
 110 0016 DAB2     		uxtb	r2, r3
 111              		.loc 1 1187 8
 112 0018 0C49     		ldr	r1, .L8
 113              		.loc 1 1187 32
 114 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 115 001c 03F00F03 		and	r3, r3, #15
 116              		.loc 1 1187 38
 117 0020 043B     		subs	r3, r3, #4
 118              		.loc 1 1187 55
 119 0022 1201     		lsls	r2, r2, #4
 120 0024 D2B2     		uxtb	r2, r2
 121              		.loc 1 1187 42
 122 0026 0B44     		add	r3, r3, r1
 123 0028 1A76     		strb	r2, [r3, #24]
1188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   else {
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 124              		.loc 1 1190 1
 125 002a 09E0     		b	.L7
 126              	.L5:
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 127              		.loc 1 1189 45
 128 002c 3B68     		ldr	r3, [r7]
 129 002e DAB2     		uxtb	r2, r3
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 130              		.loc 1 1189 9
 131 0030 0749     		ldr	r1, .L8+4
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 132              		.loc 1 1189 14
 133 0032 97F90730 		ldrsb	r3, [r7, #7]
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 134              		.loc 1 1189 45
 135 0036 1201     		lsls	r2, r2, #4
 136 0038 D2B2     		uxtb	r2, r2
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 137              		.loc 1 1189 32
 138 003a 0B44     		add	r3, r3, r1
 139 003c 83F80023 		strb	r2, [r3, #768]
 140              	.L7:
 141              		.loc 1 1190 1
 142 0040 00BF     		nop
 143 0042 0C37     		adds	r7, r7, #12
 144              	.LCFI9:
 145              		.cfi_def_cfa_offset 4
 146 0044 BD46     		mov	sp, r7
 147              	.LCFI10:
 148              		.cfi_def_cfa_register 13
 149              		@ sp needed
 150 0046 80BC     		pop	{r7}
 151              	.LCFI11:
 152              		.cfi_restore 7
 153              		.cfi_def_cfa_offset 0
 154 0048 7047     		bx	lr
 155              	.L9:
 156 004a 00BF     		.align	2
 157              	.L8:
 158 004c 00ED00E0 		.word	-536810240
 159 0050 00E100E0 		.word	-536813312
 160              		.cfi_endproc
 161              	.LFE20:
 163              		.global	u2Fifo
 164              		.section	.bss.u2Fifo,"aw",%nobits
 165              		.align	2
 168              	u2Fifo:
 169 0000 00000000 		.space	2124
 169      00000000 
 169      00000000 
 169      00000000 
 169      00000000 
 170              		.global	ReceivedMsg
 171              		.section	.bss.ReceivedMsg,"aw",%nobits
 172              		.align	2
 175              	ReceivedMsg:
 176 0000 00000000 		.space	516
 176      00000000 
 176      00000000 
 176      00000000 
 176      00000000 
 177              		.section	.text.USART2TIMConfigure,"ax",%progbits
 178              		.align	1
 179              		.global	USART2TIMConfigure
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	USART2TIMConfigure:
 185              	.LFB27:
 186              		.file 2 "src/usart2.c"
   1:src/usart2.c  **** /*
   2:src/usart2.c  ****  *  uart.c
   3:src/usart2.c  ****  *  Created on: Mar 24, 2011
   4:src/usart2.c  ****  *  Author: baron
   5:src/usart2.c  ****  */
   6:src/usart2.c  **** 
   7:src/usart2.c  **** 
   8:src/usart2.c  **** #include "usart2.h"
   9:src/usart2.c  **** 
  10:src/usart2.c  **** UART_FIFO_STR u2Fifo;
  11:src/usart2.c  **** struct ReceivedMsgStr ReceivedMsg;
  12:src/usart2.c  **** void USART2TIMConfigure(uint16_t aTIMtime)
  13:src/usart2.c  **** {
 187              		.loc 2 13 1
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 32
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              	.LCFI12:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 88B0     		sub	sp, sp, #32
 197              	.LCFI13:
 198              		.cfi_def_cfa_offset 40
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI14:
 201              		.cfi_def_cfa_register 7
 202 0006 0346     		mov	r3, r0
 203 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  14:src/usart2.c  **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 204              		.loc 2 14 2
 205 000a 0121     		movs	r1, #1
 206 000c 0820     		movs	r0, #8
 207 000e 184B     		ldr	r3, .L11
 208 0010 9847     		blx	r3
 209              	.LVL0:
  15:src/usart2.c  **** 
  16:src/usart2.c  **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  17:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_Period = 100000;
 210              		.loc 2 17 35
 211 0012 48F2A063 		movw	r3, #34464
 212 0016 3B83     		strh	r3, [r7, #24]	@ movhi
  18:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = 1000;
 213              		.loc 2 18 38
 214 0018 4FF47A73 		mov	r3, #1000
 215 001c BB82     		strh	r3, [r7, #20]	@ movhi
  19:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 216              		.loc 2 19 42
 217 001e 0023     		movs	r3, #0
 218 0020 7B83     		strh	r3, [r7, #26]	@ movhi
  20:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 219              		.loc 2 20 40
 220 0022 0023     		movs	r3, #0
 221 0024 FB82     		strh	r3, [r7, #22]	@ movhi
  21:src/usart2.c  **** 	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
 222              		.loc 2 21 2
 223 0026 07F11403 		add	r3, r7, #20
 224 002a 1946     		mov	r1, r3
 225 002c 1148     		ldr	r0, .L11+4
 226 002e 124B     		ldr	r3, .L11+8
 227 0030 9847     		blx	r3
 228              	.LVL1:
  22:src/usart2.c  **** 
  23:src/usart2.c  **** 	TIM_ARRPreloadConfig(TIM5, ENABLE);
 229              		.loc 2 23 2
 230 0032 0121     		movs	r1, #1
 231 0034 0F48     		ldr	r0, .L11+4
 232 0036 114B     		ldr	r3, .L11+12
 233 0038 9847     		blx	r3
 234              	.LVL2:
  24:src/usart2.c  **** 
  25:src/usart2.c  **** 	TIM_ICInitTypeDef TIM_ICInitStructure;
  26:src/usart2.c  **** 	TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
 235              		.loc 2 26 34
 236 003a 0423     		movs	r3, #4
 237 003c 3B81     		strh	r3, [r7, #8]	@ movhi
  27:src/usart2.c  **** 	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 238              		.loc 2 27 37
 239 003e 0023     		movs	r3, #0
 240 0040 7B81     		strh	r3, [r7, #10]	@ movhi
  28:src/usart2.c  **** 	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 241              		.loc 2 28 38
 242 0042 0123     		movs	r3, #1
 243 0044 BB81     		strh	r3, [r7, #12]	@ movhi
  29:src/usart2.c  **** 	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 244              		.loc 2 29 38
 245 0046 0023     		movs	r3, #0
 246 0048 FB81     		strh	r3, [r7, #14]	@ movhi
  30:src/usart2.c  **** 	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 247              		.loc 2 30 35
 248 004a 0023     		movs	r3, #0
 249 004c 3B82     		strh	r3, [r7, #16]	@ movhi
  31:src/usart2.c  **** 
  32:src/usart2.c  **** 	//TIM5->ARR = aTIMtime;
  33:src/usart2.c  **** 	//TIM_ARRPreloadConfig(TIM5,ENABLE);
  34:src/usart2.c  **** //	TIM_ICInit(TIM5, &TIM_ICInitStructure);
  35:src/usart2.c  **** 
  36:src/usart2.c  **** 	//TIM_SelectInputTrigger(TIM5, TIM_TS_TI2FP2);
  37:src/usart2.c  **** //	TIM_SelectSlaveMode(TIM5, TIM_SlaveMode_Reset);
  38:src/usart2.c  **** //	TIM_SelectMasterSlaveMode(TIM5, TIM_MasterSlaveMode_Enable);
  39:src/usart2.c  ****     TIM_ClearFlag(TIM5,TIM_FLAG_Update);//
 250              		.loc 2 39 5
 251 004e 0121     		movs	r1, #1
 252 0050 0848     		ldr	r0, .L11+4
 253 0052 0B4B     		ldr	r3, .L11+16
 254 0054 9847     		blx	r3
 255              	.LVL3:
  40:src/usart2.c  **** //	TIM_Cmd(TIM5, ENABLE);
  41:src/usart2.c  **** 
  42:src/usart2.c  **** 	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 256              		.loc 2 42 2
 257 0056 0122     		movs	r2, #1
 258 0058 0121     		movs	r1, #1
 259 005a 0648     		ldr	r0, .L11+4
 260 005c 094B     		ldr	r3, .L11+20
 261 005e 9847     		blx	r3
 262              	.LVL4:
  43:src/usart2.c  **** 
  44:src/usart2.c  **** //	TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
  45:src/usart2.c  ****     TIM_Cmd(TIM5, ENABLE);//
 263              		.loc 2 45 5
 264 0060 0121     		movs	r1, #1
 265 0062 0448     		ldr	r0, .L11+4
 266 0064 084B     		ldr	r3, .L11+24
 267 0066 9847     		blx	r3
 268              	.LVL5:
  46:src/usart2.c  **** 
  47:src/usart2.c  **** 
  48:src/usart2.c  **** /*
  49:src/usart2.c  **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
  50:src/usart2.c  **** 
  51:src/usart2.c  **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  52:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_Period = 10000;
  53:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = 1000;
  54:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  55:src/usart2.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  56:src/usart2.c  **** 	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
  57:src/usart2.c  **** 
  58:src/usart2.c  **** 	TIM_ARRPreloadConfig(TIM5, ENABLE);
  59:src/usart2.c  **** 
  60:src/usart2.c  **** 
  61:src/usart2.c  **** 	TIM_Cmd(TIM5, ENABLE);
  62:src/usart2.c  **** 	TIM_ITConfig(TIM5,TIM_IT_Update,ENABLE);
  63:src/usart2.c  **** 
  64:src/usart2.c  **** 	TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
  65:src/usart2.c  **** */
  66:src/usart2.c  **** }
 269              		.loc 2 66 1
 270 0068 00BF     		nop
 271 006a 2037     		adds	r7, r7, #32
 272              	.LCFI15:
 273              		.cfi_def_cfa_offset 8
 274 006c BD46     		mov	sp, r7
 275              	.LCFI16:
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 006e 80BD     		pop	{r7, pc}
 279              	.L12:
 280              		.align	2
 281              	.L11:
 282 0070 00000000 		.word	RCC_APB1PeriphClockCmd
 283 0074 000C0040 		.word	1073744896
 284 0078 00000000 		.word	TIM_TimeBaseInit
 285 007c 00000000 		.word	TIM_ARRPreloadConfig
 286 0080 00000000 		.word	TIM_ClearFlag
 287 0084 00000000 		.word	TIM_ITConfig
 288 0088 00000000 		.word	TIM_Cmd
 289              		.cfi_endproc
 290              	.LFE27:
 292              		.section	.text.TIM5_IRQHandler,"ax",%progbits
 293              		.align	1
 294              		.global	TIM5_IRQHandler
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 299              	TIM5_IRQHandler:
 300              	.LFB28:
  67:src/usart2.c  **** 
  68:src/usart2.c  **** void TIM5_IRQHandler(void)
  69:src/usart2.c  **** {
 301              		.loc 2 69 1
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 8
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305 0000 80B5     		push	{r7, lr}
 306              	.LCFI17:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 7, -8
 309              		.cfi_offset 14, -4
 310 0002 82B0     		sub	sp, sp, #8
 311              	.LCFI18:
 312              		.cfi_def_cfa_offset 16
 313 0004 00AF     		add	r7, sp, #0
 314              	.LCFI19:
 315              		.cfi_def_cfa_register 7
  70:src/usart2.c  **** 	//ReceivedMsgStr ReceivedMsg;
  71:src/usart2.c  **** 	TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 316              		.loc 2 71 2
 317 0006 0121     		movs	r1, #1
 318 0008 1048     		ldr	r0, .L16
 319 000a 114B     		ldr	r3, .L16+4
 320 000c 9847     		blx	r3
 321              	.LVL6:
  72:src/usart2.c  **** 
  73:src/usart2.c  ****     int asize = uart2Read(ReceivedMsg.buffer,260);
 322              		.loc 2 73 17
 323 000e 4FF48271 		mov	r1, #260
 324 0012 1048     		ldr	r0, .L16+8
 325 0014 104B     		ldr	r3, .L16+12
 326 0016 9847     		blx	r3
 327              	.LVL7:
 328 0018 0346     		mov	r3, r0
 329              		.loc 2 73 9
 330 001a 7B60     		str	r3, [r7, #4]
  74:src/usart2.c  **** 	if(asize>0)
 331              		.loc 2 74 4
 332 001c 7B68     		ldr	r3, [r7, #4]
 333 001e 002B     		cmp	r3, #0
 334 0020 0FDD     		ble	.L15
  75:src/usart2.c  ****     {
  76:src/usart2.c  **** 	if(ReceivedMsg.size == 0)
 335              		.loc 2 76 16
 336 0022 0E4B     		ldr	r3, .L16+16
 337 0024 B3F80232 		ldrh	r3, [r3, #514]
 338              		.loc 2 76 4
 339 0028 002B     		cmp	r3, #0
 340 002a 0AD1     		bne	.L15
  77:src/usart2.c  ****         {
  78:src/usart2.c  **** 		ReceivedMsg.flag = true;
 341              		.loc 2 78 20
 342 002c 0B4B     		ldr	r3, .L16+16
 343 002e 0122     		movs	r2, #1
 344 0030 1A70     		strb	r2, [r3]
  79:src/usart2.c  **** 		ReceivedMsg.Readflag = false;
 345              		.loc 2 79 24
 346 0032 0A4B     		ldr	r3, .L16+16
 347 0034 0022     		movs	r2, #0
 348 0036 5A70     		strb	r2, [r3, #1]
  80:src/usart2.c  **** 		ReceivedMsg.size = asize;
 349              		.loc 2 80 20
 350 0038 7B68     		ldr	r3, [r7, #4]
 351 003a 9AB2     		uxth	r2, r3
 352 003c 074B     		ldr	r3, .L16+16
 353 003e A3F80222 		strh	r2, [r3, #514]	@ movhi
 354              	.L15:
  81:src/usart2.c  **** 		}
  82:src/usart2.c  **** 		//TIM_Cmd(TIM5, DISABLE);//
  83:src/usart2.c  **** 	}
  84:src/usart2.c  **** }
 355              		.loc 2 84 1
 356 0042 00BF     		nop
 357 0044 0837     		adds	r7, r7, #8
 358              	.LCFI20:
 359              		.cfi_def_cfa_offset 8
 360 0046 BD46     		mov	sp, r7
 361              	.LCFI21:
 362              		.cfi_def_cfa_register 13
 363              		@ sp needed
 364 0048 80BD     		pop	{r7, pc}
 365              	.L17:
 366 004a 00BF     		.align	2
 367              	.L16:
 368 004c 000C0040 		.word	1073744896
 369 0050 00000000 		.word	TIM_ClearITPendingBit
 370 0054 02000000 		.word	ReceivedMsg+2
 371 0058 00000000 		.word	uart2Read
 372 005c 00000000 		.word	ReceivedMsg
 373              		.cfi_endproc
 374              	.LFE28:
 376              		.section	.text.uart2Init,"ax",%progbits
 377              		.align	1
 378              		.global	uart2Init
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 383              	uart2Init:
 384              	.LFB29:
  85:src/usart2.c  **** 
  86:src/usart2.c  **** 
  87:src/usart2.c  **** void uart2Init(uint32_t boudrate)
  88:src/usart2.c  **** {
 385              		.loc 2 88 1
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 32
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389 0000 90B5     		push	{r4, r7, lr}
 390              	.LCFI22:
 391              		.cfi_def_cfa_offset 12
 392              		.cfi_offset 4, -12
 393              		.cfi_offset 7, -8
 394              		.cfi_offset 14, -4
 395 0002 89B0     		sub	sp, sp, #36
 396              	.LCFI23:
 397              		.cfi_def_cfa_offset 48
 398 0004 00AF     		add	r7, sp, #0
 399              	.LCFI24:
 400              		.cfi_def_cfa_register 7
 401 0006 7860     		str	r0, [r7, #4]
  89:src/usart2.c  **** 	GPIOforUSART3cfg();
 402              		.loc 2 89 2
 403 0008 254B     		ldr	r3, .L19
 404 000a 9847     		blx	r3
 405              	.LVL8:
  90:src/usart2.c  **** 	GPIO_InitTypeDef GPIO_InitStructure;
  91:src/usart2.c  **** 
  92:src/usart2.c  **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 406              		.loc 2 92 2
 407 000c 0121     		movs	r1, #1
 408 000e 0120     		movs	r0, #1
 409 0010 244B     		ldr	r3, .L19+4
 410 0012 9847     		blx	r3
 411              	.LVL9:
  93:src/usart2.c  **** 	USART_DeInit(USART3);
 412              		.loc 2 93 2
 413 0014 2448     		ldr	r0, .L19+8
 414 0016 254B     		ldr	r3, .L19+12
 415 0018 9847     		blx	r3
 416              	.LVL10:
  94:src/usart2.c  **** 
  95:src/usart2.c  **** 	USART_InitTypeDef USART_InitStructure;
  96:src/usart2.c  **** 
  97:src/usart2.c  **** 	/* Enable AFIO,  clocks */
  98:src/usart2.c  **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 417              		.loc 2 98 2
 418 001a 0121     		movs	r1, #1
 419 001c 0120     		movs	r0, #1
 420 001e 244B     		ldr	r3, .L19+16
 421 0020 9847     		blx	r3
 422              	.LVL11:
  99:src/usart2.c  **** 	/* Enable GPIO clocks */
 100:src/usart2.c  **** 	RCC_APB2PeriphClockCmd(/*RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOA|*/RCC_APB2Periph_GPIOB, ENABLE)
 423              		.loc 2 100 2
 424 0022 0121     		movs	r1, #1
 425 0024 0820     		movs	r0, #8
 426 0026 224B     		ldr	r3, .L19+16
 427 0028 9847     		blx	r3
 428              	.LVL12:
 101:src/usart2.c  **** 
 102:src/usart2.c  **** 
 103:src/usart2.c  **** 	/* Enable USART3,  clocks */
 104:src/usart2.c  ****      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 429              		.loc 2 104 6
 430 002a 0121     		movs	r1, #1
 431 002c 4FF48020 		mov	r0, #262144
 432 0030 204B     		ldr	r3, .L19+20
 433 0032 9847     		blx	r3
 434              	.LVL13:
 105:src/usart2.c  **** 	//GPIO_PinRemapConfig(GPIO_PartialRemap_USART3,ENABLE);
 106:src/usart2.c  **** 
 107:src/usart2.c  **** 
 108:src/usart2.c  **** 
 109:src/usart2.c  **** 	USART_InitStructure.USART_BaudRate = boudrate;
 435              		.loc 2 109 37
 436 0034 7B68     		ldr	r3, [r7, #4]
 437 0036 FB60     		str	r3, [r7, #12]
 110:src/usart2.c  **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 438              		.loc 2 110 39
 439 0038 0023     		movs	r3, #0
 440 003a 3B82     		strh	r3, [r7, #16]	@ movhi
 111:src/usart2.c  **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 441              		.loc 2 111 37
 442 003c 0023     		movs	r3, #0
 443 003e 7B82     		strh	r3, [r7, #18]	@ movhi
 112:src/usart2.c  **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 444              		.loc 2 112 35
 445 0040 0023     		movs	r3, #0
 446 0042 BB82     		strh	r3, [r7, #20]	@ movhi
 113:src/usart2.c  **** 	USART_InitStructure.USART_HardwareFlowControl= USART_HardwareFlowControl_None;
 447              		.loc 2 113 47
 448 0044 0023     		movs	r3, #0
 449 0046 3B83     		strh	r3, [r7, #24]	@ movhi
 114:src/usart2.c  **** 	USART_InitStructure.USART_Mode =  USART_Mode_Tx | USART_Mode_Rx;
 450              		.loc 2 114 33
 451 0048 0C23     		movs	r3, #12
 452 004a FB82     		strh	r3, [r7, #22]	@ movhi
 115:src/usart2.c  **** 	/* Configure USART3 */
 116:src/usart2.c  **** 	USART_Init(USART3, &USART_InitStructure);
 453              		.loc 2 116 2
 454 004c 07F10C03 		add	r3, r7, #12
 455 0050 1946     		mov	r1, r3
 456 0052 1548     		ldr	r0, .L19+8
 457 0054 184B     		ldr	r3, .L19+24
 458 0056 9847     		blx	r3
 459              	.LVL14:
 117:src/usart2.c  **** 
 118:src/usart2.c  **** 	USART_ClearFlag(USART3, USART_FLAG_CTS | USART_FLAG_LBD  |
 460              		.loc 2 118 2
 461 0058 4FF45871 		mov	r1, #864
 462 005c 1248     		ldr	r0, .L19+8
 463 005e 174B     		ldr	r3, .L19+28
 464 0060 9847     		blx	r3
 465              	.LVL15:
 119:src/usart2.c  **** 						USART_FLAG_TC  | USART_FLAG_RXNE );
 120:src/usart2.c  **** 
 121:src/usart2.c  **** 	uartRxDMAConfiguration(USART3, DMA1_Channel3, u2Fifo.rxBuf,UARTRX_FIFO_SIZE);
 466              		.loc 2 121 2
 467 0062 4FF48063 		mov	r3, #1024
 468 0066 164A     		ldr	r2, .L19+32
 469 0068 1649     		ldr	r1, .L19+36
 470 006a 0F48     		ldr	r0, .L19+8
 471 006c 164C     		ldr	r4, .L19+40
 472 006e A047     		blx	r4
 473              	.LVL16:
 122:src/usart2.c  **** 	uartTxDMAConfiguration(USART3, DMA1_Channel2, u2Fifo.txBuf, UARTTX_FIFO_SIZE);
 474              		.loc 2 122 2
 475 0070 4023     		movs	r3, #64
 476 0072 164A     		ldr	r2, .L19+44
 477 0074 1649     		ldr	r1, .L19+48
 478 0076 0C48     		ldr	r0, .L19+8
 479 0078 164C     		ldr	r4, .L19+52
 480 007a A047     		blx	r4
 481              	.LVL17:
 123:src/usart2.c  **** 
 124:src/usart2.c  **** 		//USART3TIMConfigure(50);
 125:src/usart2.c  **** 
 126:src/usart2.c  **** 	USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
 482              		.loc 2 126 2
 483 007c 0122     		movs	r2, #1
 484 007e 8021     		movs	r1, #128
 485 0080 0948     		ldr	r0, .L19+8
 486 0082 154B     		ldr	r3, .L19+56
 487 0084 9847     		blx	r3
 488              	.LVL18:
 127:src/usart2.c  **** 	/* Enable USART_Rx DMA Receive request */
 128:src/usart2.c  ****     USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);
 489              		.loc 2 128 5
 490 0086 0122     		movs	r2, #1
 491 0088 4021     		movs	r1, #64
 492 008a 0748     		ldr	r0, .L19+8
 493 008c 124B     		ldr	r3, .L19+56
 494 008e 9847     		blx	r3
 495              	.LVL19:
 129:src/usart2.c  **** 	//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 130:src/usart2.c  **** 
 131:src/usart2.c  **** 	  /* Enable USART_Rx Receive interrupt */
 132:src/usart2.c  **** 	  //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 133:src/usart2.c  **** 	    /* Configure USART3 interrupt */
 134:src/usart2.c  ****    // NVIC_SetPriority(DMA1_Channel3_IRQn, 0x0);
 135:src/usart2.c  ****   //	NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 136:src/usart2.c  **** 
 137:src/usart2.c  **** 	USART_Cmd(USART3, ENABLE);
 496              		.loc 2 137 2
 497 0090 0121     		movs	r1, #1
 498 0092 0548     		ldr	r0, .L19+8
 499 0094 114B     		ldr	r3, .L19+60
 500 0096 9847     		blx	r3
 501              	.LVL20:
 138:src/usart2.c  **** 
 139:src/usart2.c  **** }
 502              		.loc 2 139 1
 503 0098 00BF     		nop
 504 009a 2437     		adds	r7, r7, #36
 505              	.LCFI25:
 506              		.cfi_def_cfa_offset 12
 507 009c BD46     		mov	sp, r7
 508              	.LCFI26:
 509              		.cfi_def_cfa_register 13
 510              		@ sp needed
 511 009e 90BD     		pop	{r4, r7, pc}
 512              	.L20:
 513              		.align	2
 514              	.L19:
 515 00a0 00000000 		.word	GPIOforUSART3cfg
 516 00a4 00000000 		.word	RCC_AHBPeriphClockCmd
 517 00a8 00480040 		.word	1073760256
 518 00ac 00000000 		.word	USART_DeInit
 519 00b0 00000000 		.word	RCC_APB2PeriphClockCmd
 520 00b4 00000000 		.word	RCC_APB1PeriphClockCmd
 521 00b8 00000000 		.word	USART_Init
 522 00bc 00000000 		.word	USART_ClearFlag
 523 00c0 0C000000 		.word	u2Fifo+12
 524 00c4 30000240 		.word	1073872944
 525 00c8 00000000 		.word	uartRxDMAConfiguration
 526 00cc 0C040000 		.word	u2Fifo+1036
 527 00d0 1C000240 		.word	1073872924
 528 00d4 00000000 		.word	uartTxDMAConfiguration
 529 00d8 00000000 		.word	USART_DMACmd
 530 00dc 00000000 		.word	USART_Cmd
 531              		.cfi_endproc
 532              	.LFE29:
 534              		.section	.text.uart2FindEscapedPack,"ax",%progbits
 535              		.align	1
 536              		.global	uart2FindEscapedPack
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 541              	uart2FindEscapedPack:
 542              	.LFB30:
 140:src/usart2.c  **** //-----------------------------------------------------------------------------------
 141:src/usart2.c  **** unsigned int uart2FindEscapedPack()
 142:src/usart2.c  **** {
 543              		.loc 2 142 1
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 8
 546              		@ frame_needed = 1, uses_anonymous_args = 0
 547 0000 80B5     		push	{r7, lr}
 548              	.LCFI27:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 7, -8
 551              		.cfi_offset 14, -4
 552 0002 82B0     		sub	sp, sp, #8
 553              	.LCFI28:
 554              		.cfi_def_cfa_offset 16
 555 0004 00AF     		add	r7, sp, #0
 556              	.LCFI29:
 557              		.cfi_def_cfa_register 7
 143:src/usart2.c  **** 	unsigned int i = u2Fifo.rxCurrent;
 558              		.loc 2 143 15
 559 0006 1D4B     		ldr	r3, .L27
 560 0008 1B68     		ldr	r3, [r3]
 561 000a 7B60     		str	r3, [r7, #4]
 144:src/usart2.c  **** 
 145:src/usart2.c  **** 	while (i != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(DMA1_Channel3)))
 562              		.loc 2 145 8
 563 000c 26E0     		b	.L22
 564              	.L26:
 146:src/usart2.c  **** 	{
 147:src/usart2.c  **** 		if (u2Fifo.rxBuf[i] == 0x55)
 565              		.loc 2 147 19
 566 000e 1B4A     		ldr	r2, .L27
 567 0010 7B68     		ldr	r3, [r7, #4]
 568 0012 1344     		add	r3, r3, r2
 569 0014 0C33     		adds	r3, r3, #12
 570 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 571              		.loc 2 147 6
 572 0018 552B     		cmp	r3, #85
 573 001a 18D1     		bne	.L23
 148:src/usart2.c  **** 		{
 149:src/usart2.c  **** 			i++;
 574              		.loc 2 149 5
 575 001c 7B68     		ldr	r3, [r7, #4]
 576 001e 0133     		adds	r3, r3, #1
 577 0020 7B60     		str	r3, [r7, #4]
 150:src/usart2.c  **** 			i &= UARTRX_FIFO_SIZE_MASK;
 578              		.loc 2 150 6
 579 0022 7B68     		ldr	r3, [r7, #4]
 580 0024 C3F30903 		ubfx	r3, r3, #0, #10
 581 0028 7B60     		str	r3, [r7, #4]
 151:src/usart2.c  **** 			if (i == (DMA1_Channel3->CMAR - (uint32_t) &u2Fifo.rxBuf[0]))
 582              		.loc 2 151 27
 583 002a 154B     		ldr	r3, .L27+4
 584 002c DB68     		ldr	r3, [r3, #12]
 585              		.loc 2 151 36
 586 002e 154A     		ldr	r2, .L27+8
 587              		.loc 2 151 34
 588 0030 9B1A     		subs	r3, r3, r2
 589              		.loc 2 151 7
 590 0032 7A68     		ldr	r2, [r7, #4]
 591 0034 9A42     		cmp	r2, r3
 592 0036 01D1     		bne	.L24
 152:src/usart2.c  **** 				return 0;//return (isStart & isEnd);
 593              		.loc 2 152 12
 594 0038 0023     		movs	r3, #0
 595 003a 1AE0     		b	.L25
 596              	.L24:
 153:src/usart2.c  **** 
 154:src/usart2.c  **** 			if (u2Fifo.rxBuf[i] == 0x03)
 597              		.loc 2 154 20
 598 003c 0F4A     		ldr	r2, .L27
 599 003e 7B68     		ldr	r3, [r7, #4]
 600 0040 1344     		add	r3, r3, r2
 601 0042 0C33     		adds	r3, r3, #12
 602 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 603              		.loc 2 154 7
 604 0046 032B     		cmp	r3, #3
 605 0048 01D1     		bne	.L23
 155:src/usart2.c  **** 			{
 156:src/usart2.c  **** 				return 1;
 606              		.loc 2 156 12
 607 004a 0123     		movs	r3, #1
 608 004c 11E0     		b	.L25
 609              	.L23:
 157:src/usart2.c  **** 			}
 158:src/usart2.c  **** 		}
 159:src/usart2.c  **** 		i++;
 610              		.loc 2 159 4
 611 004e 7B68     		ldr	r3, [r7, #4]
 612 0050 0133     		adds	r3, r3, #1
 613 0052 7B60     		str	r3, [r7, #4]
 160:src/usart2.c  **** 		i &= UARTRX_FIFO_SIZE_MASK;
 614              		.loc 2 160 5
 615 0054 7B68     		ldr	r3, [r7, #4]
 616 0056 C3F30903 		ubfx	r3, r3, #0, #10
 617 005a 7B60     		str	r3, [r7, #4]
 618              	.L22:
 145:src/usart2.c  **** 	{
 619              		.loc 2 145 34
 620 005c 0848     		ldr	r0, .L27+4
 621 005e 0A4B     		ldr	r3, .L27+12
 622 0060 9847     		blx	r3
 623              	.LVL21:
 624 0062 0346     		mov	r3, r0
 145:src/usart2.c  **** 	{
 625              		.loc 2 145 32
 626 0064 C3F58063 		rsb	r3, r3, #1024
 627 0068 1A46     		mov	r2, r3
 145:src/usart2.c  **** 	{
 628              		.loc 2 145 8
 629 006a 7B68     		ldr	r3, [r7, #4]
 630 006c 9342     		cmp	r3, r2
 631 006e CED1     		bne	.L26
 161:src/usart2.c  **** 	}
 162:src/usart2.c  **** 	return 0;
 632              		.loc 2 162 9
 633 0070 0023     		movs	r3, #0
 634              	.L25:
 163:src/usart2.c  **** 
 164:src/usart2.c  **** }
 635              		.loc 2 164 1
 636 0072 1846     		mov	r0, r3
 637 0074 0837     		adds	r7, r7, #8
 638              	.LCFI30:
 639              		.cfi_def_cfa_offset 8
 640 0076 BD46     		mov	sp, r7
 641              	.LCFI31:
 642              		.cfi_def_cfa_register 13
 643              		@ sp needed
 644 0078 80BD     		pop	{r7, pc}
 645              	.L28:
 646 007a 00BF     		.align	2
 647              	.L27:
 648 007c 00000000 		.word	u2Fifo
 649 0080 30000240 		.word	1073872944
 650 0084 0C000000 		.word	u2Fifo+12
 651 0088 00000000 		.word	DMA_GetCurrDataCounter
 652              		.cfi_endproc
 653              	.LFE30:
 655              		.section	.text.uart2GetChar,"ax",%progbits
 656              		.align	1
 657              		.global	uart2GetChar
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 662              	uart2GetChar:
 663              	.LFB31:
 165:src/usart2.c  **** //-----------------------------------------------------------------------------------
 166:src/usart2.c  **** 
 167:src/usart2.c  **** int uart2GetChar(unsigned char *ch)
 168:src/usart2.c  **** {
 664              		.loc 2 168 1
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 8
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 0000 90B5     		push	{r4, r7, lr}
 669              	.LCFI32:
 670              		.cfi_def_cfa_offset 12
 671              		.cfi_offset 4, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              	.LCFI33:
 676              		.cfi_def_cfa_offset 24
 677 0004 00AF     		add	r7, sp, #0
 678              	.LCFI34:
 679              		.cfi_def_cfa_register 7
 680 0006 7860     		str	r0, [r7, #4]
 169:src/usart2.c  **** 	if (u2Fifo.rxCurrent != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(DMA1_Channel3)))
 681              		.loc 2 169 12
 682 0008 114B     		ldr	r3, .L32
 683 000a 1C68     		ldr	r4, [r3]
 684              		.loc 2 169 46
 685 000c 1148     		ldr	r0, .L32+4
 686 000e 124B     		ldr	r3, .L32+8
 687 0010 9847     		blx	r3
 688              	.LVL22:
 689 0012 0346     		mov	r3, r0
 690              		.loc 2 169 44
 691 0014 C3F58063 		rsb	r3, r3, #1024
 692              		.loc 2 169 5
 693 0018 9C42     		cmp	r4, r3
 694 001a 13D0     		beq	.L30
 170:src/usart2.c  **** 	{
 171:src/usart2.c  **** 		*ch = u2Fifo.rxBuf[u2Fifo.rxCurrent];
 695              		.loc 2 171 28
 696 001c 0C4B     		ldr	r3, .L32
 697 001e 1B68     		ldr	r3, [r3]
 698              		.loc 2 171 21
 699 0020 0B4A     		ldr	r2, .L32
 700 0022 1344     		add	r3, r3, r2
 701 0024 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 702              		.loc 2 171 7
 703 0026 7B68     		ldr	r3, [r7, #4]
 704 0028 1A70     		strb	r2, [r3]
 172:src/usart2.c  **** 		u2Fifo.rxCurrent++;
 705              		.loc 2 172 9
 706 002a 094B     		ldr	r3, .L32
 707 002c 1B68     		ldr	r3, [r3]
 708              		.loc 2 172 19
 709 002e 0133     		adds	r3, r3, #1
 710 0030 074A     		ldr	r2, .L32
 711 0032 1360     		str	r3, [r2]
 173:src/usart2.c  **** 		u2Fifo.rxCurrent &= UARTRX_FIFO_SIZE_MASK;
 712              		.loc 2 173 20
 713 0034 064B     		ldr	r3, .L32
 714 0036 1B68     		ldr	r3, [r3]
 715 0038 C3F30903 		ubfx	r3, r3, #0, #10
 716 003c 044A     		ldr	r2, .L32
 717 003e 1360     		str	r3, [r2]
 174:src/usart2.c  **** 		return 1;
 718              		.loc 2 174 10
 719 0040 0123     		movs	r3, #1
 720 0042 00E0     		b	.L31
 721              	.L30:
 175:src/usart2.c  **** 	}
 176:src/usart2.c  **** 	return 0;
 722              		.loc 2 176 9
 723 0044 0023     		movs	r3, #0
 724              	.L31:
 177:src/usart2.c  **** }
 725              		.loc 2 177 1
 726 0046 1846     		mov	r0, r3
 727 0048 0C37     		adds	r7, r7, #12
 728              	.LCFI35:
 729              		.cfi_def_cfa_offset 12
 730 004a BD46     		mov	sp, r7
 731              	.LCFI36:
 732              		.cfi_def_cfa_register 13
 733              		@ sp needed
 734 004c 90BD     		pop	{r4, r7, pc}
 735              	.L33:
 736 004e 00BF     		.align	2
 737              	.L32:
 738 0050 00000000 		.word	u2Fifo
 739 0054 30000240 		.word	1073872944
 740 0058 00000000 		.word	DMA_GetCurrDataCounter
 741              		.cfi_endproc
 742              	.LFE31:
 744              		.section	.text.uart2PutChar,"ax",%progbits
 745              		.align	1
 746              		.global	uart2PutChar
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 751              	uart2PutChar:
 752              	.LFB32:
 178:src/usart2.c  **** //-----------------------------------------------------------------------------------
 179:src/usart2.c  **** int uart2PutChar(unsigned char ch)
 180:src/usart2.c  **** {
 753              		.loc 2 180 1
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 8
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758 0000 80B4     		push	{r7}
 759              	.LCFI37:
 760              		.cfi_def_cfa_offset 4
 761              		.cfi_offset 7, -4
 762 0002 83B0     		sub	sp, sp, #12
 763              	.LCFI38:
 764              		.cfi_def_cfa_offset 16
 765 0004 00AF     		add	r7, sp, #0
 766              	.LCFI39:
 767              		.cfi_def_cfa_register 7
 768 0006 0346     		mov	r3, r0
 769 0008 FB71     		strb	r3, [r7, #7]
 181:src/usart2.c  **** 
 182:src/usart2.c  **** 	//	IEC2bits.DMA4IE = 0;
 183:src/usart2.c  **** 	u2Fifo.txBufB[u2Fifo.txCurrentEnd] = ch;
 770              		.loc 2 183 22
 771 000a 154B     		ldr	r3, .L37
 772 000c 9B68     		ldr	r3, [r3, #8]
 773              		.loc 2 183 37
 774 000e 144A     		ldr	r2, .L37
 775 0010 1344     		add	r3, r3, r2
 776 0012 FA79     		ldrb	r2, [r7, #7]
 777 0014 83F84C24 		strb	r2, [r3, #1100]
 184:src/usart2.c  **** 	u2Fifo.txCurrentEnd++;
 778              		.loc 2 184 8
 779 0018 114B     		ldr	r3, .L37
 780 001a 9B68     		ldr	r3, [r3, #8]
 781              		.loc 2 184 21
 782 001c 0133     		adds	r3, r3, #1
 783 001e 104A     		ldr	r2, .L37
 784 0020 9360     		str	r3, [r2, #8]
 185:src/usart2.c  **** 	u2Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 785              		.loc 2 185 22
 786 0022 0F4B     		ldr	r3, .L37
 787 0024 9B68     		ldr	r3, [r3, #8]
 788 0026 C3F30903 		ubfx	r3, r3, #0, #10
 789 002a 0D4A     		ldr	r2, .L37
 790 002c 9360     		str	r3, [r2, #8]
 186:src/usart2.c  **** 
 187:src/usart2.c  **** 	if (u2Fifo.txCurrentEnd == u2Fifo.txCurrentStart)
 791              		.loc 2 187 12
 792 002e 0C4B     		ldr	r3, .L37
 793 0030 9A68     		ldr	r2, [r3, #8]
 794              		.loc 2 187 35
 795 0032 0B4B     		ldr	r3, .L37
 796 0034 5B68     		ldr	r3, [r3, #4]
 797              		.loc 2 187 5
 798 0036 9A42     		cmp	r2, r3
 799 0038 0CD1     		bne	.L35
 188:src/usart2.c  **** 	{
 189:src/usart2.c  **** 		u2Fifo.txCurrentEnd--;
 800              		.loc 2 189 9
 801 003a 094B     		ldr	r3, .L37
 802 003c 9B68     		ldr	r3, [r3, #8]
 803              		.loc 2 189 22
 804 003e 013B     		subs	r3, r3, #1
 805 0040 074A     		ldr	r2, .L37
 806 0042 9360     		str	r3, [r2, #8]
 190:src/usart2.c  **** 		u2Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 807              		.loc 2 190 23
 808 0044 064B     		ldr	r3, .L37
 809 0046 9B68     		ldr	r3, [r3, #8]
 810 0048 C3F30903 		ubfx	r3, r3, #0, #10
 811 004c 044A     		ldr	r2, .L37
 812 004e 9360     		str	r3, [r2, #8]
 191:src/usart2.c  **** 		//		IEC2bits.DMA4IE = 1;
 192:src/usart2.c  **** 		return 0;
 813              		.loc 2 192 10
 814 0050 0023     		movs	r3, #0
 815 0052 00E0     		b	.L36
 816              	.L35:
 193:src/usart2.c  **** 	}
 194:src/usart2.c  **** 	//	IEC2bits.DMA4IE = 1;
 195:src/usart2.c  **** 	return 1;
 817              		.loc 2 195 9
 818 0054 0123     		movs	r3, #1
 819              	.L36:
 196:src/usart2.c  **** }
 820              		.loc 2 196 1
 821 0056 1846     		mov	r0, r3
 822 0058 0C37     		adds	r7, r7, #12
 823              	.LCFI40:
 824              		.cfi_def_cfa_offset 4
 825 005a BD46     		mov	sp, r7
 826              	.LCFI41:
 827              		.cfi_def_cfa_register 13
 828              		@ sp needed
 829 005c 80BC     		pop	{r7}
 830              	.LCFI42:
 831              		.cfi_restore 7
 832              		.cfi_def_cfa_offset 0
 833 005e 7047     		bx	lr
 834              	.L38:
 835              		.align	2
 836              	.L37:
 837 0060 00000000 		.word	u2Fifo
 838              		.cfi_endproc
 839              	.LFE32:
 841              		.section	.text.GPIOforUSART3cfg,"ax",%progbits
 842              		.align	1
 843              		.global	GPIOforUSART3cfg
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 848              	GPIOforUSART3cfg:
 849              	.LFB33:
 197:src/usart2.c  **** //-----------------------------------------------------------------------------------
 198:src/usart2.c  **** void GPIOforUSART3cfg(void)
 199:src/usart2.c  **** {
 850              		.loc 2 199 1
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 8
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854 0000 80B5     		push	{r7, lr}
 855              	.LCFI43:
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 82B0     		sub	sp, sp, #8
 860              	.LCFI44:
 861              		.cfi_def_cfa_offset 16
 862 0004 00AF     		add	r7, sp, #0
 863              	.LCFI45:
 864              		.cfi_def_cfa_register 7
 200:src/usart2.c  ****     GPIO_InitTypeDef GPIO_InitStructure;
 201:src/usart2.c  **** 
 202:src/usart2.c  **** //    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
 203:src/usart2.c  **** //                           RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 204:src/usart2.c  **** 
 205:src/usart2.c  ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 865              		.loc 2 205 5
 866 0006 0121     		movs	r1, #1
 867 0008 0120     		movs	r0, #1
 868 000a 1B4B     		ldr	r3, .L40
 869 000c 9847     		blx	r3
 870              	.LVL23:
 206:src/usart2.c  **** 
 207:src/usart2.c  ****     // Tx on PC10 as alternate function push-pull
 208:src/usart2.c  ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 871              		.loc 2 208 33
 872 000e 4FF48063 		mov	r3, #1024
 873 0012 BB80     		strh	r3, [r7, #4]	@ movhi
 209:src/usart2.c  ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 874              		.loc 2 209 35
 875 0014 0223     		movs	r3, #2
 876 0016 BB71     		strb	r3, [r7, #6]
 210:src/usart2.c  ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//GPIO_Mode_AF_PP;
 877              		.loc 2 210 34
 878 0018 1823     		movs	r3, #24
 879 001a FB71     		strb	r3, [r7, #7]
 211:src/usart2.c  ****     GPIO_Init(GPIOB, &GPIO_InitStructure);
 880              		.loc 2 211 5
 881 001c 3B1D     		adds	r3, r7, #4
 882 001e 1946     		mov	r1, r3
 883 0020 1648     		ldr	r0, .L40+4
 884 0022 174B     		ldr	r3, .L40+8
 885 0024 9847     		blx	r3
 886              	.LVL24:
 212:src/usart2.c  **** 
 213:src/usart2.c  ****   /* Rx on PC11 as input floating */
 214:src/usart2.c  ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 887              		.loc 2 214 33
 888 0026 4FF40063 		mov	r3, #2048
 889 002a BB80     		strh	r3, [r7, #4]	@ movhi
 215:src/usart2.c  ****     GPIO_InitStructure.GPIO_Speed =GPIO_Speed_2MHz;
 890              		.loc 2 215 35
 891 002c 0223     		movs	r3, #2
 892 002e BB71     		strb	r3, [r7, #6]
 216:src/usart2.c  ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 893              		.loc 2 216 34
 894 0030 0423     		movs	r3, #4
 895 0032 FB71     		strb	r3, [r7, #7]
 217:src/usart2.c  ****     GPIO_Init(GPIOB, &GPIO_InitStructure);
 896              		.loc 2 217 5
 897 0034 3B1D     		adds	r3, r7, #4
 898 0036 1946     		mov	r1, r3
 899 0038 1048     		ldr	r0, .L40+4
 900 003a 114B     		ldr	r3, .L40+8
 901 003c 9847     		blx	r3
 902              	.LVL25:
 218:src/usart2.c  **** 
 219:src/usart2.c  **** 
 220:src/usart2.c  ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 903              		.loc 2 220 33
 904 003e 4FF40053 		mov	r3, #8192
 905 0042 BB80     		strh	r3, [r7, #4]	@ movhi
 221:src/usart2.c  ****         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 906              		.loc 2 221 39
 907 0044 0323     		movs	r3, #3
 908 0046 BB71     		strb	r3, [r7, #6]
 222:src/usart2.c  ****         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 909              		.loc 2 222 38
 910 0048 1423     		movs	r3, #20
 911 004a FB71     		strb	r3, [r7, #7]
 223:src/usart2.c  ****         GPIO_Init(GPIOB, &GPIO_InitStructure);
 912              		.loc 2 223 9
 913 004c 3B1D     		adds	r3, r7, #4
 914 004e 1946     		mov	r1, r3
 915 0050 0A48     		ldr	r0, .L40+4
 916 0052 0B4B     		ldr	r3, .L40+8
 917 0054 9847     		blx	r3
 918              	.LVL26:
 224:src/usart2.c  **** 
 225:src/usart2.c  ****         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 919              		.loc 2 225 37
 920 0056 4FF48043 		mov	r3, #16384
 921 005a BB80     		strh	r3, [r7, #4]	@ movhi
 226:src/usart2.c  ****         GPIO_InitStructure.GPIO_Speed = 0;
 922              		.loc 2 226 39
 923 005c 0023     		movs	r3, #0
 924 005e BB71     		strb	r3, [r7, #6]
 227:src/usart2.c  ****            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 925              		.loc 2 227 41
 926 0060 4823     		movs	r3, #72
 927 0062 FB71     		strb	r3, [r7, #7]
 228:src/usart2.c  ****            GPIO_Init(GPIOB, &GPIO_InitStructure);
 928              		.loc 2 228 12
 929 0064 3B1D     		adds	r3, r7, #4
 930 0066 1946     		mov	r1, r3
 931 0068 0448     		ldr	r0, .L40+4
 932 006a 054B     		ldr	r3, .L40+8
 933 006c 9847     		blx	r3
 934              	.LVL27:
 229:src/usart2.c  **** 
 230:src/usart2.c  **** }
 935              		.loc 2 230 1
 936 006e 00BF     		nop
 937 0070 0837     		adds	r7, r7, #8
 938              	.LCFI46:
 939              		.cfi_def_cfa_offset 8
 940 0072 BD46     		mov	sp, r7
 941              	.LCFI47:
 942              		.cfi_def_cfa_register 13
 943              		@ sp needed
 944 0074 80BD     		pop	{r7, pc}
 945              	.L41:
 946 0076 00BF     		.align	2
 947              	.L40:
 948 0078 00000000 		.word	RCC_APB2PeriphClockCmd
 949 007c 000C0140 		.word	1073810432
 950 0080 00000000 		.word	GPIO_Init
 951              		.cfi_endproc
 952              	.LFE33:
 954              		.section	.text.uart2TxTask,"ax",%progbits
 955              		.align	1
 956              		.global	uart2TxTask
 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 961              	uart2TxTask:
 962              	.LFB34:
 231:src/usart2.c  **** 
 232:src/usart2.c  **** //-----------------------------------------------------------------------------------
 233:src/usart2.c  **** void uart2TxTask()
 234:src/usart2.c  **** {
 963              		.loc 2 234 1
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 8
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 90B5     		push	{r4, r7, lr}
 968              	.LCFI48:
 969              		.cfi_def_cfa_offset 12
 970              		.cfi_offset 4, -12
 971              		.cfi_offset 7, -8
 972              		.cfi_offset 14, -4
 973 0002 85B0     		sub	sp, sp, #20
 974              	.LCFI49:
 975              		.cfi_def_cfa_offset 32
 976 0004 02AF     		add	r7, sp, #8
 977              	.LCFI50:
 978              		.cfi_def_cfa 7, 24
 235:src/usart2.c  **** 	unsigned int cnt = 0;
 979              		.loc 2 235 15
 980 0006 0023     		movs	r3, #0
 981 0008 7B60     		str	r3, [r7, #4]
 236:src/usart2.c  **** 	// If DMA COMPLITE
 237:src/usart2.c  **** 	if ((DMA1_Channel2->CCR & ((uint32_t) 0x00000001)) == 1)
 982              		.loc 2 237 20
 983 000a 234B     		ldr	r3, .L48
 984 000c 1B68     		ldr	r3, [r3]
 985              		.loc 2 237 26
 986 000e 03F00103 		and	r3, r3, #1
 987              		.loc 2 237 5
 988 0012 012B     		cmp	r3, #1
 989 0014 3BD1     		bne	.L47
 238:src/usart2.c  **** 	{
 239:src/usart2.c  **** 		while ((u2Fifo.txCurrentStart != u2Fifo.txCurrentEnd) && (cnt< UARTTX_FIFO_SIZE))
 990              		.loc 2 239 9
 991 0016 1AE0     		b	.L44
 992              	.L46:
 240:src/usart2.c  **** 		{
 241:src/usart2.c  **** 			u2Fifo.txBuf[cnt] = u2Fifo.txBufB[u2Fifo.txCurrentStart];
 993              		.loc 2 241 44
 994 0018 204B     		ldr	r3, .L48+4
 995 001a 5B68     		ldr	r3, [r3, #4]
 996              		.loc 2 241 37
 997 001c 1F4A     		ldr	r2, .L48+4
 998 001e 1344     		add	r3, r3, r2
 999 0020 93F84C14 		ldrb	r1, [r3, #1100]	@ zero_extendqisi2
 1000              		.loc 2 241 22
 1001 0024 1D4A     		ldr	r2, .L48+4
 1002 0026 7B68     		ldr	r3, [r7, #4]
 1003 0028 1344     		add	r3, r3, r2
 1004 002a 03F20C43 		addw	r3, r3, #1036
 1005 002e 0A46     		mov	r2, r1
 1006 0030 1A70     		strb	r2, [r3]
 242:src/usart2.c  **** 			u2Fifo.txCurrentStart++;
 1007              		.loc 2 242 10
 1008 0032 1A4B     		ldr	r3, .L48+4
 1009 0034 5B68     		ldr	r3, [r3, #4]
 1010              		.loc 2 242 25
 1011 0036 0133     		adds	r3, r3, #1
 1012 0038 184A     		ldr	r2, .L48+4
 1013 003a 5360     		str	r3, [r2, #4]
 243:src/usart2.c  **** 			u2Fifo.txCurrentStart &= UARTTX_FIFOB_SIZE_MASK;
 1014              		.loc 2 243 26
 1015 003c 174B     		ldr	r3, .L48+4
 1016 003e 5B68     		ldr	r3, [r3, #4]
 1017 0040 C3F30903 		ubfx	r3, r3, #0, #10
 1018 0044 154A     		ldr	r2, .L48+4
 1019 0046 5360     		str	r3, [r2, #4]
 244:src/usart2.c  **** 			cnt++;
 1020              		.loc 2 244 7
 1021 0048 7B68     		ldr	r3, [r7, #4]
 1022 004a 0133     		adds	r3, r3, #1
 1023 004c 7B60     		str	r3, [r7, #4]
 1024              	.L44:
 239:src/usart2.c  **** 		{
 1025              		.loc 2 239 17
 1026 004e 134B     		ldr	r3, .L48+4
 1027 0050 5A68     		ldr	r2, [r3, #4]
 239:src/usart2.c  **** 		{
 1028              		.loc 2 239 42
 1029 0052 124B     		ldr	r3, .L48+4
 1030 0054 9B68     		ldr	r3, [r3, #8]
 239:src/usart2.c  **** 		{
 1031              		.loc 2 239 9
 1032 0056 9A42     		cmp	r2, r3
 1033 0058 02D0     		beq	.L45
 239:src/usart2.c  **** 		{
 1034              		.loc 2 239 57 discriminator 1
 1035 005a 7B68     		ldr	r3, [r7, #4]
 1036 005c 3F2B     		cmp	r3, #63
 1037 005e DBD9     		bls	.L46
 1038              	.L45:
 245:src/usart2.c  **** 		}
 246:src/usart2.c  **** 		if (cnt > 0)
 1039              		.loc 2 246 6
 1040 0060 7B68     		ldr	r3, [r7, #4]
 1041 0062 002B     		cmp	r3, #0
 1042 0064 13D0     		beq	.L47
 1043              	.LBB2:
 247:src/usart2.c  **** 		{
 248:src/usart2.c  **** 			uartTxDMAConfiguration(USART3, DMA1_Channel2, u2Fifo.txBuf, cnt,1);
 1044              		.loc 2 248 4
 1045 0066 0123     		movs	r3, #1
 1046 0068 0093     		str	r3, [sp]
 1047 006a 7B68     		ldr	r3, [r7, #4]
 1048 006c 0C4A     		ldr	r2, .L48+8
 1049 006e 0A49     		ldr	r1, .L48
 1050 0070 0C48     		ldr	r0, .L48+12
 1051 0072 0D4C     		ldr	r4, .L48+16
 1052 0074 A047     		blx	r4
 1053              	.LVL28:
 249:src/usart2.c  **** 			DMA_ITConfig(DMA1_Channel2, DMA_IT_TC, ENABLE);
 1054              		.loc 2 249 4
 1055 0076 0122     		movs	r2, #1
 1056 0078 0221     		movs	r1, #2
 1057 007a 0748     		ldr	r0, .L48
 1058 007c 0B4B     		ldr	r3, .L48+20
 1059 007e 9847     		blx	r3
 1060              	.LVL29:
 250:src/usart2.c  **** 				//}
 251:src/usart2.c  **** 				/* Enable USART_Tx DMA Tansmit request */
 252:src/usart2.c  **** 				/* Configure DMA1_Channel_Tx interrupt */
 253:src/usart2.c  **** 				NVIC_SetPriority(DMA1_Channel2_IRQn, 0x02);
 1061              		.loc 2 253 5
 1062 0080 0221     		movs	r1, #2
 1063 0082 0C20     		movs	r0, #12
 1064 0084 0A4B     		ldr	r3, .L48+24
 1065 0086 9847     		blx	r3
 1066              	.LVL30:
 254:src/usart2.c  **** 				NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 1067              		.loc 2 254 5
 1068 0088 0C20     		movs	r0, #12
 1069 008a 0A4B     		ldr	r3, .L48+28
 1070 008c 9847     		blx	r3
 1071              	.LVL31:
 1072              	.L47:
 1073              	.LBE2:
 255:src/usart2.c  **** 		}
 256:src/usart2.c  **** 	}
 257:src/usart2.c  **** }
 1074              		.loc 2 257 1
 1075 008e 00BF     		nop
 1076 0090 0C37     		adds	r7, r7, #12
 1077              	.LCFI51:
 1078              		.cfi_def_cfa_offset 12
 1079 0092 BD46     		mov	sp, r7
 1080              	.LCFI52:
 1081              		.cfi_def_cfa_register 13
 1082              		@ sp needed
 1083 0094 90BD     		pop	{r4, r7, pc}
 1084              	.L49:
 1085 0096 00BF     		.align	2
 1086              	.L48:
 1087 0098 1C000240 		.word	1073872924
 1088 009c 00000000 		.word	u2Fifo
 1089 00a0 0C040000 		.word	u2Fifo+1036
 1090 00a4 00480040 		.word	1073760256
 1091 00a8 00000000 		.word	uartTxDMAConfiguration
 1092 00ac 00000000 		.word	DMA_ITConfig
 1093 00b0 00000000 		.word	NVIC_SetPriority
 1094 00b4 00000000 		.word	NVIC_EnableIRQ
 1095              		.cfi_endproc
 1096              	.LFE34:
 1098              		.section	.text.uart2ReadEscaped,"ax",%progbits
 1099              		.align	1
 1100              		.global	uart2ReadEscaped
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1105              	uart2ReadEscaped:
 1106              	.LFB35:
 258:src/usart2.c  **** //-----------------------------------------------------------------------------------
 259:src/usart2.c  **** unsigned int uart2ReadEscaped(unsigned char *dsn, unsigned int max_len)
 260:src/usart2.c  **** {
 1107              		.loc 2 260 1
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 24
 1110              		@ frame_needed = 1, uses_anonymous_args = 0
 1111 0000 80B5     		push	{r7, lr}
 1112              	.LCFI53:
 1113              		.cfi_def_cfa_offset 8
 1114              		.cfi_offset 7, -8
 1115              		.cfi_offset 14, -4
 1116 0002 86B0     		sub	sp, sp, #24
 1117              	.LCFI54:
 1118              		.cfi_def_cfa_offset 32
 1119 0004 00AF     		add	r7, sp, #0
 1120              	.LCFI55:
 1121              		.cfi_def_cfa_register 7
 1122 0006 7860     		str	r0, [r7, #4]
 1123 0008 3960     		str	r1, [r7]
 261:src/usart2.c  **** 
 262:src/usart2.c  **** 	unsigned short cnt = 0, crc = 0;
 1124              		.loc 2 262 17
 1125 000a 0023     		movs	r3, #0
 1126 000c FB82     		strh	r3, [r7, #22]	@ movhi
 1127              		.loc 2 262 26
 1128 000e 0023     		movs	r3, #0
 1129 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 263:src/usart2.c  **** 	unsigned char v, *ptr = dsn;
 1130              		.loc 2 263 20
 1131 0012 7B68     		ldr	r3, [r7, #4]
 1132 0014 3B61     		str	r3, [r7, #16]
 264:src/usart2.c  **** 	if (uart2FindEscapedPack() == 0)
 1133              		.loc 2 264 6
 1134 0016 2B4B     		ldr	r3, .L62
 1135 0018 9847     		blx	r3
 1136              	.LVL32:
 1137 001a 0346     		mov	r3, r0
 1138              		.loc 2 264 5
 1139 001c 002B     		cmp	r3, #0
 1140 001e 3FD1     		bne	.L53
 265:src/usart2.c  **** 	{
 266:src/usart2.c  **** 		return 0;
 1141              		.loc 2 266 10
 1142 0020 0023     		movs	r3, #0
 1143 0022 4AE0     		b	.L61
 1144              	.L60:
 267:src/usart2.c  **** 	}
 268:src/usart2.c  **** 	while (uart2GetChar(&v) && (max_len > cnt))
 269:src/usart2.c  **** 	{
 270:src/usart2.c  **** 		if (v == 0x55)
 1145              		.loc 2 270 9
 1146 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1147              		.loc 2 270 6
 1148 0026 552B     		cmp	r3, #85
 1149 0028 2CD1     		bne	.L54
 271:src/usart2.c  **** 		{
 272:src/usart2.c  **** 			if (!uart2GetChar(&v))
 1150              		.loc 2 272 9
 1151 002a 07F10F03 		add	r3, r7, #15
 1152 002e 1846     		mov	r0, r3
 1153 0030 254B     		ldr	r3, .L62+4
 1154 0032 9847     		blx	r3
 1155              	.LVL33:
 1156 0034 0346     		mov	r3, r0
 1157              		.loc 2 272 7
 1158 0036 002B     		cmp	r3, #0
 1159 0038 01D1     		bne	.L55
 273:src/usart2.c  **** 				return 0;
 1160              		.loc 2 273 12
 1161 003a 0023     		movs	r3, #0
 1162 003c 3DE0     		b	.L61
 1163              	.L55:
 274:src/usart2.c  **** 			if (v == 0x1) // start pack here;
 1164              		.loc 2 274 10
 1165 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1166              		.loc 2 274 7
 1167 0040 012B     		cmp	r3, #1
 1168 0042 06D1     		bne	.L56
 275:src/usart2.c  **** 			{
 276:src/usart2.c  **** 				ptr = dsn;
 1169              		.loc 2 276 9
 1170 0044 7B68     		ldr	r3, [r7, #4]
 1171 0046 3B61     		str	r3, [r7, #16]
 277:src/usart2.c  **** 				cnt = 0;
 1172              		.loc 2 277 9
 1173 0048 0023     		movs	r3, #0
 1174 004a FB82     		strh	r3, [r7, #22]	@ movhi
 278:src/usart2.c  **** 				crc = 0;
 1175              		.loc 2 278 9
 1176 004c 0023     		movs	r3, #0
 1177 004e BB82     		strh	r3, [r7, #20]	@ movhi
 279:src/usart2.c  **** 				continue;
 1178              		.loc 2 279 5
 1179 0050 26E0     		b	.L53
 1180              	.L56:
 280:src/usart2.c  **** 			}
 281:src/usart2.c  **** 			else if (v == 0x2)
 1181              		.loc 2 281 15
 1182 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1183              		.loc 2 281 12
 1184 0054 022B     		cmp	r3, #2
 1185 0056 02D1     		bne	.L57
 282:src/usart2.c  **** 			{
 283:src/usart2.c  **** 				v = 0x55;
 1186              		.loc 2 283 7
 1187 0058 5523     		movs	r3, #85
 1188 005a FB73     		strb	r3, [r7, #15]
 1189 005c 12E0     		b	.L54
 1190              	.L57:
 284:src/usart2.c  **** 			}
 285:src/usart2.c  **** 			else if (v == 0x3)
 1191              		.loc 2 285 15
 1192 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1193              		.loc 2 285 12
 1194 0060 032B     		cmp	r3, #3
 1195 0062 0FD1     		bne	.L54
 286:src/usart2.c  **** 			{
 287:src/usart2.c  **** 				ptr--;
 1196              		.loc 2 287 8
 1197 0064 3B69     		ldr	r3, [r7, #16]
 1198 0066 013B     		subs	r3, r3, #1
 1199 0068 3B61     		str	r3, [r7, #16]
 288:src/usart2.c  **** 				if (((crc - *ptr) & 0x00FF) != *ptr)
 1200              		.loc 2 288 15
 1201 006a BB8A     		ldrh	r3, [r7, #20]
 1202              		.loc 2 288 17
 1203 006c 3A69     		ldr	r2, [r7, #16]
 1204 006e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1205              		.loc 2 288 15
 1206 0070 9B1A     		subs	r3, r3, r2
 1207              		.loc 2 288 23
 1208 0072 DBB2     		uxtb	r3, r3
 1209              		.loc 2 288 36
 1210 0074 3A69     		ldr	r2, [r7, #16]
 1211 0076 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1212              		.loc 2 288 8
 1213 0078 9342     		cmp	r3, r2
 1214 007a 01D0     		beq	.L58
 289:src/usart2.c  **** 					return 0; // crc fail
 1215              		.loc 2 289 13
 1216 007c 0023     		movs	r3, #0
 1217 007e 1CE0     		b	.L61
 1218              	.L58:
 290:src/usart2.c  **** 				return cnt;
 1219              		.loc 2 290 12
 1220 0080 FB8A     		ldrh	r3, [r7, #22]
 1221 0082 1AE0     		b	.L61
 1222              	.L54:
 291:src/usart2.c  **** 			}
 292:src/usart2.c  **** 		}
 293:src/usart2.c  **** 		*ptr = v;
 1223              		.loc 2 293 8
 1224 0084 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1225 0086 3B69     		ldr	r3, [r7, #16]
 1226 0088 1A70     		strb	r2, [r3]
 294:src/usart2.c  **** 		ptr++;
 1227              		.loc 2 294 6
 1228 008a 3B69     		ldr	r3, [r7, #16]
 1229 008c 0133     		adds	r3, r3, #1
 1230 008e 3B61     		str	r3, [r7, #16]
 295:src/usart2.c  **** 		crc += v;
 1231              		.loc 2 295 7
 1232 0090 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1233 0092 9AB2     		uxth	r2, r3
 1234 0094 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1235 0096 1344     		add	r3, r3, r2
 1236 0098 BB82     		strh	r3, [r7, #20]	@ movhi
 296:src/usart2.c  **** 		cnt++;
 1237              		.loc 2 296 6
 1238 009a FB8A     		ldrh	r3, [r7, #22]
 1239 009c 0133     		adds	r3, r3, #1
 1240 009e FB82     		strh	r3, [r7, #22]	@ movhi
 1241              	.L53:
 268:src/usart2.c  **** 	{
 1242              		.loc 2 268 9
 1243 00a0 07F10F03 		add	r3, r7, #15
 1244 00a4 1846     		mov	r0, r3
 1245 00a6 084B     		ldr	r3, .L62+4
 1246 00a8 9847     		blx	r3
 1247              	.LVL34:
 1248 00aa 0346     		mov	r3, r0
 268:src/usart2.c  **** 	{
 1249              		.loc 2 268 8
 1250 00ac 002B     		cmp	r3, #0
 1251 00ae 03D0     		beq	.L59
 268:src/usart2.c  **** 	{
 1252              		.loc 2 268 38 discriminator 1
 1253 00b0 FB8A     		ldrh	r3, [r7, #22]
 268:src/usart2.c  **** 	{
 1254              		.loc 2 268 26 discriminator 1
 1255 00b2 3A68     		ldr	r2, [r7]
 1256 00b4 9A42     		cmp	r2, r3
 1257 00b6 B5D8     		bhi	.L60
 1258              	.L59:
 297:src/usart2.c  **** 	}
 298:src/usart2.c  **** 	return 0; //  error here
 1259              		.loc 2 298 9
 1260 00b8 0023     		movs	r3, #0
 1261              	.L61:
 299:src/usart2.c  **** }
 1262              		.loc 2 299 1 discriminator 1
 1263 00ba 1846     		mov	r0, r3
 1264 00bc 1837     		adds	r7, r7, #24
 1265              	.LCFI56:
 1266              		.cfi_def_cfa_offset 8
 1267 00be BD46     		mov	sp, r7
 1268              	.LCFI57:
 1269              		.cfi_def_cfa_register 13
 1270              		@ sp needed
 1271 00c0 80BD     		pop	{r7, pc}
 1272              	.L63:
 1273 00c2 00BF     		.align	2
 1274              	.L62:
 1275 00c4 00000000 		.word	uart2FindEscapedPack
 1276 00c8 00000000 		.word	uart2GetChar
 1277              		.cfi_endproc
 1278              	.LFE35:
 1280              		.section	.text.uart2Read,"ax",%progbits
 1281              		.align	1
 1282              		.global	uart2Read
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1287              	uart2Read:
 1288              	.LFB36:
 300:src/usart2.c  **** //-----------------------------------------------------------------------------------
 301:src/usart2.c  **** unsigned int uart2Read(unsigned char *dsn, unsigned int max_len)
 302:src/usart2.c  **** {
 1289              		.loc 2 302 1
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 24
 1292              		@ frame_needed = 1, uses_anonymous_args = 0
 1293 0000 80B5     		push	{r7, lr}
 1294              	.LCFI58:
 1295              		.cfi_def_cfa_offset 8
 1296              		.cfi_offset 7, -8
 1297              		.cfi_offset 14, -4
 1298 0002 86B0     		sub	sp, sp, #24
 1299              	.LCFI59:
 1300              		.cfi_def_cfa_offset 32
 1301 0004 00AF     		add	r7, sp, #0
 1302              	.LCFI60:
 1303              		.cfi_def_cfa_register 7
 1304 0006 7860     		str	r0, [r7, #4]
 1305 0008 3960     		str	r1, [r7]
 303:src/usart2.c  **** 	unsigned short cnt = 0, crc = 0;
 1306              		.loc 2 303 17
 1307 000a 0023     		movs	r3, #0
 1308 000c FB82     		strh	r3, [r7, #22]	@ movhi
 1309              		.loc 2 303 26
 1310 000e 0023     		movs	r3, #0
 1311 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 304:src/usart2.c  **** 	unsigned char v, *ptr = dsn;
 1312              		.loc 2 304 20
 1313 0012 7B68     		ldr	r3, [r7, #4]
 1314 0014 3B61     		str	r3, [r7, #16]
 305:src/usart2.c  **** 	/*
 306:src/usart2.c  **** 	u2Fifo.rxBuf[0] = '$';
 307:src/usart2.c  **** 	for (int i = 0; i < 32; i++)
 308:src/usart2.c  **** 	{
 309:src/usart2.c  **** 		v = u2Fifo.rxBuf[i];
 310:src/usart2.c  **** 		*ptr = v;
 311:src/usart2.c  **** 		ptr++;
 312:src/usart2.c  **** 	}
 313:src/usart2.c  **** return 32;
 314:src/usart2.c  **** */
 315:src/usart2.c  **** 	while (uart2GetChar(&v) && (max_len > cnt))
 1315              		.loc 2 315 8
 1316 0016 0DE0     		b	.L65
 1317              	.L67:
 316:src/usart2.c  **** 	{
 317:src/usart2.c  **** 		*ptr = v;
 1318              		.loc 2 317 8
 1319 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1320 001a 3B69     		ldr	r3, [r7, #16]
 1321 001c 1A70     		strb	r2, [r3]
 318:src/usart2.c  **** 		ptr++;
 1322              		.loc 2 318 6
 1323 001e 3B69     		ldr	r3, [r7, #16]
 1324 0020 0133     		adds	r3, r3, #1
 1325 0022 3B61     		str	r3, [r7, #16]
 319:src/usart2.c  **** 		crc += v;
 1326              		.loc 2 319 7
 1327 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1328 0026 9AB2     		uxth	r2, r3
 1329 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1330 002a 1344     		add	r3, r3, r2
 1331 002c BB82     		strh	r3, [r7, #20]	@ movhi
 320:src/usart2.c  **** 		cnt++;
 1332              		.loc 2 320 6
 1333 002e FB8A     		ldrh	r3, [r7, #22]
 1334 0030 0133     		adds	r3, r3, #1
 1335 0032 FB82     		strh	r3, [r7, #22]	@ movhi
 1336              	.L65:
 315:src/usart2.c  **** 	{
 1337              		.loc 2 315 9
 1338 0034 07F10F03 		add	r3, r7, #15
 1339 0038 1846     		mov	r0, r3
 1340 003a 074B     		ldr	r3, .L69
 1341 003c 9847     		blx	r3
 1342              	.LVL35:
 1343 003e 0346     		mov	r3, r0
 315:src/usart2.c  **** 	{
 1344              		.loc 2 315 8
 1345 0040 002B     		cmp	r3, #0
 1346 0042 03D0     		beq	.L66
 315:src/usart2.c  **** 	{
 1347              		.loc 2 315 38 discriminator 1
 1348 0044 FB8A     		ldrh	r3, [r7, #22]
 315:src/usart2.c  **** 	{
 1349              		.loc 2 315 26 discriminator 1
 1350 0046 3A68     		ldr	r2, [r7]
 1351 0048 9A42     		cmp	r2, r3
 1352 004a E5D8     		bhi	.L67
 1353              	.L66:
 321:src/usart2.c  **** 	}
 322:src/usart2.c  **** 	return cnt; //  error here
 1354              		.loc 2 322 9
 1355 004c FB8A     		ldrh	r3, [r7, #22]
 323:src/usart2.c  **** }
 1356              		.loc 2 323 1
 1357 004e 1846     		mov	r0, r3
 1358 0050 1837     		adds	r7, r7, #24
 1359              	.LCFI61:
 1360              		.cfi_def_cfa_offset 8
 1361 0052 BD46     		mov	sp, r7
 1362              	.LCFI62:
 1363              		.cfi_def_cfa_register 13
 1364              		@ sp needed
 1365 0054 80BD     		pop	{r7, pc}
 1366              	.L70:
 1367 0056 00BF     		.align	2
 1368              	.L69:
 1369 0058 00000000 		.word	uart2GetChar
 1370              		.cfi_endproc
 1371              	.LFE36:
 1373              		.section	.text.uart2WriteEscaped,"ax",%progbits
 1374              		.align	1
 1375              		.global	uart2WriteEscaped
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1380              	uart2WriteEscaped:
 1381              	.LFB37:
 324:src/usart2.c  **** 
 325:src/usart2.c  **** //-----------------------------------------------------------------------------------
 326:src/usart2.c  **** void uart2WriteEscaped(unsigned char *src, unsigned int len)
 327:src/usart2.c  **** {
 1382              		.loc 2 327 1
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 16
 1385              		@ frame_needed = 1, uses_anonymous_args = 0
 1386 0000 80B5     		push	{r7, lr}
 1387              	.LCFI63:
 1388              		.cfi_def_cfa_offset 8
 1389              		.cfi_offset 7, -8
 1390              		.cfi_offset 14, -4
 1391 0002 84B0     		sub	sp, sp, #16
 1392              	.LCFI64:
 1393              		.cfi_def_cfa_offset 24
 1394 0004 00AF     		add	r7, sp, #0
 1395              	.LCFI65:
 1396              		.cfi_def_cfa_register 7
 1397 0006 7860     		str	r0, [r7, #4]
 1398 0008 3960     		str	r1, [r7]
 328:src/usart2.c  **** 	unsigned char ch;
 329:src/usart2.c  **** 	unsigned char crc = 0;//getCRC(src, len);
 1399              		.loc 2 329 16
 1400 000a 0023     		movs	r3, #0
 1401 000c FB73     		strb	r3, [r7, #15]
 330:src/usart2.c  **** 	unsigned int rezult;
 331:src/usart2.c  **** 	if (len == 0)
 1402              		.loc 2 331 5
 1403 000e 3B68     		ldr	r3, [r7]
 1404 0010 002B     		cmp	r3, #0
 1405 0012 3CD0     		beq	.L78
 332:src/usart2.c  **** 		return;
 333:src/usart2.c  **** 	uart2PutChar(0x55);
 1406              		.loc 2 333 2
 1407 0014 5520     		movs	r0, #85
 1408 0016 204B     		ldr	r3, .L79
 1409 0018 9847     		blx	r3
 1410              	.LVL36:
 334:src/usart2.c  **** 	uart2PutChar(0x01);
 1411              		.loc 2 334 2
 1412 001a 0120     		movs	r0, #1
 1413 001c 1E4B     		ldr	r3, .L79
 1414 001e 9847     		blx	r3
 1415              	.LVL37:
 335:src/usart2.c  **** 	while (len--)
 1416              		.loc 2 335 8
 1417 0020 13E0     		b	.L74
 1418              	.L76:
 336:src/usart2.c  **** 	{
 337:src/usart2.c  **** 		ch = *src;
 1419              		.loc 2 337 6
 1420 0022 7B68     		ldr	r3, [r7, #4]
 1421 0024 1B78     		ldrb	r3, [r3]
 1422 0026 BB73     		strb	r3, [r7, #14]
 338:src/usart2.c  **** 		rezult = uart2PutChar(ch);
 1423              		.loc 2 338 12
 1424 0028 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1425 002a 1846     		mov	r0, r3
 1426 002c 1A4B     		ldr	r3, .L79
 1427 002e 9847     		blx	r3
 1428              	.LVL38:
 1429 0030 0346     		mov	r3, r0
 1430              		.loc 2 338 10
 1431 0032 BB60     		str	r3, [r7, #8]
 339:src/usart2.c  **** 		if (ch == 0x55)
 1432              		.loc 2 339 6
 1433 0034 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1434 0036 552B     		cmp	r3, #85
 1435 0038 04D1     		bne	.L75
 340:src/usart2.c  **** 		{
 341:src/usart2.c  **** 			rezult = uart2PutChar(0x02);
 1436              		.loc 2 341 13
 1437 003a 0220     		movs	r0, #2
 1438 003c 164B     		ldr	r3, .L79
 1439 003e 9847     		blx	r3
 1440              	.LVL39:
 1441 0040 0346     		mov	r3, r0
 1442              		.loc 2 341 11
 1443 0042 BB60     		str	r3, [r7, #8]
 1444              	.L75:
 342:src/usart2.c  **** 		}
 343:src/usart2.c  **** 		src++;
 1445              		.loc 2 343 6
 1446 0044 7B68     		ldr	r3, [r7, #4]
 1447 0046 0133     		adds	r3, r3, #1
 1448 0048 7B60     		str	r3, [r7, #4]
 1449              	.L74:
 335:src/usart2.c  **** 	{
 1450              		.loc 2 335 12
 1451 004a 3B68     		ldr	r3, [r7]
 1452 004c 5A1E     		subs	r2, r3, #1
 1453 004e 3A60     		str	r2, [r7]
 335:src/usart2.c  **** 	{
 1454              		.loc 2 335 8
 1455 0050 002B     		cmp	r3, #0
 1456 0052 E6D1     		bne	.L76
 344:src/usart2.c  **** 	}
 345:src/usart2.c  **** 	ch = crc;
 1457              		.loc 2 345 5
 1458 0054 FB7B     		ldrb	r3, [r7, #15]
 1459 0056 BB73     		strb	r3, [r7, #14]
 346:src/usart2.c  **** 	rezult = uart2PutChar(ch);
 1460              		.loc 2 346 11
 1461 0058 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1462 005a 1846     		mov	r0, r3
 1463 005c 0E4B     		ldr	r3, .L79
 1464 005e 9847     		blx	r3
 1465              	.LVL40:
 1466 0060 0346     		mov	r3, r0
 1467              		.loc 2 346 9
 1468 0062 BB60     		str	r3, [r7, #8]
 347:src/usart2.c  **** 	if (ch == 0x55)
 1469              		.loc 2 347 5
 1470 0064 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1471 0066 552B     		cmp	r3, #85
 1472 0068 04D1     		bne	.L77
 348:src/usart2.c  **** 	{
 349:src/usart2.c  **** 		rezult = uart2PutChar(0x02);
 1473              		.loc 2 349 12
 1474 006a 0220     		movs	r0, #2
 1475 006c 0A4B     		ldr	r3, .L79
 1476 006e 9847     		blx	r3
 1477              	.LVL41:
 1478 0070 0346     		mov	r3, r0
 1479              		.loc 2 349 10
 1480 0072 BB60     		str	r3, [r7, #8]
 1481              	.L77:
 350:src/usart2.c  **** 	}
 351:src/usart2.c  **** 
 352:src/usart2.c  **** 	rezult = uart2PutChar(0x55);
 1482              		.loc 2 352 11
 1483 0074 5520     		movs	r0, #85
 1484 0076 084B     		ldr	r3, .L79
 1485 0078 9847     		blx	r3
 1486              	.LVL42:
 1487 007a 0346     		mov	r3, r0
 1488              		.loc 2 352 9
 1489 007c BB60     		str	r3, [r7, #8]
 353:src/usart2.c  **** 	rezult = uart2PutChar(0x03);
 1490              		.loc 2 353 11
 1491 007e 0320     		movs	r0, #3
 1492 0080 054B     		ldr	r3, .L79
 1493 0082 9847     		blx	r3
 1494              	.LVL43:
 1495 0084 0346     		mov	r3, r0
 1496              		.loc 2 353 9
 1497 0086 BB60     		str	r3, [r7, #8]
 354:src/usart2.c  **** 	uart2TxTask();
 1498              		.loc 2 354 2
 1499 0088 044B     		ldr	r3, .L79+4
 1500 008a 9847     		blx	r3
 1501              	.LVL44:
 1502 008c 00E0     		b	.L71
 1503              	.L78:
 332:src/usart2.c  **** 	uart2PutChar(0x55);
 1504              		.loc 2 332 3
 1505 008e 00BF     		nop
 1506              	.L71:
 355:src/usart2.c  **** }
 1507              		.loc 2 355 1
 1508 0090 1037     		adds	r7, r7, #16
 1509              	.LCFI66:
 1510              		.cfi_def_cfa_offset 8
 1511 0092 BD46     		mov	sp, r7
 1512              	.LCFI67:
 1513              		.cfi_def_cfa_register 13
 1514              		@ sp needed
 1515 0094 80BD     		pop	{r7, pc}
 1516              	.L80:
 1517 0096 00BF     		.align	2
 1518              	.L79:
 1519 0098 00000000 		.word	uart2PutChar
 1520 009c 00000000 		.word	uart2TxTask
 1521              		.cfi_endproc
 1522              	.LFE37:
 1524              		.section	.text.uart2Write,"ax",%progbits
 1525              		.align	1
 1526              		.global	uart2Write
 1527              		.syntax unified
 1528              		.thumb
 1529              		.thumb_func
 1531              	uart2Write:
 1532              	.LFB38:
 356:src/usart2.c  **** void uart2Write(unsigned char *src, unsigned int len)
 357:src/usart2.c  **** {
 1533              		.loc 2 357 1
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 16
 1536              		@ frame_needed = 1, uses_anonymous_args = 0
 1537 0000 80B5     		push	{r7, lr}
 1538              	.LCFI68:
 1539              		.cfi_def_cfa_offset 8
 1540              		.cfi_offset 7, -8
 1541              		.cfi_offset 14, -4
 1542 0002 84B0     		sub	sp, sp, #16
 1543              	.LCFI69:
 1544              		.cfi_def_cfa_offset 24
 1545 0004 00AF     		add	r7, sp, #0
 1546              	.LCFI70:
 1547              		.cfi_def_cfa_register 7
 1548 0006 7860     		str	r0, [r7, #4]
 1549 0008 3960     		str	r1, [r7]
 358:src/usart2.c  **** 	unsigned char ch;
 359:src/usart2.c  **** 	unsigned int rezult;
 360:src/usart2.c  **** 	if (len == 0)
 1550              		.loc 2 360 5
 1551 000a 3B68     		ldr	r3, [r7]
 1552 000c 002B     		cmp	r3, #0
 1553 000e 14D0     		beq	.L86
 361:src/usart2.c  **** 	return;
 362:src/usart2.c  **** 	while (len--)
 1554              		.loc 2 362 8
 1555 0010 0BE0     		b	.L84
 1556              	.L85:
 363:src/usart2.c  **** 	{
 364:src/usart2.c  **** 		ch = *src;
 1557              		.loc 2 364 6
 1558 0012 7B68     		ldr	r3, [r7, #4]
 1559 0014 1B78     		ldrb	r3, [r3]
 1560 0016 FB73     		strb	r3, [r7, #15]
 365:src/usart2.c  **** 		rezult = uart2PutChar(ch);
 1561              		.loc 2 365 12
 1562 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1563 001a 1846     		mov	r0, r3
 1564 001c 094B     		ldr	r3, .L87
 1565 001e 9847     		blx	r3
 1566              	.LVL45:
 1567 0020 0346     		mov	r3, r0
 1568              		.loc 2 365 10
 1569 0022 BB60     		str	r3, [r7, #8]
 366:src/usart2.c  **** 		src++;
 1570              		.loc 2 366 6
 1571 0024 7B68     		ldr	r3, [r7, #4]
 1572 0026 0133     		adds	r3, r3, #1
 1573 0028 7B60     		str	r3, [r7, #4]
 1574              	.L84:
 362:src/usart2.c  **** 	{
 1575              		.loc 2 362 12
 1576 002a 3B68     		ldr	r3, [r7]
 1577 002c 5A1E     		subs	r2, r3, #1
 1578 002e 3A60     		str	r2, [r7]
 362:src/usart2.c  **** 	{
 1579              		.loc 2 362 8
 1580 0030 002B     		cmp	r3, #0
 1581 0032 EED1     		bne	.L85
 367:src/usart2.c  **** 	}
 368:src/usart2.c  **** 	uart2TxTask();
 1582              		.loc 2 368 2
 1583 0034 044B     		ldr	r3, .L87+4
 1584 0036 9847     		blx	r3
 1585              	.LVL46:
 1586 0038 00E0     		b	.L81
 1587              	.L86:
 361:src/usart2.c  **** 	while (len--)
 1588              		.loc 2 361 2
 1589 003a 00BF     		nop
 1590              	.L81:
 369:src/usart2.c  **** }
 1591              		.loc 2 369 1
 1592 003c 1037     		adds	r7, r7, #16
 1593              	.LCFI71:
 1594              		.cfi_def_cfa_offset 8
 1595 003e BD46     		mov	sp, r7
 1596              	.LCFI72:
 1597              		.cfi_def_cfa_register 13
 1598              		@ sp needed
 1599 0040 80BD     		pop	{r7, pc}
 1600              	.L88:
 1601 0042 00BF     		.align	2
 1602              	.L87:
 1603 0044 00000000 		.word	uart2PutChar
 1604 0048 00000000 		.word	uart2TxTask
 1605              		.cfi_endproc
 1606              	.LFE38:
 1608              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 1609              		.align	1
 1610              		.global	DMA1_Channel2_IRQHandler
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1615              	DMA1_Channel2_IRQHandler:
 1616              	.LFB39:
 370:src/usart2.c  **** 
 371:src/usart2.c  **** 
 372:src/usart2.c  **** // UART 1 DMA INTERRUPT
 373:src/usart2.c  **** void DMA1_Channel2_IRQHandler(void)
 374:src/usart2.c  **** {
 1617              		.loc 2 374 1
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 0
 1620              		@ frame_needed = 1, uses_anonymous_args = 0
 1621 0000 80B5     		push	{r7, lr}
 1622              	.LCFI73:
 1623              		.cfi_def_cfa_offset 8
 1624              		.cfi_offset 7, -8
 1625              		.cfi_offset 14, -4
 1626 0002 00AF     		add	r7, sp, #0
 1627              	.LCFI74:
 1628              		.cfi_def_cfa_register 7
 375:src/usart2.c  ****     /* Disable DMA1_Channel2 transfer*/
 376:src/usart2.c  **** 	DMA_Cmd(DMA1_Channel2, ENABLE);
 1629              		.loc 2 376 2
 1630 0004 0121     		movs	r1, #1
 1631 0006 0548     		ldr	r0, .L90
 1632 0008 054B     		ldr	r3, .L90+4
 1633 000a 9847     		blx	r3
 1634              	.LVL47:
 377:src/usart2.c  **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 378:src/usart2.c  **** 	DMA_ClearFlag(DMA1_FLAG_TC2);
 1635              		.loc 2 378 2
 1636 000c 2020     		movs	r0, #32
 1637 000e 054B     		ldr	r3, .L90+8
 1638 0010 9847     		blx	r3
 1639              	.LVL48:
 379:src/usart2.c  **** 	uart2TxTask();
 1640              		.loc 2 379 2
 1641 0012 054B     		ldr	r3, .L90+12
 1642 0014 9847     		blx	r3
 1643              	.LVL49:
 380:src/usart2.c  **** }
 1644              		.loc 2 380 1
 1645 0016 00BF     		nop
 1646 0018 80BD     		pop	{r7, pc}
 1647              	.L91:
 1648 001a 00BF     		.align	2
 1649              	.L90:
 1650 001c 1C000240 		.word	1073872924
 1651 0020 00000000 		.word	DMA_Cmd
 1652 0024 00000000 		.word	DMA_ClearFlag
 1653 0028 00000000 		.word	uart2TxTask
 1654              		.cfi_endproc
 1655              	.LFE39:
 1657              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 1658              		.align	1
 1659              		.global	DMA1_Channel3_IRQHandler
 1660              		.syntax unified
 1661              		.thumb
 1662              		.thumb_func
 1664              	DMA1_Channel3_IRQHandler:
 1665              	.LFB40:
 381:src/usart2.c  **** 
 382:src/usart2.c  **** void DMA1_Channel3_IRQHandler(void)
 383:src/usart2.c  **** {
 1666              		.loc 2 383 1
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 8
 1669              		@ frame_needed = 1, uses_anonymous_args = 0
 1670 0000 80B5     		push	{r7, lr}
 1671              	.LCFI75:
 1672              		.cfi_def_cfa_offset 8
 1673              		.cfi_offset 7, -8
 1674              		.cfi_offset 14, -4
 1675 0002 82B0     		sub	sp, sp, #8
 1676              	.LCFI76:
 1677              		.cfi_def_cfa_offset 16
 1678 0004 00AF     		add	r7, sp, #0
 1679              	.LCFI77:
 1680              		.cfi_def_cfa_register 7
 384:src/usart2.c  ****     /* Disable DMA1_Channel2 transfer*/
 385:src/usart2.c  **** 	DMA_Cmd(DMA1_Channel2, DISABLE);
 1681              		.loc 2 385 2
 1682 0006 0021     		movs	r1, #0
 1683 0008 0A48     		ldr	r0, .L93
 1684 000a 0B4B     		ldr	r3, .L93+4
 1685 000c 9847     		blx	r3
 1686              	.LVL50:
 386:src/usart2.c  **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 387:src/usart2.c  **** 	DMA_ClearFlag(DMA1_FLAG_TC3);//
 1687              		.loc 2 387 2
 1688 000e 4FF40070 		mov	r0, #512
 1689 0012 0A4B     		ldr	r3, .L93+8
 1690 0014 9847     		blx	r3
 1691              	.LVL51:
 388:src/usart2.c  **** 
 389:src/usart2.c  **** 	u2Fifo.rxCurrent+=0;
 1692              		.loc 2 389 18
 1693 0016 0A4B     		ldr	r3, .L93+12
 1694 0018 1B68     		ldr	r3, [r3]
 1695 001a 094A     		ldr	r2, .L93+12
 1696 001c 1360     		str	r3, [r2]
 390:src/usart2.c  **** 	int tempTest = DMA_GetCurrDataCounter(DMA1_Channel3);
 1697              		.loc 2 390 17
 1698 001e 0948     		ldr	r0, .L93+16
 1699 0020 094B     		ldr	r3, .L93+20
 1700 0022 9847     		blx	r3
 1701              	.LVL52:
 1702 0024 0346     		mov	r3, r0
 1703              		.loc 2 390 6
 1704 0026 7B60     		str	r3, [r7, #4]
 391:src/usart2.c  **** 	tempTest +=0;
 392:src/usart2.c  **** //   DMARxDataReceived();
 393:src/usart2.c  ****    uart2TxTask();
 1705              		.loc 2 393 4
 1706 0028 084B     		ldr	r3, .L93+24
 1707 002a 9847     		blx	r3
 1708              	.LVL53:
 394:src/usart2.c  **** }
 1709              		.loc 2 394 1
 1710 002c 00BF     		nop
 1711 002e 0837     		adds	r7, r7, #8
 1712              	.LCFI78:
 1713              		.cfi_def_cfa_offset 8
 1714 0030 BD46     		mov	sp, r7
 1715              	.LCFI79:
 1716              		.cfi_def_cfa_register 13
 1717              		@ sp needed
 1718 0032 80BD     		pop	{r7, pc}
 1719              	.L94:
 1720              		.align	2
 1721              	.L93:
 1722 0034 1C000240 		.word	1073872924
 1723 0038 00000000 		.word	DMA_Cmd
 1724 003c 00000000 		.word	DMA_ClearFlag
 1725 0040 00000000 		.word	u2Fifo
 1726 0044 30000240 		.word	1073872944
 1727 0048 00000000 		.word	DMA_GetCurrDataCounter
 1728 004c 00000000 		.word	uart2TxTask
 1729              		.cfi_endproc
 1730              	.LFE40:
 1732              		.section	.text.uartTxDMAConfiguration,"ax",%progbits
 1733              		.align	1
 1734              		.global	uartTxDMAConfiguration
 1735              		.syntax unified
 1736              		.thumb
 1737              		.thumb_func
 1739              	uartTxDMAConfiguration:
 1740              	.LFB41:
 395:src/usart2.c  **** //-------------------------------------------
 396:src/usart2.c  **** void uartTxDMAConfiguration(USART_TypeDef *uart, DMA_Channel_TypeDef *dmatx,
 397:src/usart2.c  **** 		uint8_t *txBuf, uint32_t len, bool ie)
 398:src/usart2.c  **** {
 1741              		.loc 2 398 1
 1742              		.cfi_startproc
 1743              		@ args = 4, pretend = 0, frame = 64
 1744              		@ frame_needed = 1, uses_anonymous_args = 0
 1745 0000 80B5     		push	{r7, lr}
 1746              	.LCFI80:
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 90B0     		sub	sp, sp, #64
 1751              	.LCFI81:
 1752              		.cfi_def_cfa_offset 72
 1753 0004 00AF     		add	r7, sp, #0
 1754              	.LCFI82:
 1755              		.cfi_def_cfa_register 7
 1756 0006 F860     		str	r0, [r7, #12]
 1757 0008 B960     		str	r1, [r7, #8]
 1758 000a 7A60     		str	r2, [r7, #4]
 1759 000c 3B60     		str	r3, [r7]
 399:src/usart2.c  **** 	DMA_InitTypeDef DMA_InitStructure;
 400:src/usart2.c  **** 	/* DMA1 Channel (triggered by USART_Tx event) Config */
 401:src/usart2.c  **** 	DMA_DeInit(DMA1_Channel2);
 1760              		.loc 2 401 2
 1761 000e 1848     		ldr	r0, .L96
 1762 0010 184B     		ldr	r3, .L96+4
 1763 0012 9847     		blx	r3
 1764              	.LVL54:
 402:src/usart2.c  **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &uart->DR;
 1765              		.loc 2 402 56
 1766 0014 FB68     		ldr	r3, [r7, #12]
 1767 0016 0433     		adds	r3, r3, #4
 1768              		.loc 2 402 43
 1769 0018 7B61     		str	r3, [r7, #20]
 403:src/usart2.c  **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) txBuf;
 1770              		.loc 2 403 41
 1771 001a 7B68     		ldr	r3, [r7, #4]
 1772              		.loc 2 403 39
 1773 001c BB61     		str	r3, [r7, #24]
 404:src/usart2.c  **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 1774              		.loc 2 404 28
 1775 001e 1023     		movs	r3, #16
 1776 0020 FB61     		str	r3, [r7, #28]
 405:src/usart2.c  **** 	DMA_InitStructure.DMA_BufferSize = len;
 1777              		.loc 2 405 35
 1778 0022 3B68     		ldr	r3, [r7]
 1779 0024 3B62     		str	r3, [r7, #32]
 406:src/usart2.c  **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1780              		.loc 2 406 38
 1781 0026 0023     		movs	r3, #0
 1782 0028 7B62     		str	r3, [r7, #36]
 407:src/usart2.c  **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1783              		.loc 2 407 34
 1784 002a 8023     		movs	r3, #128
 1785 002c BB62     		str	r3, [r7, #40]
 408:src/usart2.c  **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 1786              		.loc 2 408 43
 1787 002e 0023     		movs	r3, #0
 1788 0030 FB62     		str	r3, [r7, #44]
 409:src/usart2.c  **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 1789              		.loc 2 409 39
 1790 0032 0023     		movs	r3, #0
 1791 0034 3B63     		str	r3, [r7, #48]
 410:src/usart2.c  **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 1792              		.loc 2 410 29
 1793 0036 0023     		movs	r3, #0
 1794 0038 7B63     		str	r3, [r7, #52]
 411:src/usart2.c  **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 1795              		.loc 2 411 33
 1796 003a 4FF44053 		mov	r3, #12288
 1797 003e BB63     		str	r3, [r7, #56]
 412:src/usart2.c  **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1798              		.loc 2 412 28
 1799 0040 0023     		movs	r3, #0
 1800 0042 FB63     		str	r3, [r7, #60]
 413:src/usart2.c  **** 	DMA_Init(DMA1_Channel2, &DMA_InitStructure);
 1801              		.loc 2 413 2
 1802 0044 07F11403 		add	r3, r7, #20
 1803 0048 1946     		mov	r1, r3
 1804 004a 0948     		ldr	r0, .L96
 1805 004c 0A4B     		ldr	r3, .L96+8
 1806 004e 9847     		blx	r3
 1807              	.LVL55:
 414:src/usart2.c  **** 	DMA_Cmd(DMA1_Channel2, ENABLE);
 1808              		.loc 2 414 2
 1809 0050 0121     		movs	r1, #1
 1810 0052 0748     		ldr	r0, .L96
 1811 0054 094B     		ldr	r3, .L96+12
 1812 0056 9847     		blx	r3
 1813              	.LVL56:
 415:src/usart2.c  **** 
 416:src/usart2.c  **** 	NVIC_SetPriority(DMA1_Channel2_IRQn, 0x01);
 1814              		.loc 2 416 2
 1815 0058 0121     		movs	r1, #1
 1816 005a 0C20     		movs	r0, #12
 1817 005c 084B     		ldr	r3, .L96+16
 1818 005e 9847     		blx	r3
 1819              	.LVL57:
 417:src/usart2.c  **** 	NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 1820              		.loc 2 417 2
 1821 0060 0C20     		movs	r0, #12
 1822 0062 084B     		ldr	r3, .L96+20
 1823 0064 9847     		blx	r3
 1824              	.LVL58:
 418:src/usart2.c  **** 
 419:src/usart2.c  **** }
 1825              		.loc 2 419 1
 1826 0066 00BF     		nop
 1827 0068 4037     		adds	r7, r7, #64
 1828              	.LCFI83:
 1829              		.cfi_def_cfa_offset 8
 1830 006a BD46     		mov	sp, r7
 1831              	.LCFI84:
 1832              		.cfi_def_cfa_register 13
 1833              		@ sp needed
 1834 006c 80BD     		pop	{r7, pc}
 1835              	.L97:
 1836 006e 00BF     		.align	2
 1837              	.L96:
 1838 0070 1C000240 		.word	1073872924
 1839 0074 00000000 		.word	DMA_DeInit
 1840 0078 00000000 		.word	DMA_Init
 1841 007c 00000000 		.word	DMA_Cmd
 1842 0080 00000000 		.word	NVIC_SetPriority
 1843 0084 00000000 		.word	NVIC_EnableIRQ
 1844              		.cfi_endproc
 1845              	.LFE41:
 1847              		.section	.text.uartRxDMAConfiguration,"ax",%progbits
 1848              		.align	1
 1849              		.global	uartRxDMAConfiguration
 1850              		.syntax unified
 1851              		.thumb
 1852              		.thumb_func
 1854              	uartRxDMAConfiguration:
 1855              	.LFB42:
 420:src/usart2.c  **** 
 421:src/usart2.c  **** /**
 422:src/usart2.c  ****  * @brief  Configures the DMA.
 423:src/usart2.c  ****  * @param  uart, dmatx,dmarx,interrupt enable
 424:src/usart2.c  ****  * @retval : None
 425:src/usart2.c  ****  */
 426:src/usart2.c  **** 
 427:src/usart2.c  **** 
 428:src/usart2.c  **** 
 429:src/usart2.c  **** void uartRxDMAConfiguration(USART_TypeDef *uart, DMA_Channel_TypeDef *dmarx,
 430:src/usart2.c  **** 		unsigned char *rxBuf, uint32_t len)
 431:src/usart2.c  **** {
 1856              		.loc 2 431 1
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 64
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860 0000 80B5     		push	{r7, lr}
 1861              	.LCFI85:
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 7, -8
 1864              		.cfi_offset 14, -4
 1865 0002 90B0     		sub	sp, sp, #64
 1866              	.LCFI86:
 1867              		.cfi_def_cfa_offset 72
 1868 0004 00AF     		add	r7, sp, #0
 1869              	.LCFI87:
 1870              		.cfi_def_cfa_register 7
 1871 0006 F860     		str	r0, [r7, #12]
 1872 0008 B960     		str	r1, [r7, #8]
 1873 000a 7A60     		str	r2, [r7, #4]
 1874 000c 3B60     		str	r3, [r7]
 432:src/usart2.c  **** 	DMA_InitTypeDef DMA_InitStructure;
 433:src/usart2.c  **** 
 434:src/usart2.c  **** 
 435:src/usart2.c  **** 	DMA_DeInit(DMA1_Channel3);
 1875              		.loc 2 435 2
 1876 000e 1848     		ldr	r0, .L99
 1877 0010 184B     		ldr	r3, .L99+4
 1878 0012 9847     		blx	r3
 1879              	.LVL59:
 436:src/usart2.c  **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &uart->DR;
 1880              		.loc 2 436 56
 1881 0014 FB68     		ldr	r3, [r7, #12]
 1882 0016 0433     		adds	r3, r3, #4
 1883              		.loc 2 436 43
 1884 0018 7B61     		str	r3, [r7, #20]
 437:src/usart2.c  **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) rxBuf;
 1885              		.loc 2 437 41
 1886 001a 7B68     		ldr	r3, [r7, #4]
 1887              		.loc 2 437 39
 1888 001c BB61     		str	r3, [r7, #24]
 438:src/usart2.c  **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1889              		.loc 2 438 28
 1890 001e 0023     		movs	r3, #0
 1891 0020 FB61     		str	r3, [r7, #28]
 439:src/usart2.c  **** 	DMA_InitStructure.DMA_BufferSize = len;
 1892              		.loc 2 439 35
 1893 0022 3B68     		ldr	r3, [r7]
 1894 0024 3B62     		str	r3, [r7, #32]
 440:src/usart2.c  **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1895              		.loc 2 440 38
 1896 0026 0023     		movs	r3, #0
 1897 0028 7B62     		str	r3, [r7, #36]
 441:src/usart2.c  **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1898              		.loc 2 441 34
 1899 002a 8023     		movs	r3, #128
 1900 002c BB62     		str	r3, [r7, #40]
 442:src/usart2.c  **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 1901              		.loc 2 442 43
 1902 002e 0023     		movs	r3, #0
 1903 0030 FB62     		str	r3, [r7, #44]
 443:src/usart2.c  ****     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 1904              		.loc 2 443 42
 1905 0032 0023     		movs	r3, #0
 1906 0034 3B63     		str	r3, [r7, #48]
 444:src/usart2.c  **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1907              		.loc 2 444 29
 1908 0036 2023     		movs	r3, #32
 1909 0038 7B63     		str	r3, [r7, #52]
 445:src/usart2.c  **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 1910              		.loc 2 445 33
 1911 003a 4FF44053 		mov	r3, #12288
 1912 003e BB63     		str	r3, [r7, #56]
 446:src/usart2.c  **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1913              		.loc 2 446 28
 1914 0040 0023     		movs	r3, #0
 1915 0042 FB63     		str	r3, [r7, #60]
 447:src/usart2.c  **** 	DMA_Init(DMA1_Channel3, &DMA_InitStructure);
 1916              		.loc 2 447 2
 1917 0044 07F11403 		add	r3, r7, #20
 1918 0048 1946     		mov	r1, r3
 1919 004a 0948     		ldr	r0, .L99
 1920 004c 0A4B     		ldr	r3, .L99+8
 1921 004e 9847     		blx	r3
 1922              	.LVL60:
 448:src/usart2.c  **** 	DMA_Cmd(DMA1_Channel3, ENABLE);//dmarx
 1923              		.loc 2 448 2
 1924 0050 0121     		movs	r1, #1
 1925 0052 0748     		ldr	r0, .L99
 1926 0054 094B     		ldr	r3, .L99+12
 1927 0056 9847     		blx	r3
 1928              	.LVL61:
 449:src/usart2.c  ****     //DMA_ITConfig(DMA1_Channel3, DMA_IT_TC, ENABLE);
 450:src/usart2.c  **** 
 451:src/usart2.c  ****     NVIC_SetPriority(DMA1_Channel3_IRQn, 0x02);
 1929              		.loc 2 451 5
 1930 0058 0221     		movs	r1, #2
 1931 005a 0D20     		movs	r0, #13
 1932 005c 084B     		ldr	r3, .L99+16
 1933 005e 9847     		blx	r3
 1934              	.LVL62:
 452:src/usart2.c  ****     NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 1935              		.loc 2 452 5
 1936 0060 0D20     		movs	r0, #13
 1937 0062 084B     		ldr	r3, .L99+20
 1938 0064 9847     		blx	r3
 1939              	.LVL63:
 453:src/usart2.c  **** }
 1940              		.loc 2 453 1
 1941 0066 00BF     		nop
 1942 0068 4037     		adds	r7, r7, #64
 1943              	.LCFI88:
 1944              		.cfi_def_cfa_offset 8
 1945 006a BD46     		mov	sp, r7
 1946              	.LCFI89:
 1947              		.cfi_def_cfa_register 13
 1948              		@ sp needed
 1949 006c 80BD     		pop	{r7, pc}
 1950              	.L100:
 1951 006e 00BF     		.align	2
 1952              	.L99:
 1953 0070 30000240 		.word	1073872944
 1954 0074 00000000 		.word	DMA_DeInit
 1955 0078 00000000 		.word	DMA_Init
 1956 007c 00000000 		.word	DMA_Cmd
 1957 0080 00000000 		.word	NVIC_SetPriority
 1958 0084 00000000 		.word	NVIC_EnableIRQ
 1959              		.cfi_endproc
 1960              	.LFE42:
 1962              		.text
 1963              	.Letext0:
 1964              		.file 3 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 1965              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1966              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1967              		.file 6 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
 1968              		.file 7 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1969              		.file 8 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1970              		.file 9 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 1971              		.file 10 "src/usart2.h"
 1972              		.file 11 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usart2.c
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:74     .text.NVIC_EnableIRQ:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:79     .text.NVIC_SetPriority:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:84     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:158    .text.NVIC_SetPriority:0000004c $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:168    .bss.u2Fifo:00000000 u2Fifo
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:165    .bss.u2Fifo:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:175    .bss.ReceivedMsg:00000000 ReceivedMsg
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:172    .bss.ReceivedMsg:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:178    .text.USART2TIMConfigure:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:184    .text.USART2TIMConfigure:00000000 USART2TIMConfigure
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:282    .text.USART2TIMConfigure:00000070 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:293    .text.TIM5_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:299    .text.TIM5_IRQHandler:00000000 TIM5_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:368    .text.TIM5_IRQHandler:0000004c $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1287   .text.uart2Read:00000000 uart2Read
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:377    .text.uart2Init:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:383    .text.uart2Init:00000000 uart2Init
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:515    .text.uart2Init:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:848    .text.GPIOforUSART3cfg:00000000 GPIOforUSART3cfg
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1854   .text.uartRxDMAConfiguration:00000000 uartRxDMAConfiguration
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1739   .text.uartTxDMAConfiguration:00000000 uartTxDMAConfiguration
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:535    .text.uart2FindEscapedPack:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:541    .text.uart2FindEscapedPack:00000000 uart2FindEscapedPack
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:648    .text.uart2FindEscapedPack:0000007c $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:656    .text.uart2GetChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:662    .text.uart2GetChar:00000000 uart2GetChar
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:738    .text.uart2GetChar:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:745    .text.uart2PutChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:751    .text.uart2PutChar:00000000 uart2PutChar
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:837    .text.uart2PutChar:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:842    .text.GPIOforUSART3cfg:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:948    .text.GPIOforUSART3cfg:00000078 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:955    .text.uart2TxTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:961    .text.uart2TxTask:00000000 uart2TxTask
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1087   .text.uart2TxTask:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1099   .text.uart2ReadEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1105   .text.uart2ReadEscaped:00000000 uart2ReadEscaped
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1275   .text.uart2ReadEscaped:000000c4 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1281   .text.uart2Read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1369   .text.uart2Read:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1374   .text.uart2WriteEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1380   .text.uart2WriteEscaped:00000000 uart2WriteEscaped
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1519   .text.uart2WriteEscaped:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1525   .text.uart2Write:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1531   .text.uart2Write:00000000 uart2Write
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1603   .text.uart2Write:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1609   .text.DMA1_Channel2_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1615   .text.DMA1_Channel2_IRQHandler:00000000 DMA1_Channel2_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1650   .text.DMA1_Channel2_IRQHandler:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1658   .text.DMA1_Channel3_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1664   .text.DMA1_Channel3_IRQHandler:00000000 DMA1_Channel3_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1722   .text.DMA1_Channel3_IRQHandler:00000034 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1733   .text.uartTxDMAConfiguration:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1838   .text.uartTxDMAConfiguration:00000070 $d
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1848   .text.uartRxDMAConfiguration:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccTxamH3.s:1953   .text.uartRxDMAConfiguration:00000070 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphClockCmd
TIM_TimeBaseInit
TIM_ARRPreloadConfig
TIM_ClearFlag
TIM_ITConfig
TIM_Cmd
TIM_ClearITPendingBit
RCC_AHBPeriphClockCmd
USART_DeInit
RCC_APB2PeriphClockCmd
USART_Init
USART_ClearFlag
USART_DMACmd
USART_Cmd
DMA_GetCurrDataCounter
GPIO_Init
DMA_ITConfig
DMA_Cmd
DMA_ClearFlag
DMA_DeInit
DMA_Init
