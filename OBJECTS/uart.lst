   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB14:
  25              		.file 1 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h"
   1:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /******************************************************************************
   2:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @file:    core_cm3.h
   3:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @version: V1.20
   5:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @date:    22. May 2009
   6:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *----------------------------------------------------------------------------
   7:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
   8:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  10:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  11:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  12:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  13:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  14:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  15:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  16:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  17:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  18:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  19:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  20:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
  21:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  22:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  23:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  24:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  25:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  26:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  extern "C" {
  27:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif 
  28:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  29:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  30:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  31:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  32:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  33:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  34:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  35:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
  36:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  Lint configuration \n
  37:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  ----------------------- \n
  38:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  39:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  40:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  \n
  41:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 10: --- \n
  42:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  43:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Error 10: Expecting ';' \n
  44:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  45:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 530: --- \n
  46:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    return(__regBasePri); \n
  47:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  48:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  49:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 550: --- \n
  50:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  51:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } \n
  52:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  53:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  54:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 754: --- \n
  55:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  56:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  57:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  58:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 750: --- \n
  59:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  60:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  61:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  62:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 528: --- \n
  63:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  64:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  65:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  66:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 751: --- \n
  67:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } InterruptType_Type; \n
  68:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  69:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  70:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  71:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  72:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  73:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
  74:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  75:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -save */
  76:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e10  */
  77:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e530 */
  78:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e550 */
  79:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e754 */
  80:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e750 */
  81:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e528 */
  82:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e751 */
  83:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  84:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  85:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  86:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  87:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  88:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  89:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  90:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  91:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  92:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  93:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  94:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  95:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  96:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  97:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  98:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  99:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * IO definitions
 101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* System Reset */
 121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug */
 127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];
 138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];
 140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];
 142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];
 144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];
 146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];
 148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }  NVIC_Type;
 150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for System Control Block */
 153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SCB_Type;
 175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for SysTick */
 178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SysTick_Type;
 185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping structur for ITM */
 188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  union  
 191:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   {
 192:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 193:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 194:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 195:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 196:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];
 197:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 198:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];
 199:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 200:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];
 201:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 202:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];
 203:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 204:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 205:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 206:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];
 207:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 208:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 209:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];
 210:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 211:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;
 212:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;
 213:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;
 214:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;
 215:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;
 216:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;
 217:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;
 218:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;
 219:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;
 220:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;
 221:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;
 222:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } ITM_Type;
 223:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 224:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 225:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 226:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 227:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 228:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 229:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 230:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 231:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 232:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 233:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 234:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 235:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } InterruptType_Type;
 236:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 237:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 238:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory Protection Unit */
 239:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 240:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 241:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 242:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 243:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 244:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 245:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 246:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 247:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 248:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 249:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 250:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 251:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 252:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 253:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } MPU_Type;
 254:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 255:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 256:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 257:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug Register */
 258:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 259:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 260:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 261:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 262:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 263:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 264:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 265:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 266:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 267:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 268:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 269:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 270:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 271:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 272:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 273:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 274:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 275:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 276:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 277:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 278:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 279:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 280:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 281:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 282:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 283:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 284:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 285:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 286:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 287:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 288:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 289:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 290:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 291:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 292:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 293:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 294:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 295:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 296:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 297:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 298:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 299:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 300:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 301:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 302:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 303:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 304:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 305:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 306:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 307:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 308:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 309:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 310:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 311:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 312:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 313:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 314:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 315:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 316:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 317:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 318:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 319:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 320:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 321:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 322:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 323:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 324:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 325:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 326:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 327:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 328:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __REV                             __rev
 329:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 330:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 331:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 332:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 333:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 334:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 335:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 336:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 337:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 338:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 339:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 340:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 341:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 342:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 343:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 344:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 345:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 346:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 347:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 348:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 349:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 350:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 351:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 352:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 353:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 354:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 355:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 356:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 357:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 358:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 359:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 360:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 361:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 362:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 363:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 364:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 365:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 366:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 367:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 368:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 369:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 370:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 371:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 372:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 373:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 374:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 375:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 376:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 377:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 378:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 379:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 380:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 381:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 382:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 383:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 384:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 385:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 386:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 387:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 388:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 389:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 390:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 391:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 392:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 393:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 394:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 395:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 396:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 397:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 398:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 399:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 400:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 401:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 402:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 403:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 404:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 405:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 406:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 407:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 408:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 409:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 410:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 411:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 412:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 413:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 414:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 415:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 416:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 417:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 418:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 419:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 420:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 421:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 422:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 423:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 424:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 425:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 426:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 427:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 428:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 429:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 430:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 431:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 432:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 433:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 434:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 435:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 436:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 437:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 438:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 439:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 440:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 441:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 442:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 443:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 444:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 445:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 446:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 447:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 448:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 449:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 450:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 451:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 452:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 453:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 454:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 455:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 456:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 457:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 458:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 459:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 460:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 461:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 462:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 463:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 464:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 465:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 466:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 467:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 468:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 469:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 470:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 471:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 472:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 473:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 474:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 475:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 476:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 477:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 478:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 479:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 480:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 481:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 482:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 483:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 484:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 485:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 486:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 487:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 488:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 489:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 490:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 491:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 492:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 493:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 494:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 495:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 496:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 497:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 498:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 499:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 500:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 501:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 502:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 503:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 504:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 505:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 506:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 507:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 508:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 509:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 510:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 511:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 512:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 513:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 514:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 515:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 516:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 517:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 518:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 519:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 520:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 521:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 522:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 523:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 524:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 525:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regBasePri);
 526:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 527:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 528:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 529:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 530:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 531:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 532:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 533:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 534:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 535:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 536:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 537:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 538:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 539:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 540:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 541:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 542:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 543:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 544:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 545:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 546:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 547:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 548:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 549:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 550:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 551:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 552:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 553:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 554:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regPriMask);
 555:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 556:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 557:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 558:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 559:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 560:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 561:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 562:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 563:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 564:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 565:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 566:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 567:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 568:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 569:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 570:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 571:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 572:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 573:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 574:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 575:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 576:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 577:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 578:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 579:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 580:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 581:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 582:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regFaultMask);
 583:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 584:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 585:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 586:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 587:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 588:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 589:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 590:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 591:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 592:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 593:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 594:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 595:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 596:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 597:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 598:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 599:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 600:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 601:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 602:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 603:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 604:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 605:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 606:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 607:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 608:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 609:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 610:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regControl);
 611:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 612:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 613:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 614:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 615:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 616:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 617:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 618:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 619:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 620:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 621:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 622:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 623:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 624:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regControl = control;
 625:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 626:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 627:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 628:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 629:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 630:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 631:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 632:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
 633:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 634:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 635:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 636:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 637:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 638:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 639:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 640:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 641:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 642:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 643:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 644:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 645:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 646:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 647:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 648:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 649:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 650:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 651:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 652:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 653:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 654:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 655:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 656:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 657:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 658:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 659:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 660:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 661:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 662:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 663:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 664:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 665:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 666:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 667:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 668:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 669:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 670:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 671:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 672:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 673:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 674:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 675:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 676:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 677:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 678:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 679:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 680:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 681:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 682:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 683:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 684:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 685:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 686:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 687:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 688:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 689:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 690:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 691:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 692:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 693:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 694:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 695:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 696:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 697:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 698:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 699:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 700:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 701:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 702:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 703:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 704:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 705:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 706:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 707:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 708:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 709:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 710:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 711:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 712:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 713:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 714:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 715:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 716:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 717:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 718:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 719:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 720:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 721:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 722:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 723:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 724:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 725:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 726:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 727:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 728:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 729:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 730:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 731:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 732:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 733:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 734:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 735:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 736:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 737:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 738:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 739:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 740:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 741:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 742:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 743:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 744:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 745:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 746:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 747:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 748:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 749:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 750:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 751:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 752:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 753:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 754:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 755:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
 756:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
 757:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 758:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 759:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 760:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 761:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 762:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 763:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 764:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 765:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 766:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
 767:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
 768:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 769:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 770:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 771:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 772:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 773:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 774:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 775:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 776:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 777:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
 778:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
 779:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 780:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 781:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 782:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 783:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 784:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 785:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 786:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 787:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 788:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
 789:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 790:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 791:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 792:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 793:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 794:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 795:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 796:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 797:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 798:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 799:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 800:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 801:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 802:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 803:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
 804:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 805:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 806:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 807:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 808:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 809:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 810:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 811:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 812:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 813:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 814:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 815:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 816:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 817:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 818:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 819:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 820:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 821:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 822:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 823:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 824:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 825:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 826:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 827:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 828:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 829:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 830:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 831:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 832:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 833:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 834:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 835:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 836:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 837:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 838:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 839:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 840:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 841:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 842:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 843:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 844:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 845:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 846:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 847:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 848:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 849:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 850:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 851:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 852:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 853:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 854:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 855:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 856:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 857:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 858:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 859:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 860:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 861:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 862:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 863:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 864:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 865:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 866:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 867:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 868:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 869:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 870:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 871:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 872:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 873:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 874:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 875:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 876:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 877:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 878:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
 879:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 880:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 881:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 882:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 883:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 884:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 885:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 886:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 887:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 888:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 889:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 890:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 891:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 892:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 893:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 894:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 895:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 896:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 897:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 898:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 899:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 900:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 901:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 902:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 903:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 904:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 905:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 906:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 907:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 908:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 909:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 910:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 911:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 912:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** * 
 913:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @param  none
 914:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @return uint32_t Control value
 915:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 916:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 917:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 918:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 919:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 920:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 921:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 922:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 923:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 924:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 925:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 926:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 927:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 928:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 929:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 930:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 931:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
 932:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 933:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 934:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 935:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 936:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
 937:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 938:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
 939:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 940:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 941:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 942:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 943:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 944:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 945:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 946:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 947:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 948:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 949:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 950:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 951:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 952:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 953:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 954:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 955:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 956:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 957:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 958:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 959:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 960:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 961:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 962:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 963:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 964:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 965:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 966:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 967:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 968:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 969:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 970:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 971:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 972:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 973:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 974:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 975:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 976:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 977:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 978:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 979:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 980:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 981:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 982:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 983:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 984:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 985:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 986:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 987:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 988:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 989:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 990:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 991:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 992:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 993:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 994:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 995:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 996:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 997:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 998:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 999:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1000:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1001:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1002:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1003:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
1004:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
1005:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1006:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1007:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1008:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1009:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1010:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1011:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1012:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1013:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1014:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
1015:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
1016:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1017:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1018:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1019:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1020:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1021:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1022:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1023:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1024:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1025:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
1026:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
1027:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1028:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1029:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1030:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1031:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1032:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1033:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1034:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1035:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1036:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1037:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
1038:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1039:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1040:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1041:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1042:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1043:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
1044:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1045:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1046:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1047:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1048:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1049:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1050:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1051:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1052:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1053:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t priority_grouping is priority grouping field
1054:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1055:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1056:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1057:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1058:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1059:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1060:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1061:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1062:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1063:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1064:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1065:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1066:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   
1067:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = SCB->AIRCR;                                                    /* read old register 
1068:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value &= ~((0xFFFFU << 16) | (0x0F << 8));                              /* clear bits to chan
1069:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = ((reg_value | NVIC_AIRCR_VECTKEY | (PriorityGroupTmp << 8)));  /* Insert write key a
1070:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   SCB->AIRCR = reg_value;
1071:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1072:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1073:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1074:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1075:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1076:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
1077:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   priority grouping field 
1078:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1079:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1080:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1081:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1082:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1083:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1084:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR >> 8) & 0x07);                                          /* read priority grou
1085:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1086:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1087:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1088:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1089:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1090:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn specifies the interrupt number
1091:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1092:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1093:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1094:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1095:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1096:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1097:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  26              		.loc 1 1097 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 0346     		mov	r3, r0
  42 0008 FB71     		strb	r3, [r7, #7]
1098:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              		.loc 1 1098 65
  44 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  45 000c 03F01F03 		and	r3, r3, #31
  46              		.loc 1 1098 44
  47 0010 0122     		movs	r2, #1
  48 0012 02FA03F1 		lsl	r1, r2, r3
  49              		.loc 1 1098 7
  50 0016 054A     		ldr	r2, .L2
  51              		.loc 1 1098 15
  52 0018 97F90730 		ldrsb	r3, [r7, #7]
  53              		.loc 1 1098 32
  54 001c 5B09     		lsrs	r3, r3, #5
  55              		.loc 1 1098 39
  56 001e 42F82310 		str	r1, [r2, r3, lsl #2]
1099:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
  57              		.loc 1 1099 1
  58 0022 00BF     		nop
  59 0024 0C37     		adds	r7, r7, #12
  60              	.LCFI3:
  61              		.cfi_def_cfa_offset 4
  62 0026 BD46     		mov	sp, r7
  63              	.LCFI4:
  64              		.cfi_def_cfa_register 13
  65              		@ sp needed
  66 0028 80BC     		pop	{r7}
  67              	.LCFI5:
  68              		.cfi_restore 7
  69              		.cfi_def_cfa_offset 0
  70 002a 7047     		bx	lr
  71              	.L3:
  72              		.align	2
  73              	.L2:
  74 002c 00E100E0 		.word	-536813312
  75              		.cfi_endproc
  76              	.LFE14:
  78              		.section	.text.NVIC_SetPriority,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	NVIC_SetPriority:
  85              	.LFB20:
1100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the positive number of the external interrupt
1105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the number of the device specifc interrupt
1119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t 1 if pending interrupt else 0
1120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * otherwise it returns 0
1123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type  IRQn is the Number of the interrupt
1161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   1 if active else 0
1162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * otherwise it returns 0.
1165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the priority for an interrupt
1173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  priority is the priority for the interrupt
1176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt. \n
1181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  86              		.loc 1 1185 1
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              	.LCFI6:
  93              		.cfi_def_cfa_offset 4
  94              		.cfi_offset 7, -4
  95 0002 83B0     		sub	sp, sp, #12
  96              	.LCFI7:
  97              		.cfi_def_cfa_offset 16
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI8:
 100              		.cfi_def_cfa_register 7
 101 0006 0346     		mov	r3, r0
 102 0008 3960     		str	r1, [r7]
 103 000a FB71     		strb	r3, [r7, #7]
1186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   if(IRQn < 0) {
 104              		.loc 1 1186 5
 105 000c 97F90730 		ldrsb	r3, [r7, #7]
 106 0010 002B     		cmp	r3, #0
 107 0012 0BDA     		bge	.L5
1187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 108              		.loc 1 1187 55
 109 0014 3B68     		ldr	r3, [r7]
 110 0016 DAB2     		uxtb	r2, r3
 111              		.loc 1 1187 8
 112 0018 0C49     		ldr	r1, .L8
 113              		.loc 1 1187 32
 114 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 115 001c 03F00F03 		and	r3, r3, #15
 116              		.loc 1 1187 38
 117 0020 043B     		subs	r3, r3, #4
 118              		.loc 1 1187 55
 119 0022 1201     		lsls	r2, r2, #4
 120 0024 D2B2     		uxtb	r2, r2
 121              		.loc 1 1187 42
 122 0026 0B44     		add	r3, r3, r1
 123 0028 1A76     		strb	r2, [r3, #24]
1188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   else {
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 124              		.loc 1 1190 1
 125 002a 09E0     		b	.L7
 126              	.L5:
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 127              		.loc 1 1189 45
 128 002c 3B68     		ldr	r3, [r7]
 129 002e DAB2     		uxtb	r2, r3
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 130              		.loc 1 1189 9
 131 0030 0749     		ldr	r1, .L8+4
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 132              		.loc 1 1189 14
 133 0032 97F90730 		ldrsb	r3, [r7, #7]
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 134              		.loc 1 1189 45
 135 0036 1201     		lsls	r2, r2, #4
 136 0038 D2B2     		uxtb	r2, r2
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 137              		.loc 1 1189 32
 138 003a 0B44     		add	r3, r3, r1
 139 003c 83F80023 		strb	r2, [r3, #768]
 140              	.L7:
 141              		.loc 1 1190 1
 142 0040 00BF     		nop
 143 0042 0C37     		adds	r7, r7, #12
 144              	.LCFI9:
 145              		.cfi_def_cfa_offset 4
 146 0044 BD46     		mov	sp, r7
 147              	.LCFI10:
 148              		.cfi_def_cfa_register 13
 149              		@ sp needed
 150 0046 80BC     		pop	{r7}
 151              	.LCFI11:
 152              		.cfi_restore 7
 153              		.cfi_def_cfa_offset 0
 154 0048 7047     		bx	lr
 155              	.L9:
 156 004a 00BF     		.align	2
 157              	.L8:
 158 004c 00ED00E0 		.word	-536810240
 159 0050 00E100E0 		.word	-536813312
 160              		.cfi_endproc
 161              	.LFE20:
 163              		.section	.text.UART4_IRQHandler,"ax",%progbits
 164              		.align	1
 165              		.global	UART4_IRQHandler
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 170              	UART4_IRQHandler:
 171              	.LFB27:
 172              		.file 2 "common/lib.stm32/uart.c"
   1:common/lib.stm32/uart.c **** /*
   2:common/lib.stm32/uart.c ****  * uart.c
   3:common/lib.stm32/uart.c ****  *
   4:common/lib.stm32/uart.c ****  *  Created on: Mar 24, 2011
   5:common/lib.stm32/uart.c ****  *      Author: baron
   6:common/lib.stm32/uart.c ****  */
   7:common/lib.stm32/uart.c **** 
   8:common/lib.stm32/uart.c **** #include "uart.h"
   9:common/lib.stm32/uart.c **** 
  10:common/lib.stm32/uart.c **** 
  11:common/lib.stm32/uart.c **** 
  12:common/lib.stm32/uart.c **** void UART4_IRQHandler(void)
  13:common/lib.stm32/uart.c **** {
 173              		.loc 2 13 1
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 0000 80B4     		push	{r7}
 179              	.LCFI12:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 7, -4
 182 0002 00AF     		add	r7, sp, #0
 183              	.LCFI13:
 184              		.cfi_def_cfa_register 7
  14:common/lib.stm32/uart.c **** 	/*
  15:common/lib.stm32/uart.c ****     if(USART_GetITStatus(UART4, USART_IT_RXNE) != RESET)
  16:common/lib.stm32/uart.c ****     {
  17:common/lib.stm32/uart.c ****         //USART_SendData(UART4, USART_ReceiveData(UART4));
  18:common/lib.stm32/uart.c ****     	uint16_t data = USART_ReceiveData(UART4);
  19:common/lib.stm32/uart.c **** 
  20:common/lib.stm32/uart.c ****     	RxBuffer[RxPointer++] = (uint8_t)(0x0f & data);
  21:common/lib.stm32/uart.c ****     	RxLength++;
  22:common/lib.stm32/uart.c ****     	RxBuffer[RxPointer++] = (uint8_t)(data << 8);
  23:common/lib.stm32/uart.c ****     	RxLength++;
  24:common/lib.stm32/uart.c ****     }*/
  25:common/lib.stm32/uart.c **** }
 185              		.loc 2 25 1
 186 0004 00BF     		nop
 187 0006 BD46     		mov	sp, r7
 188              	.LCFI14:
 189              		.cfi_def_cfa_register 13
 190              		@ sp needed
 191 0008 80BC     		pop	{r7}
 192              	.LCFI15:
 193              		.cfi_restore 7
 194              		.cfi_def_cfa_offset 0
 195 000a 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE27:
 199              		.global	dmaRxCounter
 200              		.section	.bss.dmaRxCounter,"aw",%nobits
 201              		.align	2
 204              	dmaRxCounter:
 205 0000 00000000 		.space	4
 206              		.section	.text.DMARxDataCounterSet,"ax",%progbits
 207              		.align	1
 208              		.global	DMARxDataCounterSet
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 213              	DMARxDataCounterSet:
 214              	.LFB28:
  26:common/lib.stm32/uart.c **** 
  27:common/lib.stm32/uart.c **** int dmaRxCounter = 0;
  28:common/lib.stm32/uart.c **** 
  29:common/lib.stm32/uart.c **** void DMARxDataCounterSet(int counter)
  30:common/lib.stm32/uart.c **** {
 215              		.loc 2 30 1
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 8
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220 0000 80B4     		push	{r7}
 221              	.LCFI16:
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 7, -4
 224 0002 83B0     		sub	sp, sp, #12
 225              	.LCFI17:
 226              		.cfi_def_cfa_offset 16
 227 0004 00AF     		add	r7, sp, #0
 228              	.LCFI18:
 229              		.cfi_def_cfa_register 7
 230 0006 7860     		str	r0, [r7, #4]
  31:common/lib.stm32/uart.c **** 	dmaRxCounter=counter;
 231              		.loc 2 31 14
 232 0008 034A     		ldr	r2, .L12
 233 000a 7B68     		ldr	r3, [r7, #4]
 234 000c 1360     		str	r3, [r2]
  32:common/lib.stm32/uart.c **** }
 235              		.loc 2 32 1
 236 000e 00BF     		nop
 237 0010 0C37     		adds	r7, r7, #12
 238              	.LCFI19:
 239              		.cfi_def_cfa_offset 4
 240 0012 BD46     		mov	sp, r7
 241              	.LCFI20:
 242              		.cfi_def_cfa_register 13
 243              		@ sp needed
 244 0014 80BC     		pop	{r7}
 245              	.LCFI21:
 246              		.cfi_restore 7
 247              		.cfi_def_cfa_offset 0
 248 0016 7047     		bx	lr
 249              	.L13:
 250              		.align	2
 251              	.L12:
 252 0018 00000000 		.word	dmaRxCounter
 253              		.cfi_endproc
 254              	.LFE28:
 256              		.section	.text.DMARxDataCounterInc,"ax",%progbits
 257              		.align	1
 258              		.global	DMARxDataCounterInc
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	DMARxDataCounterInc:
 264              	.LFB29:
  33:common/lib.stm32/uart.c **** 
  34:common/lib.stm32/uart.c **** void DMARxDataCounterInc()
  35:common/lib.stm32/uart.c **** {
 265              		.loc 2 35 1
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270 0000 80B4     		push	{r7}
 271              	.LCFI22:
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 7, -4
 274 0002 00AF     		add	r7, sp, #0
 275              	.LCFI23:
 276              		.cfi_def_cfa_register 7
  36:common/lib.stm32/uart.c **** 	dmaRxCounter++;
 277              		.loc 2 36 14
 278 0004 044B     		ldr	r3, .L15
 279 0006 1B68     		ldr	r3, [r3]
 280 0008 0133     		adds	r3, r3, #1
 281 000a 034A     		ldr	r2, .L15
 282 000c 1360     		str	r3, [r2]
  37:common/lib.stm32/uart.c **** }
 283              		.loc 2 37 1
 284 000e 00BF     		nop
 285 0010 BD46     		mov	sp, r7
 286              	.LCFI24:
 287              		.cfi_def_cfa_register 13
 288              		@ sp needed
 289 0012 80BC     		pop	{r7}
 290              	.LCFI25:
 291              		.cfi_restore 7
 292              		.cfi_def_cfa_offset 0
 293 0014 7047     		bx	lr
 294              	.L16:
 295 0016 00BF     		.align	2
 296              	.L15:
 297 0018 00000000 		.word	dmaRxCounter
 298              		.cfi_endproc
 299              	.LFE29:
 301              		.section	.text.DMARxDataCounterGet,"ax",%progbits
 302              		.align	1
 303              		.global	DMARxDataCounterGet
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 308              	DMARxDataCounterGet:
 309              	.LFB30:
  38:common/lib.stm32/uart.c **** 
  39:common/lib.stm32/uart.c **** int DMARxDataCounterGet()
  40:common/lib.stm32/uart.c **** {
 310              		.loc 2 40 1
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 315 0000 80B4     		push	{r7}
 316              	.LCFI26:
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 7, -4
 319 0002 00AF     		add	r7, sp, #0
 320              	.LCFI27:
 321              		.cfi_def_cfa_register 7
  41:common/lib.stm32/uart.c **** 	return dmaRxCounter;
 322              		.loc 2 41 9
 323 0004 024B     		ldr	r3, .L19
 324 0006 1B68     		ldr	r3, [r3]
  42:common/lib.stm32/uart.c **** }
 325              		.loc 2 42 1
 326 0008 1846     		mov	r0, r3
 327 000a BD46     		mov	sp, r7
 328              	.LCFI28:
 329              		.cfi_def_cfa_register 13
 330              		@ sp needed
 331 000c 80BC     		pop	{r7}
 332              	.LCFI29:
 333              		.cfi_restore 7
 334              		.cfi_def_cfa_offset 0
 335 000e 7047     		bx	lr
 336              	.L20:
 337              		.align	2
 338              	.L19:
 339 0010 00000000 		.word	dmaRxCounter
 340              		.cfi_endproc
 341              	.LFE30:
 343              		.global	u1Fifo
 344              		.section	.bss.u1Fifo,"aw",%nobits
 345              		.align	2
 348              	u1Fifo:
 349 0000 00000000 		.space	2124
 349      00000000 
 349      00000000 
 349      00000000 
 349      00000000 
 350              		.section	.text.TestSend,"ax",%progbits
 351              		.align	1
 352              		.global	TestSend
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 357              	TestSend:
 358              	.LFB31:
  43:common/lib.stm32/uart.c **** 
  44:common/lib.stm32/uart.c **** 
  45:common/lib.stm32/uart.c **** 
  46:common/lib.stm32/uart.c **** UART_FIFO_STR u1Fifo;
  47:common/lib.stm32/uart.c **** void TestSend()
  48:common/lib.stm32/uart.c **** {
 359              		.loc 2 48 1
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 90B5     		push	{r4, r7, lr}
 364              	.LCFI30:
 365              		.cfi_def_cfa_offset 12
 366              		.cfi_offset 4, -12
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 83B0     		sub	sp, sp, #12
 370              	.LCFI31:
 371              		.cfi_def_cfa_offset 24
 372 0004 02AF     		add	r7, sp, #8
 373              	.LCFI32:
 374              		.cfi_def_cfa 7, 16
  49:common/lib.stm32/uart.c **** 	u1Fifo.txBuf[0]='A';
 375              		.loc 2 49 17
 376 0006 0A4B     		ldr	r3, .L22
 377 0008 4122     		movs	r2, #65
 378 000a 83F80C24 		strb	r2, [r3, #1036]
  50:common/lib.stm32/uart.c **** 	u1Fifo.txBuf[1]='B';
 379              		.loc 2 50 17
 380 000e 084B     		ldr	r3, .L22
 381 0010 4222     		movs	r2, #66
 382 0012 83F80D24 		strb	r2, [r3, #1037]
  51:common/lib.stm32/uart.c **** 	uart4TxDMAConfiguration(UART4, UART4_TX_DMA, u1Fifo.txBuf, 2,1);
 383              		.loc 2 51 2
 384 0016 0123     		movs	r3, #1
 385 0018 0093     		str	r3, [sp]
 386 001a 0223     		movs	r3, #2
 387 001c 054A     		ldr	r2, .L22+4
 388 001e 0649     		ldr	r1, .L22+8
 389 0020 0648     		ldr	r0, .L22+12
 390 0022 074C     		ldr	r4, .L22+16
 391 0024 A047     		blx	r4
 392              	.LVL0:
  52:common/lib.stm32/uart.c **** }
 393              		.loc 2 52 1
 394 0026 00BF     		nop
 395 0028 0437     		adds	r7, r7, #4
 396              	.LCFI33:
 397              		.cfi_def_cfa_offset 12
 398 002a BD46     		mov	sp, r7
 399              	.LCFI34:
 400              		.cfi_def_cfa_register 13
 401              		@ sp needed
 402 002c 90BD     		pop	{r4, r7, pc}
 403              	.L23:
 404 002e 00BF     		.align	2
 405              	.L22:
 406 0030 00000000 		.word	u1Fifo
 407 0034 0C040000 		.word	u1Fifo+1036
 408 0038 58040240 		.word	1073874008
 409 003c 004C0040 		.word	1073761280
 410 0040 00000000 		.word	uart4TxDMAConfiguration
 411              		.cfi_endproc
 412              	.LFE31:
 414              		.section	.text.uart4TxDMAConfiguration,"ax",%progbits
 415              		.align	1
 416              		.global	uart4TxDMAConfiguration
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 421              	uart4TxDMAConfiguration:
 422              	.LFB32:
  53:common/lib.stm32/uart.c **** 
  54:common/lib.stm32/uart.c **** void uart4TxDMAConfiguration(USART_TypeDef *uart, DMA_Channel_TypeDef *dmatx,
  55:common/lib.stm32/uart.c **** 		uint8_t *txBuf, uint32_t len, bool ie)
  56:common/lib.stm32/uart.c **** {
 423              		.loc 2 56 1
 424              		.cfi_startproc
 425              		@ args = 4, pretend = 0, frame = 64
 426              		@ frame_needed = 1, uses_anonymous_args = 0
 427 0000 80B5     		push	{r7, lr}
 428              	.LCFI35:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 90B0     		sub	sp, sp, #64
 433              	.LCFI36:
 434              		.cfi_def_cfa_offset 72
 435 0004 00AF     		add	r7, sp, #0
 436              	.LCFI37:
 437              		.cfi_def_cfa_register 7
 438 0006 F860     		str	r0, [r7, #12]
 439 0008 B960     		str	r1, [r7, #8]
 440 000a 7A60     		str	r2, [r7, #4]
 441 000c 3B60     		str	r3, [r7]
  57:common/lib.stm32/uart.c **** 	DMA_InitTypeDef DMA_InitStructure;
  58:common/lib.stm32/uart.c **** 
  59:common/lib.stm32/uart.c **** 	/* DMA1 Channel (triggered by USART_Tx event) Config */
  60:common/lib.stm32/uart.c **** 	DMA_DeInit(dmatx);
 442              		.loc 2 60 2
 443 000e B868     		ldr	r0, [r7, #8]
 444 0010 134B     		ldr	r3, .L25
 445 0012 9847     		blx	r3
 446              	.LVL1:
  61:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &uart->DR;
 447              		.loc 2 61 56
 448 0014 FB68     		ldr	r3, [r7, #12]
 449 0016 0433     		adds	r3, r3, #4
 450              		.loc 2 61 43
 451 0018 7B61     		str	r3, [r7, #20]
  62:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) txBuf;
 452              		.loc 2 62 41
 453 001a 7B68     		ldr	r3, [r7, #4]
 454              		.loc 2 62 39
 455 001c BB61     		str	r3, [r7, #24]
  63:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 456              		.loc 2 63 28
 457 001e 1023     		movs	r3, #16
 458 0020 FB61     		str	r3, [r7, #28]
  64:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_BufferSize = len;
 459              		.loc 2 64 35
 460 0022 3B68     		ldr	r3, [r7]
 461 0024 3B62     		str	r3, [r7, #32]
  65:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 462              		.loc 2 65 38
 463 0026 0023     		movs	r3, #0
 464 0028 7B62     		str	r3, [r7, #36]
  66:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 465              		.loc 2 66 34
 466 002a 8023     		movs	r3, #128
 467 002c BB62     		str	r3, [r7, #40]
  67:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 468              		.loc 2 67 43
 469 002e 0023     		movs	r3, #0
 470 0030 FB62     		str	r3, [r7, #44]
  68:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 471              		.loc 2 68 39
 472 0032 0023     		movs	r3, #0
 473 0034 3B63     		str	r3, [r7, #48]
  69:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 474              		.loc 2 69 29
 475 0036 0023     		movs	r3, #0
 476 0038 7B63     		str	r3, [r7, #52]
  70:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 477              		.loc 2 70 33
 478 003a 4FF44053 		mov	r3, #12288
 479 003e BB63     		str	r3, [r7, #56]
  71:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 480              		.loc 2 71 28
 481 0040 0023     		movs	r3, #0
 482 0042 FB63     		str	r3, [r7, #60]
  72:common/lib.stm32/uart.c **** 	DMA_Init(dmatx, &DMA_InitStructure);
 483              		.loc 2 72 2
 484 0044 07F11403 		add	r3, r7, #20
 485 0048 1946     		mov	r1, r3
 486 004a B868     		ldr	r0, [r7, #8]
 487 004c 054B     		ldr	r3, .L25+4
 488 004e 9847     		blx	r3
 489              	.LVL2:
  73:common/lib.stm32/uart.c **** 	DMA_Cmd(dmatx, ENABLE);
 490              		.loc 2 73 2
 491 0050 0121     		movs	r1, #1
 492 0052 B868     		ldr	r0, [r7, #8]
 493 0054 044B     		ldr	r3, .L25+8
 494 0056 9847     		blx	r3
 495              	.LVL3:
  74:common/lib.stm32/uart.c **** 
  75:common/lib.stm32/uart.c **** }
 496              		.loc 2 75 1
 497 0058 00BF     		nop
 498 005a 4037     		adds	r7, r7, #64
 499              	.LCFI38:
 500              		.cfi_def_cfa_offset 8
 501 005c BD46     		mov	sp, r7
 502              	.LCFI39:
 503              		.cfi_def_cfa_register 13
 504              		@ sp needed
 505 005e 80BD     		pop	{r7, pc}
 506              	.L26:
 507              		.align	2
 508              	.L25:
 509 0060 00000000 		.word	DMA_DeInit
 510 0064 00000000 		.word	DMA_Init
 511 0068 00000000 		.word	DMA_Cmd
 512              		.cfi_endproc
 513              	.LFE32:
 515              		.section	.text.uart4RxDMAConfiguration,"ax",%progbits
 516              		.align	1
 517              		.global	uart4RxDMAConfiguration
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 522              	uart4RxDMAConfiguration:
 523              	.LFB33:
  76:common/lib.stm32/uart.c **** 
  77:common/lib.stm32/uart.c **** /**
  78:common/lib.stm32/uart.c ****  * @brief  Configures the DMA.
  79:common/lib.stm32/uart.c ****  * @param  uart, dmatx,dmarx,interrupt enable
  80:common/lib.stm32/uart.c ****  * @retval : None
  81:common/lib.stm32/uart.c ****  */
  82:common/lib.stm32/uart.c **** void uart4RxDMAConfiguration(USART_TypeDef *uart, DMA_Channel_TypeDef *dmarx,
  83:common/lib.stm32/uart.c **** 		unsigned char *rxBuf, uint32_t len)
  84:common/lib.stm32/uart.c **** {
 524              		.loc 2 84 1
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 64
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0000 80B5     		push	{r7, lr}
 529              	.LCFI40:
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 7, -8
 532              		.cfi_offset 14, -4
 533 0002 90B0     		sub	sp, sp, #64
 534              	.LCFI41:
 535              		.cfi_def_cfa_offset 72
 536 0004 00AF     		add	r7, sp, #0
 537              	.LCFI42:
 538              		.cfi_def_cfa_register 7
 539 0006 F860     		str	r0, [r7, #12]
 540 0008 B960     		str	r1, [r7, #8]
 541 000a 7A60     		str	r2, [r7, #4]
 542 000c 3B60     		str	r3, [r7]
  85:common/lib.stm32/uart.c **** 	DMA_InitTypeDef DMA_InitStructure;
  86:common/lib.stm32/uart.c **** 
  87:common/lib.stm32/uart.c **** 	/* DMA1 Channel (triggered by USART1 Rx event) Config */
  88:common/lib.stm32/uart.c **** 	DMA_DeInit(dmarx);
 543              		.loc 2 88 2
 544 000e B868     		ldr	r0, [r7, #8]
 545 0010 134B     		ldr	r3, .L28
 546 0012 9847     		blx	r3
 547              	.LVL4:
  89:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &uart->DR;
 548              		.loc 2 89 56
 549 0014 FB68     		ldr	r3, [r7, #12]
 550 0016 0433     		adds	r3, r3, #4
 551              		.loc 2 89 43
 552 0018 7B61     		str	r3, [r7, #20]
  90:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) rxBuf;
 553              		.loc 2 90 41
 554 001a 7B68     		ldr	r3, [r7, #4]
 555              		.loc 2 90 39
 556 001c BB61     		str	r3, [r7, #24]
  91:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 557              		.loc 2 91 28
 558 001e 0023     		movs	r3, #0
 559 0020 FB61     		str	r3, [r7, #28]
  92:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_BufferSize = len;
 560              		.loc 2 92 35
 561 0022 3B68     		ldr	r3, [r7]
 562 0024 3B62     		str	r3, [r7, #32]
  93:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 563              		.loc 2 93 38
 564 0026 0023     		movs	r3, #0
 565 0028 7B62     		str	r3, [r7, #36]
  94:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 566              		.loc 2 94 34
 567 002a 8023     		movs	r3, #128
 568 002c BB62     		str	r3, [r7, #40]
  95:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 569              		.loc 2 95 43
 570 002e 0023     		movs	r3, #0
 571 0030 FB62     		str	r3, [r7, #44]
  96:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 572              		.loc 2 96 39
 573 0032 0023     		movs	r3, #0
 574 0034 3B63     		str	r3, [r7, #48]
  97:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 575              		.loc 2 97 29
 576 0036 2023     		movs	r3, #32
 577 0038 7B63     		str	r3, [r7, #52]
  98:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 578              		.loc 2 98 33
 579 003a 4FF44053 		mov	r3, #12288
 580 003e BB63     		str	r3, [r7, #56]
  99:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 581              		.loc 2 99 28
 582 0040 0023     		movs	r3, #0
 583 0042 FB63     		str	r3, [r7, #60]
 100:common/lib.stm32/uart.c **** 	DMA_Init(dmarx, &DMA_InitStructure);
 584              		.loc 2 100 2
 585 0044 07F11403 		add	r3, r7, #20
 586 0048 1946     		mov	r1, r3
 587 004a B868     		ldr	r0, [r7, #8]
 588 004c 054B     		ldr	r3, .L28+4
 589 004e 9847     		blx	r3
 590              	.LVL5:
 101:common/lib.stm32/uart.c **** 	DMA_Cmd(dmarx, ENABLE);
 591              		.loc 2 101 2
 592 0050 0121     		movs	r1, #1
 593 0052 B868     		ldr	r0, [r7, #8]
 594 0054 044B     		ldr	r3, .L28+8
 595 0056 9847     		blx	r3
 596              	.LVL6:
 102:common/lib.stm32/uart.c **** 
 103:common/lib.stm32/uart.c **** }
 597              		.loc 2 103 1
 598 0058 00BF     		nop
 599 005a 4037     		adds	r7, r7, #64
 600              	.LCFI43:
 601              		.cfi_def_cfa_offset 8
 602 005c BD46     		mov	sp, r7
 603              	.LCFI44:
 604              		.cfi_def_cfa_register 13
 605              		@ sp needed
 606 005e 80BD     		pop	{r7, pc}
 607              	.L29:
 608              		.align	2
 609              	.L28:
 610 0060 00000000 		.word	DMA_DeInit
 611 0064 00000000 		.word	DMA_Init
 612 0068 00000000 		.word	DMA_Cmd
 613              		.cfi_endproc
 614              	.LFE33:
 616              		.section	.text.uart3Init,"ax",%progbits
 617              		.align	1
 618              		.global	uart3Init
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 623              	uart3Init:
 624              	.LFB34:
 104:common/lib.stm32/uart.c **** void uart3Init(uint32_t baudrate)
 105:common/lib.stm32/uart.c **** {
 625              		.loc 2 105 1
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 32
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629 0000 90B5     		push	{r4, r7, lr}
 630              	.LCFI45:
 631              		.cfi_def_cfa_offset 12
 632              		.cfi_offset 4, -12
 633              		.cfi_offset 7, -8
 634              		.cfi_offset 14, -4
 635 0002 89B0     		sub	sp, sp, #36
 636              	.LCFI46:
 637              		.cfi_def_cfa_offset 48
 638 0004 00AF     		add	r7, sp, #0
 639              	.LCFI47:
 640              		.cfi_def_cfa_register 7
 641 0006 7860     		str	r0, [r7, #4]
 106:common/lib.stm32/uart.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 107:common/lib.stm32/uart.c **** 
 108:common/lib.stm32/uart.c **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2,ENABLE);
 642              		.loc 2 108 2
 643 0008 0121     		movs	r1, #1
 644 000a 0220     		movs	r0, #2
 645 000c 304B     		ldr	r3, .L31
 646 000e 9847     		blx	r3
 647              	.LVL7:
 109:common/lib.stm32/uart.c **** 
 110:common/lib.stm32/uart.c **** 	//
 111:common/lib.stm32/uart.c **** 		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 648              		.loc 2 111 31
 649 0010 4FF48063 		mov	r3, #1024
 650 0014 BB83     		strh	r3, [r7, #28]	@ movhi
 112:common/lib.stm32/uart.c **** 		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 651              		.loc 2 112 33
 652 0016 0323     		movs	r3, #3
 653 0018 BB77     		strb	r3, [r7, #30]
 113:common/lib.stm32/uart.c **** 		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 654              		.loc 2 113 32
 655 001a 1823     		movs	r3, #24
 656 001c FB77     		strb	r3, [r7, #31]
 114:common/lib.stm32/uart.c **** 		GPIO_Init(GPIOC, &GPIO_InitStructure);
 657              		.loc 2 114 3
 658 001e 07F11C03 		add	r3, r7, #28
 659 0022 1946     		mov	r1, r3
 660 0024 2B48     		ldr	r0, .L31+4
 661 0026 2C4B     		ldr	r3, .L31+8
 662 0028 9847     		blx	r3
 663              	.LVL8:
 115:common/lib.stm32/uart.c **** 
 116:common/lib.stm32/uart.c **** 		/* Configure USART1 RX (PA.10) as input floating */
 117:common/lib.stm32/uart.c **** 		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 664              		.loc 2 117 31
 665 002a 4FF40063 		mov	r3, #2048
 666 002e BB83     		strh	r3, [r7, #28]	@ movhi
 118:common/lib.stm32/uart.c **** 		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 667              		.loc 2 118 32
 668 0030 0423     		movs	r3, #4
 669 0032 FB77     		strb	r3, [r7, #31]
 119:common/lib.stm32/uart.c **** 		GPIO_Init(GPIOC, &GPIO_InitStructure);
 670              		.loc 2 119 3
 671 0034 07F11C03 		add	r3, r7, #28
 672 0038 1946     		mov	r1, r3
 673 003a 2648     		ldr	r0, .L31+4
 674 003c 264B     		ldr	r3, .L31+8
 675 003e 9847     		blx	r3
 676              	.LVL9:
 120:common/lib.stm32/uart.c **** 
 121:common/lib.stm32/uart.c **** 	USART_DeInit(UART4);
 677              		.loc 2 121 2
 678 0040 2648     		ldr	r0, .L31+12
 679 0042 274B     		ldr	r3, .L31+16
 680 0044 9847     		blx	r3
 681              	.LVL10:
 122:common/lib.stm32/uart.c **** 
 123:common/lib.stm32/uart.c **** 
 124:common/lib.stm32/uart.c **** 	USART_InitTypeDef USART_InitStructure;
 125:common/lib.stm32/uart.c **** 
 126:common/lib.stm32/uart.c **** 	/* Enable AFIO,  clocks */
 127:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 682              		.loc 2 127 2
 683 0046 0121     		movs	r1, #1
 684 0048 0120     		movs	r0, #1
 685 004a 264B     		ldr	r3, .L31+20
 686 004c 9847     		blx	r3
 687              	.LVL11:
 128:common/lib.stm32/uart.c **** 
 129:common/lib.stm32/uart.c **** 	/* Enable GPIO clocks */
 130:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOA
 688              		.loc 2 130 2
 689 004e 0121     		movs	r1, #1
 690 0050 1C20     		movs	r0, #28
 691 0052 244B     		ldr	r3, .L31+20
 692 0054 9847     		blx	r3
 693              	.LVL12:
 131:common/lib.stm32/uart.c **** 	|RCC_APB2Periph_GPIOB, ENABLE);
 132:common/lib.stm32/uart.c **** 
 133:common/lib.stm32/uart.c **** 	/* Enable UART4,  clocks */
 134:common/lib.stm32/uart.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 694              		.loc 2 134 2
 695 0056 0121     		movs	r1, #1
 696 0058 4FF40020 		mov	r0, #524288
 697 005c 224B     		ldr	r3, .L31+24
 698 005e 9847     		blx	r3
 699              	.LVL13:
 135:common/lib.stm32/uart.c **** //	GPIO_PinRemapConfig(GPIO_PartialRemap_UART4,ENABLE);
 136:common/lib.stm32/uart.c **** 
 137:common/lib.stm32/uart.c **** 
 138:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_BaudRate = baudrate;
 700              		.loc 2 138 37
 701 0060 7B68     		ldr	r3, [r7, #4]
 702 0062 FB60     		str	r3, [r7, #12]
 139:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 703              		.loc 2 139 39
 704 0064 0023     		movs	r3, #0
 705 0066 3B82     		strh	r3, [r7, #16]	@ movhi
 140:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 706              		.loc 2 140 37
 707 0068 0023     		movs	r3, #0
 708 006a 7B82     		strh	r3, [r7, #18]	@ movhi
 141:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 709              		.loc 2 141 35
 710 006c 0023     		movs	r3, #0
 711 006e BB82     		strh	r3, [r7, #20]	@ movhi
 142:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_HardwareFlowControl
 143:common/lib.stm32/uart.c **** 			= USART_HardwareFlowControl_None;
 712              		.loc 2 143 4
 713 0070 0023     		movs	r3, #0
 714 0072 3B83     		strh	r3, [r7, #24]	@ movhi
 144:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 715              		.loc 2 144 33
 716 0074 0C23     		movs	r3, #12
 717 0076 FB82     		strh	r3, [r7, #22]	@ movhi
 145:common/lib.stm32/uart.c **** 	/* Configure UART4 */
 146:common/lib.stm32/uart.c **** 	USART_Init(UART4, &USART_InitStructure);
 718              		.loc 2 146 2
 719 0078 07F10C03 		add	r3, r7, #12
 720 007c 1946     		mov	r1, r3
 721 007e 1748     		ldr	r0, .L31+12
 722 0080 1A4B     		ldr	r3, .L31+28
 723 0082 9847     		blx	r3
 724              	.LVL14:
 147:common/lib.stm32/uart.c **** 
 148:common/lib.stm32/uart.c **** 	USART_ClearFlag(UART4, USART_FLAG_CTS | USART_FLAG_LBD  |
 725              		.loc 2 148 2
 726 0084 4FF45871 		mov	r1, #864
 727 0088 1448     		ldr	r0, .L31+12
 728 008a 194B     		ldr	r3, .L31+32
 729 008c 9847     		blx	r3
 730              	.LVL15:
 149:common/lib.stm32/uart.c **** 						USART_FLAG_TC  | USART_FLAG_RXNE );
 150:common/lib.stm32/uart.c **** 
 151:common/lib.stm32/uart.c **** 	uart4RxDMAConfiguration(UART4, UART4_RX_DMA, u1Fifo.rxBuf,UARTRX_FIFO_SIZE);
 731              		.loc 2 151 2
 732 008e 4FF48063 		mov	r3, #1024
 733 0092 184A     		ldr	r2, .L31+36
 734 0094 1849     		ldr	r1, .L31+40
 735 0096 1148     		ldr	r0, .L31+12
 736 0098 184C     		ldr	r4, .L31+44
 737 009a A047     		blx	r4
 738              	.LVL16:
 152:common/lib.stm32/uart.c **** 
 153:common/lib.stm32/uart.c **** 	USART_DMACmd(UART4, USART_DMAReq_Tx, ENABLE);
 739              		.loc 2 153 2
 740 009c 0122     		movs	r2, #1
 741 009e 8021     		movs	r1, #128
 742 00a0 0E48     		ldr	r0, .L31+12
 743 00a2 174B     		ldr	r3, .L31+48
 744 00a4 9847     		blx	r3
 745              	.LVL17:
 154:common/lib.stm32/uart.c **** 	/* Enable USART_Rx DMA Receive request */
 155:common/lib.stm32/uart.c **** 	USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE);
 746              		.loc 2 155 2
 747 00a6 0122     		movs	r2, #1
 748 00a8 4021     		movs	r1, #64
 749 00aa 0C48     		ldr	r0, .L31+12
 750 00ac 144B     		ldr	r3, .L31+48
 751 00ae 9847     		blx	r3
 752              	.LVL18:
 156:common/lib.stm32/uart.c **** 
 157:common/lib.stm32/uart.c **** 	  /* Enable USART_Rx Receive interrupt */
 158:common/lib.stm32/uart.c **** 
 159:common/lib.stm32/uart.c **** //      USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
 160:common/lib.stm32/uart.c **** 	    /* Configure UART4 interrupt */
 161:common/lib.stm32/uart.c **** 	      NVIC_SetPriority(UART4_RX_DMA_IRQn, 0x7);
 753              		.loc 2 161 8
 754 00b0 0721     		movs	r1, #7
 755 00b2 3A20     		movs	r0, #58
 756 00b4 134B     		ldr	r3, .L31+52
 757 00b6 9847     		blx	r3
 758              	.LVL19:
 162:common/lib.stm32/uart.c **** 		  NVIC_EnableIRQ(UART4_RX_DMA_IRQn);
 759              		.loc 2 162 5
 760 00b8 3A20     		movs	r0, #58
 761 00ba 134B     		ldr	r3, .L31+56
 762 00bc 9847     		blx	r3
 763              	.LVL20:
 163:common/lib.stm32/uart.c **** 		/* Enable the USART3 */
 164:common/lib.stm32/uart.c **** 	/* Enable the UART4 */
 165:common/lib.stm32/uart.c **** 	USART_Cmd(UART4, ENABLE);
 764              		.loc 2 165 2
 765 00be 0121     		movs	r1, #1
 766 00c0 0648     		ldr	r0, .L31+12
 767 00c2 124B     		ldr	r3, .L31+60
 768 00c4 9847     		blx	r3
 769              	.LVL21:
 166:common/lib.stm32/uart.c **** }
 770              		.loc 2 166 1
 771 00c6 00BF     		nop
 772 00c8 2437     		adds	r7, r7, #36
 773              	.LCFI48:
 774              		.cfi_def_cfa_offset 12
 775 00ca BD46     		mov	sp, r7
 776              	.LCFI49:
 777              		.cfi_def_cfa_register 13
 778              		@ sp needed
 779 00cc 90BD     		pop	{r4, r7, pc}
 780              	.L32:
 781 00ce 00BF     		.align	2
 782              	.L31:
 783 00d0 00000000 		.word	RCC_AHBPeriphClockCmd
 784 00d4 00100140 		.word	1073811456
 785 00d8 00000000 		.word	GPIO_Init
 786 00dc 004C0040 		.word	1073761280
 787 00e0 00000000 		.word	USART_DeInit
 788 00e4 00000000 		.word	RCC_APB2PeriphClockCmd
 789 00e8 00000000 		.word	RCC_APB1PeriphClockCmd
 790 00ec 00000000 		.word	USART_Init
 791 00f0 00000000 		.word	USART_ClearFlag
 792 00f4 0C000000 		.word	u1Fifo+12
 793 00f8 30040240 		.word	1073873968
 794 00fc 00000000 		.word	uart4RxDMAConfiguration
 795 0100 00000000 		.word	USART_DMACmd
 796 0104 00000000 		.word	NVIC_SetPriority
 797 0108 00000000 		.word	NVIC_EnableIRQ
 798 010c 00000000 		.word	USART_Cmd
 799              		.cfi_endproc
 800              	.LFE34:
 802              		.section	.text.uart3FindEscapedPack,"ax",%progbits
 803              		.align	1
 804              		.global	uart3FindEscapedPack
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 809              	uart3FindEscapedPack:
 810              	.LFB35:
 167:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 168:common/lib.stm32/uart.c **** unsigned int uart3FindEscapedPack()
 169:common/lib.stm32/uart.c **** {
 811              		.loc 2 169 1
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 8
 814              		@ frame_needed = 1, uses_anonymous_args = 0
 815 0000 80B5     		push	{r7, lr}
 816              	.LCFI50:
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 820 0002 82B0     		sub	sp, sp, #8
 821              	.LCFI51:
 822              		.cfi_def_cfa_offset 16
 823 0004 00AF     		add	r7, sp, #0
 824              	.LCFI52:
 825              		.cfi_def_cfa_register 7
 170:common/lib.stm32/uart.c **** 	unsigned int i = u1Fifo.rxCurrent;
 826              		.loc 2 170 15
 827 0006 1D4B     		ldr	r3, .L39
 828 0008 1B68     		ldr	r3, [r3]
 829 000a 7B60     		str	r3, [r7, #4]
 171:common/lib.stm32/uart.c **** 
 172:common/lib.stm32/uart.c **** 	while (i != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(UART4_RX_DMA)))
 830              		.loc 2 172 8
 831 000c 26E0     		b	.L34
 832              	.L38:
 173:common/lib.stm32/uart.c **** 	{
 174:common/lib.stm32/uart.c **** 
 175:common/lib.stm32/uart.c **** 
 176:common/lib.stm32/uart.c **** 		if (u1Fifo.rxBuf[i] == 0x55)
 833              		.loc 2 176 19
 834 000e 1B4A     		ldr	r2, .L39
 835 0010 7B68     		ldr	r3, [r7, #4]
 836 0012 1344     		add	r3, r3, r2
 837 0014 0C33     		adds	r3, r3, #12
 838 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 839              		.loc 2 176 6
 840 0018 552B     		cmp	r3, #85
 841 001a 18D1     		bne	.L35
 177:common/lib.stm32/uart.c **** 		{
 178:common/lib.stm32/uart.c **** 			i++;
 842              		.loc 2 178 5
 843 001c 7B68     		ldr	r3, [r7, #4]
 844 001e 0133     		adds	r3, r3, #1
 845 0020 7B60     		str	r3, [r7, #4]
 179:common/lib.stm32/uart.c **** 			i &= UARTRX_FIFO_SIZE_MASK;
 846              		.loc 2 179 6
 847 0022 7B68     		ldr	r3, [r7, #4]
 848 0024 C3F30903 		ubfx	r3, r3, #0, #10
 849 0028 7B60     		str	r3, [r7, #4]
 180:common/lib.stm32/uart.c **** 			if (i == (UART4_RX_DMA->CMAR - (uint32_t) &u1Fifo.rxBuf[0]))
 850              		.loc 2 180 26
 851 002a 154B     		ldr	r3, .L39+4
 852 002c DB68     		ldr	r3, [r3, #12]
 853              		.loc 2 180 35
 854 002e 154A     		ldr	r2, .L39+8
 855              		.loc 2 180 33
 856 0030 9B1A     		subs	r3, r3, r2
 857              		.loc 2 180 7
 858 0032 7A68     		ldr	r2, [r7, #4]
 859 0034 9A42     		cmp	r2, r3
 860 0036 01D1     		bne	.L36
 181:common/lib.stm32/uart.c **** 				return 0;//return (isStart & isEnd);
 861              		.loc 2 181 12
 862 0038 0023     		movs	r3, #0
 863 003a 1AE0     		b	.L37
 864              	.L36:
 182:common/lib.stm32/uart.c **** 
 183:common/lib.stm32/uart.c **** 			if (u1Fifo.rxBuf[i] == 0x03)
 865              		.loc 2 183 20
 866 003c 0F4A     		ldr	r2, .L39
 867 003e 7B68     		ldr	r3, [r7, #4]
 868 0040 1344     		add	r3, r3, r2
 869 0042 0C33     		adds	r3, r3, #12
 870 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 871              		.loc 2 183 7
 872 0046 032B     		cmp	r3, #3
 873 0048 01D1     		bne	.L35
 184:common/lib.stm32/uart.c **** 			{
 185:common/lib.stm32/uart.c **** 				return 1;
 874              		.loc 2 185 12
 875 004a 0123     		movs	r3, #1
 876 004c 11E0     		b	.L37
 877              	.L35:
 186:common/lib.stm32/uart.c **** 			}
 187:common/lib.stm32/uart.c **** 		}
 188:common/lib.stm32/uart.c **** 		i++;
 878              		.loc 2 188 4
 879 004e 7B68     		ldr	r3, [r7, #4]
 880 0050 0133     		adds	r3, r3, #1
 881 0052 7B60     		str	r3, [r7, #4]
 189:common/lib.stm32/uart.c **** 		i &= UARTRX_FIFO_SIZE_MASK;
 882              		.loc 2 189 5
 883 0054 7B68     		ldr	r3, [r7, #4]
 884 0056 C3F30903 		ubfx	r3, r3, #0, #10
 885 005a 7B60     		str	r3, [r7, #4]
 886              	.L34:
 172:common/lib.stm32/uart.c **** 	{
 887              		.loc 2 172 34
 888 005c 0848     		ldr	r0, .L39+4
 889 005e 0A4B     		ldr	r3, .L39+12
 890 0060 9847     		blx	r3
 891              	.LVL22:
 892 0062 0346     		mov	r3, r0
 172:common/lib.stm32/uart.c **** 	{
 893              		.loc 2 172 32
 894 0064 C3F58063 		rsb	r3, r3, #1024
 895 0068 1A46     		mov	r2, r3
 172:common/lib.stm32/uart.c **** 	{
 896              		.loc 2 172 8
 897 006a 7B68     		ldr	r3, [r7, #4]
 898 006c 9342     		cmp	r3, r2
 899 006e CED1     		bne	.L38
 190:common/lib.stm32/uart.c **** 	}
 191:common/lib.stm32/uart.c **** 	return 0;
 900              		.loc 2 191 9
 901 0070 0023     		movs	r3, #0
 902              	.L37:
 192:common/lib.stm32/uart.c **** 
 193:common/lib.stm32/uart.c **** }
 903              		.loc 2 193 1
 904 0072 1846     		mov	r0, r3
 905 0074 0837     		adds	r7, r7, #8
 906              	.LCFI53:
 907              		.cfi_def_cfa_offset 8
 908 0076 BD46     		mov	sp, r7
 909              	.LCFI54:
 910              		.cfi_def_cfa_register 13
 911              		@ sp needed
 912 0078 80BD     		pop	{r7, pc}
 913              	.L40:
 914 007a 00BF     		.align	2
 915              	.L39:
 916 007c 00000000 		.word	u1Fifo
 917 0080 30040240 		.word	1073873968
 918 0084 0C000000 		.word	u1Fifo+12
 919 0088 00000000 		.word	DMA_GetCurrDataCounter
 920              		.cfi_endproc
 921              	.LFE35:
 923              		.section	.text.uart3GetChar,"ax",%progbits
 924              		.align	1
 925              		.global	uart3GetChar
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 930              	uart3GetChar:
 931              	.LFB36:
 194:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 195:common/lib.stm32/uart.c **** 
 196:common/lib.stm32/uart.c **** int uart3GetChar(unsigned char *ch)
 197:common/lib.stm32/uart.c **** {
 932              		.loc 2 197 1
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 8
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 90B5     		push	{r4, r7, lr}
 937              	.LCFI55:
 938              		.cfi_def_cfa_offset 12
 939              		.cfi_offset 4, -12
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 83B0     		sub	sp, sp, #12
 943              	.LCFI56:
 944              		.cfi_def_cfa_offset 24
 945 0004 00AF     		add	r7, sp, #0
 946              	.LCFI57:
 947              		.cfi_def_cfa_register 7
 948 0006 7860     		str	r0, [r7, #4]
 198:common/lib.stm32/uart.c **** 	if (u1Fifo.rxCurrent != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(UART4_RX_DMA)))
 949              		.loc 2 198 12
 950 0008 114B     		ldr	r3, .L44
 951 000a 1C68     		ldr	r4, [r3]
 952              		.loc 2 198 46
 953 000c 1148     		ldr	r0, .L44+4
 954 000e 124B     		ldr	r3, .L44+8
 955 0010 9847     		blx	r3
 956              	.LVL23:
 957 0012 0346     		mov	r3, r0
 958              		.loc 2 198 44
 959 0014 C3F58063 		rsb	r3, r3, #1024
 960              		.loc 2 198 5
 961 0018 9C42     		cmp	r4, r3
 962 001a 13D0     		beq	.L42
 199:common/lib.stm32/uart.c **** 	{
 200:common/lib.stm32/uart.c **** 		*ch = u1Fifo.rxBuf[u1Fifo.rxCurrent];
 963              		.loc 2 200 28
 964 001c 0C4B     		ldr	r3, .L44
 965 001e 1B68     		ldr	r3, [r3]
 966              		.loc 2 200 21
 967 0020 0B4A     		ldr	r2, .L44
 968 0022 1344     		add	r3, r3, r2
 969 0024 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 970              		.loc 2 200 7
 971 0026 7B68     		ldr	r3, [r7, #4]
 972 0028 1A70     		strb	r2, [r3]
 201:common/lib.stm32/uart.c **** 		u1Fifo.rxCurrent++;
 973              		.loc 2 201 9
 974 002a 094B     		ldr	r3, .L44
 975 002c 1B68     		ldr	r3, [r3]
 976              		.loc 2 201 19
 977 002e 0133     		adds	r3, r3, #1
 978 0030 074A     		ldr	r2, .L44
 979 0032 1360     		str	r3, [r2]
 202:common/lib.stm32/uart.c **** 		u1Fifo.rxCurrent &= UARTRX_FIFO_SIZE_MASK;
 980              		.loc 2 202 20
 981 0034 064B     		ldr	r3, .L44
 982 0036 1B68     		ldr	r3, [r3]
 983 0038 C3F30903 		ubfx	r3, r3, #0, #10
 984 003c 044A     		ldr	r2, .L44
 985 003e 1360     		str	r3, [r2]
 203:common/lib.stm32/uart.c **** 		return 1;
 986              		.loc 2 203 10
 987 0040 0123     		movs	r3, #1
 988 0042 00E0     		b	.L43
 989              	.L42:
 204:common/lib.stm32/uart.c **** 	}
 205:common/lib.stm32/uart.c **** 	return 0;
 990              		.loc 2 205 9
 991 0044 0023     		movs	r3, #0
 992              	.L43:
 206:common/lib.stm32/uart.c **** }
 993              		.loc 2 206 1
 994 0046 1846     		mov	r0, r3
 995 0048 0C37     		adds	r7, r7, #12
 996              	.LCFI58:
 997              		.cfi_def_cfa_offset 12
 998 004a BD46     		mov	sp, r7
 999              	.LCFI59:
 1000              		.cfi_def_cfa_register 13
 1001              		@ sp needed
 1002 004c 90BD     		pop	{r4, r7, pc}
 1003              	.L45:
 1004 004e 00BF     		.align	2
 1005              	.L44:
 1006 0050 00000000 		.word	u1Fifo
 1007 0054 30040240 		.word	1073873968
 1008 0058 00000000 		.word	DMA_GetCurrDataCounter
 1009              		.cfi_endproc
 1010              	.LFE36:
 1012              		.section	.text.uart3PutChar,"ax",%progbits
 1013              		.align	1
 1014              		.global	uart3PutChar
 1015              		.syntax unified
 1016              		.thumb
 1017              		.thumb_func
 1019              	uart3PutChar:
 1020              	.LFB37:
 207:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 208:common/lib.stm32/uart.c **** int uart3PutChar(unsigned char ch)
 209:common/lib.stm32/uart.c **** {
 1021              		.loc 2 209 1
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 8
 1024              		@ frame_needed = 1, uses_anonymous_args = 0
 1025              		@ link register save eliminated.
 1026 0000 80B4     		push	{r7}
 1027              	.LCFI60:
 1028              		.cfi_def_cfa_offset 4
 1029              		.cfi_offset 7, -4
 1030 0002 83B0     		sub	sp, sp, #12
 1031              	.LCFI61:
 1032              		.cfi_def_cfa_offset 16
 1033 0004 00AF     		add	r7, sp, #0
 1034              	.LCFI62:
 1035              		.cfi_def_cfa_register 7
 1036 0006 0346     		mov	r3, r0
 1037 0008 FB71     		strb	r3, [r7, #7]
 210:common/lib.stm32/uart.c **** 
 211:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 0;
 212:common/lib.stm32/uart.c **** 	u1Fifo.txBufB[u1Fifo.txCurrentEnd] = ch;
 1038              		.loc 2 212 22
 1039 000a 154B     		ldr	r3, .L49
 1040 000c 9B68     		ldr	r3, [r3, #8]
 1041              		.loc 2 212 37
 1042 000e 144A     		ldr	r2, .L49
 1043 0010 1344     		add	r3, r3, r2
 1044 0012 FA79     		ldrb	r2, [r7, #7]
 1045 0014 83F84C24 		strb	r2, [r3, #1100]
 213:common/lib.stm32/uart.c **** 	u1Fifo.txCurrentEnd++;
 1046              		.loc 2 213 8
 1047 0018 114B     		ldr	r3, .L49
 1048 001a 9B68     		ldr	r3, [r3, #8]
 1049              		.loc 2 213 21
 1050 001c 0133     		adds	r3, r3, #1
 1051 001e 104A     		ldr	r2, .L49
 1052 0020 9360     		str	r3, [r2, #8]
 214:common/lib.stm32/uart.c **** 	u1Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 1053              		.loc 2 214 22
 1054 0022 0F4B     		ldr	r3, .L49
 1055 0024 9B68     		ldr	r3, [r3, #8]
 1056 0026 C3F30903 		ubfx	r3, r3, #0, #10
 1057 002a 0D4A     		ldr	r2, .L49
 1058 002c 9360     		str	r3, [r2, #8]
 215:common/lib.stm32/uart.c **** 
 216:common/lib.stm32/uart.c **** 	if (u1Fifo.txCurrentEnd == u1Fifo.txCurrentStart)
 1059              		.loc 2 216 12
 1060 002e 0C4B     		ldr	r3, .L49
 1061 0030 9A68     		ldr	r2, [r3, #8]
 1062              		.loc 2 216 35
 1063 0032 0B4B     		ldr	r3, .L49
 1064 0034 5B68     		ldr	r3, [r3, #4]
 1065              		.loc 2 216 5
 1066 0036 9A42     		cmp	r2, r3
 1067 0038 0CD1     		bne	.L47
 217:common/lib.stm32/uart.c **** 	{
 218:common/lib.stm32/uart.c **** 		u1Fifo.txCurrentEnd--;
 1068              		.loc 2 218 9
 1069 003a 094B     		ldr	r3, .L49
 1070 003c 9B68     		ldr	r3, [r3, #8]
 1071              		.loc 2 218 22
 1072 003e 013B     		subs	r3, r3, #1
 1073 0040 074A     		ldr	r2, .L49
 1074 0042 9360     		str	r3, [r2, #8]
 219:common/lib.stm32/uart.c **** 		u1Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 1075              		.loc 2 219 23
 1076 0044 064B     		ldr	r3, .L49
 1077 0046 9B68     		ldr	r3, [r3, #8]
 1078 0048 C3F30903 		ubfx	r3, r3, #0, #10
 1079 004c 044A     		ldr	r2, .L49
 1080 004e 9360     		str	r3, [r2, #8]
 220:common/lib.stm32/uart.c **** 		//		IEC2bits.DMA4IE = 1;
 221:common/lib.stm32/uart.c **** 		return 0;
 1081              		.loc 2 221 10
 1082 0050 0023     		movs	r3, #0
 1083 0052 00E0     		b	.L48
 1084              	.L47:
 222:common/lib.stm32/uart.c **** 	}
 223:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 1;
 224:common/lib.stm32/uart.c **** 	return 1;
 1085              		.loc 2 224 9
 1086 0054 0123     		movs	r3, #1
 1087              	.L48:
 225:common/lib.stm32/uart.c **** }
 1088              		.loc 2 225 1
 1089 0056 1846     		mov	r0, r3
 1090 0058 0C37     		adds	r7, r7, #12
 1091              	.LCFI63:
 1092              		.cfi_def_cfa_offset 4
 1093 005a BD46     		mov	sp, r7
 1094              	.LCFI64:
 1095              		.cfi_def_cfa_register 13
 1096              		@ sp needed
 1097 005c 80BC     		pop	{r7}
 1098              	.LCFI65:
 1099              		.cfi_restore 7
 1100              		.cfi_def_cfa_offset 0
 1101 005e 7047     		bx	lr
 1102              	.L50:
 1103              		.align	2
 1104              	.L49:
 1105 0060 00000000 		.word	u1Fifo
 1106              		.cfi_endproc
 1107              	.LFE37:
 1109              		.section	.text.uart3TxTask,"ax",%progbits
 1110              		.align	1
 1111              		.global	uart3TxTask
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1116              	uart3TxTask:
 1117              	.LFB38:
 226:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 227:common/lib.stm32/uart.c **** void uart3TxTask()
 228:common/lib.stm32/uart.c **** {
 1118              		.loc 2 228 1
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 8
 1121              		@ frame_needed = 1, uses_anonymous_args = 0
 1122 0000 90B5     		push	{r4, r7, lr}
 1123              	.LCFI66:
 1124              		.cfi_def_cfa_offset 12
 1125              		.cfi_offset 4, -12
 1126              		.cfi_offset 7, -8
 1127              		.cfi_offset 14, -4
 1128 0002 85B0     		sub	sp, sp, #20
 1129              	.LCFI67:
 1130              		.cfi_def_cfa_offset 32
 1131 0004 02AF     		add	r7, sp, #8
 1132              	.LCFI68:
 1133              		.cfi_def_cfa 7, 24
 229:common/lib.stm32/uart.c **** 	unsigned int cnt = 0;
 1134              		.loc 2 229 15
 1135 0006 0023     		movs	r3, #0
 1136 0008 7B60     		str	r3, [r7, #4]
 230:common/lib.stm32/uart.c ****   // If DMA COMPLITE
 231:common/lib.stm32/uart.c **** 	if ((UART4_TX_DMA->CCR & ((uint32_t) 0x00000001)) == 0)
 1137              		.loc 2 231 19
 1138 000a 234B     		ldr	r3, .L57
 1139 000c 1B68     		ldr	r3, [r3]
 1140              		.loc 2 231 25
 1141 000e 03F00103 		and	r3, r3, #1
 1142              		.loc 2 231 5
 1143 0012 002B     		cmp	r3, #0
 1144 0014 3BD1     		bne	.L56
 232:common/lib.stm32/uart.c **** 	{
 233:common/lib.stm32/uart.c **** 		while ((u1Fifo.txCurrentStart != u1Fifo.txCurrentEnd) && (cnt
 1145              		.loc 2 233 9
 1146 0016 1AE0     		b	.L53
 1147              	.L55:
 234:common/lib.stm32/uart.c **** 				< UARTTX_FIFO_SIZE))
 235:common/lib.stm32/uart.c **** 	{
 236:common/lib.stm32/uart.c **** 			u1Fifo.txBuf[cnt] = u1Fifo.txBufB[u1Fifo.txCurrentStart];
 1148              		.loc 2 236 44
 1149 0018 204B     		ldr	r3, .L57+4
 1150 001a 5B68     		ldr	r3, [r3, #4]
 1151              		.loc 2 236 37
 1152 001c 1F4A     		ldr	r2, .L57+4
 1153 001e 1344     		add	r3, r3, r2
 1154 0020 93F84C14 		ldrb	r1, [r3, #1100]	@ zero_extendqisi2
 1155              		.loc 2 236 22
 1156 0024 1D4A     		ldr	r2, .L57+4
 1157 0026 7B68     		ldr	r3, [r7, #4]
 1158 0028 1344     		add	r3, r3, r2
 1159 002a 03F20C43 		addw	r3, r3, #1036
 1160 002e 0A46     		mov	r2, r1
 1161 0030 1A70     		strb	r2, [r3]
 237:common/lib.stm32/uart.c **** 			u1Fifo.txCurrentStart++;
 1162              		.loc 2 237 10
 1163 0032 1A4B     		ldr	r3, .L57+4
 1164 0034 5B68     		ldr	r3, [r3, #4]
 1165              		.loc 2 237 25
 1166 0036 0133     		adds	r3, r3, #1
 1167 0038 184A     		ldr	r2, .L57+4
 1168 003a 5360     		str	r3, [r2, #4]
 238:common/lib.stm32/uart.c **** 			u1Fifo.txCurrentStart &= UARTTX_FIFOB_SIZE_MASK;
 1169              		.loc 2 238 26
 1170 003c 174B     		ldr	r3, .L57+4
 1171 003e 5B68     		ldr	r3, [r3, #4]
 1172 0040 C3F30903 		ubfx	r3, r3, #0, #10
 1173 0044 154A     		ldr	r2, .L57+4
 1174 0046 5360     		str	r3, [r2, #4]
 239:common/lib.stm32/uart.c **** 			cnt++;
 1175              		.loc 2 239 7
 1176 0048 7B68     		ldr	r3, [r7, #4]
 1177 004a 0133     		adds	r3, r3, #1
 1178 004c 7B60     		str	r3, [r7, #4]
 1179              	.L53:
 233:common/lib.stm32/uart.c **** 				< UARTTX_FIFO_SIZE))
 1180              		.loc 2 233 17
 1181 004e 134B     		ldr	r3, .L57+4
 1182 0050 5A68     		ldr	r2, [r3, #4]
 233:common/lib.stm32/uart.c **** 				< UARTTX_FIFO_SIZE))
 1183              		.loc 2 233 42
 1184 0052 124B     		ldr	r3, .L57+4
 1185 0054 9B68     		ldr	r3, [r3, #8]
 233:common/lib.stm32/uart.c **** 				< UARTTX_FIFO_SIZE))
 1186              		.loc 2 233 9
 1187 0056 9A42     		cmp	r2, r3
 1188 0058 02D0     		beq	.L54
 233:common/lib.stm32/uart.c **** 				< UARTTX_FIFO_SIZE))
 1189              		.loc 2 233 57 discriminator 1
 1190 005a 7B68     		ldr	r3, [r7, #4]
 1191 005c 3F2B     		cmp	r3, #63
 1192 005e DBD9     		bls	.L55
 1193              	.L54:
 240:common/lib.stm32/uart.c **** 		}
 241:common/lib.stm32/uart.c **** 		if (cnt > 0)
 1194              		.loc 2 241 6
 1195 0060 7B68     		ldr	r3, [r7, #4]
 1196 0062 002B     		cmp	r3, #0
 1197 0064 13D0     		beq	.L56
 242:common/lib.stm32/uart.c **** 		{
 243:common/lib.stm32/uart.c **** 			uart4TxDMAConfiguration(UART4, UART4_TX_DMA, u1Fifo.txBuf, cnt,	1);
 1198              		.loc 2 243 4
 1199 0066 0123     		movs	r3, #1
 1200 0068 0093     		str	r3, [sp]
 1201 006a 7B68     		ldr	r3, [r7, #4]
 1202 006c 0C4A     		ldr	r2, .L57+8
 1203 006e 0A49     		ldr	r1, .L57
 1204 0070 0C48     		ldr	r0, .L57+12
 1205 0072 0D4C     		ldr	r4, .L57+16
 1206 0074 A047     		blx	r4
 1207              	.LVL24:
 244:common/lib.stm32/uart.c **** 			DMA_ITConfig(UART4_TX_DMA, DMA_IT_TC, ENABLE);
 1208              		.loc 2 244 4
 1209 0076 0122     		movs	r2, #1
 1210 0078 0221     		movs	r1, #2
 1211 007a 0748     		ldr	r0, .L57
 1212 007c 0B4B     		ldr	r3, .L57+20
 1213 007e 9847     		blx	r3
 1214              	.LVL25:
 245:common/lib.stm32/uart.c ****            // }
 246:common/lib.stm32/uart.c **** 				/* Enable USART_Tx DMA Tansmit request */
 247:common/lib.stm32/uart.c **** 				/* Configure DMA1_Channel_Tx interrupt */
 248:common/lib.stm32/uart.c **** 				NVIC_SetPriority(UART4_TX_DMA_IRQn, 0x06);
 1215              		.loc 2 248 5
 1216 0080 0621     		movs	r1, #6
 1217 0082 3B20     		movs	r0, #59
 1218 0084 0A4B     		ldr	r3, .L57+24
 1219 0086 9847     		blx	r3
 1220              	.LVL26:
 249:common/lib.stm32/uart.c **** 				NVIC_EnableIRQ(UART4_TX_DMA_IRQn);
 1221              		.loc 2 249 5
 1222 0088 3B20     		movs	r0, #59
 1223 008a 0A4B     		ldr	r3, .L57+28
 1224 008c 9847     		blx	r3
 1225              	.LVL27:
 1226              	.L56:
 250:common/lib.stm32/uart.c **** 		}
 251:common/lib.stm32/uart.c **** 	}
 252:common/lib.stm32/uart.c **** }
 1227              		.loc 2 252 1
 1228 008e 00BF     		nop
 1229 0090 0C37     		adds	r7, r7, #12
 1230              	.LCFI69:
 1231              		.cfi_def_cfa_offset 12
 1232 0092 BD46     		mov	sp, r7
 1233              	.LCFI70:
 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 0094 90BD     		pop	{r4, r7, pc}
 1237              	.L58:
 1238 0096 00BF     		.align	2
 1239              	.L57:
 1240 0098 58040240 		.word	1073874008
 1241 009c 00000000 		.word	u1Fifo
 1242 00a0 0C040000 		.word	u1Fifo+1036
 1243 00a4 004C0040 		.word	1073761280
 1244 00a8 00000000 		.word	uart4TxDMAConfiguration
 1245 00ac 00000000 		.word	DMA_ITConfig
 1246 00b0 00000000 		.word	NVIC_SetPriority
 1247 00b4 00000000 		.word	NVIC_EnableIRQ
 1248              		.cfi_endproc
 1249              	.LFE38:
 1251              		.section	.text.uart3ReadEscaped,"ax",%progbits
 1252              		.align	1
 1253              		.global	uart3ReadEscaped
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1258              	uart3ReadEscaped:
 1259              	.LFB39:
 253:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 254:common/lib.stm32/uart.c **** unsigned int uart3ReadEscaped(unsigned char *dsn, unsigned int max_len)
 255:common/lib.stm32/uart.c **** {
 1260              		.loc 2 255 1
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 24
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264 0000 80B5     		push	{r7, lr}
 1265              	.LCFI71:
 1266              		.cfi_def_cfa_offset 8
 1267              		.cfi_offset 7, -8
 1268              		.cfi_offset 14, -4
 1269 0002 86B0     		sub	sp, sp, #24
 1270              	.LCFI72:
 1271              		.cfi_def_cfa_offset 32
 1272 0004 00AF     		add	r7, sp, #0
 1273              	.LCFI73:
 1274              		.cfi_def_cfa_register 7
 1275 0006 7860     		str	r0, [r7, #4]
 1276 0008 3960     		str	r1, [r7]
 256:common/lib.stm32/uart.c **** 	unsigned short cnt = 0, crc = 0;
 1277              		.loc 2 256 17
 1278 000a 0023     		movs	r3, #0
 1279 000c FB82     		strh	r3, [r7, #22]	@ movhi
 1280              		.loc 2 256 26
 1281 000e 0023     		movs	r3, #0
 1282 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 257:common/lib.stm32/uart.c **** 	unsigned char v, *ptr = dsn;
 1283              		.loc 2 257 20
 1284 0012 7B68     		ldr	r3, [r7, #4]
 1285 0014 3B61     		str	r3, [r7, #16]
 258:common/lib.stm32/uart.c **** 	if (uart3FindEscapedPack() == 0)
 1286              		.loc 2 258 6
 1287 0016 2B4B     		ldr	r3, .L71
 1288 0018 9847     		blx	r3
 1289              	.LVL28:
 1290 001a 0346     		mov	r3, r0
 1291              		.loc 2 258 5
 1292 001c 002B     		cmp	r3, #0
 1293 001e 3FD1     		bne	.L62
 259:common/lib.stm32/uart.c **** 	{
 260:common/lib.stm32/uart.c **** 		return 0;
 1294              		.loc 2 260 10
 1295 0020 0023     		movs	r3, #0
 1296 0022 4AE0     		b	.L70
 1297              	.L69:
 261:common/lib.stm32/uart.c **** 	}
 262:common/lib.stm32/uart.c **** 	while (uart3GetChar(&v) && (max_len > cnt))
 263:common/lib.stm32/uart.c **** 	{
 264:common/lib.stm32/uart.c **** 		if (v == 0x55)
 1298              		.loc 2 264 9
 1299 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1300              		.loc 2 264 6
 1301 0026 552B     		cmp	r3, #85
 1302 0028 2CD1     		bne	.L63
 265:common/lib.stm32/uart.c **** 		{
 266:common/lib.stm32/uart.c **** 			if (!uart3GetChar(&v))
 1303              		.loc 2 266 9
 1304 002a 07F10F03 		add	r3, r7, #15
 1305 002e 1846     		mov	r0, r3
 1306 0030 254B     		ldr	r3, .L71+4
 1307 0032 9847     		blx	r3
 1308              	.LVL29:
 1309 0034 0346     		mov	r3, r0
 1310              		.loc 2 266 7
 1311 0036 002B     		cmp	r3, #0
 1312 0038 01D1     		bne	.L64
 267:common/lib.stm32/uart.c **** 				return 0;
 1313              		.loc 2 267 12
 1314 003a 0023     		movs	r3, #0
 1315 003c 3DE0     		b	.L70
 1316              	.L64:
 268:common/lib.stm32/uart.c **** 			if (v == 0x1) // start pack here;
 1317              		.loc 2 268 10
 1318 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1319              		.loc 2 268 7
 1320 0040 012B     		cmp	r3, #1
 1321 0042 06D1     		bne	.L65
 269:common/lib.stm32/uart.c **** 			{
 270:common/lib.stm32/uart.c **** 				ptr = dsn;
 1322              		.loc 2 270 9
 1323 0044 7B68     		ldr	r3, [r7, #4]
 1324 0046 3B61     		str	r3, [r7, #16]
 271:common/lib.stm32/uart.c **** 				cnt = 0;
 1325              		.loc 2 271 9
 1326 0048 0023     		movs	r3, #0
 1327 004a FB82     		strh	r3, [r7, #22]	@ movhi
 272:common/lib.stm32/uart.c **** 				crc = 0;
 1328              		.loc 2 272 9
 1329 004c 0023     		movs	r3, #0
 1330 004e BB82     		strh	r3, [r7, #20]	@ movhi
 273:common/lib.stm32/uart.c **** 				continue;
 1331              		.loc 2 273 5
 1332 0050 26E0     		b	.L62
 1333              	.L65:
 274:common/lib.stm32/uart.c **** 			}
 275:common/lib.stm32/uart.c **** 			else if (v == 0x2)
 1334              		.loc 2 275 15
 1335 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1336              		.loc 2 275 12
 1337 0054 022B     		cmp	r3, #2
 1338 0056 02D1     		bne	.L66
 276:common/lib.stm32/uart.c **** 			{
 277:common/lib.stm32/uart.c **** 				v = 0x55;
 1339              		.loc 2 277 7
 1340 0058 5523     		movs	r3, #85
 1341 005a FB73     		strb	r3, [r7, #15]
 1342 005c 12E0     		b	.L63
 1343              	.L66:
 278:common/lib.stm32/uart.c **** 			}
 279:common/lib.stm32/uart.c **** 			else if (v == 0x3)
 1344              		.loc 2 279 15
 1345 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1346              		.loc 2 279 12
 1347 0060 032B     		cmp	r3, #3
 1348 0062 0FD1     		bne	.L63
 280:common/lib.stm32/uart.c **** 			{
 281:common/lib.stm32/uart.c **** 				ptr--;
 1349              		.loc 2 281 8
 1350 0064 3B69     		ldr	r3, [r7, #16]
 1351 0066 013B     		subs	r3, r3, #1
 1352 0068 3B61     		str	r3, [r7, #16]
 282:common/lib.stm32/uart.c **** 				if (((crc - *ptr) & 0x00FF) != *ptr)
 1353              		.loc 2 282 15
 1354 006a BB8A     		ldrh	r3, [r7, #20]
 1355              		.loc 2 282 17
 1356 006c 3A69     		ldr	r2, [r7, #16]
 1357 006e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1358              		.loc 2 282 15
 1359 0070 9B1A     		subs	r3, r3, r2
 1360              		.loc 2 282 23
 1361 0072 DBB2     		uxtb	r3, r3
 1362              		.loc 2 282 36
 1363 0074 3A69     		ldr	r2, [r7, #16]
 1364 0076 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1365              		.loc 2 282 8
 1366 0078 9342     		cmp	r3, r2
 1367 007a 01D0     		beq	.L67
 283:common/lib.stm32/uart.c **** 					return 0; // crc fail
 1368              		.loc 2 283 13
 1369 007c 0023     		movs	r3, #0
 1370 007e 1CE0     		b	.L70
 1371              	.L67:
 284:common/lib.stm32/uart.c **** 				return cnt;
 1372              		.loc 2 284 12
 1373 0080 FB8A     		ldrh	r3, [r7, #22]
 1374 0082 1AE0     		b	.L70
 1375              	.L63:
 285:common/lib.stm32/uart.c **** 			}
 286:common/lib.stm32/uart.c **** 		}
 287:common/lib.stm32/uart.c **** 		*ptr = v;
 1376              		.loc 2 287 8
 1377 0084 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1378 0086 3B69     		ldr	r3, [r7, #16]
 1379 0088 1A70     		strb	r2, [r3]
 288:common/lib.stm32/uart.c **** 		ptr++;
 1380              		.loc 2 288 6
 1381 008a 3B69     		ldr	r3, [r7, #16]
 1382 008c 0133     		adds	r3, r3, #1
 1383 008e 3B61     		str	r3, [r7, #16]
 289:common/lib.stm32/uart.c **** 		crc += v;
 1384              		.loc 2 289 7
 1385 0090 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1386 0092 9AB2     		uxth	r2, r3
 1387 0094 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1388 0096 1344     		add	r3, r3, r2
 1389 0098 BB82     		strh	r3, [r7, #20]	@ movhi
 290:common/lib.stm32/uart.c **** 		cnt++;
 1390              		.loc 2 290 6
 1391 009a FB8A     		ldrh	r3, [r7, #22]
 1392 009c 0133     		adds	r3, r3, #1
 1393 009e FB82     		strh	r3, [r7, #22]	@ movhi
 1394              	.L62:
 262:common/lib.stm32/uart.c **** 	{
 1395              		.loc 2 262 9
 1396 00a0 07F10F03 		add	r3, r7, #15
 1397 00a4 1846     		mov	r0, r3
 1398 00a6 084B     		ldr	r3, .L71+4
 1399 00a8 9847     		blx	r3
 1400              	.LVL30:
 1401 00aa 0346     		mov	r3, r0
 262:common/lib.stm32/uart.c **** 	{
 1402              		.loc 2 262 8
 1403 00ac 002B     		cmp	r3, #0
 1404 00ae 03D0     		beq	.L68
 262:common/lib.stm32/uart.c **** 	{
 1405              		.loc 2 262 38 discriminator 1
 1406 00b0 FB8A     		ldrh	r3, [r7, #22]
 262:common/lib.stm32/uart.c **** 	{
 1407              		.loc 2 262 26 discriminator 1
 1408 00b2 3A68     		ldr	r2, [r7]
 1409 00b4 9A42     		cmp	r2, r3
 1410 00b6 B5D8     		bhi	.L69
 1411              	.L68:
 291:common/lib.stm32/uart.c **** 	}
 292:common/lib.stm32/uart.c **** 	return 0; //  error here
 1412              		.loc 2 292 9
 1413 00b8 0023     		movs	r3, #0
 1414              	.L70:
 293:common/lib.stm32/uart.c **** }
 1415              		.loc 2 293 1 discriminator 1
 1416 00ba 1846     		mov	r0, r3
 1417 00bc 1837     		adds	r7, r7, #24
 1418              	.LCFI74:
 1419              		.cfi_def_cfa_offset 8
 1420 00be BD46     		mov	sp, r7
 1421              	.LCFI75:
 1422              		.cfi_def_cfa_register 13
 1423              		@ sp needed
 1424 00c0 80BD     		pop	{r7, pc}
 1425              	.L72:
 1426 00c2 00BF     		.align	2
 1427              	.L71:
 1428 00c4 00000000 		.word	uart3FindEscapedPack
 1429 00c8 00000000 		.word	uart3GetChar
 1430              		.cfi_endproc
 1431              	.LFE39:
 1433              		.section	.text.uart3Read,"ax",%progbits
 1434              		.align	1
 1435              		.global	uart3Read
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1440              	uart3Read:
 1441              	.LFB40:
 294:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 295:common/lib.stm32/uart.c **** unsigned int uart3Read(unsigned char *dsn, unsigned int max_len)
 296:common/lib.stm32/uart.c **** {
 1442              		.loc 2 296 1
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 24
 1445              		@ frame_needed = 1, uses_anonymous_args = 0
 1446 0000 80B5     		push	{r7, lr}
 1447              	.LCFI76:
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 7, -8
 1450              		.cfi_offset 14, -4
 1451 0002 86B0     		sub	sp, sp, #24
 1452              	.LCFI77:
 1453              		.cfi_def_cfa_offset 32
 1454 0004 00AF     		add	r7, sp, #0
 1455              	.LCFI78:
 1456              		.cfi_def_cfa_register 7
 1457 0006 7860     		str	r0, [r7, #4]
 1458 0008 3960     		str	r1, [r7]
 297:common/lib.stm32/uart.c **** 	unsigned short cnt = 0, crc = 0;
 1459              		.loc 2 297 17
 1460 000a 0023     		movs	r3, #0
 1461 000c FB82     		strh	r3, [r7, #22]	@ movhi
 1462              		.loc 2 297 26
 1463 000e 0023     		movs	r3, #0
 1464 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 298:common/lib.stm32/uart.c **** 	unsigned char v, *ptr = dsn;
 1465              		.loc 2 298 20
 1466 0012 7B68     		ldr	r3, [r7, #4]
 1467 0014 3B61     		str	r3, [r7, #16]
 299:common/lib.stm32/uart.c **** 	/*
 300:common/lib.stm32/uart.c **** 	u1Fifo.rxBuf[0] = '$';
 301:common/lib.stm32/uart.c **** 	for (int i = 0; i < 32; i++)
 302:common/lib.stm32/uart.c **** 	{
 303:common/lib.stm32/uart.c **** 		v = u1Fifo.rxBuf[i];
 304:common/lib.stm32/uart.c **** 		*ptr = v;
 305:common/lib.stm32/uart.c **** 		ptr++;
 306:common/lib.stm32/uart.c **** 	}
 307:common/lib.stm32/uart.c **** return 32;
 308:common/lib.stm32/uart.c **** */
 309:common/lib.stm32/uart.c **** 	while (uart3GetChar(&v) && (max_len > cnt))
 1468              		.loc 2 309 8
 1469 0016 0DE0     		b	.L74
 1470              	.L76:
 310:common/lib.stm32/uart.c **** 	{
 311:common/lib.stm32/uart.c **** 		*ptr = v;
 1471              		.loc 2 311 8
 1472 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1473 001a 3B69     		ldr	r3, [r7, #16]
 1474 001c 1A70     		strb	r2, [r3]
 312:common/lib.stm32/uart.c **** 		ptr++;
 1475              		.loc 2 312 6
 1476 001e 3B69     		ldr	r3, [r7, #16]
 1477 0020 0133     		adds	r3, r3, #1
 1478 0022 3B61     		str	r3, [r7, #16]
 313:common/lib.stm32/uart.c **** 		crc += v;
 1479              		.loc 2 313 7
 1480 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1481 0026 9AB2     		uxth	r2, r3
 1482 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1483 002a 1344     		add	r3, r3, r2
 1484 002c BB82     		strh	r3, [r7, #20]	@ movhi
 314:common/lib.stm32/uart.c **** 		cnt++;
 1485              		.loc 2 314 6
 1486 002e FB8A     		ldrh	r3, [r7, #22]
 1487 0030 0133     		adds	r3, r3, #1
 1488 0032 FB82     		strh	r3, [r7, #22]	@ movhi
 1489              	.L74:
 309:common/lib.stm32/uart.c **** 	{
 1490              		.loc 2 309 9
 1491 0034 07F10F03 		add	r3, r7, #15
 1492 0038 1846     		mov	r0, r3
 1493 003a 074B     		ldr	r3, .L78
 1494 003c 9847     		blx	r3
 1495              	.LVL31:
 1496 003e 0346     		mov	r3, r0
 309:common/lib.stm32/uart.c **** 	{
 1497              		.loc 2 309 8
 1498 0040 002B     		cmp	r3, #0
 1499 0042 03D0     		beq	.L75
 309:common/lib.stm32/uart.c **** 	{
 1500              		.loc 2 309 38 discriminator 1
 1501 0044 FB8A     		ldrh	r3, [r7, #22]
 309:common/lib.stm32/uart.c **** 	{
 1502              		.loc 2 309 26 discriminator 1
 1503 0046 3A68     		ldr	r2, [r7]
 1504 0048 9A42     		cmp	r2, r3
 1505 004a E5D8     		bhi	.L76
 1506              	.L75:
 315:common/lib.stm32/uart.c **** 	}
 316:common/lib.stm32/uart.c **** 	return cnt; //  error here
 1507              		.loc 2 316 9
 1508 004c FB8A     		ldrh	r3, [r7, #22]
 317:common/lib.stm32/uart.c **** }
 1509              		.loc 2 317 1
 1510 004e 1846     		mov	r0, r3
 1511 0050 1837     		adds	r7, r7, #24
 1512              	.LCFI79:
 1513              		.cfi_def_cfa_offset 8
 1514 0052 BD46     		mov	sp, r7
 1515              	.LCFI80:
 1516              		.cfi_def_cfa_register 13
 1517              		@ sp needed
 1518 0054 80BD     		pop	{r7, pc}
 1519              	.L79:
 1520 0056 00BF     		.align	2
 1521              	.L78:
 1522 0058 00000000 		.word	uart3GetChar
 1523              		.cfi_endproc
 1524              	.LFE40:
 1526              		.section	.text.uart3WriteEscaped,"ax",%progbits
 1527              		.align	1
 1528              		.global	uart3WriteEscaped
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1533              	uart3WriteEscaped:
 1534              	.LFB41:
 318:common/lib.stm32/uart.c **** 
 319:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 320:common/lib.stm32/uart.c **** void uart3WriteEscaped(unsigned char *src, unsigned int len)
 321:common/lib.stm32/uart.c **** {
 1535              		.loc 2 321 1
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 16
 1538              		@ frame_needed = 1, uses_anonymous_args = 0
 1539 0000 80B5     		push	{r7, lr}
 1540              	.LCFI81:
 1541              		.cfi_def_cfa_offset 8
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544 0002 84B0     		sub	sp, sp, #16
 1545              	.LCFI82:
 1546              		.cfi_def_cfa_offset 24
 1547 0004 00AF     		add	r7, sp, #0
 1548              	.LCFI83:
 1549              		.cfi_def_cfa_register 7
 1550 0006 7860     		str	r0, [r7, #4]
 1551 0008 3960     		str	r1, [r7]
 322:common/lib.stm32/uart.c **** 	unsigned char ch;
 323:common/lib.stm32/uart.c **** 	unsigned char crc = 0;//getCRC(src, len);
 1552              		.loc 2 323 16
 1553 000a 0023     		movs	r3, #0
 1554 000c FB73     		strb	r3, [r7, #15]
 324:common/lib.stm32/uart.c **** 	unsigned int rezult;
 325:common/lib.stm32/uart.c **** 	if (len == 0)
 1555              		.loc 2 325 5
 1556 000e 3B68     		ldr	r3, [r7]
 1557 0010 002B     		cmp	r3, #0
 1558 0012 3CD0     		beq	.L87
 326:common/lib.stm32/uart.c **** 		return;
 327:common/lib.stm32/uart.c **** 	uart3PutChar(0x55);
 1559              		.loc 2 327 2
 1560 0014 5520     		movs	r0, #85
 1561 0016 204B     		ldr	r3, .L88
 1562 0018 9847     		blx	r3
 1563              	.LVL32:
 328:common/lib.stm32/uart.c **** 	uart3PutChar(0x01);
 1564              		.loc 2 328 2
 1565 001a 0120     		movs	r0, #1
 1566 001c 1E4B     		ldr	r3, .L88
 1567 001e 9847     		blx	r3
 1568              	.LVL33:
 329:common/lib.stm32/uart.c **** 	while (len--)
 1569              		.loc 2 329 8
 1570 0020 13E0     		b	.L83
 1571              	.L85:
 330:common/lib.stm32/uart.c **** 	{
 331:common/lib.stm32/uart.c **** 		ch = *src;
 1572              		.loc 2 331 6
 1573 0022 7B68     		ldr	r3, [r7, #4]
 1574 0024 1B78     		ldrb	r3, [r3]
 1575 0026 BB73     		strb	r3, [r7, #14]
 332:common/lib.stm32/uart.c **** 		rezult = uart3PutChar(ch);
 1576              		.loc 2 332 12
 1577 0028 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1578 002a 1846     		mov	r0, r3
 1579 002c 1A4B     		ldr	r3, .L88
 1580 002e 9847     		blx	r3
 1581              	.LVL34:
 1582 0030 0346     		mov	r3, r0
 1583              		.loc 2 332 10
 1584 0032 BB60     		str	r3, [r7, #8]
 333:common/lib.stm32/uart.c **** 		if (ch == 0x55)
 1585              		.loc 2 333 6
 1586 0034 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1587 0036 552B     		cmp	r3, #85
 1588 0038 04D1     		bne	.L84
 334:common/lib.stm32/uart.c **** 		{
 335:common/lib.stm32/uart.c **** 			rezult = uart3PutChar(0x02);
 1589              		.loc 2 335 13
 1590 003a 0220     		movs	r0, #2
 1591 003c 164B     		ldr	r3, .L88
 1592 003e 9847     		blx	r3
 1593              	.LVL35:
 1594 0040 0346     		mov	r3, r0
 1595              		.loc 2 335 11
 1596 0042 BB60     		str	r3, [r7, #8]
 1597              	.L84:
 336:common/lib.stm32/uart.c **** 		}
 337:common/lib.stm32/uart.c **** 		src++;
 1598              		.loc 2 337 6
 1599 0044 7B68     		ldr	r3, [r7, #4]
 1600 0046 0133     		adds	r3, r3, #1
 1601 0048 7B60     		str	r3, [r7, #4]
 1602              	.L83:
 329:common/lib.stm32/uart.c **** 	{
 1603              		.loc 2 329 12
 1604 004a 3B68     		ldr	r3, [r7]
 1605 004c 5A1E     		subs	r2, r3, #1
 1606 004e 3A60     		str	r2, [r7]
 329:common/lib.stm32/uart.c **** 	{
 1607              		.loc 2 329 8
 1608 0050 002B     		cmp	r3, #0
 1609 0052 E6D1     		bne	.L85
 338:common/lib.stm32/uart.c **** 	}
 339:common/lib.stm32/uart.c **** 	ch = crc;
 1610              		.loc 2 339 5
 1611 0054 FB7B     		ldrb	r3, [r7, #15]
 1612 0056 BB73     		strb	r3, [r7, #14]
 340:common/lib.stm32/uart.c **** 	rezult = uart3PutChar(ch);
 1613              		.loc 2 340 11
 1614 0058 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1615 005a 1846     		mov	r0, r3
 1616 005c 0E4B     		ldr	r3, .L88
 1617 005e 9847     		blx	r3
 1618              	.LVL36:
 1619 0060 0346     		mov	r3, r0
 1620              		.loc 2 340 9
 1621 0062 BB60     		str	r3, [r7, #8]
 341:common/lib.stm32/uart.c **** 	if (ch == 0x55)
 1622              		.loc 2 341 5
 1623 0064 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1624 0066 552B     		cmp	r3, #85
 1625 0068 04D1     		bne	.L86
 342:common/lib.stm32/uart.c **** 	{
 343:common/lib.stm32/uart.c **** 		rezult = uart3PutChar(0x02);
 1626              		.loc 2 343 12
 1627 006a 0220     		movs	r0, #2
 1628 006c 0A4B     		ldr	r3, .L88
 1629 006e 9847     		blx	r3
 1630              	.LVL37:
 1631 0070 0346     		mov	r3, r0
 1632              		.loc 2 343 10
 1633 0072 BB60     		str	r3, [r7, #8]
 1634              	.L86:
 344:common/lib.stm32/uart.c **** 	}
 345:common/lib.stm32/uart.c **** 
 346:common/lib.stm32/uart.c **** 	rezult = uart3PutChar(0x55);
 1635              		.loc 2 346 11
 1636 0074 5520     		movs	r0, #85
 1637 0076 084B     		ldr	r3, .L88
 1638 0078 9847     		blx	r3
 1639              	.LVL38:
 1640 007a 0346     		mov	r3, r0
 1641              		.loc 2 346 9
 1642 007c BB60     		str	r3, [r7, #8]
 347:common/lib.stm32/uart.c **** 	rezult = uart3PutChar(0x03);
 1643              		.loc 2 347 11
 1644 007e 0320     		movs	r0, #3
 1645 0080 054B     		ldr	r3, .L88
 1646 0082 9847     		blx	r3
 1647              	.LVL39:
 1648 0084 0346     		mov	r3, r0
 1649              		.loc 2 347 9
 1650 0086 BB60     		str	r3, [r7, #8]
 348:common/lib.stm32/uart.c **** 	uart3TxTask();
 1651              		.loc 2 348 2
 1652 0088 044B     		ldr	r3, .L88+4
 1653 008a 9847     		blx	r3
 1654              	.LVL40:
 1655 008c 00E0     		b	.L80
 1656              	.L87:
 326:common/lib.stm32/uart.c **** 	uart3PutChar(0x55);
 1657              		.loc 2 326 3
 1658 008e 00BF     		nop
 1659              	.L80:
 349:common/lib.stm32/uart.c **** }
 1660              		.loc 2 349 1
 1661 0090 1037     		adds	r7, r7, #16
 1662              	.LCFI84:
 1663              		.cfi_def_cfa_offset 8
 1664 0092 BD46     		mov	sp, r7
 1665              	.LCFI85:
 1666              		.cfi_def_cfa_register 13
 1667              		@ sp needed
 1668 0094 80BD     		pop	{r7, pc}
 1669              	.L89:
 1670 0096 00BF     		.align	2
 1671              	.L88:
 1672 0098 00000000 		.word	uart3PutChar
 1673 009c 00000000 		.word	uart3TxTask
 1674              		.cfi_endproc
 1675              	.LFE41:
 1677              		.section	.text.uart3Write,"ax",%progbits
 1678              		.align	1
 1679              		.global	uart3Write
 1680              		.syntax unified
 1681              		.thumb
 1682              		.thumb_func
 1684              	uart3Write:
 1685              	.LFB42:
 350:common/lib.stm32/uart.c **** void uart3Write(unsigned char *src, unsigned int len)
 351:common/lib.stm32/uart.c **** {
 1686              		.loc 2 351 1
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 16
 1689              		@ frame_needed = 1, uses_anonymous_args = 0
 1690 0000 80B5     		push	{r7, lr}
 1691              	.LCFI86:
 1692              		.cfi_def_cfa_offset 8
 1693              		.cfi_offset 7, -8
 1694              		.cfi_offset 14, -4
 1695 0002 84B0     		sub	sp, sp, #16
 1696              	.LCFI87:
 1697              		.cfi_def_cfa_offset 24
 1698 0004 00AF     		add	r7, sp, #0
 1699              	.LCFI88:
 1700              		.cfi_def_cfa_register 7
 1701 0006 7860     		str	r0, [r7, #4]
 1702 0008 3960     		str	r1, [r7]
 352:common/lib.stm32/uart.c **** 	unsigned char ch;
 353:common/lib.stm32/uart.c **** 	unsigned int rezult;
 354:common/lib.stm32/uart.c **** 	if (len == 0)
 1703              		.loc 2 354 5
 1704 000a 3B68     		ldr	r3, [r7]
 1705 000c 002B     		cmp	r3, #0
 1706 000e 14D0     		beq	.L95
 355:common/lib.stm32/uart.c **** 		return;
 356:common/lib.stm32/uart.c **** 	while (len--)
 1707              		.loc 2 356 8
 1708 0010 0BE0     		b	.L93
 1709              	.L94:
 357:common/lib.stm32/uart.c **** 	{
 358:common/lib.stm32/uart.c **** 		ch = *src;
 1710              		.loc 2 358 6
 1711 0012 7B68     		ldr	r3, [r7, #4]
 1712 0014 1B78     		ldrb	r3, [r3]
 1713 0016 FB73     		strb	r3, [r7, #15]
 359:common/lib.stm32/uart.c **** 		rezult = uart3PutChar(ch);
 1714              		.loc 2 359 12
 1715 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1716 001a 1846     		mov	r0, r3
 1717 001c 094B     		ldr	r3, .L96
 1718 001e 9847     		blx	r3
 1719              	.LVL41:
 1720 0020 0346     		mov	r3, r0
 1721              		.loc 2 359 10
 1722 0022 BB60     		str	r3, [r7, #8]
 360:common/lib.stm32/uart.c **** 		src++;
 1723              		.loc 2 360 6
 1724 0024 7B68     		ldr	r3, [r7, #4]
 1725 0026 0133     		adds	r3, r3, #1
 1726 0028 7B60     		str	r3, [r7, #4]
 1727              	.L93:
 356:common/lib.stm32/uart.c **** 	{
 1728              		.loc 2 356 12
 1729 002a 3B68     		ldr	r3, [r7]
 1730 002c 5A1E     		subs	r2, r3, #1
 1731 002e 3A60     		str	r2, [r7]
 356:common/lib.stm32/uart.c **** 	{
 1732              		.loc 2 356 8
 1733 0030 002B     		cmp	r3, #0
 1734 0032 EED1     		bne	.L94
 361:common/lib.stm32/uart.c **** 	}
 362:common/lib.stm32/uart.c **** 	uart3TxTask();
 1735              		.loc 2 362 2
 1736 0034 044B     		ldr	r3, .L96+4
 1737 0036 9847     		blx	r3
 1738              	.LVL42:
 1739 0038 00E0     		b	.L90
 1740              	.L95:
 355:common/lib.stm32/uart.c **** 	while (len--)
 1741              		.loc 2 355 3
 1742 003a 00BF     		nop
 1743              	.L90:
 363:common/lib.stm32/uart.c **** }
 1744              		.loc 2 363 1
 1745 003c 1037     		adds	r7, r7, #16
 1746              	.LCFI89:
 1747              		.cfi_def_cfa_offset 8
 1748 003e BD46     		mov	sp, r7
 1749              	.LCFI90:
 1750              		.cfi_def_cfa_register 13
 1751              		@ sp needed
 1752 0040 80BD     		pop	{r7, pc}
 1753              	.L97:
 1754 0042 00BF     		.align	2
 1755              	.L96:
 1756 0044 00000000 		.word	uart3PutChar
 1757 0048 00000000 		.word	uart3TxTask
 1758              		.cfi_endproc
 1759              	.LFE42:
 1761              		.section	.text.DMA2_Channel4_5_IRQHandler,"ax",%progbits
 1762              		.align	1
 1763              		.global	DMA2_Channel4_5_IRQHandler
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1768              	DMA2_Channel4_5_IRQHandler:
 1769              	.LFB43:
 364:common/lib.stm32/uart.c **** 
 365:common/lib.stm32/uart.c **** //UART 1 DMA INTERRUPT
 366:common/lib.stm32/uart.c **** void DMA2_Channel4_5_IRQHandler(void)
 367:common/lib.stm32/uart.c **** {
 1770              		.loc 2 367 1
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 1, uses_anonymous_args = 0
 1774 0000 80B5     		push	{r7, lr}
 1775              	.LCFI91:
 1776              		.cfi_def_cfa_offset 8
 1777              		.cfi_offset 7, -8
 1778              		.cfi_offset 14, -4
 1779 0002 00AF     		add	r7, sp, #0
 1780              	.LCFI92:
 1781              		.cfi_def_cfa_register 7
 368:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel2 transfer*/
 369:common/lib.stm32/uart.c **** 	DMA_Cmd(UART4_TX_DMA, DISABLE);
 1782              		.loc 2 369 2
 1783 0004 0021     		movs	r1, #0
 1784 0006 0548     		ldr	r0, .L99
 1785 0008 054B     		ldr	r3, .L99+4
 1786 000a 9847     		blx	r3
 1787              	.LVL43:
 370:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 371:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA2_FLAG_TC5);
 1788              		.loc 2 371 2
 1789 000c 0548     		ldr	r0, .L99+8
 1790 000e 064B     		ldr	r3, .L99+12
 1791 0010 9847     		blx	r3
 1792              	.LVL44:
 372:common/lib.stm32/uart.c **** 	uart3TxTask();
 1793              		.loc 2 372 2
 1794 0012 064B     		ldr	r3, .L99+16
 1795 0014 9847     		blx	r3
 1796              	.LVL45:
 373:common/lib.stm32/uart.c **** }
 1797              		.loc 2 373 1
 1798 0016 00BF     		nop
 1799 0018 80BD     		pop	{r7, pc}
 1800              	.L100:
 1801 001a 00BF     		.align	2
 1802              	.L99:
 1803 001c 58040240 		.word	1073874008
 1804 0020 00000000 		.word	DMA_Cmd
 1805 0024 00000210 		.word	268566528
 1806 0028 00000000 		.word	DMA_ClearFlag
 1807 002c 00000000 		.word	uart3TxTask
 1808              		.cfi_endproc
 1809              	.LFE43:
 1811              		.section	.text.DMA2_Channel3_IRQHandler,"ax",%progbits
 1812              		.align	1
 1813              		.global	DMA2_Channel3_IRQHandler
 1814              		.syntax unified
 1815              		.thumb
 1816              		.thumb_func
 1818              	DMA2_Channel3_IRQHandler:
 1819              	.LFB44:
 374:common/lib.stm32/uart.c **** 
 375:common/lib.stm32/uart.c **** void DMA2_Channel3_IRQHandler(void)
 376:common/lib.stm32/uart.c **** {
 1820              		.loc 2 376 1
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 8
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824 0000 80B5     		push	{r7, lr}
 1825              	.LCFI93:
 1826              		.cfi_def_cfa_offset 8
 1827              		.cfi_offset 7, -8
 1828              		.cfi_offset 14, -4
 1829 0002 82B0     		sub	sp, sp, #8
 1830              	.LCFI94:
 1831              		.cfi_def_cfa_offset 16
 1832 0004 00AF     		add	r7, sp, #0
 1833              	.LCFI95:
 1834              		.cfi_def_cfa_register 7
 377:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel2 transfer*/
 378:common/lib.stm32/uart.c **** //	DMA_Cmd(UART4_TX_DMA, DISABLE);
 379:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 380:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA2_FLAG_TC3);
 1835              		.loc 2 380 2
 1836 0006 0848     		ldr	r0, .L102
 1837 0008 084B     		ldr	r3, .L102+4
 1838 000a 9847     		blx	r3
 1839              	.LVL46:
 381:common/lib.stm32/uart.c **** 
 382:common/lib.stm32/uart.c **** 	u1Fifo.rxCurrent+=0;
 1840              		.loc 2 382 18
 1841 000c 084B     		ldr	r3, .L102+8
 1842 000e 1B68     		ldr	r3, [r3]
 1843 0010 074A     		ldr	r2, .L102+8
 1844 0012 1360     		str	r3, [r2]
 383:common/lib.stm32/uart.c **** 	int tempTest = DMA_GetCurrDataCounter(UART4_RX_DMA);
 1845              		.loc 2 383 17
 1846 0014 0748     		ldr	r0, .L102+12
 1847 0016 084B     		ldr	r3, .L102+16
 1848 0018 9847     		blx	r3
 1849              	.LVL47:
 1850 001a 0346     		mov	r3, r0
 1851              		.loc 2 383 6
 1852 001c 7B60     		str	r3, [r7, #4]
 384:common/lib.stm32/uart.c **** 			tempTest +=0;
 385:common/lib.stm32/uart.c **** 	//DMARxDataReceived();
 386:common/lib.stm32/uart.c **** 	//uart3TxTask();
 387:common/lib.stm32/uart.c **** }
 1853              		.loc 2 387 1
 1854 001e 00BF     		nop
 1855 0020 0837     		adds	r7, r7, #8
 1856              	.LCFI96:
 1857              		.cfi_def_cfa_offset 8
 1858 0022 BD46     		mov	sp, r7
 1859              	.LCFI97:
 1860              		.cfi_def_cfa_register 13
 1861              		@ sp needed
 1862 0024 80BD     		pop	{r7, pc}
 1863              	.L103:
 1864 0026 00BF     		.align	2
 1865              	.L102:
 1866 0028 00020010 		.word	268435968
 1867 002c 00000000 		.word	DMA_ClearFlag
 1868 0030 00000000 		.word	u1Fifo
 1869 0034 30040240 		.word	1073873968
 1870 0038 00000000 		.word	DMA_GetCurrDataCounter
 1871              		.cfi_endproc
 1872              	.LFE44:
 1874              		.text
 1875              	.Letext0:
 1876              		.file 3 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 1877              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1878              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1879              		.file 6 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
 1880              		.file 7 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1881              		.file 8 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 1882              		.file 9 "common/lib.stm32/uart.h"
 1883              		.file 10 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:74     .text.NVIC_EnableIRQ:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:79     .text.NVIC_SetPriority:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:84     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:158    .text.NVIC_SetPriority:0000004c $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:164    .text.UART4_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:170    .text.UART4_IRQHandler:00000000 UART4_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:204    .bss.dmaRxCounter:00000000 dmaRxCounter
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:201    .bss.dmaRxCounter:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:207    .text.DMARxDataCounterSet:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:213    .text.DMARxDataCounterSet:00000000 DMARxDataCounterSet
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:252    .text.DMARxDataCounterSet:00000018 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:257    .text.DMARxDataCounterInc:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:263    .text.DMARxDataCounterInc:00000000 DMARxDataCounterInc
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:297    .text.DMARxDataCounterInc:00000018 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:302    .text.DMARxDataCounterGet:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:308    .text.DMARxDataCounterGet:00000000 DMARxDataCounterGet
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:339    .text.DMARxDataCounterGet:00000010 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:348    .bss.u1Fifo:00000000 u1Fifo
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:345    .bss.u1Fifo:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:351    .text.TestSend:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:357    .text.TestSend:00000000 TestSend
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:406    .text.TestSend:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:421    .text.uart4TxDMAConfiguration:00000000 uart4TxDMAConfiguration
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:415    .text.uart4TxDMAConfiguration:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:509    .text.uart4TxDMAConfiguration:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:516    .text.uart4RxDMAConfiguration:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:522    .text.uart4RxDMAConfiguration:00000000 uart4RxDMAConfiguration
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:610    .text.uart4RxDMAConfiguration:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:617    .text.uart3Init:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:623    .text.uart3Init:00000000 uart3Init
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:783    .text.uart3Init:000000d0 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:803    .text.uart3FindEscapedPack:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:809    .text.uart3FindEscapedPack:00000000 uart3FindEscapedPack
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:916    .text.uart3FindEscapedPack:0000007c $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:924    .text.uart3GetChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:930    .text.uart3GetChar:00000000 uart3GetChar
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1006   .text.uart3GetChar:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1013   .text.uart3PutChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1019   .text.uart3PutChar:00000000 uart3PutChar
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1105   .text.uart3PutChar:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1110   .text.uart3TxTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1116   .text.uart3TxTask:00000000 uart3TxTask
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1240   .text.uart3TxTask:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1252   .text.uart3ReadEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1258   .text.uart3ReadEscaped:00000000 uart3ReadEscaped
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1428   .text.uart3ReadEscaped:000000c4 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1434   .text.uart3Read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1440   .text.uart3Read:00000000 uart3Read
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1522   .text.uart3Read:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1527   .text.uart3WriteEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1533   .text.uart3WriteEscaped:00000000 uart3WriteEscaped
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1672   .text.uart3WriteEscaped:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1678   .text.uart3Write:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1684   .text.uart3Write:00000000 uart3Write
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1756   .text.uart3Write:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1762   .text.DMA2_Channel4_5_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1768   .text.DMA2_Channel4_5_IRQHandler:00000000 DMA2_Channel4_5_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1803   .text.DMA2_Channel4_5_IRQHandler:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1812   .text.DMA2_Channel3_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1818   .text.DMA2_Channel3_IRQHandler:00000000 DMA2_Channel3_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccOeWzKx.s:1866   .text.DMA2_Channel3_IRQHandler:00000028 $d

UNDEFINED SYMBOLS
DMA_DeInit
DMA_Init
DMA_Cmd
RCC_AHBPeriphClockCmd
GPIO_Init
USART_DeInit
RCC_APB2PeriphClockCmd
RCC_APB1PeriphClockCmd
USART_Init
USART_ClearFlag
USART_DMACmd
USART_Cmd
DMA_GetCurrDataCounter
DMA_ITConfig
DMA_ClearFlag
