   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB14:
  25              		.file 1 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h"
   1:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /******************************************************************************
   2:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @file:    core_cm3.h
   3:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @version: V1.20
   5:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @date:    22. May 2009
   6:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *----------------------------------------------------------------------------
   7:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
   8:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  10:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  11:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  12:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  13:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  14:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  15:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  16:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  17:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  18:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  19:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  20:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
  21:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  22:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  23:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  24:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  25:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  26:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  extern "C" {
  27:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif 
  28:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  29:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  30:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  31:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  32:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  33:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  34:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  35:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
  36:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  Lint configuration \n
  37:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  ----------------------- \n
  38:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  39:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  40:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  \n
  41:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 10: --- \n
  42:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  43:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Error 10: Expecting ';' \n
  44:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  45:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 530: --- \n
  46:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    return(__regBasePri); \n
  47:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  48:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  49:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 550: --- \n
  50:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  51:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } \n
  52:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  53:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  54:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 754: --- \n
  55:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  56:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  57:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  58:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 750: --- \n
  59:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  60:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  61:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  62:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 528: --- \n
  63:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  64:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  65:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  66:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 751: --- \n
  67:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } InterruptType_Type; \n
  68:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  69:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  70:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  71:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  72:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  73:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
  74:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  75:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -save */
  76:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e10  */
  77:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e530 */
  78:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e550 */
  79:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e754 */
  80:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e750 */
  81:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e528 */
  82:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e751 */
  83:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  84:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  85:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  86:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  87:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  88:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  89:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  90:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  91:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  92:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  93:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  94:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  95:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  96:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  97:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  98:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  99:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * IO definitions
 101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* System Reset */
 121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug */
 127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];
 138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];
 140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];
 142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];
 144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];
 146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];
 148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }  NVIC_Type;
 150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for System Control Block */
 153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SCB_Type;
 175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for SysTick */
 178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SysTick_Type;
 185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping structur for ITM */
 188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  union  
 191:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   {
 192:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 193:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 194:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 195:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 196:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];
 197:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 198:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];
 199:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 200:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];
 201:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 202:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];
 203:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 204:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 205:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 206:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];
 207:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 208:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 209:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];
 210:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 211:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;
 212:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;
 213:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;
 214:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;
 215:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;
 216:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;
 217:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;
 218:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;
 219:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;
 220:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;
 221:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;
 222:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } ITM_Type;
 223:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 224:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 225:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 226:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 227:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 228:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 229:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 230:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 231:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 232:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 233:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 234:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 235:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } InterruptType_Type;
 236:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 237:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 238:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory Protection Unit */
 239:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 240:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 241:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 242:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 243:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 244:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 245:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 246:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 247:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 248:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 249:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 250:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 251:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 252:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 253:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } MPU_Type;
 254:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 255:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 256:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 257:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug Register */
 258:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 259:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 260:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 261:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 262:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 263:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 264:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 265:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 266:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 267:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 268:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 269:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 270:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 271:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 272:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 273:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 274:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 275:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 276:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 277:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 278:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 279:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 280:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 281:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 282:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 283:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 284:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 285:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 286:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 287:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 288:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 289:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 290:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 291:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 292:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 293:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 294:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 295:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 296:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 297:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 298:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 299:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 300:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 301:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 302:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 303:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 304:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 305:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 306:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 307:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 308:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 309:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 310:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 311:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 312:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 313:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 314:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 315:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 316:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 317:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 318:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 319:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 320:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 321:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 322:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 323:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 324:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 325:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 326:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 327:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 328:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __REV                             __rev
 329:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 330:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 331:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 332:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 333:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 334:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 335:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 336:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 337:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 338:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 339:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 340:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 341:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 342:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 343:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 344:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 345:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 346:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 347:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 348:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 349:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 350:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 351:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 352:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 353:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 354:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 355:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 356:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 357:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 358:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 359:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 360:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 361:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 362:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 363:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 364:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 365:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 366:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 367:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 368:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 369:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 370:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 371:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 372:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 373:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 374:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 375:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 376:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 377:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 378:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 379:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 380:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 381:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 382:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 383:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 384:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 385:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 386:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 387:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 388:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 389:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 390:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 391:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 392:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 393:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 394:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 395:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 396:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 397:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 398:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 399:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 400:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 401:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 402:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 403:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 404:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 405:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 406:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 407:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 408:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 409:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 410:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 411:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 412:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 413:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 414:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 415:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 416:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 417:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 418:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 419:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 420:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 421:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 422:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 423:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 424:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 425:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 426:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 427:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 428:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 429:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 430:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 431:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 432:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 433:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 434:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 435:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 436:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 437:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 438:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 439:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 440:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 441:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 442:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 443:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 444:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 445:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 446:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 447:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 448:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 449:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 450:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 451:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 452:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 453:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 454:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 455:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 456:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 457:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 458:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 459:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 460:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 461:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 462:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 463:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 464:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 465:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 466:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 467:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 468:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 469:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 470:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 471:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 472:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 473:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 474:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 475:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 476:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 477:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 478:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 479:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 480:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 481:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 482:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 483:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 484:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 485:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 486:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 487:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 488:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 489:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 490:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 491:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 492:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 493:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 494:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 495:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 496:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 497:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 498:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 499:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 500:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 501:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 502:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 503:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 504:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 505:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 506:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 507:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 508:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 509:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 510:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 511:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 512:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 513:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 514:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 515:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 516:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 517:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 518:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 519:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 520:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 521:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 522:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 523:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 524:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 525:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regBasePri);
 526:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 527:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 528:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 529:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 530:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 531:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 532:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 533:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 534:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 535:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 536:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 537:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 538:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 539:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 540:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 541:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 542:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 543:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 544:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 545:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 546:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 547:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 548:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 549:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 550:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 551:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 552:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 553:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 554:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regPriMask);
 555:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 556:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 557:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 558:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 559:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 560:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 561:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 562:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 563:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 564:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 565:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 566:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 567:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 568:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 569:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 570:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 571:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 572:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 573:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 574:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 575:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 576:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 577:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 578:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 579:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 580:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 581:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 582:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regFaultMask);
 583:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 584:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 585:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 586:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 587:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 588:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 589:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 590:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 591:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 592:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 593:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 594:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 595:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 596:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 597:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 598:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 599:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 600:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 601:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 602:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 603:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 604:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 605:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 606:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 607:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 608:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 609:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 610:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regControl);
 611:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 612:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 613:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 614:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 615:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 616:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 617:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 618:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 619:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 620:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 621:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 622:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 623:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 624:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regControl = control;
 625:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 626:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 627:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 628:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 629:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 630:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 631:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 632:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
 633:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 634:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 635:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 636:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 637:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 638:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 639:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 640:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 641:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 642:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 643:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 644:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 645:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 646:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 647:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 648:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 649:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 650:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 651:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 652:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 653:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 654:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 655:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 656:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 657:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 658:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 659:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 660:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 661:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 662:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 663:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 664:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 665:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 666:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 667:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 668:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 669:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 670:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 671:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 672:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 673:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 674:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 675:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 676:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 677:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 678:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 679:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 680:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 681:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 682:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 683:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 684:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 685:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 686:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 687:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 688:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 689:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 690:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 691:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 692:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 693:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 694:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 695:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 696:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 697:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 698:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 699:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 700:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 701:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 702:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 703:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 704:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 705:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 706:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 707:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 708:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 709:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 710:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 711:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 712:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 713:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 714:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 715:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 716:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 717:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 718:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 719:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 720:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 721:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 722:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 723:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 724:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 725:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 726:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 727:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 728:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 729:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 730:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 731:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 732:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 733:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 734:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 735:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 736:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 737:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 738:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 739:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 740:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 741:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 742:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 743:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 744:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 745:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 746:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 747:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 748:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 749:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 750:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 751:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 752:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 753:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 754:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 755:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
 756:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
 757:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 758:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 759:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 760:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 761:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 762:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 763:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 764:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 765:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 766:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
 767:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
 768:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 769:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 770:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 771:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 772:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 773:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 774:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 775:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 776:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 777:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
 778:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
 779:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 780:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 781:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 782:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 783:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 784:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 785:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 786:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 787:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 788:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
 789:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 790:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 791:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 792:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 793:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 794:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 795:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 796:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 797:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 798:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 799:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 800:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 801:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 802:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 803:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
 804:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 805:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 806:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 807:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 808:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 809:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 810:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 811:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 812:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 813:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 814:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 815:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 816:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 817:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 818:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 819:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 820:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 821:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 822:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 823:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 824:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 825:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 826:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 827:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 828:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 829:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 830:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 831:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 832:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 833:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 834:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 835:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 836:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 837:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 838:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 839:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 840:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 841:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 842:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 843:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 844:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 845:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 846:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 847:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 848:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 849:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 850:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 851:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 852:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 853:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 854:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 855:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 856:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 857:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 858:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 859:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 860:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 861:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 862:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 863:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 864:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 865:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 866:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 867:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 868:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 869:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 870:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 871:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 872:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 873:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 874:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 875:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 876:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 877:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 878:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
 879:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 880:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 881:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 882:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 883:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 884:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 885:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 886:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 887:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 888:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 889:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 890:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 891:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 892:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 893:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 894:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 895:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 896:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 897:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 898:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 899:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 900:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 901:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 902:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 903:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 904:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 905:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 906:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 907:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 908:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 909:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 910:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 911:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 912:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** * 
 913:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @param  none
 914:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @return uint32_t Control value
 915:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 916:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 917:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 918:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 919:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 920:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 921:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 922:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 923:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 924:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 925:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 926:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 927:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 928:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 929:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 930:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 931:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
 932:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 933:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 934:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 935:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 936:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
 937:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 938:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
 939:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 940:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 941:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 942:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 943:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 944:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 945:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 946:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 947:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 948:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 949:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 950:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 951:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 952:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 953:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 954:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 955:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 956:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 957:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 958:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 959:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 960:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 961:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 962:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 963:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 964:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 965:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 966:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 967:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 968:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 969:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 970:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 971:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 972:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 973:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 974:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 975:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 976:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 977:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 978:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 979:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 980:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 981:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 982:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 983:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 984:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 985:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 986:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 987:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 988:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 989:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 990:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 991:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 992:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 993:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 994:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 995:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 996:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 997:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 998:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 999:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1000:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1001:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1002:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1003:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
1004:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
1005:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1006:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1007:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1008:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1009:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1010:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1011:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1012:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1013:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1014:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
1015:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
1016:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1017:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1018:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1019:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1020:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1021:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1022:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1023:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1024:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1025:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
1026:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
1027:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1028:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1029:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1030:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1031:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1032:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1033:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1034:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1035:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1036:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1037:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
1038:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1039:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1040:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1041:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1042:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1043:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
1044:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1045:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1046:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1047:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1048:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1049:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1050:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1051:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1052:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1053:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t priority_grouping is priority grouping field
1054:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1055:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1056:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1057:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1058:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1059:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1060:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1061:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1062:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1063:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1064:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1065:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1066:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   
1067:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = SCB->AIRCR;                                                    /* read old register 
1068:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value &= ~((0xFFFFU << 16) | (0x0F << 8));                              /* clear bits to chan
1069:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = ((reg_value | NVIC_AIRCR_VECTKEY | (PriorityGroupTmp << 8)));  /* Insert write key a
1070:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   SCB->AIRCR = reg_value;
1071:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1072:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1073:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1074:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1075:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1076:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
1077:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   priority grouping field 
1078:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1079:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1080:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1081:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1082:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1083:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1084:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR >> 8) & 0x07);                                          /* read priority grou
1085:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1086:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1087:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1088:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1089:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1090:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn specifies the interrupt number
1091:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1092:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1093:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1094:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1095:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1096:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1097:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  26              		.loc 1 1097 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 0346     		mov	r3, r0
  42 0008 FB71     		strb	r3, [r7, #7]
1098:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              		.loc 1 1098 65
  44 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  45 000c 03F01F03 		and	r3, r3, #31
  46              		.loc 1 1098 44
  47 0010 0122     		movs	r2, #1
  48 0012 02FA03F1 		lsl	r1, r2, r3
  49              		.loc 1 1098 7
  50 0016 054A     		ldr	r2, .L2
  51              		.loc 1 1098 15
  52 0018 97F90730 		ldrsb	r3, [r7, #7]
  53              		.loc 1 1098 32
  54 001c 5B09     		lsrs	r3, r3, #5
  55              		.loc 1 1098 39
  56 001e 42F82310 		str	r1, [r2, r3, lsl #2]
1099:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
  57              		.loc 1 1099 1
  58 0022 00BF     		nop
  59 0024 0C37     		adds	r7, r7, #12
  60              	.LCFI3:
  61              		.cfi_def_cfa_offset 4
  62 0026 BD46     		mov	sp, r7
  63              	.LCFI4:
  64              		.cfi_def_cfa_register 13
  65              		@ sp needed
  66 0028 80BC     		pop	{r7}
  67              	.LCFI5:
  68              		.cfi_restore 7
  69              		.cfi_def_cfa_offset 0
  70 002a 7047     		bx	lr
  71              	.L3:
  72              		.align	2
  73              	.L2:
  74 002c 00E100E0 		.word	-536813312
  75              		.cfi_endproc
  76              	.LFE14:
  78              		.section	.text.NVIC_SetPriority,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	NVIC_SetPriority:
  85              	.LFB20:
1100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the positive number of the external interrupt
1105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the number of the device specifc interrupt
1119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t 1 if pending interrupt else 0
1120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * otherwise it returns 0
1123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type  IRQn is the Number of the interrupt
1161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   1 if active else 0
1162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * otherwise it returns 0.
1165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the priority for an interrupt
1173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the Number of the interrupt
1175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  priority is the priority for the interrupt
1176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt. \n
1181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  86              		.loc 1 1185 1
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              	.LCFI6:
  93              		.cfi_def_cfa_offset 4
  94              		.cfi_offset 7, -4
  95 0002 83B0     		sub	sp, sp, #12
  96              	.LCFI7:
  97              		.cfi_def_cfa_offset 16
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI8:
 100              		.cfi_def_cfa_register 7
 101 0006 0346     		mov	r3, r0
 102 0008 3960     		str	r1, [r7]
 103 000a FB71     		strb	r3, [r7, #7]
1186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   if(IRQn < 0) {
 104              		.loc 1 1186 5
 105 000c 97F90730 		ldrsb	r3, [r7, #7]
 106 0010 002B     		cmp	r3, #0
 107 0012 0BDA     		bge	.L5
1187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 108              		.loc 1 1187 55
 109 0014 3B68     		ldr	r3, [r7]
 110 0016 DAB2     		uxtb	r2, r3
 111              		.loc 1 1187 8
 112 0018 0C49     		ldr	r1, .L8
 113              		.loc 1 1187 32
 114 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 115 001c 03F00F03 		and	r3, r3, #15
 116              		.loc 1 1187 38
 117 0020 043B     		subs	r3, r3, #4
 118              		.loc 1 1187 55
 119 0022 1201     		lsls	r2, r2, #4
 120 0024 D2B2     		uxtb	r2, r2
 121              		.loc 1 1187 42
 122 0026 0B44     		add	r3, r3, r1
 123 0028 1A76     		strb	r2, [r3, #24]
1188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   else {
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 124              		.loc 1 1190 1
 125 002a 09E0     		b	.L7
 126              	.L5:
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 127              		.loc 1 1189 45
 128 002c 3B68     		ldr	r3, [r7]
 129 002e DAB2     		uxtb	r2, r3
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 130              		.loc 1 1189 9
 131 0030 0749     		ldr	r1, .L8+4
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 132              		.loc 1 1189 14
 133 0032 97F90730 		ldrsb	r3, [r7, #7]
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 134              		.loc 1 1189 45
 135 0036 1201     		lsls	r2, r2, #4
 136 0038 D2B2     		uxtb	r2, r2
1189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 137              		.loc 1 1189 32
 138 003a 0B44     		add	r3, r3, r1
 139 003c 83F80023 		strb	r2, [r3, #768]
 140              	.L7:
 141              		.loc 1 1190 1
 142 0040 00BF     		nop
 143 0042 0C37     		adds	r7, r7, #12
 144              	.LCFI9:
 145              		.cfi_def_cfa_offset 4
 146 0044 BD46     		mov	sp, r7
 147              	.LCFI10:
 148              		.cfi_def_cfa_register 13
 149              		@ sp needed
 150 0046 80BC     		pop	{r7}
 151              	.LCFI11:
 152              		.cfi_restore 7
 153              		.cfi_def_cfa_offset 0
 154 0048 7047     		bx	lr
 155              	.L9:
 156 004a 00BF     		.align	2
 157              	.L8:
 158 004c 00ED00E0 		.word	-536810240
 159 0050 00E100E0 		.word	-536813312
 160              		.cfi_endproc
 161              	.LFE20:
 163              		.global	dmaRxCounter
 164              		.section	.bss.dmaRxCounter,"aw",%nobits
 165              		.align	2
 168              	dmaRxCounter:
 169 0000 00000000 		.space	4
 170              		.section	.text.DMARxDataCounterSet,"ax",%progbits
 171              		.align	1
 172              		.global	DMARxDataCounterSet
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 177              	DMARxDataCounterSet:
 178              	.LFB27:
 179              		.file 2 "common/lib.stm32/uart.c"
   1:common/lib.stm32/uart.c **** /*
   2:common/lib.stm32/uart.c ****  * uart.c
   3:common/lib.stm32/uart.c ****  *
   4:common/lib.stm32/uart.c ****  *  Created on: Mar 24, 2011
   5:common/lib.stm32/uart.c ****  *      Author: baron
   6:common/lib.stm32/uart.c ****  */
   7:common/lib.stm32/uart.c **** 
   8:common/lib.stm32/uart.c **** #include "uart.h"
   9:common/lib.stm32/uart.c **** 
  10:common/lib.stm32/uart.c **** 
  11:common/lib.stm32/uart.c **** int dmaRxCounter = 0;
  12:common/lib.stm32/uart.c **** 
  13:common/lib.stm32/uart.c **** void DMARxDataCounterSet(int counter)
  14:common/lib.stm32/uart.c **** {
 180              		.loc 2 14 1
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 8
 183              		@ frame_needed = 1, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185 0000 80B4     		push	{r7}
 186              	.LCFI12:
 187              		.cfi_def_cfa_offset 4
 188              		.cfi_offset 7, -4
 189 0002 83B0     		sub	sp, sp, #12
 190              	.LCFI13:
 191              		.cfi_def_cfa_offset 16
 192 0004 00AF     		add	r7, sp, #0
 193              	.LCFI14:
 194              		.cfi_def_cfa_register 7
 195 0006 7860     		str	r0, [r7, #4]
  15:common/lib.stm32/uart.c **** 	dmaRxCounter=counter;
 196              		.loc 2 15 14
 197 0008 034A     		ldr	r2, .L11
 198 000a 7B68     		ldr	r3, [r7, #4]
 199 000c 1360     		str	r3, [r2]
  16:common/lib.stm32/uart.c **** }
 200              		.loc 2 16 1
 201 000e 00BF     		nop
 202 0010 0C37     		adds	r7, r7, #12
 203              	.LCFI15:
 204              		.cfi_def_cfa_offset 4
 205 0012 BD46     		mov	sp, r7
 206              	.LCFI16:
 207              		.cfi_def_cfa_register 13
 208              		@ sp needed
 209 0014 80BC     		pop	{r7}
 210              	.LCFI17:
 211              		.cfi_restore 7
 212              		.cfi_def_cfa_offset 0
 213 0016 7047     		bx	lr
 214              	.L12:
 215              		.align	2
 216              	.L11:
 217 0018 00000000 		.word	dmaRxCounter
 218              		.cfi_endproc
 219              	.LFE27:
 221              		.section	.text.DMARxDataCounterInc,"ax",%progbits
 222              		.align	1
 223              		.global	DMARxDataCounterInc
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	DMARxDataCounterInc:
 229              	.LFB28:
  17:common/lib.stm32/uart.c **** 
  18:common/lib.stm32/uart.c **** void DMARxDataCounterInc()
  19:common/lib.stm32/uart.c **** {
 230              		.loc 2 19 1
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 0000 80B4     		push	{r7}
 236              	.LCFI18:
 237              		.cfi_def_cfa_offset 4
 238              		.cfi_offset 7, -4
 239 0002 00AF     		add	r7, sp, #0
 240              	.LCFI19:
 241              		.cfi_def_cfa_register 7
  20:common/lib.stm32/uart.c **** 	dmaRxCounter++;
 242              		.loc 2 20 14
 243 0004 044B     		ldr	r3, .L14
 244 0006 1B68     		ldr	r3, [r3]
 245 0008 0133     		adds	r3, r3, #1
 246 000a 034A     		ldr	r2, .L14
 247 000c 1360     		str	r3, [r2]
  21:common/lib.stm32/uart.c **** }
 248              		.loc 2 21 1
 249 000e 00BF     		nop
 250 0010 BD46     		mov	sp, r7
 251              	.LCFI20:
 252              		.cfi_def_cfa_register 13
 253              		@ sp needed
 254 0012 80BC     		pop	{r7}
 255              	.LCFI21:
 256              		.cfi_restore 7
 257              		.cfi_def_cfa_offset 0
 258 0014 7047     		bx	lr
 259              	.L15:
 260 0016 00BF     		.align	2
 261              	.L14:
 262 0018 00000000 		.word	dmaRxCounter
 263              		.cfi_endproc
 264              	.LFE28:
 266              		.section	.text.DMARxDataCounterGet,"ax",%progbits
 267              		.align	1
 268              		.global	DMARxDataCounterGet
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 273              	DMARxDataCounterGet:
 274              	.LFB29:
  22:common/lib.stm32/uart.c **** 
  23:common/lib.stm32/uart.c **** int DMARxDataCounterGet()
  24:common/lib.stm32/uart.c **** {
 275              		.loc 2 24 1
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280 0000 80B4     		push	{r7}
 281              	.LCFI22:
 282              		.cfi_def_cfa_offset 4
 283              		.cfi_offset 7, -4
 284 0002 00AF     		add	r7, sp, #0
 285              	.LCFI23:
 286              		.cfi_def_cfa_register 7
  25:common/lib.stm32/uart.c **** 	return dmaRxCounter;
 287              		.loc 2 25 9
 288 0004 024B     		ldr	r3, .L18
 289 0006 1B68     		ldr	r3, [r3]
  26:common/lib.stm32/uart.c **** }
 290              		.loc 2 26 1
 291 0008 1846     		mov	r0, r3
 292 000a BD46     		mov	sp, r7
 293              	.LCFI24:
 294              		.cfi_def_cfa_register 13
 295              		@ sp needed
 296 000c 80BC     		pop	{r7}
 297              	.LCFI25:
 298              		.cfi_restore 7
 299              		.cfi_def_cfa_offset 0
 300 000e 7047     		bx	lr
 301              	.L19:
 302              		.align	2
 303              	.L18:
 304 0010 00000000 		.word	dmaRxCounter
 305              		.cfi_endproc
 306              	.LFE29:
 308              		.global	u1Fifo
 309              		.section	.bss.u1Fifo,"aw",%nobits
 310              		.align	2
 313              	u1Fifo:
 314 0000 00000000 		.space	2124
 314      00000000 
 314      00000000 
 314      00000000 
 314      00000000 
 315              		.global	u2Fifo
 316              		.section	.bss.u2Fifo,"aw",%nobits
 317              		.align	2
 320              	u2Fifo:
 321 0000 00000000 		.space	2124
 321      00000000 
 321      00000000 
 321      00000000 
 321      00000000 
 322              		.global	u3Fifo
 323              		.section	.bss.u3Fifo,"aw",%nobits
 324              		.align	2
 327              	u3Fifo:
 328 0000 00000000 		.space	2124
 328      00000000 
 328      00000000 
 328      00000000 
 328      00000000 
 329              		.section	.text.TestSend,"ax",%progbits
 330              		.align	1
 331              		.global	TestSend
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 336              	TestSend:
 337              	.LFB30:
  27:common/lib.stm32/uart.c **** 
  28:common/lib.stm32/uart.c **** 
  29:common/lib.stm32/uart.c **** 
  30:common/lib.stm32/uart.c **** UART_FIFO_STR u1Fifo;
  31:common/lib.stm32/uart.c **** UART_FIFO_STR u2Fifo;
  32:common/lib.stm32/uart.c **** UART_FIFO_STR u3Fifo;
  33:common/lib.stm32/uart.c **** 
  34:common/lib.stm32/uart.c **** void TestSend()
  35:common/lib.stm32/uart.c **** {
 338              		.loc 2 35 1
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 1, uses_anonymous_args = 0
 342 0000 90B5     		push	{r4, r7, lr}
 343              	.LCFI26:
 344              		.cfi_def_cfa_offset 12
 345              		.cfi_offset 4, -12
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 83B0     		sub	sp, sp, #12
 349              	.LCFI27:
 350              		.cfi_def_cfa_offset 24
 351 0004 02AF     		add	r7, sp, #8
 352              	.LCFI28:
 353              		.cfi_def_cfa 7, 16
  36:common/lib.stm32/uart.c **** 	u1Fifo.txBuf[0]='A';
 354              		.loc 2 36 17
 355 0006 0A4B     		ldr	r3, .L21
 356 0008 4122     		movs	r2, #65
 357 000a 83F80C24 		strb	r2, [r3, #1036]
  37:common/lib.stm32/uart.c **** 	u1Fifo.txBuf[1]='B';
 358              		.loc 2 37 17
 359 000e 084B     		ldr	r3, .L21
 360 0010 4222     		movs	r2, #66
 361 0012 83F80D24 		strb	r2, [r3, #1037]
  38:common/lib.stm32/uart.c **** 	uartTxDMAConfiguration(USART1, USART1_TX_DMA, u1Fifo.txBuf, 2,1);
 362              		.loc 2 38 2
 363 0016 0123     		movs	r3, #1
 364 0018 0093     		str	r3, [sp]
 365 001a 0223     		movs	r3, #2
 366 001c 054A     		ldr	r2, .L21+4
 367 001e 0649     		ldr	r1, .L21+8
 368 0020 0648     		ldr	r0, .L21+12
 369 0022 074C     		ldr	r4, .L21+16
 370 0024 A047     		blx	r4
 371              	.LVL0:
  39:common/lib.stm32/uart.c **** }
 372              		.loc 2 39 1
 373 0026 00BF     		nop
 374 0028 0437     		adds	r7, r7, #4
 375              	.LCFI29:
 376              		.cfi_def_cfa_offset 12
 377 002a BD46     		mov	sp, r7
 378              	.LCFI30:
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
 381 002c 90BD     		pop	{r4, r7, pc}
 382              	.L22:
 383 002e 00BF     		.align	2
 384              	.L21:
 385 0030 00000000 		.word	u1Fifo
 386 0034 0C040000 		.word	u1Fifo+1036
 387 0038 44000240 		.word	1073872964
 388 003c 00380140 		.word	1073821696
 389 0040 00000000 		.word	uartTxDMAConfiguration
 390              		.cfi_endproc
 391              	.LFE30:
 393              		.section	.text.uartTxDMAConfiguration,"ax",%progbits
 394              		.align	1
 395              		.global	uartTxDMAConfiguration
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 400              	uartTxDMAConfiguration:
 401              	.LFB31:
  40:common/lib.stm32/uart.c **** 
  41:common/lib.stm32/uart.c **** void uartTxDMAConfiguration(USART_TypeDef *uart, DMA_Channel_TypeDef *dmatx,
  42:common/lib.stm32/uart.c **** 		uint8_t *txBuf, uint32_t len, bool ie)
  43:common/lib.stm32/uart.c **** {
 402              		.loc 2 43 1
 403              		.cfi_startproc
 404              		@ args = 4, pretend = 0, frame = 64
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406 0000 80B5     		push	{r7, lr}
 407              	.LCFI31:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 90B0     		sub	sp, sp, #64
 412              	.LCFI32:
 413              		.cfi_def_cfa_offset 72
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI33:
 416              		.cfi_def_cfa_register 7
 417 0006 F860     		str	r0, [r7, #12]
 418 0008 B960     		str	r1, [r7, #8]
 419 000a 7A60     		str	r2, [r7, #4]
 420 000c 3B60     		str	r3, [r7]
  44:common/lib.stm32/uart.c **** 	DMA_InitTypeDef DMA_InitStructure;
  45:common/lib.stm32/uart.c **** 
  46:common/lib.stm32/uart.c **** 	/* DMA1 Channel (triggered by USART_Tx event) Config */
  47:common/lib.stm32/uart.c **** 	DMA_Cmd(dmatx, DISABLE);
 421              		.loc 2 47 2
 422 000e 0021     		movs	r1, #0
 423 0010 B868     		ldr	r0, [r7, #8]
 424 0012 154B     		ldr	r3, .L24
 425 0014 9847     		blx	r3
 426              	.LVL1:
  48:common/lib.stm32/uart.c **** 	DMA_DeInit(dmatx);
 427              		.loc 2 48 2
 428 0016 B868     		ldr	r0, [r7, #8]
 429 0018 144B     		ldr	r3, .L24+4
 430 001a 9847     		blx	r3
 431              	.LVL2:
  49:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &uart->DR;
 432              		.loc 2 49 56
 433 001c FB68     		ldr	r3, [r7, #12]
 434 001e 0433     		adds	r3, r3, #4
 435              		.loc 2 49 43
 436 0020 7B61     		str	r3, [r7, #20]
  50:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) txBuf;
 437              		.loc 2 50 41
 438 0022 7B68     		ldr	r3, [r7, #4]
 439              		.loc 2 50 39
 440 0024 BB61     		str	r3, [r7, #24]
  51:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 441              		.loc 2 51 28
 442 0026 1023     		movs	r3, #16
 443 0028 FB61     		str	r3, [r7, #28]
  52:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_BufferSize = len;
 444              		.loc 2 52 35
 445 002a 3B68     		ldr	r3, [r7]
 446 002c 3B62     		str	r3, [r7, #32]
  53:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 447              		.loc 2 53 38
 448 002e 0023     		movs	r3, #0
 449 0030 7B62     		str	r3, [r7, #36]
  54:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 450              		.loc 2 54 34
 451 0032 8023     		movs	r3, #128
 452 0034 BB62     		str	r3, [r7, #40]
  55:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 453              		.loc 2 55 43
 454 0036 0023     		movs	r3, #0
 455 0038 FB62     		str	r3, [r7, #44]
  56:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 456              		.loc 2 56 39
 457 003a 0023     		movs	r3, #0
 458 003c 3B63     		str	r3, [r7, #48]
  57:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 459              		.loc 2 57 29
 460 003e 0023     		movs	r3, #0
 461 0040 7B63     		str	r3, [r7, #52]
  58:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 462              		.loc 2 58 33
 463 0042 4FF44053 		mov	r3, #12288
 464 0046 BB63     		str	r3, [r7, #56]
  59:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 465              		.loc 2 59 28
 466 0048 0023     		movs	r3, #0
 467 004a FB63     		str	r3, [r7, #60]
  60:common/lib.stm32/uart.c **** 	DMA_Init(dmatx, &DMA_InitStructure);
 468              		.loc 2 60 2
 469 004c 07F11403 		add	r3, r7, #20
 470 0050 1946     		mov	r1, r3
 471 0052 B868     		ldr	r0, [r7, #8]
 472 0054 064B     		ldr	r3, .L24+8
 473 0056 9847     		blx	r3
 474              	.LVL3:
  61:common/lib.stm32/uart.c **** 	DMA_Cmd(dmatx, ENABLE);
 475              		.loc 2 61 2
 476 0058 0121     		movs	r1, #1
 477 005a B868     		ldr	r0, [r7, #8]
 478 005c 024B     		ldr	r3, .L24
 479 005e 9847     		blx	r3
 480              	.LVL4:
  62:common/lib.stm32/uart.c **** 
  63:common/lib.stm32/uart.c **** }
 481              		.loc 2 63 1
 482 0060 00BF     		nop
 483 0062 4037     		adds	r7, r7, #64
 484              	.LCFI34:
 485              		.cfi_def_cfa_offset 8
 486 0064 BD46     		mov	sp, r7
 487              	.LCFI35:
 488              		.cfi_def_cfa_register 13
 489              		@ sp needed
 490 0066 80BD     		pop	{r7, pc}
 491              	.L25:
 492              		.align	2
 493              	.L24:
 494 0068 00000000 		.word	DMA_Cmd
 495 006c 00000000 		.word	DMA_DeInit
 496 0070 00000000 		.word	DMA_Init
 497              		.cfi_endproc
 498              	.LFE31:
 500              		.section	.text.uartRxDMAConfiguration,"ax",%progbits
 501              		.align	1
 502              		.global	uartRxDMAConfiguration
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 507              	uartRxDMAConfiguration:
 508              	.LFB32:
  64:common/lib.stm32/uart.c **** 
  65:common/lib.stm32/uart.c **** /**
  66:common/lib.stm32/uart.c ****  * @brief  Configures the DMA.
  67:common/lib.stm32/uart.c ****  * @param  uart, dmatx,dmarx,interrupt enable
  68:common/lib.stm32/uart.c ****  * @retval : None
  69:common/lib.stm32/uart.c ****  */
  70:common/lib.stm32/uart.c **** void uartRxDMAConfiguration(USART_TypeDef *uart, DMA_Channel_TypeDef *dmarx,
  71:common/lib.stm32/uart.c **** 		unsigned char *rxBuf, uint32_t len)
  72:common/lib.stm32/uart.c **** {
 509              		.loc 2 72 1
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 64
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513 0000 80B5     		push	{r7, lr}
 514              	.LCFI36:
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 7, -8
 517              		.cfi_offset 14, -4
 518 0002 90B0     		sub	sp, sp, #64
 519              	.LCFI37:
 520              		.cfi_def_cfa_offset 72
 521 0004 00AF     		add	r7, sp, #0
 522              	.LCFI38:
 523              		.cfi_def_cfa_register 7
 524 0006 F860     		str	r0, [r7, #12]
 525 0008 B960     		str	r1, [r7, #8]
 526 000a 7A60     		str	r2, [r7, #4]
 527 000c 3B60     		str	r3, [r7]
  73:common/lib.stm32/uart.c **** 	DMA_InitTypeDef DMA_InitStructure;
  74:common/lib.stm32/uart.c **** 
  75:common/lib.stm32/uart.c **** 	/* DMA1 Channel (triggered by USART1 Rx event) Config */
  76:common/lib.stm32/uart.c **** 	DMA_DeInit(dmarx);
 528              		.loc 2 76 2
 529 000e B868     		ldr	r0, [r7, #8]
 530 0010 134B     		ldr	r3, .L27
 531 0012 9847     		blx	r3
 532              	.LVL5:
  77:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &uart->DR;
 533              		.loc 2 77 56
 534 0014 FB68     		ldr	r3, [r7, #12]
 535 0016 0433     		adds	r3, r3, #4
 536              		.loc 2 77 43
 537 0018 7B61     		str	r3, [r7, #20]
  78:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) rxBuf;
 538              		.loc 2 78 41
 539 001a 7B68     		ldr	r3, [r7, #4]
 540              		.loc 2 78 39
 541 001c BB61     		str	r3, [r7, #24]
  79:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 542              		.loc 2 79 28
 543 001e 0023     		movs	r3, #0
 544 0020 FB61     		str	r3, [r7, #28]
  80:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_BufferSize = len;
 545              		.loc 2 80 35
 546 0022 3B68     		ldr	r3, [r7]
 547 0024 3B62     		str	r3, [r7, #32]
  81:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 548              		.loc 2 81 38
 549 0026 0023     		movs	r3, #0
 550 0028 7B62     		str	r3, [r7, #36]
  82:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 551              		.loc 2 82 34
 552 002a 8023     		movs	r3, #128
 553 002c BB62     		str	r3, [r7, #40]
  83:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 554              		.loc 2 83 43
 555 002e 0023     		movs	r3, #0
 556 0030 FB62     		str	r3, [r7, #44]
  84:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 557              		.loc 2 84 39
 558 0032 0023     		movs	r3, #0
 559 0034 3B63     		str	r3, [r7, #48]
  85:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 560              		.loc 2 85 29
 561 0036 2023     		movs	r3, #32
 562 0038 7B63     		str	r3, [r7, #52]
  86:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 563              		.loc 2 86 33
 564 003a 4FF44053 		mov	r3, #12288
 565 003e BB63     		str	r3, [r7, #56]
  87:common/lib.stm32/uart.c **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 566              		.loc 2 87 28
 567 0040 0023     		movs	r3, #0
 568 0042 FB63     		str	r3, [r7, #60]
  88:common/lib.stm32/uart.c **** 	DMA_Init(dmarx, &DMA_InitStructure);
 569              		.loc 2 88 2
 570 0044 07F11403 		add	r3, r7, #20
 571 0048 1946     		mov	r1, r3
 572 004a B868     		ldr	r0, [r7, #8]
 573 004c 054B     		ldr	r3, .L27+4
 574 004e 9847     		blx	r3
 575              	.LVL6:
  89:common/lib.stm32/uart.c **** 	DMA_Cmd(dmarx, ENABLE);
 576              		.loc 2 89 2
 577 0050 0121     		movs	r1, #1
 578 0052 B868     		ldr	r0, [r7, #8]
 579 0054 044B     		ldr	r3, .L27+8
 580 0056 9847     		blx	r3
 581              	.LVL7:
  90:common/lib.stm32/uart.c **** 
  91:common/lib.stm32/uart.c **** }
 582              		.loc 2 91 1
 583 0058 00BF     		nop
 584 005a 4037     		adds	r7, r7, #64
 585              	.LCFI39:
 586              		.cfi_def_cfa_offset 8
 587 005c BD46     		mov	sp, r7
 588              	.LCFI40:
 589              		.cfi_def_cfa_register 13
 590              		@ sp needed
 591 005e 80BD     		pop	{r7, pc}
 592              	.L28:
 593              		.align	2
 594              	.L27:
 595 0060 00000000 		.word	DMA_DeInit
 596 0064 00000000 		.word	DMA_Init
 597 0068 00000000 		.word	DMA_Cmd
 598              		.cfi_endproc
 599              	.LFE32:
 601              		.section	.text.uart1Init,"ax",%progbits
 602              		.align	1
 603              		.global	uart1Init
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 608              	uart1Init:
 609              	.LFB33:
  92:common/lib.stm32/uart.c **** void uart1Init(uint32_t baudrate)
  93:common/lib.stm32/uart.c **** {
 610              		.loc 2 93 1
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 24
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614 0000 90B5     		push	{r4, r7, lr}
 615              	.LCFI41:
 616              		.cfi_def_cfa_offset 12
 617              		.cfi_offset 4, -12
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 0002 87B0     		sub	sp, sp, #28
 621              	.LCFI42:
 622              		.cfi_def_cfa_offset 40
 623 0004 00AF     		add	r7, sp, #0
 624              	.LCFI43:
 625              		.cfi_def_cfa_register 7
 626 0006 7860     		str	r0, [r7, #4]
  94:common/lib.stm32/uart.c **** 
  95:common/lib.stm32/uart.c ****    // US1_QUEUE = xQueueCreate( 10, sizeof( unsigned int ) );
  96:common/lib.stm32/uart.c **** 
  97:common/lib.stm32/uart.c **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 627              		.loc 2 97 2
 628 0008 0121     		movs	r1, #1
 629 000a 0120     		movs	r0, #1
 630 000c 244B     		ldr	r3, .L30
 631 000e 9847     		blx	r3
 632              	.LVL8:
  98:common/lib.stm32/uart.c **** 
  99:common/lib.stm32/uart.c **** 	USART_DeInit(USART1);
 633              		.loc 2 99 2
 634 0010 2448     		ldr	r0, .L30+4
 635 0012 254B     		ldr	r3, .L30+8
 636 0014 9847     		blx	r3
 637              	.LVL9:
 100:common/lib.stm32/uart.c **** 
 101:common/lib.stm32/uart.c **** 
 102:common/lib.stm32/uart.c **** 	USART_InitTypeDef USART_InitStructure;
 103:common/lib.stm32/uart.c **** 
 104:common/lib.stm32/uart.c **** 	/* Enable AFIO,  clocks */
 105:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 638              		.loc 2 105 2
 639 0016 0121     		movs	r1, #1
 640 0018 0120     		movs	r0, #1
 641 001a 244B     		ldr	r3, .L30+12
 642 001c 9847     		blx	r3
 643              	.LVL10:
 106:common/lib.stm32/uart.c **** 
 107:common/lib.stm32/uart.c **** 	/* Enable GPIO clocks */
 108:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOA
 644              		.loc 2 108 2
 645 001e 0121     		movs	r1, #1
 646 0020 1C20     		movs	r0, #28
 647 0022 224B     		ldr	r3, .L30+12
 648 0024 9847     		blx	r3
 649              	.LVL11:
 109:common/lib.stm32/uart.c **** 	|RCC_APB2Periph_GPIOB, ENABLE);
 110:common/lib.stm32/uart.c **** 
 111:common/lib.stm32/uart.c **** 	/* Enable USART3,  clocks */
 112:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 650              		.loc 2 112 2
 651 0026 0121     		movs	r1, #1
 652 0028 4FF48040 		mov	r0, #16384
 653 002c 1F4B     		ldr	r3, .L30+12
 654 002e 9847     		blx	r3
 655              	.LVL12:
 113:common/lib.stm32/uart.c **** 	//GPIO_PinRemapConfig(GPIO_Remap_USART1,ENABLE);
 114:common/lib.stm32/uart.c **** 
 115:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_BaudRate = baudrate;
 656              		.loc 2 115 37
 657 0030 7B68     		ldr	r3, [r7, #4]
 658 0032 BB60     		str	r3, [r7, #8]
 116:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 659              		.loc 2 116 39
 660 0034 0023     		movs	r3, #0
 661 0036 BB81     		strh	r3, [r7, #12]	@ movhi
 117:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 662              		.loc 2 117 37
 663 0038 0023     		movs	r3, #0
 664 003a FB81     		strh	r3, [r7, #14]	@ movhi
 118:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 665              		.loc 2 118 35
 666 003c 0023     		movs	r3, #0
 667 003e 3B82     		strh	r3, [r7, #16]	@ movhi
 119:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_HardwareFlowControl
 120:common/lib.stm32/uart.c **** 			= USART_HardwareFlowControl_None;
 668              		.loc 2 120 4
 669 0040 0023     		movs	r3, #0
 670 0042 BB82     		strh	r3, [r7, #20]	@ movhi
 121:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 671              		.loc 2 121 33
 672 0044 0C23     		movs	r3, #12
 673 0046 7B82     		strh	r3, [r7, #18]	@ movhi
 122:common/lib.stm32/uart.c **** 	/* Configure USART3 */
 123:common/lib.stm32/uart.c **** 	USART_Init(USART1, &USART_InitStructure);
 674              		.loc 2 123 2
 675 0048 07F10803 		add	r3, r7, #8
 676 004c 1946     		mov	r1, r3
 677 004e 1548     		ldr	r0, .L30+4
 678 0050 174B     		ldr	r3, .L30+16
 679 0052 9847     		blx	r3
 680              	.LVL13:
 124:common/lib.stm32/uart.c **** 
 125:common/lib.stm32/uart.c **** 	USART_ClearFlag(USART1, USART_FLAG_CTS | USART_FLAG_LBD  |
 681              		.loc 2 125 2
 682 0054 4FF45871 		mov	r1, #864
 683 0058 1248     		ldr	r0, .L30+4
 684 005a 164B     		ldr	r3, .L30+20
 685 005c 9847     		blx	r3
 686              	.LVL14:
 126:common/lib.stm32/uart.c **** 						USART_FLAG_TC  | USART_FLAG_RXNE );
 127:common/lib.stm32/uart.c **** 
 128:common/lib.stm32/uart.c **** 	uartRxDMAConfiguration(USART1, USART1_RX_DMA, u1Fifo.rxBuf,
 687              		.loc 2 128 2
 688 005e 4FF48063 		mov	r3, #1024
 689 0062 154A     		ldr	r2, .L30+24
 690 0064 1549     		ldr	r1, .L30+28
 691 0066 0F48     		ldr	r0, .L30+4
 692 0068 154C     		ldr	r4, .L30+32
 693 006a A047     		blx	r4
 694              	.LVL15:
 129:common/lib.stm32/uart.c **** 			UARTRX_FIFO_SIZE);
 130:common/lib.stm32/uart.c **** 	USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 695              		.loc 2 130 2
 696 006c 0122     		movs	r2, #1
 697 006e 8021     		movs	r1, #128
 698 0070 0C48     		ldr	r0, .L30+4
 699 0072 144B     		ldr	r3, .L30+36
 700 0074 9847     		blx	r3
 701              	.LVL16:
 131:common/lib.stm32/uart.c **** 	/* Enable USART_Rx DMA Receive request */
 132:common/lib.stm32/uart.c **** 	USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);
 702              		.loc 2 132 2
 703 0076 0122     		movs	r2, #1
 704 0078 4021     		movs	r1, #64
 705 007a 0A48     		ldr	r0, .L30+4
 706 007c 114B     		ldr	r3, .L30+36
 707 007e 9847     		blx	r3
 708              	.LVL17:
 133:common/lib.stm32/uart.c **** 
 134:common/lib.stm32/uart.c **** 	  /* Enable USART_Rx Receive interrupt */
 135:common/lib.stm32/uart.c **** 	  //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 136:common/lib.stm32/uart.c **** 	    /* Configure USART3 interrupt */
 137:common/lib.stm32/uart.c **** 	    NVIC_SetPriority(USART1_RX_DMA_IRQn, 0x03);
 709              		.loc 2 137 6
 710 0080 0321     		movs	r1, #3
 711 0082 0F20     		movs	r0, #15
 712 0084 104B     		ldr	r3, .L30+40
 713 0086 9847     		blx	r3
 714              	.LVL18:
 138:common/lib.stm32/uart.c **** 	    NVIC_EnableIRQ(USART1_RX_DMA_IRQn);
 715              		.loc 2 138 6
 716 0088 0F20     		movs	r0, #15
 717 008a 104B     		ldr	r3, .L30+44
 718 008c 9847     		blx	r3
 719              	.LVL19:
 139:common/lib.stm32/uart.c **** 	/* Enable the USART3 */
 140:common/lib.stm32/uart.c **** 	USART_Cmd(USART1, ENABLE);
 720              		.loc 2 140 2
 721 008e 0121     		movs	r1, #1
 722 0090 0448     		ldr	r0, .L30+4
 723 0092 0F4B     		ldr	r3, .L30+48
 724 0094 9847     		blx	r3
 725              	.LVL20:
 141:common/lib.stm32/uart.c **** }
 726              		.loc 2 141 1
 727 0096 00BF     		nop
 728 0098 1C37     		adds	r7, r7, #28
 729              	.LCFI44:
 730              		.cfi_def_cfa_offset 12
 731 009a BD46     		mov	sp, r7
 732              	.LCFI45:
 733              		.cfi_def_cfa_register 13
 734              		@ sp needed
 735 009c 90BD     		pop	{r4, r7, pc}
 736              	.L31:
 737 009e 00BF     		.align	2
 738              	.L30:
 739 00a0 00000000 		.word	RCC_AHBPeriphClockCmd
 740 00a4 00380140 		.word	1073821696
 741 00a8 00000000 		.word	USART_DeInit
 742 00ac 00000000 		.word	RCC_APB2PeriphClockCmd
 743 00b0 00000000 		.word	USART_Init
 744 00b4 00000000 		.word	USART_ClearFlag
 745 00b8 0C000000 		.word	u1Fifo+12
 746 00bc 58000240 		.word	1073872984
 747 00c0 00000000 		.word	uartRxDMAConfiguration
 748 00c4 00000000 		.word	USART_DMACmd
 749 00c8 00000000 		.word	NVIC_SetPriority
 750 00cc 00000000 		.word	NVIC_EnableIRQ
 751 00d0 00000000 		.word	USART_Cmd
 752              		.cfi_endproc
 753              	.LFE33:
 755              		.section	.text.uart1GetChar,"ax",%progbits
 756              		.align	1
 757              		.global	uart1GetChar
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 762              	uart1GetChar:
 763              	.LFB34:
 142:common/lib.stm32/uart.c **** 
 143:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 144:common/lib.stm32/uart.c **** int uart1GetChar(unsigned char *ch)
 145:common/lib.stm32/uart.c **** {
 764              		.loc 2 145 1
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 8
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0000 90B5     		push	{r4, r7, lr}
 769              	.LCFI46:
 770              		.cfi_def_cfa_offset 12
 771              		.cfi_offset 4, -12
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 0002 83B0     		sub	sp, sp, #12
 775              	.LCFI47:
 776              		.cfi_def_cfa_offset 24
 777 0004 00AF     		add	r7, sp, #0
 778              	.LCFI48:
 779              		.cfi_def_cfa_register 7
 780 0006 7860     		str	r0, [r7, #4]
 146:common/lib.stm32/uart.c **** 
 147:common/lib.stm32/uart.c **** 	//int temp = DMA_GetCurrDataCounter(USART1_RX_DMA);
 148:common/lib.stm32/uart.c **** 	if (u1Fifo.rxCurrent != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(USART1_RX_DMA)))
 781              		.loc 2 148 12
 782 0008 114B     		ldr	r3, .L35
 783 000a 1C68     		ldr	r4, [r3]
 784              		.loc 2 148 46
 785 000c 1148     		ldr	r0, .L35+4
 786 000e 124B     		ldr	r3, .L35+8
 787 0010 9847     		blx	r3
 788              	.LVL21:
 789 0012 0346     		mov	r3, r0
 790              		.loc 2 148 44
 791 0014 C3F58063 		rsb	r3, r3, #1024
 792              		.loc 2 148 5
 793 0018 9C42     		cmp	r4, r3
 794 001a 13D0     		beq	.L33
 149:common/lib.stm32/uart.c **** 	{
 150:common/lib.stm32/uart.c **** 		*ch = u1Fifo.rxBuf[u1Fifo.rxCurrent];
 795              		.loc 2 150 28
 796 001c 0C4B     		ldr	r3, .L35
 797 001e 1B68     		ldr	r3, [r3]
 798              		.loc 2 150 21
 799 0020 0B4A     		ldr	r2, .L35
 800 0022 1344     		add	r3, r3, r2
 801 0024 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 802              		.loc 2 150 7
 803 0026 7B68     		ldr	r3, [r7, #4]
 804 0028 1A70     		strb	r2, [r3]
 151:common/lib.stm32/uart.c **** 		u1Fifo.rxCurrent++;
 805              		.loc 2 151 9
 806 002a 094B     		ldr	r3, .L35
 807 002c 1B68     		ldr	r3, [r3]
 808              		.loc 2 151 19
 809 002e 0133     		adds	r3, r3, #1
 810 0030 074A     		ldr	r2, .L35
 811 0032 1360     		str	r3, [r2]
 152:common/lib.stm32/uart.c **** 		u1Fifo.rxCurrent &= UARTRX_FIFO_SIZE_MASK;
 812              		.loc 2 152 20
 813 0034 064B     		ldr	r3, .L35
 814 0036 1B68     		ldr	r3, [r3]
 815 0038 C3F30903 		ubfx	r3, r3, #0, #10
 816 003c 044A     		ldr	r2, .L35
 817 003e 1360     		str	r3, [r2]
 153:common/lib.stm32/uart.c **** 		return 1;
 818              		.loc 2 153 10
 819 0040 0123     		movs	r3, #1
 820 0042 00E0     		b	.L34
 821              	.L33:
 154:common/lib.stm32/uart.c **** 	}
 155:common/lib.stm32/uart.c **** 	return 0;
 822              		.loc 2 155 9
 823 0044 0023     		movs	r3, #0
 824              	.L34:
 156:common/lib.stm32/uart.c **** }
 825              		.loc 2 156 1
 826 0046 1846     		mov	r0, r3
 827 0048 0C37     		adds	r7, r7, #12
 828              	.LCFI49:
 829              		.cfi_def_cfa_offset 12
 830 004a BD46     		mov	sp, r7
 831              	.LCFI50:
 832              		.cfi_def_cfa_register 13
 833              		@ sp needed
 834 004c 90BD     		pop	{r4, r7, pc}
 835              	.L36:
 836 004e 00BF     		.align	2
 837              	.L35:
 838 0050 00000000 		.word	u1Fifo
 839 0054 58000240 		.word	1073872984
 840 0058 00000000 		.word	DMA_GetCurrDataCounter
 841              		.cfi_endproc
 842              	.LFE34:
 844              		.section	.text.uart1PutChar,"ax",%progbits
 845              		.align	1
 846              		.global	uart1PutChar
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 851              	uart1PutChar:
 852              	.LFB35:
 157:common/lib.stm32/uart.c **** 
 158:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 159:common/lib.stm32/uart.c **** unsigned int uart1PutChar(unsigned char ch)
 160:common/lib.stm32/uart.c **** {
 853              		.loc 2 160 1
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 8
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857              		@ link register save eliminated.
 858 0000 80B4     		push	{r7}
 859              	.LCFI51:
 860              		.cfi_def_cfa_offset 4
 861              		.cfi_offset 7, -4
 862 0002 83B0     		sub	sp, sp, #12
 863              	.LCFI52:
 864              		.cfi_def_cfa_offset 16
 865 0004 00AF     		add	r7, sp, #0
 866              	.LCFI53:
 867              		.cfi_def_cfa_register 7
 868 0006 0346     		mov	r3, r0
 869 0008 FB71     		strb	r3, [r7, #7]
 161:common/lib.stm32/uart.c **** 
 162:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 0;
 163:common/lib.stm32/uart.c **** 	u1Fifo.txBufB[u1Fifo.txCurrentEnd] = ch;
 870              		.loc 2 163 22
 871 000a 154B     		ldr	r3, .L40
 872 000c 9B68     		ldr	r3, [r3, #8]
 873              		.loc 2 163 37
 874 000e 144A     		ldr	r2, .L40
 875 0010 1344     		add	r3, r3, r2
 876 0012 FA79     		ldrb	r2, [r7, #7]
 877 0014 83F84C24 		strb	r2, [r3, #1100]
 164:common/lib.stm32/uart.c **** 	u1Fifo.txCurrentEnd++;
 878              		.loc 2 164 8
 879 0018 114B     		ldr	r3, .L40
 880 001a 9B68     		ldr	r3, [r3, #8]
 881              		.loc 2 164 21
 882 001c 0133     		adds	r3, r3, #1
 883 001e 104A     		ldr	r2, .L40
 884 0020 9360     		str	r3, [r2, #8]
 165:common/lib.stm32/uart.c **** 	u1Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 885              		.loc 2 165 22
 886 0022 0F4B     		ldr	r3, .L40
 887 0024 9B68     		ldr	r3, [r3, #8]
 888 0026 C3F30903 		ubfx	r3, r3, #0, #10
 889 002a 0D4A     		ldr	r2, .L40
 890 002c 9360     		str	r3, [r2, #8]
 166:common/lib.stm32/uart.c **** 
 167:common/lib.stm32/uart.c **** 	if (u1Fifo.txCurrentEnd == u1Fifo.txCurrentStart)
 891              		.loc 2 167 12
 892 002e 0C4B     		ldr	r3, .L40
 893 0030 9A68     		ldr	r2, [r3, #8]
 894              		.loc 2 167 35
 895 0032 0B4B     		ldr	r3, .L40
 896 0034 5B68     		ldr	r3, [r3, #4]
 897              		.loc 2 167 5
 898 0036 9A42     		cmp	r2, r3
 899 0038 0CD1     		bne	.L38
 168:common/lib.stm32/uart.c **** 	{
 169:common/lib.stm32/uart.c **** 		u1Fifo.txCurrentEnd--;
 900              		.loc 2 169 9
 901 003a 094B     		ldr	r3, .L40
 902 003c 9B68     		ldr	r3, [r3, #8]
 903              		.loc 2 169 22
 904 003e 013B     		subs	r3, r3, #1
 905 0040 074A     		ldr	r2, .L40
 906 0042 9360     		str	r3, [r2, #8]
 170:common/lib.stm32/uart.c **** 		u1Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 907              		.loc 2 170 23
 908 0044 064B     		ldr	r3, .L40
 909 0046 9B68     		ldr	r3, [r3, #8]
 910 0048 C3F30903 		ubfx	r3, r3, #0, #10
 911 004c 044A     		ldr	r2, .L40
 912 004e 9360     		str	r3, [r2, #8]
 171:common/lib.stm32/uart.c **** 		//		IEC2bits.DMA4IE = 1;
 172:common/lib.stm32/uart.c **** 		return 0;
 913              		.loc 2 172 10
 914 0050 0023     		movs	r3, #0
 915 0052 00E0     		b	.L39
 916              	.L38:
 173:common/lib.stm32/uart.c **** 	}
 174:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 1;
 175:common/lib.stm32/uart.c **** 	return 1;
 917              		.loc 2 175 9
 918 0054 0123     		movs	r3, #1
 919              	.L39:
 176:common/lib.stm32/uart.c **** }
 920              		.loc 2 176 1
 921 0056 1846     		mov	r0, r3
 922 0058 0C37     		adds	r7, r7, #12
 923              	.LCFI54:
 924              		.cfi_def_cfa_offset 4
 925 005a BD46     		mov	sp, r7
 926              	.LCFI55:
 927              		.cfi_def_cfa_register 13
 928              		@ sp needed
 929 005c 80BC     		pop	{r7}
 930              	.LCFI56:
 931              		.cfi_restore 7
 932              		.cfi_def_cfa_offset 0
 933 005e 7047     		bx	lr
 934              	.L41:
 935              		.align	2
 936              	.L40:
 937 0060 00000000 		.word	u1Fifo
 938              		.cfi_endproc
 939              	.LFE35:
 941              		.section	.text.uart1TxTask,"ax",%progbits
 942              		.align	1
 943              		.global	uart1TxTask
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 948              	uart1TxTask:
 949              	.LFB36:
 177:common/lib.stm32/uart.c **** 
 178:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 179:common/lib.stm32/uart.c **** void uart1TxTask()
 180:common/lib.stm32/uart.c **** {
 950              		.loc 2 180 1
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 8
 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954 0000 90B5     		push	{r4, r7, lr}
 955              	.LCFI57:
 956              		.cfi_def_cfa_offset 12
 957              		.cfi_offset 4, -12
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 0002 85B0     		sub	sp, sp, #20
 961              	.LCFI58:
 962              		.cfi_def_cfa_offset 32
 963 0004 02AF     		add	r7, sp, #8
 964              	.LCFI59:
 965              		.cfi_def_cfa 7, 24
 181:common/lib.stm32/uart.c **** 	unsigned int cnt0 = 0;
 966              		.loc 2 181 15
 967 0006 0023     		movs	r3, #0
 968 0008 7B60     		str	r3, [r7, #4]
 182:common/lib.stm32/uart.c **** 	// If DMA COMPLITE
 183:common/lib.stm32/uart.c **** 	if ((USART1_TX_DMA->CCR & ((uint32_t) 0x00000001)) == 0)
 969              		.loc 2 183 20
 970 000a 234B     		ldr	r3, .L48
 971 000c 1B68     		ldr	r3, [r3]
 972              		.loc 2 183 26
 973 000e 03F00103 		and	r3, r3, #1
 974              		.loc 2 183 5
 975 0012 002B     		cmp	r3, #0
 976 0014 3BD1     		bne	.L47
 184:common/lib.stm32/uart.c **** 	{
 185:common/lib.stm32/uart.c **** 		while ((u1Fifo.txCurrentStart != u1Fifo.txCurrentEnd) && (cnt0< UARTTX_FIFO_SIZE))
 977              		.loc 2 185 9
 978 0016 1AE0     		b	.L44
 979              	.L46:
 186:common/lib.stm32/uart.c **** 		{
 187:common/lib.stm32/uart.c **** 			u1Fifo.txBuf[cnt0] = u1Fifo.txBufB[u1Fifo.txCurrentStart];
 980              		.loc 2 187 45
 981 0018 204B     		ldr	r3, .L48+4
 982 001a 5B68     		ldr	r3, [r3, #4]
 983              		.loc 2 187 38
 984 001c 1F4A     		ldr	r2, .L48+4
 985 001e 1344     		add	r3, r3, r2
 986 0020 93F84C14 		ldrb	r1, [r3, #1100]	@ zero_extendqisi2
 987              		.loc 2 187 23
 988 0024 1D4A     		ldr	r2, .L48+4
 989 0026 7B68     		ldr	r3, [r7, #4]
 990 0028 1344     		add	r3, r3, r2
 991 002a 03F20C43 		addw	r3, r3, #1036
 992 002e 0A46     		mov	r2, r1
 993 0030 1A70     		strb	r2, [r3]
 188:common/lib.stm32/uart.c **** 			u1Fifo.txCurrentStart++;
 994              		.loc 2 188 10
 995 0032 1A4B     		ldr	r3, .L48+4
 996 0034 5B68     		ldr	r3, [r3, #4]
 997              		.loc 2 188 25
 998 0036 0133     		adds	r3, r3, #1
 999 0038 184A     		ldr	r2, .L48+4
 1000 003a 5360     		str	r3, [r2, #4]
 189:common/lib.stm32/uart.c **** 			u1Fifo.txCurrentStart &= UARTTX_FIFOB_SIZE_MASK;
 1001              		.loc 2 189 26
 1002 003c 174B     		ldr	r3, .L48+4
 1003 003e 5B68     		ldr	r3, [r3, #4]
 1004 0040 C3F30903 		ubfx	r3, r3, #0, #10
 1005 0044 154A     		ldr	r2, .L48+4
 1006 0046 5360     		str	r3, [r2, #4]
 190:common/lib.stm32/uart.c **** 			cnt0++;
 1007              		.loc 2 190 8
 1008 0048 7B68     		ldr	r3, [r7, #4]
 1009 004a 0133     		adds	r3, r3, #1
 1010 004c 7B60     		str	r3, [r7, #4]
 1011              	.L44:
 185:common/lib.stm32/uart.c **** 		{
 1012              		.loc 2 185 17
 1013 004e 134B     		ldr	r3, .L48+4
 1014 0050 5A68     		ldr	r2, [r3, #4]
 185:common/lib.stm32/uart.c **** 		{
 1015              		.loc 2 185 42
 1016 0052 124B     		ldr	r3, .L48+4
 1017 0054 9B68     		ldr	r3, [r3, #8]
 185:common/lib.stm32/uart.c **** 		{
 1018              		.loc 2 185 9
 1019 0056 9A42     		cmp	r2, r3
 1020 0058 02D0     		beq	.L45
 185:common/lib.stm32/uart.c **** 		{
 1021              		.loc 2 185 57 discriminator 1
 1022 005a 7B68     		ldr	r3, [r7, #4]
 1023 005c 3F2B     		cmp	r3, #63
 1024 005e DBD9     		bls	.L46
 1025              	.L45:
 191:common/lib.stm32/uart.c **** 		}
 192:common/lib.stm32/uart.c **** 		if (cnt0 > 0)
 1026              		.loc 2 192 6
 1027 0060 7B68     		ldr	r3, [r7, #4]
 1028 0062 002B     		cmp	r3, #0
 1029 0064 13D0     		beq	.L47
 193:common/lib.stm32/uart.c **** 		{
 194:common/lib.stm32/uart.c **** 
 195:common/lib.stm32/uart.c **** 			uartTxDMAConfiguration(USART1, USART1_TX_DMA, u1Fifo.txBuf, cnt0,1);
 1030              		.loc 2 195 4
 1031 0066 0123     		movs	r3, #1
 1032 0068 0093     		str	r3, [sp]
 1033 006a 7B68     		ldr	r3, [r7, #4]
 1034 006c 0C4A     		ldr	r2, .L48+8
 1035 006e 0A49     		ldr	r1, .L48
 1036 0070 0C48     		ldr	r0, .L48+12
 1037 0072 0D4C     		ldr	r4, .L48+16
 1038 0074 A047     		blx	r4
 1039              	.LVL22:
 196:common/lib.stm32/uart.c **** 			DMA_ITConfig(USART1_TX_DMA, DMA_IT_TC, ENABLE);
 1040              		.loc 2 196 4
 1041 0076 0122     		movs	r2, #1
 1042 0078 0221     		movs	r1, #2
 1043 007a 0748     		ldr	r0, .L48
 1044 007c 0B4B     		ldr	r3, .L48+20
 1045 007e 9847     		blx	r3
 1046              	.LVL23:
 197:common/lib.stm32/uart.c **** 				//}
 198:common/lib.stm32/uart.c **** 				/* Enable USART_Tx DMA Tansmit request */
 199:common/lib.stm32/uart.c **** 				/* Configure DMA1_Channel_Tx interrupt */
 200:common/lib.stm32/uart.c **** 				NVIC_SetPriority(USART1_TX_DMA_IRQn, 0x02);
 1047              		.loc 2 200 5
 1048 0080 0221     		movs	r1, #2
 1049 0082 0E20     		movs	r0, #14
 1050 0084 0A4B     		ldr	r3, .L48+24
 1051 0086 9847     		blx	r3
 1052              	.LVL24:
 201:common/lib.stm32/uart.c **** 				NVIC_EnableIRQ(USART1_TX_DMA_IRQn);
 1053              		.loc 2 201 5
 1054 0088 0E20     		movs	r0, #14
 1055 008a 0A4B     		ldr	r3, .L48+28
 1056 008c 9847     		blx	r3
 1057              	.LVL25:
 1058              	.L47:
 202:common/lib.stm32/uart.c **** 		}
 203:common/lib.stm32/uart.c **** 
 204:common/lib.stm32/uart.c **** 	}
 205:common/lib.stm32/uart.c **** }
 1059              		.loc 2 205 1
 1060 008e 00BF     		nop
 1061 0090 0C37     		adds	r7, r7, #12
 1062              	.LCFI60:
 1063              		.cfi_def_cfa_offset 12
 1064 0092 BD46     		mov	sp, r7
 1065              	.LCFI61:
 1066              		.cfi_def_cfa_register 13
 1067              		@ sp needed
 1068 0094 90BD     		pop	{r4, r7, pc}
 1069              	.L49:
 1070 0096 00BF     		.align	2
 1071              	.L48:
 1072 0098 44000240 		.word	1073872964
 1073 009c 00000000 		.word	u1Fifo
 1074 00a0 0C040000 		.word	u1Fifo+1036
 1075 00a4 00380140 		.word	1073821696
 1076 00a8 00000000 		.word	uartTxDMAConfiguration
 1077 00ac 00000000 		.word	DMA_ITConfig
 1078 00b0 00000000 		.word	NVIC_SetPriority
 1079 00b4 00000000 		.word	NVIC_EnableIRQ
 1080              		.cfi_endproc
 1081              	.LFE36:
 1083              		.section	.text.uart1Read,"ax",%progbits
 1084              		.align	1
 1085              		.global	uart1Read
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1090              	uart1Read:
 1091              	.LFB37:
 206:common/lib.stm32/uart.c **** 
 207:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 208:common/lib.stm32/uart.c **** unsigned int uart1Read(unsigned char *dsn, unsigned int max_len)
 209:common/lib.stm32/uart.c **** {
 1092              		.loc 2 209 1
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 24
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096 0000 80B5     		push	{r7, lr}
 1097              	.LCFI62:
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 7, -8
 1100              		.cfi_offset 14, -4
 1101 0002 86B0     		sub	sp, sp, #24
 1102              	.LCFI63:
 1103              		.cfi_def_cfa_offset 32
 1104 0004 00AF     		add	r7, sp, #0
 1105              	.LCFI64:
 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
 1108 0008 3960     		str	r1, [r7]
 210:common/lib.stm32/uart.c **** 	unsigned short cntr = 0, crc = 0;
 1109              		.loc 2 210 17
 1110 000a 0023     		movs	r3, #0
 1111 000c FB82     		strh	r3, [r7, #22]	@ movhi
 1112              		.loc 2 210 27
 1113 000e 0023     		movs	r3, #0
 1114 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 211:common/lib.stm32/uart.c **** 	unsigned char v, *ptr = dsn;
 1115              		.loc 2 211 20
 1116 0012 7B68     		ldr	r3, [r7, #4]
 1117 0014 3B61     		str	r3, [r7, #16]
 212:common/lib.stm32/uart.c **** 
 213:common/lib.stm32/uart.c **** 	while (uart1GetChar(&v) && (max_len > cntr))
 1118              		.loc 2 213 8
 1119 0016 0DE0     		b	.L51
 1120              	.L53:
 214:common/lib.stm32/uart.c **** 	{
 215:common/lib.stm32/uart.c **** 		*ptr = v;
 1121              		.loc 2 215 8
 1122 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1123 001a 3B69     		ldr	r3, [r7, #16]
 1124 001c 1A70     		strb	r2, [r3]
 216:common/lib.stm32/uart.c **** 		ptr++;
 1125              		.loc 2 216 6
 1126 001e 3B69     		ldr	r3, [r7, #16]
 1127 0020 0133     		adds	r3, r3, #1
 1128 0022 3B61     		str	r3, [r7, #16]
 217:common/lib.stm32/uart.c **** 		crc += v;
 1129              		.loc 2 217 7
 1130 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1131 0026 9AB2     		uxth	r2, r3
 1132 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1133 002a 1344     		add	r3, r3, r2
 1134 002c BB82     		strh	r3, [r7, #20]	@ movhi
 218:common/lib.stm32/uart.c **** 		cntr++;
 1135              		.loc 2 218 7
 1136 002e FB8A     		ldrh	r3, [r7, #22]
 1137 0030 0133     		adds	r3, r3, #1
 1138 0032 FB82     		strh	r3, [r7, #22]	@ movhi
 1139              	.L51:
 213:common/lib.stm32/uart.c **** 	{
 1140              		.loc 2 213 9
 1141 0034 07F10F03 		add	r3, r7, #15
 1142 0038 1846     		mov	r0, r3
 1143 003a 074B     		ldr	r3, .L55
 1144 003c 9847     		blx	r3
 1145              	.LVL26:
 1146 003e 0346     		mov	r3, r0
 213:common/lib.stm32/uart.c **** 	{
 1147              		.loc 2 213 8
 1148 0040 002B     		cmp	r3, #0
 1149 0042 03D0     		beq	.L52
 213:common/lib.stm32/uart.c **** 	{
 1150              		.loc 2 213 38 discriminator 1
 1151 0044 FB8A     		ldrh	r3, [r7, #22]
 213:common/lib.stm32/uart.c **** 	{
 1152              		.loc 2 213 26 discriminator 1
 1153 0046 3A68     		ldr	r2, [r7]
 1154 0048 9A42     		cmp	r2, r3
 1155 004a E5D8     		bhi	.L53
 1156              	.L52:
 219:common/lib.stm32/uart.c **** 	}
 220:common/lib.stm32/uart.c **** 
 221:common/lib.stm32/uart.c **** 	return cntr; //  error here
 1157              		.loc 2 221 9
 1158 004c FB8A     		ldrh	r3, [r7, #22]
 222:common/lib.stm32/uart.c **** }
 1159              		.loc 2 222 1
 1160 004e 1846     		mov	r0, r3
 1161 0050 1837     		adds	r7, r7, #24
 1162              	.LCFI65:
 1163              		.cfi_def_cfa_offset 8
 1164 0052 BD46     		mov	sp, r7
 1165              	.LCFI66:
 1166              		.cfi_def_cfa_register 13
 1167              		@ sp needed
 1168 0054 80BD     		pop	{r7, pc}
 1169              	.L56:
 1170 0056 00BF     		.align	2
 1171              	.L55:
 1172 0058 00000000 		.word	uart1GetChar
 1173              		.cfi_endproc
 1174              	.LFE37:
 1176              		.section	.text.uart1Write,"ax",%progbits
 1177              		.align	1
 1178              		.global	uart1Write
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1183              	uart1Write:
 1184              	.LFB38:
 223:common/lib.stm32/uart.c **** 
 224:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 225:common/lib.stm32/uart.c **** 
 226:common/lib.stm32/uart.c **** void uart1Write(unsigned char *src, unsigned int len)
 227:common/lib.stm32/uart.c **** {
 1185              		.loc 2 227 1
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 16
 1188              		@ frame_needed = 1, uses_anonymous_args = 0
 1189 0000 80B5     		push	{r7, lr}
 1190              	.LCFI67:
 1191              		.cfi_def_cfa_offset 8
 1192              		.cfi_offset 7, -8
 1193              		.cfi_offset 14, -4
 1194 0002 84B0     		sub	sp, sp, #16
 1195              	.LCFI68:
 1196              		.cfi_def_cfa_offset 24
 1197 0004 00AF     		add	r7, sp, #0
 1198              	.LCFI69:
 1199              		.cfi_def_cfa_register 7
 1200 0006 7860     		str	r0, [r7, #4]
 1201 0008 3960     		str	r1, [r7]
 228:common/lib.stm32/uart.c **** 	unsigned int Param;
 229:common/lib.stm32/uart.c **** 	unsigned char ch;
 230:common/lib.stm32/uart.c **** 	unsigned int rezult;
 231:common/lib.stm32/uart.c **** 	if (len == 0)
 1202              		.loc 2 231 5
 1203 000a 3B68     		ldr	r3, [r7]
 1204 000c 002B     		cmp	r3, #0
 1205 000e 14D0     		beq	.L62
 232:common/lib.stm32/uart.c **** 		return;
 233:common/lib.stm32/uart.c **** 	while (len>0)
 1206              		.loc 2 233 8
 1207 0010 0DE0     		b	.L60
 1208              	.L61:
 234:common/lib.stm32/uart.c **** 	{
 235:common/lib.stm32/uart.c **** 		ch = *src;
 1209              		.loc 2 235 6
 1210 0012 7B68     		ldr	r3, [r7, #4]
 1211 0014 1B78     		ldrb	r3, [r3]
 1212 0016 FB73     		strb	r3, [r7, #15]
 236:common/lib.stm32/uart.c **** 		rezult = uart1PutChar(ch);
 1213              		.loc 2 236 12
 1214 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1215 001a 1846     		mov	r0, r3
 1216 001c 094B     		ldr	r3, .L63
 1217 001e 9847     		blx	r3
 1218              	.LVL27:
 1219 0020 B860     		str	r0, [r7, #8]
 237:common/lib.stm32/uart.c **** 		src++;
 1220              		.loc 2 237 6
 1221 0022 7B68     		ldr	r3, [r7, #4]
 1222 0024 0133     		adds	r3, r3, #1
 1223 0026 7B60     		str	r3, [r7, #4]
 238:common/lib.stm32/uart.c **** 		len--;
 1224              		.loc 2 238 6
 1225 0028 3B68     		ldr	r3, [r7]
 1226 002a 013B     		subs	r3, r3, #1
 1227 002c 3B60     		str	r3, [r7]
 1228              	.L60:
 233:common/lib.stm32/uart.c **** 	{
 1229              		.loc 2 233 8
 1230 002e 3B68     		ldr	r3, [r7]
 1231 0030 002B     		cmp	r3, #0
 1232 0032 EED1     		bne	.L61
 239:common/lib.stm32/uart.c **** 	}
 240:common/lib.stm32/uart.c **** 	uart1TxTask();
 1233              		.loc 2 240 2
 1234 0034 044B     		ldr	r3, .L63+4
 1235 0036 9847     		blx	r3
 1236              	.LVL28:
 1237 0038 00E0     		b	.L57
 1238              	.L62:
 232:common/lib.stm32/uart.c **** 	while (len>0)
 1239              		.loc 2 232 3
 1240 003a 00BF     		nop
 1241              	.L57:
 241:common/lib.stm32/uart.c **** }
 1242              		.loc 2 241 1
 1243 003c 1037     		adds	r7, r7, #16
 1244              	.LCFI70:
 1245              		.cfi_def_cfa_offset 8
 1246 003e BD46     		mov	sp, r7
 1247              	.LCFI71:
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 0040 80BD     		pop	{r7, pc}
 1251              	.L64:
 1252 0042 00BF     		.align	2
 1253              	.L63:
 1254 0044 00000000 		.word	uart1PutChar
 1255 0048 00000000 		.word	uart1TxTask
 1256              		.cfi_endproc
 1257              	.LFE38:
 1259              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 1260              		.align	1
 1261              		.global	DMA1_Channel4_IRQHandler
 1262              		.syntax unified
 1263              		.thumb
 1264              		.thumb_func
 1266              	DMA1_Channel4_IRQHandler:
 1267              	.LFB39:
 242:common/lib.stm32/uart.c **** 
 243:common/lib.stm32/uart.c **** 
 244:common/lib.stm32/uart.c **** //UART 1 DMA INTERRUPT
 245:common/lib.stm32/uart.c **** void DMA1_Channel4_IRQHandler(void)
 246:common/lib.stm32/uart.c **** {
 1268              		.loc 2 246 1
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 1, uses_anonymous_args = 0
 1272 0000 80B5     		push	{r7, lr}
 1273              	.LCFI72:
 1274              		.cfi_def_cfa_offset 8
 1275              		.cfi_offset 7, -8
 1276              		.cfi_offset 14, -4
 1277 0002 00AF     		add	r7, sp, #0
 1278              	.LCFI73:
 1279              		.cfi_def_cfa_register 7
 247:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel2 transfer*/
 248:common/lib.stm32/uart.c **** 	DMA_Cmd(USART1_TX_DMA, DISABLE);
 1280              		.loc 2 248 2
 1281 0004 0021     		movs	r1, #0
 1282 0006 0548     		ldr	r0, .L66
 1283 0008 054B     		ldr	r3, .L66+4
 1284 000a 9847     		blx	r3
 1285              	.LVL29:
 249:common/lib.stm32/uart.c **** 
 250:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 251:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA1_FLAG_TC4);
 1286              		.loc 2 251 2
 1287 000c 4FF40050 		mov	r0, #8192
 1288 0010 044B     		ldr	r3, .L66+8
 1289 0012 9847     		blx	r3
 1290              	.LVL30:
 252:common/lib.stm32/uart.c **** 	uart1TxTask();
 1291              		.loc 2 252 2
 1292 0014 044B     		ldr	r3, .L66+12
 1293 0016 9847     		blx	r3
 1294              	.LVL31:
 253:common/lib.stm32/uart.c **** }
 1295              		.loc 2 253 1
 1296 0018 00BF     		nop
 1297 001a 80BD     		pop	{r7, pc}
 1298              	.L67:
 1299              		.align	2
 1300              	.L66:
 1301 001c 44000240 		.word	1073872964
 1302 0020 00000000 		.word	DMA_Cmd
 1303 0024 00000000 		.word	DMA_ClearFlag
 1304 0028 00000000 		.word	uart1TxTask
 1305              		.cfi_endproc
 1306              	.LFE39:
 1308              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 1309              		.align	1
 1310              		.global	DMA1_Channel5_IRQHandler
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
 1315              	DMA1_Channel5_IRQHandler:
 1316              	.LFB40:
 254:common/lib.stm32/uart.c **** 
 255:common/lib.stm32/uart.c **** void DMA1_Channel5_IRQHandler(void)
 256:common/lib.stm32/uart.c **** {
 1317              		.loc 2 256 1
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 8
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321 0000 80B5     		push	{r7, lr}
 1322              	.LCFI74:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 7, -8
 1325              		.cfi_offset 14, -4
 1326 0002 82B0     		sub	sp, sp, #8
 1327              	.LCFI75:
 1328              		.cfi_def_cfa_offset 16
 1329 0004 00AF     		add	r7, sp, #0
 1330              	.LCFI76:
 1331              		.cfi_def_cfa_register 7
 257:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel2 transfer*/
 258:common/lib.stm32/uart.c **** 	//DMA_Cmd(USART3_TX_DMA, DISABLE);
 259:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 260:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA1_FLAG_TC5);
 1332              		.loc 2 260 2
 1333 0006 4FF40030 		mov	r0, #131072
 1334 000a 074B     		ldr	r3, .L69
 1335 000c 9847     		blx	r3
 1336              	.LVL32:
 261:common/lib.stm32/uart.c **** 
 262:common/lib.stm32/uart.c **** 	u1Fifo.rxCurrent+=0;
 1337              		.loc 2 262 18
 1338 000e 074B     		ldr	r3, .L69+4
 1339 0010 1B68     		ldr	r3, [r3]
 1340 0012 064A     		ldr	r2, .L69+4
 1341 0014 1360     		str	r3, [r2]
 263:common/lib.stm32/uart.c **** 	int tempTest1 = DMA_GetCurrDataCounter(USART1_RX_DMA);
 1342              		.loc 2 263 18
 1343 0016 0648     		ldr	r0, .L69+8
 1344 0018 064B     		ldr	r3, .L69+12
 1345 001a 9847     		blx	r3
 1346              	.LVL33:
 1347 001c 0346     		mov	r3, r0
 1348              		.loc 2 263 6
 1349 001e 7B60     		str	r3, [r7, #4]
 264:common/lib.stm32/uart.c **** 			tempTest1 +=0;
 265:common/lib.stm32/uart.c **** 	//DMARxDataReceived();
 266:common/lib.stm32/uart.c **** 	//uart3TxTask();
 267:common/lib.stm32/uart.c **** }
 1350              		.loc 2 267 1
 1351 0020 00BF     		nop
 1352 0022 0837     		adds	r7, r7, #8
 1353              	.LCFI77:
 1354              		.cfi_def_cfa_offset 8
 1355 0024 BD46     		mov	sp, r7
 1356              	.LCFI78:
 1357              		.cfi_def_cfa_register 13
 1358              		@ sp needed
 1359 0026 80BD     		pop	{r7, pc}
 1360              	.L70:
 1361              		.align	2
 1362              	.L69:
 1363 0028 00000000 		.word	DMA_ClearFlag
 1364 002c 00000000 		.word	u1Fifo
 1365 0030 58000240 		.word	1073872984
 1366 0034 00000000 		.word	DMA_GetCurrDataCounter
 1367              		.cfi_endproc
 1368              	.LFE40:
 1370              		.section	.text.uart2Init,"ax",%progbits
 1371              		.align	1
 1372              		.global	uart2Init
 1373              		.syntax unified
 1374              		.thumb
 1375              		.thumb_func
 1377              	uart2Init:
 1378              	.LFB41:
 268:common/lib.stm32/uart.c **** 
 269:common/lib.stm32/uart.c **** //----------------------------------------------------------
 270:common/lib.stm32/uart.c **** void uart2Init(uint32_t baudrate)
 271:common/lib.stm32/uart.c **** {
 1379              		.loc 2 271 1
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 24
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383 0000 90B5     		push	{r4, r7, lr}
 1384              	.LCFI79:
 1385              		.cfi_def_cfa_offset 12
 1386              		.cfi_offset 4, -12
 1387              		.cfi_offset 7, -8
 1388              		.cfi_offset 14, -4
 1389 0002 87B0     		sub	sp, sp, #28
 1390              	.LCFI80:
 1391              		.cfi_def_cfa_offset 40
 1392 0004 00AF     		add	r7, sp, #0
 1393              	.LCFI81:
 1394              		.cfi_def_cfa_register 7
 1395 0006 7860     		str	r0, [r7, #4]
 272:common/lib.stm32/uart.c **** 
 273:common/lib.stm32/uart.c **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 1396              		.loc 2 273 2
 1397 0008 0121     		movs	r1, #1
 1398 000a 0120     		movs	r0, #1
 1399 000c 204B     		ldr	r3, .L72
 1400 000e 9847     		blx	r3
 1401              	.LVL34:
 274:common/lib.stm32/uart.c **** 
 275:common/lib.stm32/uart.c **** 		USART_DeInit(USART2);
 1402              		.loc 2 275 3
 1403 0010 2048     		ldr	r0, .L72+4
 1404 0012 214B     		ldr	r3, .L72+8
 1405 0014 9847     		blx	r3
 1406              	.LVL35:
 276:common/lib.stm32/uart.c **** 
 277:common/lib.stm32/uart.c **** 
 278:common/lib.stm32/uart.c **** 		USART_InitTypeDef USART_InitStructure;
 279:common/lib.stm32/uart.c **** 
 280:common/lib.stm32/uart.c **** 		/* Enable USART2,  clocks */
 281:common/lib.stm32/uart.c **** 		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 1407              		.loc 2 281 3
 1408 0016 0121     		movs	r1, #1
 1409 0018 4FF40030 		mov	r0, #131072
 1410 001c 1F4B     		ldr	r3, .L72+12
 1411 001e 9847     		blx	r3
 1412              	.LVL36:
 282:common/lib.stm32/uart.c **** 
 283:common/lib.stm32/uart.c **** 		USART_InitStructure.USART_BaudRate = baudrate;
 1413              		.loc 2 283 38
 1414 0020 7B68     		ldr	r3, [r7, #4]
 1415 0022 BB60     		str	r3, [r7, #8]
 284:common/lib.stm32/uart.c **** 		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1416              		.loc 2 284 40
 1417 0024 0023     		movs	r3, #0
 1418 0026 BB81     		strh	r3, [r7, #12]	@ movhi
 285:common/lib.stm32/uart.c **** 		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1419              		.loc 2 285 38
 1420 0028 0023     		movs	r3, #0
 1421 002a FB81     		strh	r3, [r7, #14]	@ movhi
 286:common/lib.stm32/uart.c **** 		USART_InitStructure.USART_Parity = USART_Parity_No;
 1422              		.loc 2 286 36
 1423 002c 0023     		movs	r3, #0
 1424 002e 3B82     		strh	r3, [r7, #16]	@ movhi
 287:common/lib.stm32/uart.c **** 		USART_InitStructure.USART_HardwareFlowControl
 288:common/lib.stm32/uart.c **** 				= USART_HardwareFlowControl_None;
 1425              		.loc 2 288 5
 1426 0030 0023     		movs	r3, #0
 1427 0032 BB82     		strh	r3, [r7, #20]	@ movhi
 289:common/lib.stm32/uart.c **** 		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1428              		.loc 2 289 34
 1429 0034 0C23     		movs	r3, #12
 1430 0036 7B82     		strh	r3, [r7, #18]	@ movhi
 290:common/lib.stm32/uart.c **** 		/* Configure USART3 */
 291:common/lib.stm32/uart.c **** 		USART_Init(USART2, &USART_InitStructure);
 1431              		.loc 2 291 3
 1432 0038 07F10803 		add	r3, r7, #8
 1433 003c 1946     		mov	r1, r3
 1434 003e 1548     		ldr	r0, .L72+4
 1435 0040 174B     		ldr	r3, .L72+16
 1436 0042 9847     		blx	r3
 1437              	.LVL37:
 292:common/lib.stm32/uart.c **** 
 293:common/lib.stm32/uart.c **** 		USART_ClearFlag(USART2, USART_FLAG_CTS | USART_FLAG_LBD  |
 1438              		.loc 2 293 3
 1439 0044 4FF45871 		mov	r1, #864
 1440 0048 1248     		ldr	r0, .L72+4
 1441 004a 164B     		ldr	r3, .L72+20
 1442 004c 9847     		blx	r3
 1443              	.LVL38:
 294:common/lib.stm32/uart.c **** 							USART_FLAG_TC  | USART_FLAG_RXNE );
 295:common/lib.stm32/uart.c **** 
 296:common/lib.stm32/uart.c **** 		uartRxDMAConfiguration(USART2, USART2_RX_DMA, u2Fifo.rxBuf,
 1444              		.loc 2 296 3
 1445 004e 4FF48063 		mov	r3, #1024
 1446 0052 154A     		ldr	r2, .L72+24
 1447 0054 1549     		ldr	r1, .L72+28
 1448 0056 0F48     		ldr	r0, .L72+4
 1449 0058 154C     		ldr	r4, .L72+32
 1450 005a A047     		blx	r4
 1451              	.LVL39:
 297:common/lib.stm32/uart.c **** 				UARTRX_FIFO_SIZE);
 298:common/lib.stm32/uart.c **** 		USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);
 1452              		.loc 2 298 3
 1453 005c 0122     		movs	r2, #1
 1454 005e 8021     		movs	r1, #128
 1455 0060 0C48     		ldr	r0, .L72+4
 1456 0062 144B     		ldr	r3, .L72+36
 1457 0064 9847     		blx	r3
 1458              	.LVL40:
 299:common/lib.stm32/uart.c **** 		/* Enable USART_Rx DMA Receive request */
 300:common/lib.stm32/uart.c **** 		USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);
 1459              		.loc 2 300 3
 1460 0066 0122     		movs	r2, #1
 1461 0068 4021     		movs	r1, #64
 1462 006a 0A48     		ldr	r0, .L72+4
 1463 006c 114B     		ldr	r3, .L72+36
 1464 006e 9847     		blx	r3
 1465              	.LVL41:
 301:common/lib.stm32/uart.c **** 
 302:common/lib.stm32/uart.c **** 		  /* Enable USART_Rx Receive interrupt */
 303:common/lib.stm32/uart.c **** 		  //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 304:common/lib.stm32/uart.c **** 		    /* Configure USART3 interrupt */
 305:common/lib.stm32/uart.c **** 		    NVIC_SetPriority(USART2_RX_DMA_IRQn, 0x07);
 1466              		.loc 2 305 7
 1467 0070 0721     		movs	r1, #7
 1468 0072 1020     		movs	r0, #16
 1469 0074 104B     		ldr	r3, .L72+40
 1470 0076 9847     		blx	r3
 1471              	.LVL42:
 306:common/lib.stm32/uart.c **** 		    NVIC_EnableIRQ(USART2_RX_DMA_IRQn);
 1472              		.loc 2 306 7
 1473 0078 1020     		movs	r0, #16
 1474 007a 104B     		ldr	r3, .L72+44
 1475 007c 9847     		blx	r3
 1476              	.LVL43:
 307:common/lib.stm32/uart.c **** 		/* Enable the USART3 */
 308:common/lib.stm32/uart.c **** 		USART_Cmd(USART2, ENABLE);
 1477              		.loc 2 308 3
 1478 007e 0121     		movs	r1, #1
 1479 0080 0448     		ldr	r0, .L72+4
 1480 0082 0F4B     		ldr	r3, .L72+48
 1481 0084 9847     		blx	r3
 1482              	.LVL44:
 309:common/lib.stm32/uart.c **** 
 310:common/lib.stm32/uart.c **** 
 311:common/lib.stm32/uart.c **** }
 1483              		.loc 2 311 1
 1484 0086 00BF     		nop
 1485 0088 1C37     		adds	r7, r7, #28
 1486              	.LCFI82:
 1487              		.cfi_def_cfa_offset 12
 1488 008a BD46     		mov	sp, r7
 1489              	.LCFI83:
 1490              		.cfi_def_cfa_register 13
 1491              		@ sp needed
 1492 008c 90BD     		pop	{r4, r7, pc}
 1493              	.L73:
 1494 008e 00BF     		.align	2
 1495              	.L72:
 1496 0090 00000000 		.word	RCC_AHBPeriphClockCmd
 1497 0094 00440040 		.word	1073759232
 1498 0098 00000000 		.word	USART_DeInit
 1499 009c 00000000 		.word	RCC_APB1PeriphClockCmd
 1500 00a0 00000000 		.word	USART_Init
 1501 00a4 00000000 		.word	USART_ClearFlag
 1502 00a8 0C000000 		.word	u2Fifo+12
 1503 00ac 6C000240 		.word	1073873004
 1504 00b0 00000000 		.word	uartRxDMAConfiguration
 1505 00b4 00000000 		.word	USART_DMACmd
 1506 00b8 00000000 		.word	NVIC_SetPriority
 1507 00bc 00000000 		.word	NVIC_EnableIRQ
 1508 00c0 00000000 		.word	USART_Cmd
 1509              		.cfi_endproc
 1510              	.LFE41:
 1512              		.section	.text.uart2FindEscapedPack,"ax",%progbits
 1513              		.align	1
 1514              		.global	uart2FindEscapedPack
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1519              	uart2FindEscapedPack:
 1520              	.LFB42:
 312:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 313:common/lib.stm32/uart.c **** unsigned int uart2FindEscapedPack()
 314:common/lib.stm32/uart.c **** {
 1521              		.loc 2 314 1
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 8
 1524              		@ frame_needed = 1, uses_anonymous_args = 0
 1525 0000 80B5     		push	{r7, lr}
 1526              	.LCFI84:
 1527              		.cfi_def_cfa_offset 8
 1528              		.cfi_offset 7, -8
 1529              		.cfi_offset 14, -4
 1530 0002 82B0     		sub	sp, sp, #8
 1531              	.LCFI85:
 1532              		.cfi_def_cfa_offset 16
 1533 0004 00AF     		add	r7, sp, #0
 1534              	.LCFI86:
 1535              		.cfi_def_cfa_register 7
 315:common/lib.stm32/uart.c **** 	unsigned int i = u1Fifo.rxCurrent;
 1536              		.loc 2 315 15
 1537 0006 1D4B     		ldr	r3, .L80
 1538 0008 1B68     		ldr	r3, [r3]
 1539 000a 7B60     		str	r3, [r7, #4]
 316:common/lib.stm32/uart.c **** 
 317:common/lib.stm32/uart.c **** 	while (i != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(USART2_RX_DMA)))
 1540              		.loc 2 317 8
 1541 000c 26E0     		b	.L75
 1542              	.L79:
 318:common/lib.stm32/uart.c **** 	{
 319:common/lib.stm32/uart.c **** 
 320:common/lib.stm32/uart.c **** 
 321:common/lib.stm32/uart.c **** 		if (u1Fifo.rxBuf[i] == 0x55)
 1543              		.loc 2 321 19
 1544 000e 1B4A     		ldr	r2, .L80
 1545 0010 7B68     		ldr	r3, [r7, #4]
 1546 0012 1344     		add	r3, r3, r2
 1547 0014 0C33     		adds	r3, r3, #12
 1548 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1549              		.loc 2 321 6
 1550 0018 552B     		cmp	r3, #85
 1551 001a 18D1     		bne	.L76
 322:common/lib.stm32/uart.c **** 		{
 323:common/lib.stm32/uart.c **** 			i++;
 1552              		.loc 2 323 5
 1553 001c 7B68     		ldr	r3, [r7, #4]
 1554 001e 0133     		adds	r3, r3, #1
 1555 0020 7B60     		str	r3, [r7, #4]
 324:common/lib.stm32/uart.c **** 			i &= UARTRX_FIFO_SIZE_MASK;
 1556              		.loc 2 324 6
 1557 0022 7B68     		ldr	r3, [r7, #4]
 1558 0024 C3F30903 		ubfx	r3, r3, #0, #10
 1559 0028 7B60     		str	r3, [r7, #4]
 325:common/lib.stm32/uart.c **** 			if (i == (USART2_RX_DMA->CMAR - (uint32_t) &u1Fifo.rxBuf[0]))
 1560              		.loc 2 325 27
 1561 002a 154B     		ldr	r3, .L80+4
 1562 002c DB68     		ldr	r3, [r3, #12]
 1563              		.loc 2 325 36
 1564 002e 154A     		ldr	r2, .L80+8
 1565              		.loc 2 325 34
 1566 0030 9B1A     		subs	r3, r3, r2
 1567              		.loc 2 325 7
 1568 0032 7A68     		ldr	r2, [r7, #4]
 1569 0034 9A42     		cmp	r2, r3
 1570 0036 01D1     		bne	.L77
 326:common/lib.stm32/uart.c **** 				return 0;//return (isStart & isEnd);
 1571              		.loc 2 326 12
 1572 0038 0023     		movs	r3, #0
 1573 003a 1AE0     		b	.L78
 1574              	.L77:
 327:common/lib.stm32/uart.c **** 
 328:common/lib.stm32/uart.c **** 			if (u1Fifo.rxBuf[i] == 0x03)
 1575              		.loc 2 328 20
 1576 003c 0F4A     		ldr	r2, .L80
 1577 003e 7B68     		ldr	r3, [r7, #4]
 1578 0040 1344     		add	r3, r3, r2
 1579 0042 0C33     		adds	r3, r3, #12
 1580 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1581              		.loc 2 328 7
 1582 0046 032B     		cmp	r3, #3
 1583 0048 01D1     		bne	.L76
 329:common/lib.stm32/uart.c **** 			{
 330:common/lib.stm32/uart.c **** 				return 1;
 1584              		.loc 2 330 12
 1585 004a 0123     		movs	r3, #1
 1586 004c 11E0     		b	.L78
 1587              	.L76:
 331:common/lib.stm32/uart.c **** 			}
 332:common/lib.stm32/uart.c **** 		}
 333:common/lib.stm32/uart.c **** 		i++;
 1588              		.loc 2 333 4
 1589 004e 7B68     		ldr	r3, [r7, #4]
 1590 0050 0133     		adds	r3, r3, #1
 1591 0052 7B60     		str	r3, [r7, #4]
 334:common/lib.stm32/uart.c **** 		i &= UARTRX_FIFO_SIZE_MASK;
 1592              		.loc 2 334 5
 1593 0054 7B68     		ldr	r3, [r7, #4]
 1594 0056 C3F30903 		ubfx	r3, r3, #0, #10
 1595 005a 7B60     		str	r3, [r7, #4]
 1596              	.L75:
 317:common/lib.stm32/uart.c **** 	{
 1597              		.loc 2 317 34
 1598 005c 0848     		ldr	r0, .L80+4
 1599 005e 0A4B     		ldr	r3, .L80+12
 1600 0060 9847     		blx	r3
 1601              	.LVL45:
 1602 0062 0346     		mov	r3, r0
 317:common/lib.stm32/uart.c **** 	{
 1603              		.loc 2 317 32
 1604 0064 C3F58063 		rsb	r3, r3, #1024
 1605 0068 1A46     		mov	r2, r3
 317:common/lib.stm32/uart.c **** 	{
 1606              		.loc 2 317 8
 1607 006a 7B68     		ldr	r3, [r7, #4]
 1608 006c 9342     		cmp	r3, r2
 1609 006e CED1     		bne	.L79
 335:common/lib.stm32/uart.c **** 	}
 336:common/lib.stm32/uart.c **** 	return 0;
 1610              		.loc 2 336 9
 1611 0070 0023     		movs	r3, #0
 1612              	.L78:
 337:common/lib.stm32/uart.c **** 
 338:common/lib.stm32/uart.c **** }
 1613              		.loc 2 338 1
 1614 0072 1846     		mov	r0, r3
 1615 0074 0837     		adds	r7, r7, #8
 1616              	.LCFI87:
 1617              		.cfi_def_cfa_offset 8
 1618 0076 BD46     		mov	sp, r7
 1619              	.LCFI88:
 1620              		.cfi_def_cfa_register 13
 1621              		@ sp needed
 1622 0078 80BD     		pop	{r7, pc}
 1623              	.L81:
 1624 007a 00BF     		.align	2
 1625              	.L80:
 1626 007c 00000000 		.word	u1Fifo
 1627 0080 6C000240 		.word	1073873004
 1628 0084 0C000000 		.word	u1Fifo+12
 1629 0088 00000000 		.word	DMA_GetCurrDataCounter
 1630              		.cfi_endproc
 1631              	.LFE42:
 1633              		.section	.text.uart2GetChar,"ax",%progbits
 1634              		.align	1
 1635              		.global	uart2GetChar
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1640              	uart2GetChar:
 1641              	.LFB43:
 339:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 340:common/lib.stm32/uart.c **** 
 341:common/lib.stm32/uart.c **** int uart2GetChar(unsigned char *ch)
 342:common/lib.stm32/uart.c **** {
 1642              		.loc 2 342 1
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 8
 1645              		@ frame_needed = 1, uses_anonymous_args = 0
 1646 0000 90B5     		push	{r4, r7, lr}
 1647              	.LCFI89:
 1648              		.cfi_def_cfa_offset 12
 1649              		.cfi_offset 4, -12
 1650              		.cfi_offset 7, -8
 1651              		.cfi_offset 14, -4
 1652 0002 83B0     		sub	sp, sp, #12
 1653              	.LCFI90:
 1654              		.cfi_def_cfa_offset 24
 1655 0004 00AF     		add	r7, sp, #0
 1656              	.LCFI91:
 1657              		.cfi_def_cfa_register 7
 1658 0006 7860     		str	r0, [r7, #4]
 343:common/lib.stm32/uart.c **** 
 344:common/lib.stm32/uart.c **** 	//int temp = DMA_GetCurrDataCounter(USART1_RX_DMA);
 345:common/lib.stm32/uart.c **** 	if (u2Fifo.rxCurrent != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(USART2_RX_DMA)))
 1659              		.loc 2 345 12
 1660 0008 114B     		ldr	r3, .L85
 1661 000a 1C68     		ldr	r4, [r3]
 1662              		.loc 2 345 46
 1663 000c 1148     		ldr	r0, .L85+4
 1664 000e 124B     		ldr	r3, .L85+8
 1665 0010 9847     		blx	r3
 1666              	.LVL46:
 1667 0012 0346     		mov	r3, r0
 1668              		.loc 2 345 44
 1669 0014 C3F58063 		rsb	r3, r3, #1024
 1670              		.loc 2 345 5
 1671 0018 9C42     		cmp	r4, r3
 1672 001a 13D0     		beq	.L83
 346:common/lib.stm32/uart.c **** 	{
 347:common/lib.stm32/uart.c **** 		*ch = u2Fifo.rxBuf[u2Fifo.rxCurrent];
 1673              		.loc 2 347 28
 1674 001c 0C4B     		ldr	r3, .L85
 1675 001e 1B68     		ldr	r3, [r3]
 1676              		.loc 2 347 21
 1677 0020 0B4A     		ldr	r2, .L85
 1678 0022 1344     		add	r3, r3, r2
 1679 0024 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 1680              		.loc 2 347 7
 1681 0026 7B68     		ldr	r3, [r7, #4]
 1682 0028 1A70     		strb	r2, [r3]
 348:common/lib.stm32/uart.c **** 		u2Fifo.rxCurrent++;
 1683              		.loc 2 348 9
 1684 002a 094B     		ldr	r3, .L85
 1685 002c 1B68     		ldr	r3, [r3]
 1686              		.loc 2 348 19
 1687 002e 0133     		adds	r3, r3, #1
 1688 0030 074A     		ldr	r2, .L85
 1689 0032 1360     		str	r3, [r2]
 349:common/lib.stm32/uart.c **** 		u2Fifo.rxCurrent &= UARTRX_FIFO_SIZE_MASK;
 1690              		.loc 2 349 20
 1691 0034 064B     		ldr	r3, .L85
 1692 0036 1B68     		ldr	r3, [r3]
 1693 0038 C3F30903 		ubfx	r3, r3, #0, #10
 1694 003c 044A     		ldr	r2, .L85
 1695 003e 1360     		str	r3, [r2]
 350:common/lib.stm32/uart.c **** 		return 1;
 1696              		.loc 2 350 10
 1697 0040 0123     		movs	r3, #1
 1698 0042 00E0     		b	.L84
 1699              	.L83:
 351:common/lib.stm32/uart.c **** 	}
 352:common/lib.stm32/uart.c **** 	return 0;
 1700              		.loc 2 352 9
 1701 0044 0023     		movs	r3, #0
 1702              	.L84:
 353:common/lib.stm32/uart.c **** 
 354:common/lib.stm32/uart.c **** }
 1703              		.loc 2 354 1
 1704 0046 1846     		mov	r0, r3
 1705 0048 0C37     		adds	r7, r7, #12
 1706              	.LCFI92:
 1707              		.cfi_def_cfa_offset 12
 1708 004a BD46     		mov	sp, r7
 1709              	.LCFI93:
 1710              		.cfi_def_cfa_register 13
 1711              		@ sp needed
 1712 004c 90BD     		pop	{r4, r7, pc}
 1713              	.L86:
 1714 004e 00BF     		.align	2
 1715              	.L85:
 1716 0050 00000000 		.word	u2Fifo
 1717 0054 6C000240 		.word	1073873004
 1718 0058 00000000 		.word	DMA_GetCurrDataCounter
 1719              		.cfi_endproc
 1720              	.LFE43:
 1722              		.section	.text.uart2PutChar,"ax",%progbits
 1723              		.align	1
 1724              		.global	uart2PutChar
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1729              	uart2PutChar:
 1730              	.LFB44:
 355:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 356:common/lib.stm32/uart.c **** int uart2PutChar(unsigned char ch)
 357:common/lib.stm32/uart.c **** {
 1731              		.loc 2 357 1
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 8
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735              		@ link register save eliminated.
 1736 0000 80B4     		push	{r7}
 1737              	.LCFI94:
 1738              		.cfi_def_cfa_offset 4
 1739              		.cfi_offset 7, -4
 1740 0002 83B0     		sub	sp, sp, #12
 1741              	.LCFI95:
 1742              		.cfi_def_cfa_offset 16
 1743 0004 00AF     		add	r7, sp, #0
 1744              	.LCFI96:
 1745              		.cfi_def_cfa_register 7
 1746 0006 0346     		mov	r3, r0
 1747 0008 FB71     		strb	r3, [r7, #7]
 358:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 0;
 359:common/lib.stm32/uart.c **** 	u2Fifo.txBufB[u2Fifo.txCurrentEnd] = ch;
 1748              		.loc 2 359 22
 1749 000a 154B     		ldr	r3, .L90
 1750 000c 9B68     		ldr	r3, [r3, #8]
 1751              		.loc 2 359 37
 1752 000e 144A     		ldr	r2, .L90
 1753 0010 1344     		add	r3, r3, r2
 1754 0012 FA79     		ldrb	r2, [r7, #7]
 1755 0014 83F84C24 		strb	r2, [r3, #1100]
 360:common/lib.stm32/uart.c **** 	u2Fifo.txCurrentEnd++;
 1756              		.loc 2 360 8
 1757 0018 114B     		ldr	r3, .L90
 1758 001a 9B68     		ldr	r3, [r3, #8]
 1759              		.loc 2 360 21
 1760 001c 0133     		adds	r3, r3, #1
 1761 001e 104A     		ldr	r2, .L90
 1762 0020 9360     		str	r3, [r2, #8]
 361:common/lib.stm32/uart.c **** 	u2Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 1763              		.loc 2 361 22
 1764 0022 0F4B     		ldr	r3, .L90
 1765 0024 9B68     		ldr	r3, [r3, #8]
 1766 0026 C3F30903 		ubfx	r3, r3, #0, #10
 1767 002a 0D4A     		ldr	r2, .L90
 1768 002c 9360     		str	r3, [r2, #8]
 362:common/lib.stm32/uart.c **** 
 363:common/lib.stm32/uart.c **** 	if (u2Fifo.txCurrentEnd == u2Fifo.txCurrentStart)
 1769              		.loc 2 363 12
 1770 002e 0C4B     		ldr	r3, .L90
 1771 0030 9A68     		ldr	r2, [r3, #8]
 1772              		.loc 2 363 35
 1773 0032 0B4B     		ldr	r3, .L90
 1774 0034 5B68     		ldr	r3, [r3, #4]
 1775              		.loc 2 363 5
 1776 0036 9A42     		cmp	r2, r3
 1777 0038 0CD1     		bne	.L88
 364:common/lib.stm32/uart.c **** 	{
 365:common/lib.stm32/uart.c **** 		u2Fifo.txCurrentEnd--;
 1778              		.loc 2 365 9
 1779 003a 094B     		ldr	r3, .L90
 1780 003c 9B68     		ldr	r3, [r3, #8]
 1781              		.loc 2 365 22
 1782 003e 013B     		subs	r3, r3, #1
 1783 0040 074A     		ldr	r2, .L90
 1784 0042 9360     		str	r3, [r2, #8]
 366:common/lib.stm32/uart.c **** 		u2Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 1785              		.loc 2 366 23
 1786 0044 064B     		ldr	r3, .L90
 1787 0046 9B68     		ldr	r3, [r3, #8]
 1788 0048 C3F30903 		ubfx	r3, r3, #0, #10
 1789 004c 044A     		ldr	r2, .L90
 1790 004e 9360     		str	r3, [r2, #8]
 367:common/lib.stm32/uart.c **** 		//		IEC2bits.DMA4IE = 1;
 368:common/lib.stm32/uart.c **** 		return 0;
 1791              		.loc 2 368 10
 1792 0050 0023     		movs	r3, #0
 1793 0052 00E0     		b	.L89
 1794              	.L88:
 369:common/lib.stm32/uart.c **** 	}
 370:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 1;
 371:common/lib.stm32/uart.c **** 	return 1;
 1795              		.loc 2 371 9
 1796 0054 0123     		movs	r3, #1
 1797              	.L89:
 372:common/lib.stm32/uart.c **** 
 373:common/lib.stm32/uart.c **** }
 1798              		.loc 2 373 1
 1799 0056 1846     		mov	r0, r3
 1800 0058 0C37     		adds	r7, r7, #12
 1801              	.LCFI97:
 1802              		.cfi_def_cfa_offset 4
 1803 005a BD46     		mov	sp, r7
 1804              	.LCFI98:
 1805              		.cfi_def_cfa_register 13
 1806              		@ sp needed
 1807 005c 80BC     		pop	{r7}
 1808              	.LCFI99:
 1809              		.cfi_restore 7
 1810              		.cfi_def_cfa_offset 0
 1811 005e 7047     		bx	lr
 1812              	.L91:
 1813              		.align	2
 1814              	.L90:
 1815 0060 00000000 		.word	u2Fifo
 1816              		.cfi_endproc
 1817              	.LFE44:
 1819              		.section	.text.uart2TxTask,"ax",%progbits
 1820              		.align	1
 1821              		.global	uart2TxTask
 1822              		.syntax unified
 1823              		.thumb
 1824              		.thumb_func
 1826              	uart2TxTask:
 1827              	.LFB45:
 374:common/lib.stm32/uart.c **** void uart2TxTask()
 375:common/lib.stm32/uart.c **** {
 1828              		.loc 2 375 1
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 8
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832 0000 90B5     		push	{r4, r7, lr}
 1833              	.LCFI100:
 1834              		.cfi_def_cfa_offset 12
 1835              		.cfi_offset 4, -12
 1836              		.cfi_offset 7, -8
 1837              		.cfi_offset 14, -4
 1838 0002 85B0     		sub	sp, sp, #20
 1839              	.LCFI101:
 1840              		.cfi_def_cfa_offset 32
 1841 0004 02AF     		add	r7, sp, #8
 1842              	.LCFI102:
 1843              		.cfi_def_cfa 7, 24
 376:common/lib.stm32/uart.c **** 
 377:common/lib.stm32/uart.c **** 	unsigned int cnt2 = 0;
 1844              		.loc 2 377 15
 1845 0006 0023     		movs	r3, #0
 1846 0008 7B60     		str	r3, [r7, #4]
 378:common/lib.stm32/uart.c **** 	// If DMA COMPLITE
 379:common/lib.stm32/uart.c **** 	if ((USART2_TX_DMA->CCR & ((uint32_t) 0x00000001)) == 0)
 1847              		.loc 2 379 20
 1848 000a 234B     		ldr	r3, .L98
 1849 000c 1B68     		ldr	r3, [r3]
 1850              		.loc 2 379 26
 1851 000e 03F00103 		and	r3, r3, #1
 1852              		.loc 2 379 5
 1853 0012 002B     		cmp	r3, #0
 1854 0014 3BD1     		bne	.L97
 380:common/lib.stm32/uart.c **** 	{
 381:common/lib.stm32/uart.c **** 		while ((u2Fifo.txCurrentStart != u2Fifo.txCurrentEnd) && (cnt2< UARTTX_FIFO_SIZE))
 1855              		.loc 2 381 9
 1856 0016 1AE0     		b	.L94
 1857              	.L96:
 382:common/lib.stm32/uart.c **** 		{
 383:common/lib.stm32/uart.c **** 			u2Fifo.txBuf[cnt2] = u2Fifo.txBufB[u2Fifo.txCurrentStart];
 1858              		.loc 2 383 45
 1859 0018 204B     		ldr	r3, .L98+4
 1860 001a 5B68     		ldr	r3, [r3, #4]
 1861              		.loc 2 383 38
 1862 001c 1F4A     		ldr	r2, .L98+4
 1863 001e 1344     		add	r3, r3, r2
 1864 0020 93F84C14 		ldrb	r1, [r3, #1100]	@ zero_extendqisi2
 1865              		.loc 2 383 23
 1866 0024 1D4A     		ldr	r2, .L98+4
 1867 0026 7B68     		ldr	r3, [r7, #4]
 1868 0028 1344     		add	r3, r3, r2
 1869 002a 03F20C43 		addw	r3, r3, #1036
 1870 002e 0A46     		mov	r2, r1
 1871 0030 1A70     		strb	r2, [r3]
 384:common/lib.stm32/uart.c **** 			u2Fifo.txCurrentStart++;
 1872              		.loc 2 384 10
 1873 0032 1A4B     		ldr	r3, .L98+4
 1874 0034 5B68     		ldr	r3, [r3, #4]
 1875              		.loc 2 384 25
 1876 0036 0133     		adds	r3, r3, #1
 1877 0038 184A     		ldr	r2, .L98+4
 1878 003a 5360     		str	r3, [r2, #4]
 385:common/lib.stm32/uart.c **** 			u2Fifo.txCurrentStart &= UARTTX_FIFOB_SIZE_MASK;
 1879              		.loc 2 385 26
 1880 003c 174B     		ldr	r3, .L98+4
 1881 003e 5B68     		ldr	r3, [r3, #4]
 1882 0040 C3F30903 		ubfx	r3, r3, #0, #10
 1883 0044 154A     		ldr	r2, .L98+4
 1884 0046 5360     		str	r3, [r2, #4]
 386:common/lib.stm32/uart.c **** 			cnt2++;
 1885              		.loc 2 386 8
 1886 0048 7B68     		ldr	r3, [r7, #4]
 1887 004a 0133     		adds	r3, r3, #1
 1888 004c 7B60     		str	r3, [r7, #4]
 1889              	.L94:
 381:common/lib.stm32/uart.c **** 		{
 1890              		.loc 2 381 17
 1891 004e 134B     		ldr	r3, .L98+4
 1892 0050 5A68     		ldr	r2, [r3, #4]
 381:common/lib.stm32/uart.c **** 		{
 1893              		.loc 2 381 42
 1894 0052 124B     		ldr	r3, .L98+4
 1895 0054 9B68     		ldr	r3, [r3, #8]
 381:common/lib.stm32/uart.c **** 		{
 1896              		.loc 2 381 9
 1897 0056 9A42     		cmp	r2, r3
 1898 0058 02D0     		beq	.L95
 381:common/lib.stm32/uart.c **** 		{
 1899              		.loc 2 381 57 discriminator 1
 1900 005a 7B68     		ldr	r3, [r7, #4]
 1901 005c 3F2B     		cmp	r3, #63
 1902 005e DBD9     		bls	.L96
 1903              	.L95:
 387:common/lib.stm32/uart.c **** 		}
 388:common/lib.stm32/uart.c **** 		if (cnt2 > 0)
 1904              		.loc 2 388 6
 1905 0060 7B68     		ldr	r3, [r7, #4]
 1906 0062 002B     		cmp	r3, #0
 1907 0064 13D0     		beq	.L97
 389:common/lib.stm32/uart.c **** 		{
 390:common/lib.stm32/uart.c **** 
 391:common/lib.stm32/uart.c **** 			uartTxDMAConfiguration(USART2, USART2_TX_DMA, u2Fifo.txBuf, cnt2,1);
 1908              		.loc 2 391 4
 1909 0066 0123     		movs	r3, #1
 1910 0068 0093     		str	r3, [sp]
 1911 006a 7B68     		ldr	r3, [r7, #4]
 1912 006c 0C4A     		ldr	r2, .L98+8
 1913 006e 0A49     		ldr	r1, .L98
 1914 0070 0C48     		ldr	r0, .L98+12
 1915 0072 0D4C     		ldr	r4, .L98+16
 1916 0074 A047     		blx	r4
 1917              	.LVL47:
 392:common/lib.stm32/uart.c **** 			DMA_ITConfig(USART2_TX_DMA, DMA_IT_TC, ENABLE);
 1918              		.loc 2 392 4
 1919 0076 0122     		movs	r2, #1
 1920 0078 0221     		movs	r1, #2
 1921 007a 0748     		ldr	r0, .L98
 1922 007c 0B4B     		ldr	r3, .L98+20
 1923 007e 9847     		blx	r3
 1924              	.LVL48:
 393:common/lib.stm32/uart.c **** 				//}
 394:common/lib.stm32/uart.c **** 				/* Enable USART_Tx DMA Tansmit request */
 395:common/lib.stm32/uart.c **** 				/* Configure DMA1_Channel_Tx interrupt */
 396:common/lib.stm32/uart.c **** 				NVIC_SetPriority(USART2_TX_DMA_IRQn, 0x06);
 1925              		.loc 2 396 5
 1926 0080 0621     		movs	r1, #6
 1927 0082 1120     		movs	r0, #17
 1928 0084 0A4B     		ldr	r3, .L98+24
 1929 0086 9847     		blx	r3
 1930              	.LVL49:
 397:common/lib.stm32/uart.c **** 				NVIC_EnableIRQ(USART2_TX_DMA_IRQn);
 1931              		.loc 2 397 5
 1932 0088 1120     		movs	r0, #17
 1933 008a 0A4B     		ldr	r3, .L98+28
 1934 008c 9847     		blx	r3
 1935              	.LVL50:
 1936              	.L97:
 398:common/lib.stm32/uart.c **** 		}
 399:common/lib.stm32/uart.c **** 
 400:common/lib.stm32/uart.c **** 	}
 401:common/lib.stm32/uart.c **** 
 402:common/lib.stm32/uart.c **** }
 1937              		.loc 2 402 1
 1938 008e 00BF     		nop
 1939 0090 0C37     		adds	r7, r7, #12
 1940              	.LCFI103:
 1941              		.cfi_def_cfa_offset 12
 1942 0092 BD46     		mov	sp, r7
 1943              	.LCFI104:
 1944              		.cfi_def_cfa_register 13
 1945              		@ sp needed
 1946 0094 90BD     		pop	{r4, r7, pc}
 1947              	.L99:
 1948 0096 00BF     		.align	2
 1949              	.L98:
 1950 0098 80000240 		.word	1073873024
 1951 009c 00000000 		.word	u2Fifo
 1952 00a0 0C040000 		.word	u2Fifo+1036
 1953 00a4 00440040 		.word	1073759232
 1954 00a8 00000000 		.word	uartTxDMAConfiguration
 1955 00ac 00000000 		.word	DMA_ITConfig
 1956 00b0 00000000 		.word	NVIC_SetPriority
 1957 00b4 00000000 		.word	NVIC_EnableIRQ
 1958              		.cfi_endproc
 1959              	.LFE45:
 1961              		.section	.text.uart2ReadEscaped,"ax",%progbits
 1962              		.align	1
 1963              		.global	uart2ReadEscaped
 1964              		.syntax unified
 1965              		.thumb
 1966              		.thumb_func
 1968              	uart2ReadEscaped:
 1969              	.LFB46:
 403:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 404:common/lib.stm32/uart.c **** unsigned int uart2ReadEscaped(unsigned char *dsn, unsigned int max_len)
 405:common/lib.stm32/uart.c **** {
 1970              		.loc 2 405 1
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 24
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974 0000 80B5     		push	{r7, lr}
 1975              	.LCFI105:
 1976              		.cfi_def_cfa_offset 8
 1977              		.cfi_offset 7, -8
 1978              		.cfi_offset 14, -4
 1979 0002 86B0     		sub	sp, sp, #24
 1980              	.LCFI106:
 1981              		.cfi_def_cfa_offset 32
 1982 0004 00AF     		add	r7, sp, #0
 1983              	.LCFI107:
 1984              		.cfi_def_cfa_register 7
 1985 0006 7860     		str	r0, [r7, #4]
 1986 0008 3960     		str	r1, [r7]
 406:common/lib.stm32/uart.c **** 	unsigned short cnt = 0, crc = 0;
 1987              		.loc 2 406 17
 1988 000a 0023     		movs	r3, #0
 1989 000c FB82     		strh	r3, [r7, #22]	@ movhi
 1990              		.loc 2 406 26
 1991 000e 0023     		movs	r3, #0
 1992 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 407:common/lib.stm32/uart.c **** 	unsigned char v, *ptr = dsn;
 1993              		.loc 2 407 20
 1994 0012 7B68     		ldr	r3, [r7, #4]
 1995 0014 3B61     		str	r3, [r7, #16]
 408:common/lib.stm32/uart.c **** 	if (uart2FindEscapedPack() == 0)
 1996              		.loc 2 408 6
 1997 0016 2B4B     		ldr	r3, .L112
 1998 0018 9847     		blx	r3
 1999              	.LVL51:
 2000 001a 0346     		mov	r3, r0
 2001              		.loc 2 408 5
 2002 001c 002B     		cmp	r3, #0
 2003 001e 3FD1     		bne	.L103
 409:common/lib.stm32/uart.c **** 	{
 410:common/lib.stm32/uart.c **** 		return 0;
 2004              		.loc 2 410 10
 2005 0020 0023     		movs	r3, #0
 2006 0022 4AE0     		b	.L111
 2007              	.L110:
 411:common/lib.stm32/uart.c **** 	}
 412:common/lib.stm32/uart.c **** 	while (uart2GetChar(&v) && (max_len > cnt))
 413:common/lib.stm32/uart.c **** 	{
 414:common/lib.stm32/uart.c **** 		if (v == 0x55)
 2008              		.loc 2 414 9
 2009 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2010              		.loc 2 414 6
 2011 0026 552B     		cmp	r3, #85
 2012 0028 2CD1     		bne	.L104
 415:common/lib.stm32/uart.c **** 		{
 416:common/lib.stm32/uart.c **** 			if (!uart2GetChar(&v))
 2013              		.loc 2 416 9
 2014 002a 07F10F03 		add	r3, r7, #15
 2015 002e 1846     		mov	r0, r3
 2016 0030 254B     		ldr	r3, .L112+4
 2017 0032 9847     		blx	r3
 2018              	.LVL52:
 2019 0034 0346     		mov	r3, r0
 2020              		.loc 2 416 7
 2021 0036 002B     		cmp	r3, #0
 2022 0038 01D1     		bne	.L105
 417:common/lib.stm32/uart.c **** 				return 0;
 2023              		.loc 2 417 12
 2024 003a 0023     		movs	r3, #0
 2025 003c 3DE0     		b	.L111
 2026              	.L105:
 418:common/lib.stm32/uart.c **** 			if (v == 0x1) // start pack here;
 2027              		.loc 2 418 10
 2028 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2029              		.loc 2 418 7
 2030 0040 012B     		cmp	r3, #1
 2031 0042 06D1     		bne	.L106
 419:common/lib.stm32/uart.c **** 			{
 420:common/lib.stm32/uart.c **** 				ptr = dsn;
 2032              		.loc 2 420 9
 2033 0044 7B68     		ldr	r3, [r7, #4]
 2034 0046 3B61     		str	r3, [r7, #16]
 421:common/lib.stm32/uart.c **** 				cnt = 0;
 2035              		.loc 2 421 9
 2036 0048 0023     		movs	r3, #0
 2037 004a FB82     		strh	r3, [r7, #22]	@ movhi
 422:common/lib.stm32/uart.c **** 				crc = 0;
 2038              		.loc 2 422 9
 2039 004c 0023     		movs	r3, #0
 2040 004e BB82     		strh	r3, [r7, #20]	@ movhi
 423:common/lib.stm32/uart.c **** 				continue;
 2041              		.loc 2 423 5
 2042 0050 26E0     		b	.L103
 2043              	.L106:
 424:common/lib.stm32/uart.c **** 			}
 425:common/lib.stm32/uart.c **** 			else if (v == 0x2)
 2044              		.loc 2 425 15
 2045 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2046              		.loc 2 425 12
 2047 0054 022B     		cmp	r3, #2
 2048 0056 02D1     		bne	.L107
 426:common/lib.stm32/uart.c **** 			{
 427:common/lib.stm32/uart.c **** 				v = 0x55;
 2049              		.loc 2 427 7
 2050 0058 5523     		movs	r3, #85
 2051 005a FB73     		strb	r3, [r7, #15]
 2052 005c 12E0     		b	.L104
 2053              	.L107:
 428:common/lib.stm32/uart.c **** 			}
 429:common/lib.stm32/uart.c **** 			else if (v == 0x3)
 2054              		.loc 2 429 15
 2055 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2056              		.loc 2 429 12
 2057 0060 032B     		cmp	r3, #3
 2058 0062 0FD1     		bne	.L104
 430:common/lib.stm32/uart.c **** 			{
 431:common/lib.stm32/uart.c **** 				ptr--;
 2059              		.loc 2 431 8
 2060 0064 3B69     		ldr	r3, [r7, #16]
 2061 0066 013B     		subs	r3, r3, #1
 2062 0068 3B61     		str	r3, [r7, #16]
 432:common/lib.stm32/uart.c **** 				if (((crc - *ptr) & 0x00FF) != *ptr)
 2063              		.loc 2 432 15
 2064 006a BB8A     		ldrh	r3, [r7, #20]
 2065              		.loc 2 432 17
 2066 006c 3A69     		ldr	r2, [r7, #16]
 2067 006e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2068              		.loc 2 432 15
 2069 0070 9B1A     		subs	r3, r3, r2
 2070              		.loc 2 432 23
 2071 0072 DBB2     		uxtb	r3, r3
 2072              		.loc 2 432 36
 2073 0074 3A69     		ldr	r2, [r7, #16]
 2074 0076 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2075              		.loc 2 432 8
 2076 0078 9342     		cmp	r3, r2
 2077 007a 01D0     		beq	.L108
 433:common/lib.stm32/uart.c **** 					return 0; // crc fail
 2078              		.loc 2 433 13
 2079 007c 0023     		movs	r3, #0
 2080 007e 1CE0     		b	.L111
 2081              	.L108:
 434:common/lib.stm32/uart.c **** 				return cnt;
 2082              		.loc 2 434 12
 2083 0080 FB8A     		ldrh	r3, [r7, #22]
 2084 0082 1AE0     		b	.L111
 2085              	.L104:
 435:common/lib.stm32/uart.c **** 			}
 436:common/lib.stm32/uart.c **** 		}
 437:common/lib.stm32/uart.c **** 		*ptr = v;
 2086              		.loc 2 437 8
 2087 0084 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2088 0086 3B69     		ldr	r3, [r7, #16]
 2089 0088 1A70     		strb	r2, [r3]
 438:common/lib.stm32/uart.c **** 		ptr++;
 2090              		.loc 2 438 6
 2091 008a 3B69     		ldr	r3, [r7, #16]
 2092 008c 0133     		adds	r3, r3, #1
 2093 008e 3B61     		str	r3, [r7, #16]
 439:common/lib.stm32/uart.c **** 		crc += v;
 2094              		.loc 2 439 7
 2095 0090 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2096 0092 9AB2     		uxth	r2, r3
 2097 0094 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2098 0096 1344     		add	r3, r3, r2
 2099 0098 BB82     		strh	r3, [r7, #20]	@ movhi
 440:common/lib.stm32/uart.c **** 		cnt++;
 2100              		.loc 2 440 6
 2101 009a FB8A     		ldrh	r3, [r7, #22]
 2102 009c 0133     		adds	r3, r3, #1
 2103 009e FB82     		strh	r3, [r7, #22]	@ movhi
 2104              	.L103:
 412:common/lib.stm32/uart.c **** 	{
 2105              		.loc 2 412 9
 2106 00a0 07F10F03 		add	r3, r7, #15
 2107 00a4 1846     		mov	r0, r3
 2108 00a6 084B     		ldr	r3, .L112+4
 2109 00a8 9847     		blx	r3
 2110              	.LVL53:
 2111 00aa 0346     		mov	r3, r0
 412:common/lib.stm32/uart.c **** 	{
 2112              		.loc 2 412 8
 2113 00ac 002B     		cmp	r3, #0
 2114 00ae 03D0     		beq	.L109
 412:common/lib.stm32/uart.c **** 	{
 2115              		.loc 2 412 38 discriminator 1
 2116 00b0 FB8A     		ldrh	r3, [r7, #22]
 412:common/lib.stm32/uart.c **** 	{
 2117              		.loc 2 412 26 discriminator 1
 2118 00b2 3A68     		ldr	r2, [r7]
 2119 00b4 9A42     		cmp	r2, r3
 2120 00b6 B5D8     		bhi	.L110
 2121              	.L109:
 441:common/lib.stm32/uart.c **** 	}
 442:common/lib.stm32/uart.c **** 	return 0; //  error here
 2122              		.loc 2 442 9
 2123 00b8 0023     		movs	r3, #0
 2124              	.L111:
 443:common/lib.stm32/uart.c **** }
 2125              		.loc 2 443 1 discriminator 1
 2126 00ba 1846     		mov	r0, r3
 2127 00bc 1837     		adds	r7, r7, #24
 2128              	.LCFI108:
 2129              		.cfi_def_cfa_offset 8
 2130 00be BD46     		mov	sp, r7
 2131              	.LCFI109:
 2132              		.cfi_def_cfa_register 13
 2133              		@ sp needed
 2134 00c0 80BD     		pop	{r7, pc}
 2135              	.L113:
 2136 00c2 00BF     		.align	2
 2137              	.L112:
 2138 00c4 00000000 		.word	uart2FindEscapedPack
 2139 00c8 00000000 		.word	uart2GetChar
 2140              		.cfi_endproc
 2141              	.LFE46:
 2143              		.section	.text.uart2Read,"ax",%progbits
 2144              		.align	1
 2145              		.global	uart2Read
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2150              	uart2Read:
 2151              	.LFB47:
 444:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 445:common/lib.stm32/uart.c **** unsigned int uart2Read(unsigned char *dsn, unsigned int max_len)
 446:common/lib.stm32/uart.c **** {
 2152              		.loc 2 446 1
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 24
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156 0000 80B5     		push	{r7, lr}
 2157              	.LCFI110:
 2158              		.cfi_def_cfa_offset 8
 2159              		.cfi_offset 7, -8
 2160              		.cfi_offset 14, -4
 2161 0002 86B0     		sub	sp, sp, #24
 2162              	.LCFI111:
 2163              		.cfi_def_cfa_offset 32
 2164 0004 00AF     		add	r7, sp, #0
 2165              	.LCFI112:
 2166              		.cfi_def_cfa_register 7
 2167 0006 7860     		str	r0, [r7, #4]
 2168 0008 3960     		str	r1, [r7]
 447:common/lib.stm32/uart.c **** 	unsigned short cnt = 0, crc = 0;
 2169              		.loc 2 447 17
 2170 000a 0023     		movs	r3, #0
 2171 000c FB82     		strh	r3, [r7, #22]	@ movhi
 2172              		.loc 2 447 26
 2173 000e 0023     		movs	r3, #0
 2174 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 448:common/lib.stm32/uart.c **** 	unsigned char v, *ptr = dsn;
 2175              		.loc 2 448 20
 2176 0012 7B68     		ldr	r3, [r7, #4]
 2177 0014 3B61     		str	r3, [r7, #16]
 449:common/lib.stm32/uart.c **** 	/*
 450:common/lib.stm32/uart.c **** 	u1Fifo.rxBuf[0] = '$';
 451:common/lib.stm32/uart.c **** 	for (int i = 0; i < 32; i++)
 452:common/lib.stm32/uart.c **** 	{
 453:common/lib.stm32/uart.c **** 		v = u1Fifo.rxBuf[i];
 454:common/lib.stm32/uart.c **** 		*ptr = v;
 455:common/lib.stm32/uart.c **** 		ptr++;
 456:common/lib.stm32/uart.c **** 	}
 457:common/lib.stm32/uart.c **** return 32;
 458:common/lib.stm32/uart.c **** */
 459:common/lib.stm32/uart.c **** 	while (uart2GetChar(&v) && (max_len > cnt))
 2178              		.loc 2 459 8
 2179 0016 0DE0     		b	.L115
 2180              	.L117:
 460:common/lib.stm32/uart.c **** 	{
 461:common/lib.stm32/uart.c **** 		*ptr = v;
 2181              		.loc 2 461 8
 2182 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2183 001a 3B69     		ldr	r3, [r7, #16]
 2184 001c 1A70     		strb	r2, [r3]
 462:common/lib.stm32/uart.c **** 		ptr++;
 2185              		.loc 2 462 6
 2186 001e 3B69     		ldr	r3, [r7, #16]
 2187 0020 0133     		adds	r3, r3, #1
 2188 0022 3B61     		str	r3, [r7, #16]
 463:common/lib.stm32/uart.c **** 		crc += v;
 2189              		.loc 2 463 7
 2190 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2191 0026 9AB2     		uxth	r2, r3
 2192 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2193 002a 1344     		add	r3, r3, r2
 2194 002c BB82     		strh	r3, [r7, #20]	@ movhi
 464:common/lib.stm32/uart.c **** 		cnt++;
 2195              		.loc 2 464 6
 2196 002e FB8A     		ldrh	r3, [r7, #22]
 2197 0030 0133     		adds	r3, r3, #1
 2198 0032 FB82     		strh	r3, [r7, #22]	@ movhi
 2199              	.L115:
 459:common/lib.stm32/uart.c **** 	{
 2200              		.loc 2 459 9
 2201 0034 07F10F03 		add	r3, r7, #15
 2202 0038 1846     		mov	r0, r3
 2203 003a 074B     		ldr	r3, .L119
 2204 003c 9847     		blx	r3
 2205              	.LVL54:
 2206 003e 0346     		mov	r3, r0
 459:common/lib.stm32/uart.c **** 	{
 2207              		.loc 2 459 8
 2208 0040 002B     		cmp	r3, #0
 2209 0042 03D0     		beq	.L116
 459:common/lib.stm32/uart.c **** 	{
 2210              		.loc 2 459 38 discriminator 1
 2211 0044 FB8A     		ldrh	r3, [r7, #22]
 459:common/lib.stm32/uart.c **** 	{
 2212              		.loc 2 459 26 discriminator 1
 2213 0046 3A68     		ldr	r2, [r7]
 2214 0048 9A42     		cmp	r2, r3
 2215 004a E5D8     		bhi	.L117
 2216              	.L116:
 465:common/lib.stm32/uart.c **** 	}
 466:common/lib.stm32/uart.c **** 	return cnt; //  error here
 2217              		.loc 2 466 9
 2218 004c FB8A     		ldrh	r3, [r7, #22]
 467:common/lib.stm32/uart.c **** }
 2219              		.loc 2 467 1
 2220 004e 1846     		mov	r0, r3
 2221 0050 1837     		adds	r7, r7, #24
 2222              	.LCFI113:
 2223              		.cfi_def_cfa_offset 8
 2224 0052 BD46     		mov	sp, r7
 2225              	.LCFI114:
 2226              		.cfi_def_cfa_register 13
 2227              		@ sp needed
 2228 0054 80BD     		pop	{r7, pc}
 2229              	.L120:
 2230 0056 00BF     		.align	2
 2231              	.L119:
 2232 0058 00000000 		.word	uart2GetChar
 2233              		.cfi_endproc
 2234              	.LFE47:
 2236              		.section	.text.uart2WriteEscaped,"ax",%progbits
 2237              		.align	1
 2238              		.global	uart2WriteEscaped
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2243              	uart2WriteEscaped:
 2244              	.LFB48:
 468:common/lib.stm32/uart.c **** 
 469:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 470:common/lib.stm32/uart.c **** void uart2WriteEscaped(unsigned char *src, unsigned int len)
 471:common/lib.stm32/uart.c **** {
 2245              		.loc 2 471 1
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 16
 2248              		@ frame_needed = 1, uses_anonymous_args = 0
 2249 0000 80B5     		push	{r7, lr}
 2250              	.LCFI115:
 2251              		.cfi_def_cfa_offset 8
 2252              		.cfi_offset 7, -8
 2253              		.cfi_offset 14, -4
 2254 0002 84B0     		sub	sp, sp, #16
 2255              	.LCFI116:
 2256              		.cfi_def_cfa_offset 24
 2257 0004 00AF     		add	r7, sp, #0
 2258              	.LCFI117:
 2259              		.cfi_def_cfa_register 7
 2260 0006 7860     		str	r0, [r7, #4]
 2261 0008 3960     		str	r1, [r7]
 472:common/lib.stm32/uart.c **** 	unsigned char ch;
 473:common/lib.stm32/uart.c **** 	unsigned char crc = 0;//getCRC(src, len);
 2262              		.loc 2 473 16
 2263 000a 0023     		movs	r3, #0
 2264 000c FB73     		strb	r3, [r7, #15]
 474:common/lib.stm32/uart.c **** 	unsigned int rezult;
 475:common/lib.stm32/uart.c **** 	if (len == 0)
 2265              		.loc 2 475 5
 2266 000e 3B68     		ldr	r3, [r7]
 2267 0010 002B     		cmp	r3, #0
 2268 0012 3CD0     		beq	.L128
 476:common/lib.stm32/uart.c **** 		return;
 477:common/lib.stm32/uart.c **** 	uart2PutChar(0x55);
 2269              		.loc 2 477 2
 2270 0014 5520     		movs	r0, #85
 2271 0016 204B     		ldr	r3, .L129
 2272 0018 9847     		blx	r3
 2273              	.LVL55:
 478:common/lib.stm32/uart.c **** 	uart2PutChar(0x01);
 2274              		.loc 2 478 2
 2275 001a 0120     		movs	r0, #1
 2276 001c 1E4B     		ldr	r3, .L129
 2277 001e 9847     		blx	r3
 2278              	.LVL56:
 479:common/lib.stm32/uart.c **** 	while (len--)
 2279              		.loc 2 479 8
 2280 0020 13E0     		b	.L124
 2281              	.L126:
 480:common/lib.stm32/uart.c **** 	{
 481:common/lib.stm32/uart.c **** 		ch = *src;
 2282              		.loc 2 481 6
 2283 0022 7B68     		ldr	r3, [r7, #4]
 2284 0024 1B78     		ldrb	r3, [r3]
 2285 0026 BB73     		strb	r3, [r7, #14]
 482:common/lib.stm32/uart.c **** 		rezult = uart2PutChar(ch);
 2286              		.loc 2 482 12
 2287 0028 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2288 002a 1846     		mov	r0, r3
 2289 002c 1A4B     		ldr	r3, .L129
 2290 002e 9847     		blx	r3
 2291              	.LVL57:
 2292 0030 0346     		mov	r3, r0
 2293              		.loc 2 482 10
 2294 0032 BB60     		str	r3, [r7, #8]
 483:common/lib.stm32/uart.c **** 		if (ch == 0x55)
 2295              		.loc 2 483 6
 2296 0034 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2297 0036 552B     		cmp	r3, #85
 2298 0038 04D1     		bne	.L125
 484:common/lib.stm32/uart.c **** 		{
 485:common/lib.stm32/uart.c **** 			rezult = uart2PutChar(0x02);
 2299              		.loc 2 485 13
 2300 003a 0220     		movs	r0, #2
 2301 003c 164B     		ldr	r3, .L129
 2302 003e 9847     		blx	r3
 2303              	.LVL58:
 2304 0040 0346     		mov	r3, r0
 2305              		.loc 2 485 11
 2306 0042 BB60     		str	r3, [r7, #8]
 2307              	.L125:
 486:common/lib.stm32/uart.c **** 		}
 487:common/lib.stm32/uart.c **** 		src++;
 2308              		.loc 2 487 6
 2309 0044 7B68     		ldr	r3, [r7, #4]
 2310 0046 0133     		adds	r3, r3, #1
 2311 0048 7B60     		str	r3, [r7, #4]
 2312              	.L124:
 479:common/lib.stm32/uart.c **** 	{
 2313              		.loc 2 479 12
 2314 004a 3B68     		ldr	r3, [r7]
 2315 004c 5A1E     		subs	r2, r3, #1
 2316 004e 3A60     		str	r2, [r7]
 479:common/lib.stm32/uart.c **** 	{
 2317              		.loc 2 479 8
 2318 0050 002B     		cmp	r3, #0
 2319 0052 E6D1     		bne	.L126
 488:common/lib.stm32/uart.c **** 	}
 489:common/lib.stm32/uart.c **** 	ch = crc;
 2320              		.loc 2 489 5
 2321 0054 FB7B     		ldrb	r3, [r7, #15]
 2322 0056 BB73     		strb	r3, [r7, #14]
 490:common/lib.stm32/uart.c **** 	rezult = uart2PutChar(ch);
 2323              		.loc 2 490 11
 2324 0058 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2325 005a 1846     		mov	r0, r3
 2326 005c 0E4B     		ldr	r3, .L129
 2327 005e 9847     		blx	r3
 2328              	.LVL59:
 2329 0060 0346     		mov	r3, r0
 2330              		.loc 2 490 9
 2331 0062 BB60     		str	r3, [r7, #8]
 491:common/lib.stm32/uart.c **** 	if (ch == 0x55)
 2332              		.loc 2 491 5
 2333 0064 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2334 0066 552B     		cmp	r3, #85
 2335 0068 04D1     		bne	.L127
 492:common/lib.stm32/uart.c **** 	{
 493:common/lib.stm32/uart.c **** 		rezult = uart2PutChar(0x02);
 2336              		.loc 2 493 12
 2337 006a 0220     		movs	r0, #2
 2338 006c 0A4B     		ldr	r3, .L129
 2339 006e 9847     		blx	r3
 2340              	.LVL60:
 2341 0070 0346     		mov	r3, r0
 2342              		.loc 2 493 10
 2343 0072 BB60     		str	r3, [r7, #8]
 2344              	.L127:
 494:common/lib.stm32/uart.c **** 	}
 495:common/lib.stm32/uart.c **** 
 496:common/lib.stm32/uart.c **** 	rezult = uart2PutChar(0x55);
 2345              		.loc 2 496 11
 2346 0074 5520     		movs	r0, #85
 2347 0076 084B     		ldr	r3, .L129
 2348 0078 9847     		blx	r3
 2349              	.LVL61:
 2350 007a 0346     		mov	r3, r0
 2351              		.loc 2 496 9
 2352 007c BB60     		str	r3, [r7, #8]
 497:common/lib.stm32/uart.c **** 	rezult = uart2PutChar(0x03);
 2353              		.loc 2 497 11
 2354 007e 0320     		movs	r0, #3
 2355 0080 054B     		ldr	r3, .L129
 2356 0082 9847     		blx	r3
 2357              	.LVL62:
 2358 0084 0346     		mov	r3, r0
 2359              		.loc 2 497 9
 2360 0086 BB60     		str	r3, [r7, #8]
 498:common/lib.stm32/uart.c **** 	uart2TxTask();
 2361              		.loc 2 498 2
 2362 0088 044B     		ldr	r3, .L129+4
 2363 008a 9847     		blx	r3
 2364              	.LVL63:
 2365 008c 00E0     		b	.L121
 2366              	.L128:
 476:common/lib.stm32/uart.c **** 	uart2PutChar(0x55);
 2367              		.loc 2 476 3
 2368 008e 00BF     		nop
 2369              	.L121:
 499:common/lib.stm32/uart.c **** }
 2370              		.loc 2 499 1
 2371 0090 1037     		adds	r7, r7, #16
 2372              	.LCFI118:
 2373              		.cfi_def_cfa_offset 8
 2374 0092 BD46     		mov	sp, r7
 2375              	.LCFI119:
 2376              		.cfi_def_cfa_register 13
 2377              		@ sp needed
 2378 0094 80BD     		pop	{r7, pc}
 2379              	.L130:
 2380 0096 00BF     		.align	2
 2381              	.L129:
 2382 0098 00000000 		.word	uart2PutChar
 2383 009c 00000000 		.word	uart2TxTask
 2384              		.cfi_endproc
 2385              	.LFE48:
 2387              		.section	.text.uart2Write,"ax",%progbits
 2388              		.align	1
 2389              		.global	uart2Write
 2390              		.syntax unified
 2391              		.thumb
 2392              		.thumb_func
 2394              	uart2Write:
 2395              	.LFB49:
 500:common/lib.stm32/uart.c **** void uart2Write(unsigned char *src, unsigned int len)
 501:common/lib.stm32/uart.c **** {
 2396              		.loc 2 501 1
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 16
 2399              		@ frame_needed = 1, uses_anonymous_args = 0
 2400 0000 80B5     		push	{r7, lr}
 2401              	.LCFI120:
 2402              		.cfi_def_cfa_offset 8
 2403              		.cfi_offset 7, -8
 2404              		.cfi_offset 14, -4
 2405 0002 84B0     		sub	sp, sp, #16
 2406              	.LCFI121:
 2407              		.cfi_def_cfa_offset 24
 2408 0004 00AF     		add	r7, sp, #0
 2409              	.LCFI122:
 2410              		.cfi_def_cfa_register 7
 2411 0006 7860     		str	r0, [r7, #4]
 2412 0008 3960     		str	r1, [r7]
 502:common/lib.stm32/uart.c **** 	unsigned char ch;
 503:common/lib.stm32/uart.c **** 	unsigned int rezult;
 504:common/lib.stm32/uart.c **** 	if (len == 0)
 2413              		.loc 2 504 5
 2414 000a 3B68     		ldr	r3, [r7]
 2415 000c 002B     		cmp	r3, #0
 2416 000e 14D0     		beq	.L136
 505:common/lib.stm32/uart.c **** 		return;
 506:common/lib.stm32/uart.c **** 	while (len--)
 2417              		.loc 2 506 8
 2418 0010 0BE0     		b	.L134
 2419              	.L135:
 507:common/lib.stm32/uart.c **** 	{
 508:common/lib.stm32/uart.c **** 		ch = *src;
 2420              		.loc 2 508 6
 2421 0012 7B68     		ldr	r3, [r7, #4]
 2422 0014 1B78     		ldrb	r3, [r3]
 2423 0016 FB73     		strb	r3, [r7, #15]
 509:common/lib.stm32/uart.c **** 		rezult = uart2PutChar(ch);
 2424              		.loc 2 509 12
 2425 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2426 001a 1846     		mov	r0, r3
 2427 001c 094B     		ldr	r3, .L137
 2428 001e 9847     		blx	r3
 2429              	.LVL64:
 2430 0020 0346     		mov	r3, r0
 2431              		.loc 2 509 10
 2432 0022 BB60     		str	r3, [r7, #8]
 510:common/lib.stm32/uart.c **** 		src++;
 2433              		.loc 2 510 6
 2434 0024 7B68     		ldr	r3, [r7, #4]
 2435 0026 0133     		adds	r3, r3, #1
 2436 0028 7B60     		str	r3, [r7, #4]
 2437              	.L134:
 506:common/lib.stm32/uart.c **** 	{
 2438              		.loc 2 506 12
 2439 002a 3B68     		ldr	r3, [r7]
 2440 002c 5A1E     		subs	r2, r3, #1
 2441 002e 3A60     		str	r2, [r7]
 506:common/lib.stm32/uart.c **** 	{
 2442              		.loc 2 506 8
 2443 0030 002B     		cmp	r3, #0
 2444 0032 EED1     		bne	.L135
 511:common/lib.stm32/uart.c **** 	}
 512:common/lib.stm32/uart.c **** 	uart2TxTask();
 2445              		.loc 2 512 2
 2446 0034 044B     		ldr	r3, .L137+4
 2447 0036 9847     		blx	r3
 2448              	.LVL65:
 2449 0038 00E0     		b	.L131
 2450              	.L136:
 505:common/lib.stm32/uart.c **** 	while (len--)
 2451              		.loc 2 505 3
 2452 003a 00BF     		nop
 2453              	.L131:
 513:common/lib.stm32/uart.c **** }
 2454              		.loc 2 513 1
 2455 003c 1037     		adds	r7, r7, #16
 2456              	.LCFI123:
 2457              		.cfi_def_cfa_offset 8
 2458 003e BD46     		mov	sp, r7
 2459              	.LCFI124:
 2460              		.cfi_def_cfa_register 13
 2461              		@ sp needed
 2462 0040 80BD     		pop	{r7, pc}
 2463              	.L138:
 2464 0042 00BF     		.align	2
 2465              	.L137:
 2466 0044 00000000 		.word	uart2PutChar
 2467 0048 00000000 		.word	uart2TxTask
 2468              		.cfi_endproc
 2469              	.LFE49:
 2471              		.section	.text.DMA1_Channel7_IRQHandler,"ax",%progbits
 2472              		.align	1
 2473              		.global	DMA1_Channel7_IRQHandler
 2474              		.syntax unified
 2475              		.thumb
 2476              		.thumb_func
 2478              	DMA1_Channel7_IRQHandler:
 2479              	.LFB50:
 514:common/lib.stm32/uart.c **** 
 515:common/lib.stm32/uart.c **** //UART 2 DMA INTERRUPT
 516:common/lib.stm32/uart.c **** void DMA1_Channel7_IRQHandler(void)
 517:common/lib.stm32/uart.c **** {
 2480              		.loc 2 517 1
 2481              		.cfi_startproc
 2482              		@ args = 0, pretend = 0, frame = 0
 2483              		@ frame_needed = 1, uses_anonymous_args = 0
 2484 0000 80B5     		push	{r7, lr}
 2485              	.LCFI125:
 2486              		.cfi_def_cfa_offset 8
 2487              		.cfi_offset 7, -8
 2488              		.cfi_offset 14, -4
 2489 0002 00AF     		add	r7, sp, #0
 2490              	.LCFI126:
 2491              		.cfi_def_cfa_register 7
 518:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel6 transfer*/
 519:common/lib.stm32/uart.c **** 	DMA_Cmd(USART2_TX_DMA, DISABLE);
 2492              		.loc 2 519 2
 2493 0004 0021     		movs	r1, #0
 2494 0006 0748     		ldr	r0, .L140
 2495 0008 074B     		ldr	r3, .L140+4
 2496 000a 9847     		blx	r3
 2497              	.LVL66:
 520:common/lib.stm32/uart.c **** 
 521:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel6 Transfer Complete Flag*/
 522:common/lib.stm32/uart.c **** 	DMA_ClearITPendingBit(DMA1_FLAG_TC7);
 2498              		.loc 2 522 2
 2499 000c 4FF00070 		mov	r0, #33554432
 2500 0010 064B     		ldr	r3, .L140+8
 2501 0012 9847     		blx	r3
 2502              	.LVL67:
 523:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA1_FLAG_TC7);
 2503              		.loc 2 523 2
 2504 0014 4FF00070 		mov	r0, #33554432
 2505 0018 054B     		ldr	r3, .L140+12
 2506 001a 9847     		blx	r3
 2507              	.LVL68:
 524:common/lib.stm32/uart.c **** 	uart2TxTask();
 2508              		.loc 2 524 2
 2509 001c 054B     		ldr	r3, .L140+16
 2510 001e 9847     		blx	r3
 2511              	.LVL69:
 525:common/lib.stm32/uart.c **** }
 2512              		.loc 2 525 1
 2513 0020 00BF     		nop
 2514 0022 80BD     		pop	{r7, pc}
 2515              	.L141:
 2516              		.align	2
 2517              	.L140:
 2518 0024 80000240 		.word	1073873024
 2519 0028 00000000 		.word	DMA_Cmd
 2520 002c 00000000 		.word	DMA_ClearITPendingBit
 2521 0030 00000000 		.word	DMA_ClearFlag
 2522 0034 00000000 		.word	uart2TxTask
 2523              		.cfi_endproc
 2524              	.LFE50:
 2526              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 2527              		.align	1
 2528              		.global	DMA1_Channel6_IRQHandler
 2529              		.syntax unified
 2530              		.thumb
 2531              		.thumb_func
 2533              	DMA1_Channel6_IRQHandler:
 2534              	.LFB51:
 526:common/lib.stm32/uart.c **** 
 527:common/lib.stm32/uart.c **** void DMA1_Channel6_IRQHandler(void)
 528:common/lib.stm32/uart.c **** {
 2535              		.loc 2 528 1
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 8
 2538              		@ frame_needed = 1, uses_anonymous_args = 0
 2539 0000 80B5     		push	{r7, lr}
 2540              	.LCFI127:
 2541              		.cfi_def_cfa_offset 8
 2542              		.cfi_offset 7, -8
 2543              		.cfi_offset 14, -4
 2544 0002 82B0     		sub	sp, sp, #8
 2545              	.LCFI128:
 2546              		.cfi_def_cfa_offset 16
 2547 0004 00AF     		add	r7, sp, #0
 2548              	.LCFI129:
 2549              		.cfi_def_cfa_register 7
 529:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel7 transfer*/
 530:common/lib.stm32/uart.c **** 	//DMA_Cmd(USART3_TX_DMA, DISABLE);
 531:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel7 Transfer Complete Flag*/
 532:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA1_FLAG_TC6);
 2550              		.loc 2 532 2
 2551 0006 4FF40010 		mov	r0, #2097152
 2552 000a 074B     		ldr	r3, .L143
 2553 000c 9847     		blx	r3
 2554              	.LVL70:
 533:common/lib.stm32/uart.c **** 
 534:common/lib.stm32/uart.c **** 	u2Fifo.rxCurrent+=0;
 2555              		.loc 2 534 18
 2556 000e 074B     		ldr	r3, .L143+4
 2557 0010 1B68     		ldr	r3, [r3]
 2558 0012 064A     		ldr	r2, .L143+4
 2559 0014 1360     		str	r3, [r2]
 535:common/lib.stm32/uart.c **** 	int tempTest2 = DMA_GetCurrDataCounter(USART2_RX_DMA);
 2560              		.loc 2 535 18
 2561 0016 0648     		ldr	r0, .L143+8
 2562 0018 064B     		ldr	r3, .L143+12
 2563 001a 9847     		blx	r3
 2564              	.LVL71:
 2565 001c 0346     		mov	r3, r0
 2566              		.loc 2 535 6
 2567 001e 7B60     		str	r3, [r7, #4]
 536:common/lib.stm32/uart.c **** 			tempTest2 +=0;
 537:common/lib.stm32/uart.c **** 	//DMARxDataReceived();
 538:common/lib.stm32/uart.c **** 	//uart2TxTask();
 539:common/lib.stm32/uart.c **** }
 2568              		.loc 2 539 1
 2569 0020 00BF     		nop
 2570 0022 0837     		adds	r7, r7, #8
 2571              	.LCFI130:
 2572              		.cfi_def_cfa_offset 8
 2573 0024 BD46     		mov	sp, r7
 2574              	.LCFI131:
 2575              		.cfi_def_cfa_register 13
 2576              		@ sp needed
 2577 0026 80BD     		pop	{r7, pc}
 2578              	.L144:
 2579              		.align	2
 2580              	.L143:
 2581 0028 00000000 		.word	DMA_ClearFlag
 2582 002c 00000000 		.word	u2Fifo
 2583 0030 6C000240 		.word	1073873004
 2584 0034 00000000 		.word	DMA_GetCurrDataCounter
 2585              		.cfi_endproc
 2586              	.LFE51:
 2588              		.section	.text.uart3Init,"ax",%progbits
 2589              		.align	1
 2590              		.global	uart3Init
 2591              		.syntax unified
 2592              		.thumb
 2593              		.thumb_func
 2595              	uart3Init:
 2596              	.LFB52:
 540:common/lib.stm32/uart.c **** 
 541:common/lib.stm32/uart.c **** //------------------------------------------------------------------------------------
 542:common/lib.stm32/uart.c **** void uart3Init(uint32_t baudrate)
 543:common/lib.stm32/uart.c **** {
 2597              		.loc 2 543 1
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 24
 2600              		@ frame_needed = 1, uses_anonymous_args = 0
 2601 0000 90B5     		push	{r4, r7, lr}
 2602              	.LCFI132:
 2603              		.cfi_def_cfa_offset 12
 2604              		.cfi_offset 4, -12
 2605              		.cfi_offset 7, -8
 2606              		.cfi_offset 14, -4
 2607 0002 87B0     		sub	sp, sp, #28
 2608              	.LCFI133:
 2609              		.cfi_def_cfa_offset 40
 2610 0004 00AF     		add	r7, sp, #0
 2611              	.LCFI134:
 2612              		.cfi_def_cfa_register 7
 2613 0006 7860     		str	r0, [r7, #4]
 544:common/lib.stm32/uart.c **** 
 545:common/lib.stm32/uart.c **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 2614              		.loc 2 545 2
 2615 0008 0121     		movs	r1, #1
 2616 000a 0120     		movs	r0, #1
 2617 000c 264B     		ldr	r3, .L146
 2618 000e 9847     		blx	r3
 2619              	.LVL72:
 546:common/lib.stm32/uart.c **** 
 547:common/lib.stm32/uart.c **** 	USART_DeInit(USART3);
 2620              		.loc 2 547 2
 2621 0010 2648     		ldr	r0, .L146+4
 2622 0012 274B     		ldr	r3, .L146+8
 2623 0014 9847     		blx	r3
 2624              	.LVL73:
 548:common/lib.stm32/uart.c **** 
 549:common/lib.stm32/uart.c **** 
 550:common/lib.stm32/uart.c **** 	USART_InitTypeDef USART_InitStructure;
 551:common/lib.stm32/uart.c **** 
 552:common/lib.stm32/uart.c **** 	/* Enable AFIO,  clocks */
 553:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 2625              		.loc 2 553 2
 2626 0016 0121     		movs	r1, #1
 2627 0018 0120     		movs	r0, #1
 2628 001a 264B     		ldr	r3, .L146+12
 2629 001c 9847     		blx	r3
 2630              	.LVL74:
 554:common/lib.stm32/uart.c **** 
 555:common/lib.stm32/uart.c **** 	/* Enable GPIO clocks */
 556:common/lib.stm32/uart.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOA
 2631              		.loc 2 556 2
 2632 001e 0121     		movs	r1, #1
 2633 0020 1C20     		movs	r0, #28
 2634 0022 244B     		ldr	r3, .L146+12
 2635 0024 9847     		blx	r3
 2636              	.LVL75:
 557:common/lib.stm32/uart.c **** 	|RCC_APB2Periph_GPIOB, ENABLE);
 558:common/lib.stm32/uart.c **** 
 559:common/lib.stm32/uart.c **** 	/* Enable USART3,  clocks */
 560:common/lib.stm32/uart.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 2637              		.loc 2 560 2
 2638 0026 0121     		movs	r1, #1
 2639 0028 4FF48020 		mov	r0, #262144
 2640 002c 224B     		ldr	r3, .L146+16
 2641 002e 9847     		blx	r3
 2642              	.LVL76:
 561:common/lib.stm32/uart.c ****     GPIO_PinRemapConfig(GPIO_PartialRemap_USART3,ENABLE);
 2643              		.loc 2 561 5
 2644 0030 0121     		movs	r1, #1
 2645 0032 2248     		ldr	r0, .L146+20
 2646 0034 224B     		ldr	r3, .L146+24
 2647 0036 9847     		blx	r3
 2648              	.LVL77:
 562:common/lib.stm32/uart.c **** 
 563:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_BaudRate = baudrate;
 2649              		.loc 2 563 37
 2650 0038 7B68     		ldr	r3, [r7, #4]
 2651 003a BB60     		str	r3, [r7, #8]
 564:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 2652              		.loc 2 564 39
 2653 003c 0023     		movs	r3, #0
 2654 003e BB81     		strh	r3, [r7, #12]	@ movhi
 565:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 2655              		.loc 2 565 37
 2656 0040 0023     		movs	r3, #0
 2657 0042 FB81     		strh	r3, [r7, #14]	@ movhi
 566:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 2658              		.loc 2 566 35
 2659 0044 0023     		movs	r3, #0
 2660 0046 3B82     		strh	r3, [r7, #16]	@ movhi
 567:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_HardwareFlowControl
 568:common/lib.stm32/uart.c **** 			= USART_HardwareFlowControl_None;
 2661              		.loc 2 568 4
 2662 0048 0023     		movs	r3, #0
 2663 004a BB82     		strh	r3, [r7, #20]	@ movhi
 569:common/lib.stm32/uart.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 2664              		.loc 2 569 33
 2665 004c 0C23     		movs	r3, #12
 2666 004e 7B82     		strh	r3, [r7, #18]	@ movhi
 570:common/lib.stm32/uart.c **** 	/* Configure USART3 */
 571:common/lib.stm32/uart.c **** 	USART_Init(USART3, &USART_InitStructure);
 2667              		.loc 2 571 2
 2668 0050 07F10803 		add	r3, r7, #8
 2669 0054 1946     		mov	r1, r3
 2670 0056 1548     		ldr	r0, .L146+4
 2671 0058 1A4B     		ldr	r3, .L146+28
 2672 005a 9847     		blx	r3
 2673              	.LVL78:
 572:common/lib.stm32/uart.c **** 
 573:common/lib.stm32/uart.c **** 	USART_ClearFlag(USART3, USART_FLAG_CTS | USART_FLAG_LBD  |
 2674              		.loc 2 573 2
 2675 005c 4FF45871 		mov	r1, #864
 2676 0060 1248     		ldr	r0, .L146+4
 2677 0062 194B     		ldr	r3, .L146+32
 2678 0064 9847     		blx	r3
 2679              	.LVL79:
 574:common/lib.stm32/uart.c **** 						USART_FLAG_TC  | USART_FLAG_RXNE );
 575:common/lib.stm32/uart.c **** 
 576:common/lib.stm32/uart.c **** 	uartRxDMAConfiguration(USART3, USART3_RX_DMA, u3Fifo.rxBuf,UARTRX_FIFO_SIZE);
 2680              		.loc 2 576 2
 2681 0066 4FF48063 		mov	r3, #1024
 2682 006a 184A     		ldr	r2, .L146+36
 2683 006c 1849     		ldr	r1, .L146+40
 2684 006e 0F48     		ldr	r0, .L146+4
 2685 0070 184C     		ldr	r4, .L146+44
 2686 0072 A047     		blx	r4
 2687              	.LVL80:
 577:common/lib.stm32/uart.c **** 	USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
 2688              		.loc 2 577 2
 2689 0074 0122     		movs	r2, #1
 2690 0076 8021     		movs	r1, #128
 2691 0078 0C48     		ldr	r0, .L146+4
 2692 007a 174B     		ldr	r3, .L146+48
 2693 007c 9847     		blx	r3
 2694              	.LVL81:
 578:common/lib.stm32/uart.c **** 	/* Enable USART_Rx DMA Receive request */
 579:common/lib.stm32/uart.c **** 	USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);
 2695              		.loc 2 579 2
 2696 007e 0122     		movs	r2, #1
 2697 0080 4021     		movs	r1, #64
 2698 0082 0A48     		ldr	r0, .L146+4
 2699 0084 144B     		ldr	r3, .L146+48
 2700 0086 9847     		blx	r3
 2701              	.LVL82:
 580:common/lib.stm32/uart.c **** 
 581:common/lib.stm32/uart.c **** 	  /* Enable USART_Rx Receive interrupt */
 582:common/lib.stm32/uart.c **** 	  //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 583:common/lib.stm32/uart.c **** 	    /* Configure USART3 interrupt */
 584:common/lib.stm32/uart.c **** 	    NVIC_SetPriority(USART3_RX_DMA_IRQn, 0x01);
 2702              		.loc 2 584 6
 2703 0088 0121     		movs	r1, #1
 2704 008a 0D20     		movs	r0, #13
 2705 008c 134B     		ldr	r3, .L146+52
 2706 008e 9847     		blx	r3
 2707              	.LVL83:
 585:common/lib.stm32/uart.c **** 	    NVIC_EnableIRQ(USART3_RX_DMA_IRQn);
 2708              		.loc 2 585 6
 2709 0090 0D20     		movs	r0, #13
 2710 0092 134B     		ldr	r3, .L146+56
 2711 0094 9847     		blx	r3
 2712              	.LVL84:
 586:common/lib.stm32/uart.c **** 	/* Enable the USART3 */
 587:common/lib.stm32/uart.c **** 	USART_Cmd(USART3, ENABLE);
 2713              		.loc 2 587 2
 2714 0096 0121     		movs	r1, #1
 2715 0098 0448     		ldr	r0, .L146+4
 2716 009a 124B     		ldr	r3, .L146+60
 2717 009c 9847     		blx	r3
 2718              	.LVL85:
 588:common/lib.stm32/uart.c **** }
 2719              		.loc 2 588 1
 2720 009e 00BF     		nop
 2721 00a0 1C37     		adds	r7, r7, #28
 2722              	.LCFI135:
 2723              		.cfi_def_cfa_offset 12
 2724 00a2 BD46     		mov	sp, r7
 2725              	.LCFI136:
 2726              		.cfi_def_cfa_register 13
 2727              		@ sp needed
 2728 00a4 90BD     		pop	{r4, r7, pc}
 2729              	.L147:
 2730 00a6 00BF     		.align	2
 2731              	.L146:
 2732 00a8 00000000 		.word	RCC_AHBPeriphClockCmd
 2733 00ac 00480040 		.word	1073760256
 2734 00b0 00000000 		.word	USART_DeInit
 2735 00b4 00000000 		.word	RCC_APB2PeriphClockCmd
 2736 00b8 00000000 		.word	RCC_APB1PeriphClockCmd
 2737 00bc 10001400 		.word	1310736
 2738 00c0 00000000 		.word	GPIO_PinRemapConfig
 2739 00c4 00000000 		.word	USART_Init
 2740 00c8 00000000 		.word	USART_ClearFlag
 2741 00cc 0C000000 		.word	u3Fifo+12
 2742 00d0 30000240 		.word	1073872944
 2743 00d4 00000000 		.word	uartRxDMAConfiguration
 2744 00d8 00000000 		.word	USART_DMACmd
 2745 00dc 00000000 		.word	NVIC_SetPriority
 2746 00e0 00000000 		.word	NVIC_EnableIRQ
 2747 00e4 00000000 		.word	USART_Cmd
 2748              		.cfi_endproc
 2749              	.LFE52:
 2751              		.section	.text.uart3GetChar,"ax",%progbits
 2752              		.align	1
 2753              		.global	uart3GetChar
 2754              		.syntax unified
 2755              		.thumb
 2756              		.thumb_func
 2758              	uart3GetChar:
 2759              	.LFB53:
 589:common/lib.stm32/uart.c **** 
 590:common/lib.stm32/uart.c **** int uart3GetChar(unsigned char *ch3)
 591:common/lib.stm32/uart.c **** {
 2760              		.loc 2 591 1
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 16
 2763              		@ frame_needed = 1, uses_anonymous_args = 0
 2764 0000 90B5     		push	{r4, r7, lr}
 2765              	.LCFI137:
 2766              		.cfi_def_cfa_offset 12
 2767              		.cfi_offset 4, -12
 2768              		.cfi_offset 7, -8
 2769              		.cfi_offset 14, -4
 2770 0002 85B0     		sub	sp, sp, #20
 2771              	.LCFI138:
 2772              		.cfi_def_cfa_offset 32
 2773 0004 00AF     		add	r7, sp, #0
 2774              	.LCFI139:
 2775              		.cfi_def_cfa_register 7
 2776 0006 7860     		str	r0, [r7, #4]
 592:common/lib.stm32/uart.c **** 	int temp = DMA_GetCurrDataCounter(USART3_RX_DMA);
 2777              		.loc 2 592 13
 2778 0008 1348     		ldr	r0, .L151
 2779 000a 144B     		ldr	r3, .L151+4
 2780 000c 9847     		blx	r3
 2781              	.LVL86:
 2782 000e 0346     		mov	r3, r0
 2783              		.loc 2 592 6
 2784 0010 FB60     		str	r3, [r7, #12]
 593:common/lib.stm32/uart.c **** 	if (u3Fifo.rxCurrent != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(USART3_RX_DMA)))
 2785              		.loc 2 593 12
 2786 0012 134B     		ldr	r3, .L151+8
 2787 0014 1C68     		ldr	r4, [r3]
 2788              		.loc 2 593 46
 2789 0016 1048     		ldr	r0, .L151
 2790 0018 104B     		ldr	r3, .L151+4
 2791 001a 9847     		blx	r3
 2792              	.LVL87:
 2793 001c 0346     		mov	r3, r0
 2794              		.loc 2 593 44
 2795 001e C3F58063 		rsb	r3, r3, #1024
 2796              		.loc 2 593 5
 2797 0022 9C42     		cmp	r4, r3
 2798 0024 13D0     		beq	.L149
 594:common/lib.stm32/uart.c **** 	{
 595:common/lib.stm32/uart.c **** 		*ch3 = u3Fifo.rxBuf[u3Fifo.rxCurrent];
 2799              		.loc 2 595 29
 2800 0026 0E4B     		ldr	r3, .L151+8
 2801 0028 1B68     		ldr	r3, [r3]
 2802              		.loc 2 595 22
 2803 002a 0D4A     		ldr	r2, .L151+8
 2804 002c 1344     		add	r3, r3, r2
 2805 002e 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 2806              		.loc 2 595 8
 2807 0030 7B68     		ldr	r3, [r7, #4]
 2808 0032 1A70     		strb	r2, [r3]
 596:common/lib.stm32/uart.c **** 		u3Fifo.rxCurrent++;
 2809              		.loc 2 596 9
 2810 0034 0A4B     		ldr	r3, .L151+8
 2811 0036 1B68     		ldr	r3, [r3]
 2812              		.loc 2 596 19
 2813 0038 0133     		adds	r3, r3, #1
 2814 003a 094A     		ldr	r2, .L151+8
 2815 003c 1360     		str	r3, [r2]
 597:common/lib.stm32/uart.c **** 		u3Fifo.rxCurrent &= UARTRX_FIFO_SIZE_MASK;
 2816              		.loc 2 597 20
 2817 003e 084B     		ldr	r3, .L151+8
 2818 0040 1B68     		ldr	r3, [r3]
 2819 0042 C3F30903 		ubfx	r3, r3, #0, #10
 2820 0046 064A     		ldr	r2, .L151+8
 2821 0048 1360     		str	r3, [r2]
 598:common/lib.stm32/uart.c **** 		return 1;
 2822              		.loc 2 598 10
 2823 004a 0123     		movs	r3, #1
 2824 004c 00E0     		b	.L150
 2825              	.L149:
 599:common/lib.stm32/uart.c **** 	}
 600:common/lib.stm32/uart.c **** 	return 0;
 2826              		.loc 2 600 9
 2827 004e 0023     		movs	r3, #0
 2828              	.L150:
 601:common/lib.stm32/uart.c **** }
 2829              		.loc 2 601 1
 2830 0050 1846     		mov	r0, r3
 2831 0052 1437     		adds	r7, r7, #20
 2832              	.LCFI140:
 2833              		.cfi_def_cfa_offset 12
 2834 0054 BD46     		mov	sp, r7
 2835              	.LCFI141:
 2836              		.cfi_def_cfa_register 13
 2837              		@ sp needed
 2838 0056 90BD     		pop	{r4, r7, pc}
 2839              	.L152:
 2840              		.align	2
 2841              	.L151:
 2842 0058 30000240 		.word	1073872944
 2843 005c 00000000 		.word	DMA_GetCurrDataCounter
 2844 0060 00000000 		.word	u3Fifo
 2845              		.cfi_endproc
 2846              	.LFE53:
 2848              		.section	.text.uart3PutChar,"ax",%progbits
 2849              		.align	1
 2850              		.global	uart3PutChar
 2851              		.syntax unified
 2852              		.thumb
 2853              		.thumb_func
 2855              	uart3PutChar:
 2856              	.LFB54:
 602:common/lib.stm32/uart.c **** 
 603:common/lib.stm32/uart.c **** unsigned int uart3PutChar(unsigned char ch)
 604:common/lib.stm32/uart.c **** {
 2857              		.loc 2 604 1
 2858              		.cfi_startproc
 2859              		@ args = 0, pretend = 0, frame = 8
 2860              		@ frame_needed = 1, uses_anonymous_args = 0
 2861              		@ link register save eliminated.
 2862 0000 80B4     		push	{r7}
 2863              	.LCFI142:
 2864              		.cfi_def_cfa_offset 4
 2865              		.cfi_offset 7, -4
 2866 0002 83B0     		sub	sp, sp, #12
 2867              	.LCFI143:
 2868              		.cfi_def_cfa_offset 16
 2869 0004 00AF     		add	r7, sp, #0
 2870              	.LCFI144:
 2871              		.cfi_def_cfa_register 7
 2872 0006 0346     		mov	r3, r0
 2873 0008 FB71     		strb	r3, [r7, #7]
 605:common/lib.stm32/uart.c **** 
 606:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 0;
 607:common/lib.stm32/uart.c **** 	u3Fifo.txBufB[u3Fifo.txCurrentEnd] = ch;
 2874              		.loc 2 607 22
 2875 000a 154B     		ldr	r3, .L156
 2876 000c 9B68     		ldr	r3, [r3, #8]
 2877              		.loc 2 607 37
 2878 000e 144A     		ldr	r2, .L156
 2879 0010 1344     		add	r3, r3, r2
 2880 0012 FA79     		ldrb	r2, [r7, #7]
 2881 0014 83F84C24 		strb	r2, [r3, #1100]
 608:common/lib.stm32/uart.c **** 	u3Fifo.txCurrentEnd++;
 2882              		.loc 2 608 8
 2883 0018 114B     		ldr	r3, .L156
 2884 001a 9B68     		ldr	r3, [r3, #8]
 2885              		.loc 2 608 21
 2886 001c 0133     		adds	r3, r3, #1
 2887 001e 104A     		ldr	r2, .L156
 2888 0020 9360     		str	r3, [r2, #8]
 609:common/lib.stm32/uart.c **** 	u3Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 2889              		.loc 2 609 22
 2890 0022 0F4B     		ldr	r3, .L156
 2891 0024 9B68     		ldr	r3, [r3, #8]
 2892 0026 C3F30903 		ubfx	r3, r3, #0, #10
 2893 002a 0D4A     		ldr	r2, .L156
 2894 002c 9360     		str	r3, [r2, #8]
 610:common/lib.stm32/uart.c **** 
 611:common/lib.stm32/uart.c **** 	if (u3Fifo.txCurrentEnd == u3Fifo.txCurrentStart)
 2895              		.loc 2 611 12
 2896 002e 0C4B     		ldr	r3, .L156
 2897 0030 9A68     		ldr	r2, [r3, #8]
 2898              		.loc 2 611 35
 2899 0032 0B4B     		ldr	r3, .L156
 2900 0034 5B68     		ldr	r3, [r3, #4]
 2901              		.loc 2 611 5
 2902 0036 9A42     		cmp	r2, r3
 2903 0038 0CD1     		bne	.L154
 612:common/lib.stm32/uart.c **** 	{
 613:common/lib.stm32/uart.c **** 		u3Fifo.txCurrentEnd--;
 2904              		.loc 2 613 9
 2905 003a 094B     		ldr	r3, .L156
 2906 003c 9B68     		ldr	r3, [r3, #8]
 2907              		.loc 2 613 22
 2908 003e 013B     		subs	r3, r3, #1
 2909 0040 074A     		ldr	r2, .L156
 2910 0042 9360     		str	r3, [r2, #8]
 614:common/lib.stm32/uart.c **** 		u3Fifo.txCurrentEnd &= UARTTX_FIFOB_SIZE_MASK;
 2911              		.loc 2 614 23
 2912 0044 064B     		ldr	r3, .L156
 2913 0046 9B68     		ldr	r3, [r3, #8]
 2914 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2915 004c 044A     		ldr	r2, .L156
 2916 004e 9360     		str	r3, [r2, #8]
 615:common/lib.stm32/uart.c **** 		//		IEC2bits.DMA4IE = 1;
 616:common/lib.stm32/uart.c **** 		return 0;
 2917              		.loc 2 616 10
 2918 0050 0023     		movs	r3, #0
 2919 0052 00E0     		b	.L155
 2920              	.L154:
 617:common/lib.stm32/uart.c **** 	}
 618:common/lib.stm32/uart.c **** 	//	IEC2bits.DMA4IE = 1;
 619:common/lib.stm32/uart.c **** 	return 1;
 2921              		.loc 2 619 9
 2922 0054 0123     		movs	r3, #1
 2923              	.L155:
 620:common/lib.stm32/uart.c **** }
 2924              		.loc 2 620 1
 2925 0056 1846     		mov	r0, r3
 2926 0058 0C37     		adds	r7, r7, #12
 2927              	.LCFI145:
 2928              		.cfi_def_cfa_offset 4
 2929 005a BD46     		mov	sp, r7
 2930              	.LCFI146:
 2931              		.cfi_def_cfa_register 13
 2932              		@ sp needed
 2933 005c 80BC     		pop	{r7}
 2934              	.LCFI147:
 2935              		.cfi_restore 7
 2936              		.cfi_def_cfa_offset 0
 2937 005e 7047     		bx	lr
 2938              	.L157:
 2939              		.align	2
 2940              	.L156:
 2941 0060 00000000 		.word	u3Fifo
 2942              		.cfi_endproc
 2943              	.LFE54:
 2945              		.section	.text.uart3TxTask,"ax",%progbits
 2946              		.align	1
 2947              		.global	uart3TxTask
 2948              		.syntax unified
 2949              		.thumb
 2950              		.thumb_func
 2952              	uart3TxTask:
 2953              	.LFB55:
 621:common/lib.stm32/uart.c **** 
 622:common/lib.stm32/uart.c **** void uart3TxTask()
 623:common/lib.stm32/uart.c **** {
 2954              		.loc 2 623 1
 2955              		.cfi_startproc
 2956              		@ args = 0, pretend = 0, frame = 8
 2957              		@ frame_needed = 1, uses_anonymous_args = 0
 2958 0000 90B5     		push	{r4, r7, lr}
 2959              	.LCFI148:
 2960              		.cfi_def_cfa_offset 12
 2961              		.cfi_offset 4, -12
 2962              		.cfi_offset 7, -8
 2963              		.cfi_offset 14, -4
 2964 0002 85B0     		sub	sp, sp, #20
 2965              	.LCFI149:
 2966              		.cfi_def_cfa_offset 32
 2967 0004 02AF     		add	r7, sp, #8
 2968              	.LCFI150:
 2969              		.cfi_def_cfa 7, 24
 624:common/lib.stm32/uart.c **** 	unsigned int cnt1 = 0;
 2970              		.loc 2 624 15
 2971 0006 0023     		movs	r3, #0
 2972 0008 7B60     		str	r3, [r7, #4]
 625:common/lib.stm32/uart.c **** 	// If DMA COMPLITE
 626:common/lib.stm32/uart.c **** 
 627:common/lib.stm32/uart.c **** 
 628:common/lib.stm32/uart.c **** 	if ((USART3_TX_DMA->CCR & ((uint32_t) 0x00000001)) == 0)
 2973              		.loc 2 628 20
 2974 000a 264B     		ldr	r3, .L164
 2975 000c 1B68     		ldr	r3, [r3]
 2976              		.loc 2 628 26
 2977 000e 03F00103 		and	r3, r3, #1
 2978              		.loc 2 628 5
 2979 0012 002B     		cmp	r3, #0
 2980 0014 42D1     		bne	.L163
 629:common/lib.stm32/uart.c **** 	{
 630:common/lib.stm32/uart.c **** 		while ((u3Fifo.txCurrentStart != u3Fifo.txCurrentEnd) && (cnt1< UARTTX_FIFO_SIZE))
 2981              		.loc 2 630 9
 2982 0016 21E0     		b	.L160
 2983              	.L162:
 631:common/lib.stm32/uart.c **** 		{
 632:common/lib.stm32/uart.c **** 			u3Fifo.txBuf[cnt1] = u3Fifo.txBufB[u3Fifo.txCurrentStart];
 2984              		.loc 2 632 45
 2985 0018 234B     		ldr	r3, .L164+4
 2986 001a 5B68     		ldr	r3, [r3, #4]
 2987              		.loc 2 632 38
 2988 001c 224A     		ldr	r2, .L164+4
 2989 001e 1344     		add	r3, r3, r2
 2990 0020 93F84C14 		ldrb	r1, [r3, #1100]	@ zero_extendqisi2
 2991              		.loc 2 632 23
 2992 0024 204A     		ldr	r2, .L164+4
 2993 0026 7B68     		ldr	r3, [r7, #4]
 2994 0028 1344     		add	r3, r3, r2
 2995 002a 03F20C43 		addw	r3, r3, #1036
 2996 002e 0A46     		mov	r2, r1
 2997 0030 1A70     		strb	r2, [r3]
 633:common/lib.stm32/uart.c **** 			u3Fifo.txBufB[u3Fifo.txCurrentStart] = 0;
 2998              		.loc 2 633 24
 2999 0032 1D4B     		ldr	r3, .L164+4
 3000 0034 5B68     		ldr	r3, [r3, #4]
 3001              		.loc 2 633 41
 3002 0036 1C4A     		ldr	r2, .L164+4
 3003 0038 1344     		add	r3, r3, r2
 3004 003a 0022     		movs	r2, #0
 3005 003c 83F84C24 		strb	r2, [r3, #1100]
 634:common/lib.stm32/uart.c **** 			u3Fifo.txCurrentStart++;
 3006              		.loc 2 634 10
 3007 0040 194B     		ldr	r3, .L164+4
 3008 0042 5B68     		ldr	r3, [r3, #4]
 3009              		.loc 2 634 25
 3010 0044 0133     		adds	r3, r3, #1
 3011 0046 184A     		ldr	r2, .L164+4
 3012 0048 5360     		str	r3, [r2, #4]
 635:common/lib.stm32/uart.c **** 			u3Fifo.txCurrentStart &= UARTTX_FIFOB_SIZE_MASK;
 3013              		.loc 2 635 26
 3014 004a 174B     		ldr	r3, .L164+4
 3015 004c 5B68     		ldr	r3, [r3, #4]
 3016 004e C3F30903 		ubfx	r3, r3, #0, #10
 3017 0052 154A     		ldr	r2, .L164+4
 3018 0054 5360     		str	r3, [r2, #4]
 636:common/lib.stm32/uart.c **** 			cnt1++;
 3019              		.loc 2 636 8
 3020 0056 7B68     		ldr	r3, [r7, #4]
 3021 0058 0133     		adds	r3, r3, #1
 3022 005a 7B60     		str	r3, [r7, #4]
 3023              	.L160:
 630:common/lib.stm32/uart.c **** 		{
 3024              		.loc 2 630 17
 3025 005c 124B     		ldr	r3, .L164+4
 3026 005e 5A68     		ldr	r2, [r3, #4]
 630:common/lib.stm32/uart.c **** 		{
 3027              		.loc 2 630 42
 3028 0060 114B     		ldr	r3, .L164+4
 3029 0062 9B68     		ldr	r3, [r3, #8]
 630:common/lib.stm32/uart.c **** 		{
 3030              		.loc 2 630 9
 3031 0064 9A42     		cmp	r2, r3
 3032 0066 02D0     		beq	.L161
 630:common/lib.stm32/uart.c **** 		{
 3033              		.loc 2 630 57 discriminator 1
 3034 0068 7B68     		ldr	r3, [r7, #4]
 3035 006a 3F2B     		cmp	r3, #63
 3036 006c D4D9     		bls	.L162
 3037              	.L161:
 637:common/lib.stm32/uart.c **** 		}
 638:common/lib.stm32/uart.c **** 
 639:common/lib.stm32/uart.c **** 
 640:common/lib.stm32/uart.c **** 		if (cnt1 > 0)
 3038              		.loc 2 640 6
 3039 006e 7B68     		ldr	r3, [r7, #4]
 3040 0070 002B     		cmp	r3, #0
 3041 0072 13D0     		beq	.L163
 641:common/lib.stm32/uart.c **** 		{
 642:common/lib.stm32/uart.c **** 			uartTxDMAConfiguration(USART3, USART3_TX_DMA, u3Fifo.txBuf, cnt1,1);
 3042              		.loc 2 642 4
 3043 0074 0123     		movs	r3, #1
 3044 0076 0093     		str	r3, [sp]
 3045 0078 7B68     		ldr	r3, [r7, #4]
 3046 007a 0C4A     		ldr	r2, .L164+8
 3047 007c 0949     		ldr	r1, .L164
 3048 007e 0C48     		ldr	r0, .L164+12
 3049 0080 0C4C     		ldr	r4, .L164+16
 3050 0082 A047     		blx	r4
 3051              	.LVL88:
 643:common/lib.stm32/uart.c **** 			DMA_ITConfig(USART3_TX_DMA, DMA_IT_TC, ENABLE);
 3052              		.loc 2 643 4
 3053 0084 0122     		movs	r2, #1
 3054 0086 0221     		movs	r1, #2
 3055 0088 0648     		ldr	r0, .L164
 3056 008a 0B4B     		ldr	r3, .L164+20
 3057 008c 9847     		blx	r3
 3058              	.LVL89:
 644:common/lib.stm32/uart.c **** 				//}
 645:common/lib.stm32/uart.c **** 				/* Enable USART_Tx DMA Tansmit request */
 646:common/lib.stm32/uart.c **** 				/* Configure DMA1_Channel_Tx interrupt */
 647:common/lib.stm32/uart.c **** 				NVIC_SetPriority(USART3_TX_DMA_IRQn, 0x03);
 3059              		.loc 2 647 5
 3060 008e 0321     		movs	r1, #3
 3061 0090 0C20     		movs	r0, #12
 3062 0092 0A4B     		ldr	r3, .L164+24
 3063 0094 9847     		blx	r3
 3064              	.LVL90:
 648:common/lib.stm32/uart.c **** 				NVIC_EnableIRQ(USART3_TX_DMA_IRQn);
 3065              		.loc 2 648 5
 3066 0096 0C20     		movs	r0, #12
 3067 0098 094B     		ldr	r3, .L164+28
 3068 009a 9847     		blx	r3
 3069              	.LVL91:
 3070              	.L163:
 649:common/lib.stm32/uart.c **** 
 650:common/lib.stm32/uart.c **** 
 651:common/lib.stm32/uart.c **** 		}
 652:common/lib.stm32/uart.c **** 	}
 653:common/lib.stm32/uart.c **** }
 3071              		.loc 2 653 1
 3072 009c 00BF     		nop
 3073 009e 0C37     		adds	r7, r7, #12
 3074              	.LCFI151:
 3075              		.cfi_def_cfa_offset 12
 3076 00a0 BD46     		mov	sp, r7
 3077              	.LCFI152:
 3078              		.cfi_def_cfa_register 13
 3079              		@ sp needed
 3080 00a2 90BD     		pop	{r4, r7, pc}
 3081              	.L165:
 3082              		.align	2
 3083              	.L164:
 3084 00a4 1C000240 		.word	1073872924
 3085 00a8 00000000 		.word	u3Fifo
 3086 00ac 0C040000 		.word	u3Fifo+1036
 3087 00b0 00480040 		.word	1073760256
 3088 00b4 00000000 		.word	uartTxDMAConfiguration
 3089 00b8 00000000 		.word	DMA_ITConfig
 3090 00bc 00000000 		.word	NVIC_SetPriority
 3091 00c0 00000000 		.word	NVIC_EnableIRQ
 3092              		.cfi_endproc
 3093              	.LFE55:
 3095              		.section	.text.uart3Read,"ax",%progbits
 3096              		.align	1
 3097              		.global	uart3Read
 3098              		.syntax unified
 3099              		.thumb
 3100              		.thumb_func
 3102              	uart3Read:
 3103              	.LFB56:
 654:common/lib.stm32/uart.c **** 
 655:common/lib.stm32/uart.c **** unsigned int uart3Read(unsigned char *dsn3, unsigned int max_len3)
 656:common/lib.stm32/uart.c **** {
 3104              		.loc 2 656 1
 3105              		.cfi_startproc
 3106              		@ args = 0, pretend = 0, frame = 24
 3107              		@ frame_needed = 1, uses_anonymous_args = 0
 3108 0000 80B5     		push	{r7, lr}
 3109              	.LCFI153:
 3110              		.cfi_def_cfa_offset 8
 3111              		.cfi_offset 7, -8
 3112              		.cfi_offset 14, -4
 3113 0002 86B0     		sub	sp, sp, #24
 3114              	.LCFI154:
 3115              		.cfi_def_cfa_offset 32
 3116 0004 00AF     		add	r7, sp, #0
 3117              	.LCFI155:
 3118              		.cfi_def_cfa_register 7
 3119 0006 7860     		str	r0, [r7, #4]
 3120 0008 3960     		str	r1, [r7]
 657:common/lib.stm32/uart.c **** 	unsigned short cntr3 = 0, crc3 = 0;
 3121              		.loc 2 657 17
 3122 000a 0023     		movs	r3, #0
 3123 000c FB82     		strh	r3, [r7, #22]	@ movhi
 3124              		.loc 2 657 28
 3125 000e 0023     		movs	r3, #0
 3126 0010 BB82     		strh	r3, [r7, #20]	@ movhi
 658:common/lib.stm32/uart.c **** 	unsigned char v3;
 659:common/lib.stm32/uart.c **** 	unsigned char *ptr3 = dsn3;
 3127              		.loc 2 659 17
 3128 0012 7B68     		ldr	r3, [r7, #4]
 3129 0014 3B61     		str	r3, [r7, #16]
 660:common/lib.stm32/uart.c **** 
 661:common/lib.stm32/uart.c **** 	while (uart3GetChar(&v3) && (max_len3 > cntr3))
 3130              		.loc 2 661 8
 3131 0016 0DE0     		b	.L167
 3132              	.L169:
 662:common/lib.stm32/uart.c **** 	{
 663:common/lib.stm32/uart.c **** 		*ptr3 = v3;
 3133              		.loc 2 663 9
 3134 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 3135 001a 3B69     		ldr	r3, [r7, #16]
 3136 001c 1A70     		strb	r2, [r3]
 664:common/lib.stm32/uart.c **** 		ptr3++;
 3137              		.loc 2 664 7
 3138 001e 3B69     		ldr	r3, [r7, #16]
 3139 0020 0133     		adds	r3, r3, #1
 3140 0022 3B61     		str	r3, [r7, #16]
 665:common/lib.stm32/uart.c **** 		crc3 += v3;
 3141              		.loc 2 665 8
 3142 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3143 0026 9AB2     		uxth	r2, r3
 3144 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 3145 002a 1344     		add	r3, r3, r2
 3146 002c BB82     		strh	r3, [r7, #20]	@ movhi
 666:common/lib.stm32/uart.c **** 		cntr3++;
 3147              		.loc 2 666 8
 3148 002e FB8A     		ldrh	r3, [r7, #22]
 3149 0030 0133     		adds	r3, r3, #1
 3150 0032 FB82     		strh	r3, [r7, #22]	@ movhi
 3151              	.L167:
 661:common/lib.stm32/uart.c **** 	{
 3152              		.loc 2 661 9
 3153 0034 07F10F03 		add	r3, r7, #15
 3154 0038 1846     		mov	r0, r3
 3155 003a 074B     		ldr	r3, .L171
 3156 003c 9847     		blx	r3
 3157              	.LVL92:
 3158 003e 0346     		mov	r3, r0
 661:common/lib.stm32/uart.c **** 	{
 3159              		.loc 2 661 8
 3160 0040 002B     		cmp	r3, #0
 3161 0042 03D0     		beq	.L168
 661:common/lib.stm32/uart.c **** 	{
 3162              		.loc 2 661 40 discriminator 1
 3163 0044 FB8A     		ldrh	r3, [r7, #22]
 661:common/lib.stm32/uart.c **** 	{
 3164              		.loc 2 661 27 discriminator 1
 3165 0046 3A68     		ldr	r2, [r7]
 3166 0048 9A42     		cmp	r2, r3
 3167 004a E5D8     		bhi	.L169
 3168              	.L168:
 667:common/lib.stm32/uart.c **** 	}
 668:common/lib.stm32/uart.c **** 	return cntr3; //  error here
 3169              		.loc 2 668 9
 3170 004c FB8A     		ldrh	r3, [r7, #22]
 669:common/lib.stm32/uart.c **** }
 3171              		.loc 2 669 1
 3172 004e 1846     		mov	r0, r3
 3173 0050 1837     		adds	r7, r7, #24
 3174              	.LCFI156:
 3175              		.cfi_def_cfa_offset 8
 3176 0052 BD46     		mov	sp, r7
 3177              	.LCFI157:
 3178              		.cfi_def_cfa_register 13
 3179              		@ sp needed
 3180 0054 80BD     		pop	{r7, pc}
 3181              	.L172:
 3182 0056 00BF     		.align	2
 3183              	.L171:
 3184 0058 00000000 		.word	uart3GetChar
 3185              		.cfi_endproc
 3186              	.LFE56:
 3188              		.section	.text.uart3Write,"ax",%progbits
 3189              		.align	1
 3190              		.global	uart3Write
 3191              		.syntax unified
 3192              		.thumb
 3193              		.thumb_func
 3195              	uart3Write:
 3196              	.LFB57:
 670:common/lib.stm32/uart.c **** 
 671:common/lib.stm32/uart.c **** void uart3Write(unsigned char *src3, unsigned int len3)
 672:common/lib.stm32/uart.c **** {
 3197              		.loc 2 672 1
 3198              		.cfi_startproc
 3199              		@ args = 0, pretend = 0, frame = 16
 3200              		@ frame_needed = 1, uses_anonymous_args = 0
 3201 0000 80B5     		push	{r7, lr}
 3202              	.LCFI158:
 3203              		.cfi_def_cfa_offset 8
 3204              		.cfi_offset 7, -8
 3205              		.cfi_offset 14, -4
 3206 0002 84B0     		sub	sp, sp, #16
 3207              	.LCFI159:
 3208              		.cfi_def_cfa_offset 24
 3209 0004 00AF     		add	r7, sp, #0
 3210              	.LCFI160:
 3211              		.cfi_def_cfa_register 7
 3212 0006 7860     		str	r0, [r7, #4]
 3213 0008 3960     		str	r1, [r7]
 673:common/lib.stm32/uart.c **** //	unsigned int Param3;
 674:common/lib.stm32/uart.c **** 	unsigned char ch3 = 0;
 3214              		.loc 2 674 16
 3215 000a 0023     		movs	r3, #0
 3216 000c FB73     		strb	r3, [r7, #15]
 675:common/lib.stm32/uart.c **** 	unsigned int rezult3;
 676:common/lib.stm32/uart.c **** 	if (len3 == 0)
 3217              		.loc 2 676 5
 3218 000e 3B68     		ldr	r3, [r7]
 3219 0010 002B     		cmp	r3, #0
 3220 0012 1DD0     		beq	.L178
 677:common/lib.stm32/uart.c **** 		return;
 678:common/lib.stm32/uart.c **** 
 679:common/lib.stm32/uart.c **** 	while (len3>0)
 3221              		.loc 2 679 8
 3222 0014 0DE0     		b	.L176
 3223              	.L177:
 680:common/lib.stm32/uart.c **** 	{
 681:common/lib.stm32/uart.c **** 		ch3 = *src3;
 3224              		.loc 2 681 7
 3225 0016 7B68     		ldr	r3, [r7, #4]
 3226 0018 1B78     		ldrb	r3, [r3]
 3227 001a FB73     		strb	r3, [r7, #15]
 682:common/lib.stm32/uart.c **** 		rezult3 = uart3PutChar(ch3);
 3228              		.loc 2 682 13
 3229 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3230 001e 1846     		mov	r0, r3
 3231 0020 0D4B     		ldr	r3, .L179
 3232 0022 9847     		blx	r3
 3233              	.LVL93:
 3234 0024 B860     		str	r0, [r7, #8]
 683:common/lib.stm32/uart.c **** 		src3++;
 3235              		.loc 2 683 7
 3236 0026 7B68     		ldr	r3, [r7, #4]
 3237 0028 0133     		adds	r3, r3, #1
 3238 002a 7B60     		str	r3, [r7, #4]
 684:common/lib.stm32/uart.c **** 		len3--;
 3239              		.loc 2 684 7
 3240 002c 3B68     		ldr	r3, [r7]
 3241 002e 013B     		subs	r3, r3, #1
 3242 0030 3B60     		str	r3, [r7]
 3243              	.L176:
 679:common/lib.stm32/uart.c **** 	{
 3244              		.loc 2 679 8
 3245 0032 3B68     		ldr	r3, [r7]
 3246 0034 002B     		cmp	r3, #0
 3247 0036 EED1     		bne	.L177
 685:common/lib.stm32/uart.c **** 	}
 686:common/lib.stm32/uart.c **** 
 687:common/lib.stm32/uart.c **** 
 688:common/lib.stm32/uart.c **** 	DMA_Cmd(USART3_TX_DMA, DISABLE);
 3248              		.loc 2 688 2
 3249 0038 0021     		movs	r1, #0
 3250 003a 0848     		ldr	r0, .L179+4
 3251 003c 084B     		ldr	r3, .L179+8
 3252 003e 9847     		blx	r3
 3253              	.LVL94:
 689:common/lib.stm32/uart.c **** 	DMA_ITConfig(USART3_TX_DMA, DMA_IT_TC, DISABLE);
 3254              		.loc 2 689 2
 3255 0040 0022     		movs	r2, #0
 3256 0042 0221     		movs	r1, #2
 3257 0044 0548     		ldr	r0, .L179+4
 3258 0046 074B     		ldr	r3, .L179+12
 3259 0048 9847     		blx	r3
 3260              	.LVL95:
 690:common/lib.stm32/uart.c **** 
 691:common/lib.stm32/uart.c **** 	uart3TxTask();
 3261              		.loc 2 691 2
 3262 004a 074B     		ldr	r3, .L179+16
 3263 004c 9847     		blx	r3
 3264              	.LVL96:
 3265 004e 00E0     		b	.L173
 3266              	.L178:
 677:common/lib.stm32/uart.c **** 
 3267              		.loc 2 677 3
 3268 0050 00BF     		nop
 3269              	.L173:
 692:common/lib.stm32/uart.c **** 
 693:common/lib.stm32/uart.c **** }
 3270              		.loc 2 693 1
 3271 0052 1037     		adds	r7, r7, #16
 3272              	.LCFI161:
 3273              		.cfi_def_cfa_offset 8
 3274 0054 BD46     		mov	sp, r7
 3275              	.LCFI162:
 3276              		.cfi_def_cfa_register 13
 3277              		@ sp needed
 3278 0056 80BD     		pop	{r7, pc}
 3279              	.L180:
 3280              		.align	2
 3281              	.L179:
 3282 0058 00000000 		.word	uart3PutChar
 3283 005c 1C000240 		.word	1073872924
 3284 0060 00000000 		.word	DMA_Cmd
 3285 0064 00000000 		.word	DMA_ITConfig
 3286 0068 00000000 		.word	uart3TxTask
 3287              		.cfi_endproc
 3288              	.LFE57:
 3290              		.section	.text.uart3FindEscapedPack,"ax",%progbits
 3291              		.align	1
 3292              		.global	uart3FindEscapedPack
 3293              		.syntax unified
 3294              		.thumb
 3295              		.thumb_func
 3297              	uart3FindEscapedPack:
 3298              	.LFB58:
 694:common/lib.stm32/uart.c **** 
 695:common/lib.stm32/uart.c **** unsigned int uart3FindEscapedPack()
 696:common/lib.stm32/uart.c **** {
 3299              		.loc 2 696 1
 3300              		.cfi_startproc
 3301              		@ args = 0, pretend = 0, frame = 8
 3302              		@ frame_needed = 1, uses_anonymous_args = 0
 3303 0000 80B5     		push	{r7, lr}
 3304              	.LCFI163:
 3305              		.cfi_def_cfa_offset 8
 3306              		.cfi_offset 7, -8
 3307              		.cfi_offset 14, -4
 3308 0002 82B0     		sub	sp, sp, #8
 3309              	.LCFI164:
 3310              		.cfi_def_cfa_offset 16
 3311 0004 00AF     		add	r7, sp, #0
 3312              	.LCFI165:
 3313              		.cfi_def_cfa_register 7
 697:common/lib.stm32/uart.c **** 	unsigned int i = u3Fifo.rxCurrent;
 3314              		.loc 2 697 15
 3315 0006 1D4B     		ldr	r3, .L187
 3316 0008 1B68     		ldr	r3, [r3]
 3317 000a 7B60     		str	r3, [r7, #4]
 698:common/lib.stm32/uart.c **** 
 699:common/lib.stm32/uart.c **** 	while (i != (UARTRX_FIFO_SIZE - DMA_GetCurrDataCounter(DMA1_Channel3)))
 3318              		.loc 2 699 8
 3319 000c 26E0     		b	.L182
 3320              	.L186:
 700:common/lib.stm32/uart.c **** 	{
 701:common/lib.stm32/uart.c **** 		if (u3Fifo.rxBuf[i] == 0x55)
 3321              		.loc 2 701 19
 3322 000e 1B4A     		ldr	r2, .L187
 3323 0010 7B68     		ldr	r3, [r7, #4]
 3324 0012 1344     		add	r3, r3, r2
 3325 0014 0C33     		adds	r3, r3, #12
 3326 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3327              		.loc 2 701 6
 3328 0018 552B     		cmp	r3, #85
 3329 001a 18D1     		bne	.L183
 702:common/lib.stm32/uart.c **** 		{
 703:common/lib.stm32/uart.c **** 			i++;
 3330              		.loc 2 703 5
 3331 001c 7B68     		ldr	r3, [r7, #4]
 3332 001e 0133     		adds	r3, r3, #1
 3333 0020 7B60     		str	r3, [r7, #4]
 704:common/lib.stm32/uart.c **** 			i &= UARTRX_FIFO_SIZE_MASK;
 3334              		.loc 2 704 6
 3335 0022 7B68     		ldr	r3, [r7, #4]
 3336 0024 C3F30903 		ubfx	r3, r3, #0, #10
 3337 0028 7B60     		str	r3, [r7, #4]
 705:common/lib.stm32/uart.c **** 			if (i == (DMA1_Channel3->CMAR - (uint32_t) &u3Fifo.rxBuf[0]))
 3338              		.loc 2 705 27
 3339 002a 154B     		ldr	r3, .L187+4
 3340 002c DB68     		ldr	r3, [r3, #12]
 3341              		.loc 2 705 36
 3342 002e 154A     		ldr	r2, .L187+8
 3343              		.loc 2 705 34
 3344 0030 9B1A     		subs	r3, r3, r2
 3345              		.loc 2 705 7
 3346 0032 7A68     		ldr	r2, [r7, #4]
 3347 0034 9A42     		cmp	r2, r3
 3348 0036 01D1     		bne	.L184
 706:common/lib.stm32/uart.c **** 				return 0;//return (isStart & isEnd);
 3349              		.loc 2 706 12
 3350 0038 0023     		movs	r3, #0
 3351 003a 1AE0     		b	.L185
 3352              	.L184:
 707:common/lib.stm32/uart.c **** 
 708:common/lib.stm32/uart.c **** 			if (u3Fifo.rxBuf[i] == 0x03)
 3353              		.loc 2 708 20
 3354 003c 0F4A     		ldr	r2, .L187
 3355 003e 7B68     		ldr	r3, [r7, #4]
 3356 0040 1344     		add	r3, r3, r2
 3357 0042 0C33     		adds	r3, r3, #12
 3358 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3359              		.loc 2 708 7
 3360 0046 032B     		cmp	r3, #3
 3361 0048 01D1     		bne	.L183
 709:common/lib.stm32/uart.c **** 			{
 710:common/lib.stm32/uart.c **** 				return 1;
 3362              		.loc 2 710 12
 3363 004a 0123     		movs	r3, #1
 3364 004c 11E0     		b	.L185
 3365              	.L183:
 711:common/lib.stm32/uart.c **** 			}
 712:common/lib.stm32/uart.c **** 		}
 713:common/lib.stm32/uart.c **** 		i++;
 3366              		.loc 2 713 4
 3367 004e 7B68     		ldr	r3, [r7, #4]
 3368 0050 0133     		adds	r3, r3, #1
 3369 0052 7B60     		str	r3, [r7, #4]
 714:common/lib.stm32/uart.c **** 		i &= UARTRX_FIFO_SIZE_MASK;
 3370              		.loc 2 714 5
 3371 0054 7B68     		ldr	r3, [r7, #4]
 3372 0056 C3F30903 		ubfx	r3, r3, #0, #10
 3373 005a 7B60     		str	r3, [r7, #4]
 3374              	.L182:
 699:common/lib.stm32/uart.c **** 	{
 3375              		.loc 2 699 34
 3376 005c 0848     		ldr	r0, .L187+4
 3377 005e 0A4B     		ldr	r3, .L187+12
 3378 0060 9847     		blx	r3
 3379              	.LVL97:
 3380 0062 0346     		mov	r3, r0
 699:common/lib.stm32/uart.c **** 	{
 3381              		.loc 2 699 32
 3382 0064 C3F58063 		rsb	r3, r3, #1024
 3383 0068 1A46     		mov	r2, r3
 699:common/lib.stm32/uart.c **** 	{
 3384              		.loc 2 699 8
 3385 006a 7B68     		ldr	r3, [r7, #4]
 3386 006c 9342     		cmp	r3, r2
 3387 006e CED1     		bne	.L186
 715:common/lib.stm32/uart.c **** 	}
 716:common/lib.stm32/uart.c **** 	return 0;
 3388              		.loc 2 716 9
 3389 0070 0023     		movs	r3, #0
 3390              	.L185:
 717:common/lib.stm32/uart.c **** 
 718:common/lib.stm32/uart.c **** }
 3391              		.loc 2 718 1
 3392 0072 1846     		mov	r0, r3
 3393 0074 0837     		adds	r7, r7, #8
 3394              	.LCFI166:
 3395              		.cfi_def_cfa_offset 8
 3396 0076 BD46     		mov	sp, r7
 3397              	.LCFI167:
 3398              		.cfi_def_cfa_register 13
 3399              		@ sp needed
 3400 0078 80BD     		pop	{r7, pc}
 3401              	.L188:
 3402 007a 00BF     		.align	2
 3403              	.L187:
 3404 007c 00000000 		.word	u3Fifo
 3405 0080 30000240 		.word	1073872944
 3406 0084 0C000000 		.word	u3Fifo+12
 3407 0088 00000000 		.word	DMA_GetCurrDataCounter
 3408              		.cfi_endproc
 3409              	.LFE58:
 3411              		.section	.text.uart3ReadEscaped,"ax",%progbits
 3412              		.align	1
 3413              		.global	uart3ReadEscaped
 3414              		.syntax unified
 3415              		.thumb
 3416              		.thumb_func
 3418              	uart3ReadEscaped:
 3419              	.LFB59:
 719:common/lib.stm32/uart.c **** 
 720:common/lib.stm32/uart.c **** unsigned int uart3ReadEscaped(unsigned char *dsn, unsigned int max_len)
 721:common/lib.stm32/uart.c **** {
 3420              		.loc 2 721 1
 3421              		.cfi_startproc
 3422              		@ args = 0, pretend = 0, frame = 24
 3423              		@ frame_needed = 1, uses_anonymous_args = 0
 3424 0000 80B5     		push	{r7, lr}
 3425              	.LCFI168:
 3426              		.cfi_def_cfa_offset 8
 3427              		.cfi_offset 7, -8
 3428              		.cfi_offset 14, -4
 3429 0002 86B0     		sub	sp, sp, #24
 3430              	.LCFI169:
 3431              		.cfi_def_cfa_offset 32
 3432 0004 00AF     		add	r7, sp, #0
 3433              	.LCFI170:
 3434              		.cfi_def_cfa_register 7
 3435 0006 7860     		str	r0, [r7, #4]
 3436 0008 3960     		str	r1, [r7]
 722:common/lib.stm32/uart.c **** 
 723:common/lib.stm32/uart.c **** 	unsigned short cnt = 0, crc = 0;
 3437              		.loc 2 723 17
 3438 000a 0023     		movs	r3, #0
 3439 000c 3B82     		strh	r3, [r7, #16]	@ movhi
 3440              		.loc 2 723 26
 3441 000e 0023     		movs	r3, #0
 3442 0010 7B82     		strh	r3, [r7, #18]	@ movhi
 724:common/lib.stm32/uart.c **** 	unsigned char v, *ptr = dsn;
 3443              		.loc 2 724 20
 3444 0012 7B68     		ldr	r3, [r7, #4]
 3445 0014 7B61     		str	r3, [r7, #20]
 725:common/lib.stm32/uart.c **** 	if (uart3FindEscapedPack() == 0)
 3446              		.loc 2 725 6
 3447 0016 054B     		ldr	r3, .L192
 3448 0018 9847     		blx	r3
 3449              	.LVL98:
 3450 001a 0346     		mov	r3, r0
 3451              		.loc 2 725 5
 3452 001c 002B     		cmp	r3, #0
 3453 001e 01D1     		bne	.L190
 726:common/lib.stm32/uart.c **** 	{
 727:common/lib.stm32/uart.c **** 		return 0;
 3454              		.loc 2 727 10
 3455 0020 0023     		movs	r3, #0
 3456 0022 FFE7     		b	.L189
 3457              	.L190:
 3458              	.L189:
 728:common/lib.stm32/uart.c **** 
 729:common/lib.stm32/uart.c **** 	while (uart3GetChar(&v) && (max_len > cnt))
 730:common/lib.stm32/uart.c **** 	{
 731:common/lib.stm32/uart.c **** 		if (v == 0x55)
 732:common/lib.stm32/uart.c **** 		{
 733:common/lib.stm32/uart.c **** 			if (!uart3GetChar(&v))
 734:common/lib.stm32/uart.c **** 				return 0;
 735:common/lib.stm32/uart.c **** 			if (v == 0x1) // start pack here;
 736:common/lib.stm32/uart.c **** 			{
 737:common/lib.stm32/uart.c **** 				ptr = dsn;
 738:common/lib.stm32/uart.c **** 				cnt = 0;
 739:common/lib.stm32/uart.c **** 				crc = 0;
 740:common/lib.stm32/uart.c **** 				continue;
 741:common/lib.stm32/uart.c **** 			}
 742:common/lib.stm32/uart.c **** 			else if (v == 0x2)
 743:common/lib.stm32/uart.c **** 			{
 744:common/lib.stm32/uart.c **** 				v = 0x55;
 745:common/lib.stm32/uart.c **** 			}
 746:common/lib.stm32/uart.c **** 			else if (v == 0x3)
 747:common/lib.stm32/uart.c **** 			{
 748:common/lib.stm32/uart.c **** 				ptr--;
 749:common/lib.stm32/uart.c **** 				if (((crc - *ptr) & 0x00FF) != *ptr)
 750:common/lib.stm32/uart.c **** 					return 0; // crc fail
 751:common/lib.stm32/uart.c **** 				return cnt;
 752:common/lib.stm32/uart.c **** 			}
 753:common/lib.stm32/uart.c **** 		}
 754:common/lib.stm32/uart.c **** 		*ptr = v;
 755:common/lib.stm32/uart.c **** 		ptr++;
 756:common/lib.stm32/uart.c **** 		crc += v;
 757:common/lib.stm32/uart.c **** 		cnt++;
 758:common/lib.stm32/uart.c **** 	}
 759:common/lib.stm32/uart.c **** 	return 0; //  error here
 760:common/lib.stm32/uart.c **** }
 761:common/lib.stm32/uart.c **** }
 3459              		.loc 2 761 1
 3460 0024 1846     		mov	r0, r3
 3461 0026 1837     		adds	r7, r7, #24
 3462              	.LCFI171:
 3463              		.cfi_def_cfa_offset 8
 3464 0028 BD46     		mov	sp, r7
 3465              	.LCFI172:
 3466              		.cfi_def_cfa_register 13
 3467              		@ sp needed
 3468 002a 80BD     		pop	{r7, pc}
 3469              	.L193:
 3470              		.align	2
 3471              	.L192:
 3472 002c 00000000 		.word	uart3FindEscapedPack
 3473              		.cfi_endproc
 3474              	.LFE59:
 3476              		.section	.text.uart3WriteEscaped,"ax",%progbits
 3477              		.align	1
 3478              		.global	uart3WriteEscaped
 3479              		.syntax unified
 3480              		.thumb
 3481              		.thumb_func
 3483              	uart3WriteEscaped:
 3484              	.LFB60:
 762:common/lib.stm32/uart.c **** 
 763:common/lib.stm32/uart.c **** 
 764:common/lib.stm32/uart.c **** //-----------------------------------------------------------------------------------
 765:common/lib.stm32/uart.c **** void uart3WriteEscaped(unsigned char *src, unsigned int len)
 766:common/lib.stm32/uart.c **** {
 3485              		.loc 2 766 1
 3486              		.cfi_startproc
 3487              		@ args = 0, pretend = 0, frame = 16
 3488              		@ frame_needed = 1, uses_anonymous_args = 0
 3489 0000 80B5     		push	{r7, lr}
 3490              	.LCFI173:
 3491              		.cfi_def_cfa_offset 8
 3492              		.cfi_offset 7, -8
 3493              		.cfi_offset 14, -4
 3494 0002 84B0     		sub	sp, sp, #16
 3495              	.LCFI174:
 3496              		.cfi_def_cfa_offset 24
 3497 0004 00AF     		add	r7, sp, #0
 3498              	.LCFI175:
 3499              		.cfi_def_cfa_register 7
 3500 0006 7860     		str	r0, [r7, #4]
 3501 0008 3960     		str	r1, [r7]
 767:common/lib.stm32/uart.c **** 	unsigned char ch;
 768:common/lib.stm32/uart.c **** 	unsigned char crc = 0;//getCRC(src, len);
 3502              		.loc 2 768 16
 3503 000a 0023     		movs	r3, #0
 3504 000c FB73     		strb	r3, [r7, #15]
 769:common/lib.stm32/uart.c **** 	unsigned int rezult;
 770:common/lib.stm32/uart.c **** 	if (len == 0)
 3505              		.loc 2 770 5
 3506 000e 3B68     		ldr	r3, [r7]
 3507 0010 002B     		cmp	r3, #0
 3508 0012 36D0     		beq	.L201
 771:common/lib.stm32/uart.c **** 		return;
 772:common/lib.stm32/uart.c **** 	uart3PutChar(0x55);
 3509              		.loc 2 772 2
 3510 0014 5520     		movs	r0, #85
 3511 0016 1D4B     		ldr	r3, .L202
 3512 0018 9847     		blx	r3
 3513              	.LVL99:
 773:common/lib.stm32/uart.c **** 	uart3PutChar(0x01);
 3514              		.loc 2 773 2
 3515 001a 0120     		movs	r0, #1
 3516 001c 1B4B     		ldr	r3, .L202
 3517 001e 9847     		blx	r3
 3518              	.LVL100:
 774:common/lib.stm32/uart.c **** 	while (len--)
 3519              		.loc 2 774 8
 3520 0020 11E0     		b	.L197
 3521              	.L199:
 775:common/lib.stm32/uart.c **** 	{
 776:common/lib.stm32/uart.c **** 		ch = *src;
 3522              		.loc 2 776 6
 3523 0022 7B68     		ldr	r3, [r7, #4]
 3524 0024 1B78     		ldrb	r3, [r3]
 3525 0026 BB73     		strb	r3, [r7, #14]
 777:common/lib.stm32/uart.c **** 		rezult = uart3PutChar(ch);
 3526              		.loc 2 777 12
 3527 0028 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3528 002a 1846     		mov	r0, r3
 3529 002c 174B     		ldr	r3, .L202
 3530 002e 9847     		blx	r3
 3531              	.LVL101:
 3532 0030 B860     		str	r0, [r7, #8]
 778:common/lib.stm32/uart.c **** 		if (ch == 0x55)
 3533              		.loc 2 778 6
 3534 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3535 0034 552B     		cmp	r3, #85
 3536 0036 03D1     		bne	.L198
 779:common/lib.stm32/uart.c **** 		{
 780:common/lib.stm32/uart.c **** 			rezult = uart3PutChar(0x02);
 3537              		.loc 2 780 13
 3538 0038 0220     		movs	r0, #2
 3539 003a 144B     		ldr	r3, .L202
 3540 003c 9847     		blx	r3
 3541              	.LVL102:
 3542 003e B860     		str	r0, [r7, #8]
 3543              	.L198:
 781:common/lib.stm32/uart.c **** 		}
 782:common/lib.stm32/uart.c **** 		src++;
 3544              		.loc 2 782 6
 3545 0040 7B68     		ldr	r3, [r7, #4]
 3546 0042 0133     		adds	r3, r3, #1
 3547 0044 7B60     		str	r3, [r7, #4]
 3548              	.L197:
 774:common/lib.stm32/uart.c **** 	{
 3549              		.loc 2 774 12
 3550 0046 3B68     		ldr	r3, [r7]
 3551 0048 5A1E     		subs	r2, r3, #1
 3552 004a 3A60     		str	r2, [r7]
 774:common/lib.stm32/uart.c **** 	{
 3553              		.loc 2 774 8
 3554 004c 002B     		cmp	r3, #0
 3555 004e E8D1     		bne	.L199
 783:common/lib.stm32/uart.c **** 	}
 784:common/lib.stm32/uart.c **** 	ch = crc;
 3556              		.loc 2 784 5
 3557 0050 FB7B     		ldrb	r3, [r7, #15]
 3558 0052 BB73     		strb	r3, [r7, #14]
 785:common/lib.stm32/uart.c **** 	rezult = uart3PutChar(ch);
 3559              		.loc 2 785 11
 3560 0054 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3561 0056 1846     		mov	r0, r3
 3562 0058 0C4B     		ldr	r3, .L202
 3563 005a 9847     		blx	r3
 3564              	.LVL103:
 3565 005c B860     		str	r0, [r7, #8]
 786:common/lib.stm32/uart.c **** 	if (ch == 0x55)
 3566              		.loc 2 786 5
 3567 005e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3568 0060 552B     		cmp	r3, #85
 3569 0062 03D1     		bne	.L200
 787:common/lib.stm32/uart.c **** 	{
 788:common/lib.stm32/uart.c **** 		rezult = uart3PutChar(0x02);
 3570              		.loc 2 788 12
 3571 0064 0220     		movs	r0, #2
 3572 0066 094B     		ldr	r3, .L202
 3573 0068 9847     		blx	r3
 3574              	.LVL104:
 3575 006a B860     		str	r0, [r7, #8]
 3576              	.L200:
 789:common/lib.stm32/uart.c **** 	}
 790:common/lib.stm32/uart.c **** 
 791:common/lib.stm32/uart.c **** 	rezult = uart3PutChar(0x55);
 3577              		.loc 2 791 11
 3578 006c 5520     		movs	r0, #85
 3579 006e 074B     		ldr	r3, .L202
 3580 0070 9847     		blx	r3
 3581              	.LVL105:
 3582 0072 B860     		str	r0, [r7, #8]
 792:common/lib.stm32/uart.c **** 	rezult = uart3PutChar(0x03);
 3583              		.loc 2 792 11
 3584 0074 0320     		movs	r0, #3
 3585 0076 054B     		ldr	r3, .L202
 3586 0078 9847     		blx	r3
 3587              	.LVL106:
 3588 007a B860     		str	r0, [r7, #8]
 793:common/lib.stm32/uart.c **** 	uart3TxTask();
 3589              		.loc 2 793 2
 3590 007c 044B     		ldr	r3, .L202+4
 3591 007e 9847     		blx	r3
 3592              	.LVL107:
 3593 0080 00E0     		b	.L194
 3594              	.L201:
 771:common/lib.stm32/uart.c **** 	uart3PutChar(0x55);
 3595              		.loc 2 771 3
 3596 0082 00BF     		nop
 3597              	.L194:
 794:common/lib.stm32/uart.c **** }
 3598              		.loc 2 794 1
 3599 0084 1037     		adds	r7, r7, #16
 3600              	.LCFI176:
 3601              		.cfi_def_cfa_offset 8
 3602 0086 BD46     		mov	sp, r7
 3603              	.LCFI177:
 3604              		.cfi_def_cfa_register 13
 3605              		@ sp needed
 3606 0088 80BD     		pop	{r7, pc}
 3607              	.L203:
 3608 008a 00BF     		.align	2
 3609              	.L202:
 3610 008c 00000000 		.word	uart3PutChar
 3611 0090 00000000 		.word	uart3TxTask
 3612              		.cfi_endproc
 3613              	.LFE60:
 3615              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 3616              		.align	1
 3617              		.global	DMA1_Channel2_IRQHandler
 3618              		.syntax unified
 3619              		.thumb
 3620              		.thumb_func
 3622              	DMA1_Channel2_IRQHandler:
 3623              	.LFB61:
 795:common/lib.stm32/uart.c **** 
 796:common/lib.stm32/uart.c **** //UART 3 DMA INTERRUPT
 797:common/lib.stm32/uart.c **** void DMA1_Channel2_IRQHandler(void)
 798:common/lib.stm32/uart.c **** {
 3624              		.loc 2 798 1
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 0
 3627              		@ frame_needed = 1, uses_anonymous_args = 0
 3628 0000 80B5     		push	{r7, lr}
 3629              	.LCFI178:
 3630              		.cfi_def_cfa_offset 8
 3631              		.cfi_offset 7, -8
 3632              		.cfi_offset 14, -4
 3633 0002 00AF     		add	r7, sp, #0
 3634              	.LCFI179:
 3635              		.cfi_def_cfa_register 7
 799:common/lib.stm32/uart.c **** 
 800:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel2 transfer*/
 801:common/lib.stm32/uart.c **** 	DMA_Cmd(USART3_TX_DMA, DISABLE);
 3636              		.loc 2 801 2
 3637 0004 0021     		movs	r1, #0
 3638 0006 0648     		ldr	r0, .L205
 3639 0008 064B     		ldr	r3, .L205+4
 3640 000a 9847     		blx	r3
 3641              	.LVL108:
 802:common/lib.stm32/uart.c **** 
 803:common/lib.stm32/uart.c **** 	DMA_ClearITPendingBit(DMA1_FLAG_TC2);
 3642              		.loc 2 803 2
 3643 000c 2020     		movs	r0, #32
 3644 000e 064B     		ldr	r3, .L205+8
 3645 0010 9847     		blx	r3
 3646              	.LVL109:
 804:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA1_FLAG_TC2);
 3647              		.loc 2 804 2
 3648 0012 2020     		movs	r0, #32
 3649 0014 054B     		ldr	r3, .L205+12
 3650 0016 9847     		blx	r3
 3651              	.LVL110:
 805:common/lib.stm32/uart.c **** 
 806:common/lib.stm32/uart.c ****     uart3TxTask();
 3652              		.loc 2 806 5
 3653 0018 054B     		ldr	r3, .L205+16
 3654 001a 9847     		blx	r3
 3655              	.LVL111:
 807:common/lib.stm32/uart.c **** 
 808:common/lib.stm32/uart.c **** }
 3656              		.loc 2 808 1
 3657 001c 00BF     		nop
 3658 001e 80BD     		pop	{r7, pc}
 3659              	.L206:
 3660              		.align	2
 3661              	.L205:
 3662 0020 1C000240 		.word	1073872924
 3663 0024 00000000 		.word	DMA_Cmd
 3664 0028 00000000 		.word	DMA_ClearITPendingBit
 3665 002c 00000000 		.word	DMA_ClearFlag
 3666 0030 00000000 		.word	uart3TxTask
 3667              		.cfi_endproc
 3668              	.LFE61:
 3670              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 3671              		.align	1
 3672              		.global	DMA1_Channel3_IRQHandler
 3673              		.syntax unified
 3674              		.thumb
 3675              		.thumb_func
 3677              	DMA1_Channel3_IRQHandler:
 3678              	.LFB62:
 809:common/lib.stm32/uart.c **** 
 810:common/lib.stm32/uart.c **** void DMA1_Channel3_IRQHandler(void)
 811:common/lib.stm32/uart.c **** {
 3679              		.loc 2 811 1
 3680              		.cfi_startproc
 3681              		@ args = 0, pretend = 0, frame = 8
 3682              		@ frame_needed = 1, uses_anonymous_args = 0
 3683 0000 80B5     		push	{r7, lr}
 3684              	.LCFI180:
 3685              		.cfi_def_cfa_offset 8
 3686              		.cfi_offset 7, -8
 3687              		.cfi_offset 14, -4
 3688 0002 82B0     		sub	sp, sp, #8
 3689              	.LCFI181:
 3690              		.cfi_def_cfa_offset 16
 3691 0004 00AF     		add	r7, sp, #0
 3692              	.LCFI182:
 3693              		.cfi_def_cfa_register 7
 812:common/lib.stm32/uart.c **** 	/* Disable DMA1_Channel2 transfer*/
 813:common/lib.stm32/uart.c **** 	//DMA_Cmd(USART3_TX_DMA, DISABLE);
 814:common/lib.stm32/uart.c **** 	/*  Clear DMA1_Channel2 Transfer Complete Flag*/
 815:common/lib.stm32/uart.c **** 	DMA_ClearFlag(DMA1_FLAG_TC3);
 3694              		.loc 2 815 2
 3695 0006 4FF40070 		mov	r0, #512
 3696 000a 074B     		ldr	r3, .L208
 3697 000c 9847     		blx	r3
 3698              	.LVL112:
 816:common/lib.stm32/uart.c **** 
 817:common/lib.stm32/uart.c **** 	u3Fifo.rxCurrent+=0;
 3699              		.loc 2 817 18
 3700 000e 074B     		ldr	r3, .L208+4
 3701 0010 1B68     		ldr	r3, [r3]
 3702 0012 064A     		ldr	r2, .L208+4
 3703 0014 1360     		str	r3, [r2]
 818:common/lib.stm32/uart.c **** 	int tempTest3 = DMA_GetCurrDataCounter(USART3_RX_DMA);
 3704              		.loc 2 818 18
 3705 0016 0648     		ldr	r0, .L208+8
 3706 0018 064B     		ldr	r3, .L208+12
 3707 001a 9847     		blx	r3
 3708              	.LVL113:
 3709 001c 0346     		mov	r3, r0
 3710              		.loc 2 818 6
 3711 001e 7B60     		str	r3, [r7, #4]
 819:common/lib.stm32/uart.c **** 			tempTest3 +=0;
 820:common/lib.stm32/uart.c **** 
 821:common/lib.stm32/uart.c **** 
 822:common/lib.stm32/uart.c **** 	//DMARxDataReceived();
 823:common/lib.stm32/uart.c **** 	//uart3TxTask();
 824:common/lib.stm32/uart.c **** }
 3712              		.loc 2 824 1
 3713 0020 00BF     		nop
 3714 0022 0837     		adds	r7, r7, #8
 3715              	.LCFI183:
 3716              		.cfi_def_cfa_offset 8
 3717 0024 BD46     		mov	sp, r7
 3718              	.LCFI184:
 3719              		.cfi_def_cfa_register 13
 3720              		@ sp needed
 3721 0026 80BD     		pop	{r7, pc}
 3722              	.L209:
 3723              		.align	2
 3724              	.L208:
 3725 0028 00000000 		.word	DMA_ClearFlag
 3726 002c 00000000 		.word	u3Fifo
 3727 0030 30000240 		.word	1073872944
 3728 0034 00000000 		.word	DMA_GetCurrDataCounter
 3729              		.cfi_endproc
 3730              	.LFE62:
 3732              		.text
 3733              	.Letext0:
 3734              		.file 3 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 3735              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 3736              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 3737              		.file 6 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
 3738              		.file 7 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 3739              		.file 8 "common/lib.stm32/uart.h"
 3740              		.file 9 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
 3741              		.file 10 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:74     .text.NVIC_EnableIRQ:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:79     .text.NVIC_SetPriority:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:84     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:158    .text.NVIC_SetPriority:0000004c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:168    .bss.dmaRxCounter:00000000 dmaRxCounter
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:165    .bss.dmaRxCounter:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:171    .text.DMARxDataCounterSet:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:177    .text.DMARxDataCounterSet:00000000 DMARxDataCounterSet
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:217    .text.DMARxDataCounterSet:00000018 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:222    .text.DMARxDataCounterInc:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:228    .text.DMARxDataCounterInc:00000000 DMARxDataCounterInc
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:262    .text.DMARxDataCounterInc:00000018 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:267    .text.DMARxDataCounterGet:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:273    .text.DMARxDataCounterGet:00000000 DMARxDataCounterGet
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:304    .text.DMARxDataCounterGet:00000010 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:313    .bss.u1Fifo:00000000 u1Fifo
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:310    .bss.u1Fifo:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:320    .bss.u2Fifo:00000000 u2Fifo
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:317    .bss.u2Fifo:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:327    .bss.u3Fifo:00000000 u3Fifo
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:324    .bss.u3Fifo:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:330    .text.TestSend:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:336    .text.TestSend:00000000 TestSend
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:385    .text.TestSend:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:400    .text.uartTxDMAConfiguration:00000000 uartTxDMAConfiguration
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:394    .text.uartTxDMAConfiguration:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:494    .text.uartTxDMAConfiguration:00000068 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:501    .text.uartRxDMAConfiguration:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:507    .text.uartRxDMAConfiguration:00000000 uartRxDMAConfiguration
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:595    .text.uartRxDMAConfiguration:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:602    .text.uart1Init:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:608    .text.uart1Init:00000000 uart1Init
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:739    .text.uart1Init:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:756    .text.uart1GetChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:762    .text.uart1GetChar:00000000 uart1GetChar
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:838    .text.uart1GetChar:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:845    .text.uart1PutChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:851    .text.uart1PutChar:00000000 uart1PutChar
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:937    .text.uart1PutChar:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:942    .text.uart1TxTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:948    .text.uart1TxTask:00000000 uart1TxTask
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1072   .text.uart1TxTask:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1084   .text.uart1Read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1090   .text.uart1Read:00000000 uart1Read
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1172   .text.uart1Read:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1177   .text.uart1Write:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1183   .text.uart1Write:00000000 uart1Write
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1254   .text.uart1Write:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1260   .text.DMA1_Channel4_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1266   .text.DMA1_Channel4_IRQHandler:00000000 DMA1_Channel4_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1301   .text.DMA1_Channel4_IRQHandler:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1309   .text.DMA1_Channel5_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1315   .text.DMA1_Channel5_IRQHandler:00000000 DMA1_Channel5_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1363   .text.DMA1_Channel5_IRQHandler:00000028 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1371   .text.uart2Init:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1377   .text.uart2Init:00000000 uart2Init
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1496   .text.uart2Init:00000090 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1513   .text.uart2FindEscapedPack:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1519   .text.uart2FindEscapedPack:00000000 uart2FindEscapedPack
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1626   .text.uart2FindEscapedPack:0000007c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1634   .text.uart2GetChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1640   .text.uart2GetChar:00000000 uart2GetChar
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1716   .text.uart2GetChar:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1723   .text.uart2PutChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1729   .text.uart2PutChar:00000000 uart2PutChar
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1815   .text.uart2PutChar:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1820   .text.uart2TxTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1826   .text.uart2TxTask:00000000 uart2TxTask
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1950   .text.uart2TxTask:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1962   .text.uart2ReadEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:1968   .text.uart2ReadEscaped:00000000 uart2ReadEscaped
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2138   .text.uart2ReadEscaped:000000c4 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2144   .text.uart2Read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2150   .text.uart2Read:00000000 uart2Read
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2232   .text.uart2Read:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2237   .text.uart2WriteEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2243   .text.uart2WriteEscaped:00000000 uart2WriteEscaped
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2382   .text.uart2WriteEscaped:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2388   .text.uart2Write:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2394   .text.uart2Write:00000000 uart2Write
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2466   .text.uart2Write:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2472   .text.DMA1_Channel7_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2478   .text.DMA1_Channel7_IRQHandler:00000000 DMA1_Channel7_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2518   .text.DMA1_Channel7_IRQHandler:00000024 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2527   .text.DMA1_Channel6_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2533   .text.DMA1_Channel6_IRQHandler:00000000 DMA1_Channel6_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2581   .text.DMA1_Channel6_IRQHandler:00000028 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2589   .text.uart3Init:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2595   .text.uart3Init:00000000 uart3Init
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2732   .text.uart3Init:000000a8 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2752   .text.uart3GetChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2758   .text.uart3GetChar:00000000 uart3GetChar
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2842   .text.uart3GetChar:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2849   .text.uart3PutChar:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2855   .text.uart3PutChar:00000000 uart3PutChar
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2941   .text.uart3PutChar:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2946   .text.uart3TxTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:2952   .text.uart3TxTask:00000000 uart3TxTask
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3084   .text.uart3TxTask:000000a4 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3096   .text.uart3Read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3102   .text.uart3Read:00000000 uart3Read
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3184   .text.uart3Read:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3189   .text.uart3Write:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3195   .text.uart3Write:00000000 uart3Write
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3282   .text.uart3Write:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3291   .text.uart3FindEscapedPack:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3297   .text.uart3FindEscapedPack:00000000 uart3FindEscapedPack
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3404   .text.uart3FindEscapedPack:0000007c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3412   .text.uart3ReadEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3418   .text.uart3ReadEscaped:00000000 uart3ReadEscaped
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3472   .text.uart3ReadEscaped:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3477   .text.uart3WriteEscaped:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3483   .text.uart3WriteEscaped:00000000 uart3WriteEscaped
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3610   .text.uart3WriteEscaped:0000008c $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3616   .text.DMA1_Channel2_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3622   .text.DMA1_Channel2_IRQHandler:00000000 DMA1_Channel2_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3662   .text.DMA1_Channel2_IRQHandler:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3671   .text.DMA1_Channel3_IRQHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3677   .text.DMA1_Channel3_IRQHandler:00000000 DMA1_Channel3_IRQHandler
C:\Users\Admin\AppData\Local\Temp\ccwBJ36t.s:3725   .text.DMA1_Channel3_IRQHandler:00000028 $d

UNDEFINED SYMBOLS
DMA_Cmd
DMA_DeInit
DMA_Init
RCC_AHBPeriphClockCmd
USART_DeInit
RCC_APB2PeriphClockCmd
USART_Init
USART_ClearFlag
USART_DMACmd
USART_Cmd
DMA_GetCurrDataCounter
DMA_ITConfig
DMA_ClearFlag
RCC_APB1PeriphClockCmd
DMA_ClearITPendingBit
GPIO_PinRemapConfig
