   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"translator.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	bPowerOn
  18              		.section	.bss.bPowerOn,"aw",%nobits
  21              	bPowerOn:
  22 0000 00       		.space	1
  23              		.global	ChanelDirect
  24              		.section	.bss.ChanelDirect,"aw",%nobits
  25              		.align	2
  28              	ChanelDirect:
  29 0000 00000000 		.space	8
  29      00000000 
  30              		.global	ChanelRepare
  31              		.section	.bss.ChanelRepare,"aw",%nobits
  32              		.align	2
  35              	ChanelRepare:
  36 0000 00000000 		.space	8
  36      00000000 
  37              		.global	ChanelChangeDirect
  38              		.section	.bss.ChanelChangeDirect,"aw",%nobits
  39              		.align	2
  42              	ChanelChangeDirect:
  43 0000 00000000 		.space	8
  43      00000000 
  44              		.global	ChanelChangeRepare
  45              		.section	.bss.ChanelChangeRepare,"aw",%nobits
  46              		.align	2
  49              	ChanelChangeRepare:
  50 0000 00000000 		.space	8
  50      00000000 
  51              		.global	timer
  52              		.section	.bss.timer,"aw",%nobits
  53              		.align	2
  56              	timer:
  57 0000 00000000 		.space	16
  57      00000000 
  57      00000000 
  57      00000000 
  58              		.global	prevLogicFlags
  59              		.section	.bss.prevLogicFlags,"aw",%nobits
  62              	prevLogicFlags:
  63 0000 00       		.space	1
  64              		.global	testSwitchRele
  65              		.section	.bss.testSwitchRele,"aw",%nobits
  66              		.align	2
  69              	testSwitchRele:
  70 0000 00000000 		.space	4
  71              		.global	prevErrDiscretLogic
  72              		.section	.bss.prevErrDiscretLogic,"aw",%nobits
  73              		.align	2
  76              	prevErrDiscretLogic:
  77 0000 00000000 		.space	8
  77      00000000 
  78              		.global	CountReset
  79              		.section	.bss.CountReset,"aw",%nobits
  80              		.align	1
  83              	CountReset:
  84 0000 0000     		.space	2
  85              		.global	manualwork
  86              		.section	.bss.manualwork,"aw",%nobits
  87              		.align	2
  90              	manualwork:
  91 0000 00000000 		.space	4
  92              		.section	.rodata
  93              		.align	2
  94              	.LC0:
  95 0000 D1E1F0EE 		.ascii	"\321\341\360\356\361 \363\361\362\360\356\351\361\362"
  95      F120F3F1 
  95      F2F0EEE9 
  95      F1F2
  96 000e E2E000   		.ascii	"\342\340\000"
  97              		.section	.text.Reset,"ax",%progbits
  98              		.align	1
  99              		.global	Reset
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 104              	Reset:
 105              	.LFB27:
 106              		.file 1 "src/translator.c"
   1:src/translator.c **** /*
   2:src/translator.c ****  * translator.c Контроллер
   3:src/translator.c ****  *
   4:src/translator.c ****  *  Created on: May 26, 2010
   5:src/translator.c ****  *      Author: albert
   6:src/translator.c ****  */
   7:src/translator.c **** // It file for Main translator func
   8:src/translator.c **** #include "typedef.h"
   9:src/translator.c **** #include "usermemory.h"
  10:src/translator.c **** #include "translator.h"
  11:src/translator.c **** #include "rtclock.h"
  12:src/translator.c **** #include "journal.h"
  13:src/translator.c **** #include "crc.h"
  14:src/translator.c **** #include "modem.h"
  15:src/translator.c **** #include "led.h"
  16:src/translator.c **** #include "board.h"
  17:src/translator.c **** 
  18:src/translator.c **** #define GPRS_IDLE_TIMEOUT_MS      ( 60*4*1000) // 4 min idle and restart
  19:src/translator.c **** 
  20:src/translator.c **** extern uint16 T1;
  21:src/translator.c **** bool bPowerOn = false;
  22:src/translator.c **** bool ChanelDirect[8], ChanelRepare[8], ChanelChangeDirect[8],
  23:src/translator.c **** 		ChanelChangeRepare[8];
  24:src/translator.c **** volatile DATATIME timer;
  25:src/translator.c **** uint8 prevLogicFlags = 0;
  26:src/translator.c **** uint32 testSwitchRele = 0;
  27:src/translator.c **** uint16 prevErrDiscretLogic[4] = { 0, 0, 0, 0 };
  28:src/translator.c **** uint16 CountReset = 0;
  29:src/translator.c **** int manualwork;
  30:src/translator.c **** 
  31:src/translator.c **** 
  32:src/translator.c **** void Reset() {
 107              		.loc 1 32 14
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 80B5     		push	{r7, lr}
 112              	.LCFI0:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 7, -8
 115              		.cfi_offset 14, -4
 116 0002 82B0     		sub	sp, sp, #8
 117              	.LCFI1:
 118              		.cfi_def_cfa_offset 16
 119 0004 00AF     		add	r7, sp, #0
 120              	.LCFI2:
 121              		.cfi_def_cfa_register 7
 122              	.LBB2:
  33:src/translator.c **** 	for (int i = 0; i < DEVICE_RAMMEM_WORDS; i++) {
 123              		.loc 1 33 11
 124 0006 0023     		movs	r3, #0
 125 0008 7B60     		str	r3, [r7, #4]
 126              		.loc 1 33 2
 127 000a 0BE0     		b	.L2
 128              	.L3:
  34:src/translator.c **** 		RAM.dwords[i] = 0;
 129              		.loc 1 34 17 discriminator 3
 130 000c 124A     		ldr	r2, .L6
 131 000e 7B68     		ldr	r3, [r7, #4]
 132 0010 0021     		movs	r1, #0
 133 0012 02F81310 		strb	r1, [r2, r3, lsl #1]
 134 0016 5B00     		lsls	r3, r3, #1
 135 0018 1344     		add	r3, r3, r2
 136 001a 0022     		movs	r2, #0
 137 001c 5A70     		strb	r2, [r3, #1]
  33:src/translator.c **** 	for (int i = 0; i < DEVICE_RAMMEM_WORDS; i++) {
 138              		.loc 1 33 44 discriminator 3
 139 001e 7B68     		ldr	r3, [r7, #4]
 140 0020 0133     		adds	r3, r3, #1
 141 0022 7B60     		str	r3, [r7, #4]
 142              	.L2:
  33:src/translator.c **** 	for (int i = 0; i < DEVICE_RAMMEM_WORDS; i++) {
 143              		.loc 1 33 2 discriminator 1
 144 0024 7B68     		ldr	r3, [r7, #4]
 145 0026 B3F5806F 		cmp	r3, #1024
 146 002a EFDB     		blt	.L3
 147              	.LBE2:
  35:src/translator.c **** 
  36:src/translator.c **** 	}
  37:src/translator.c **** 	JrnlWrite("Сброс устройства");
 148              		.loc 1 37 2
 149 002c 0B48     		ldr	r0, .L6+4
 150 002e 0C4B     		ldr	r3, .L6+8
 151 0030 9847     		blx	r3
 152              	.LVL0:
  38:src/translator.c **** 
  39:src/translator.c **** 	GprsIdleMSec = GPRS_IDLE_TIMEOUT_MS+1;
 153              		.loc 1 39 15
 154 0032 0C4B     		ldr	r3, .L6+12
 155 0034 0C4A     		ldr	r2, .L6+16
 156 0036 1A60     		str	r2, [r3]
  40:src/translator.c **** 	LedNoModem = 0;
 157              		.loc 1 40 13
 158 0038 0C4B     		ldr	r3, .L6+20
 159 003a 0022     		movs	r2, #0
 160 003c 1A70     		strb	r2, [r3]
  41:src/translator.c **** 	if (!LedSIM)
 161              		.loc 1 41 6
 162 003e 0C4B     		ldr	r3, .L6+24
 163 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 164 0042 83F00103 		eor	r3, r3, #1
 165 0046 DBB2     		uxtb	r3, r3
 166              		.loc 1 41 5
 167 0048 002B     		cmp	r3, #0
 168 004a 01D0     		beq	.L5
  42:src/translator.c **** 	{
  43:src/translator.c **** 		CSQ();
 169              		.loc 1 43 3
 170 004c 094B     		ldr	r3, .L6+28
 171 004e 9847     		blx	r3
 172              	.LVL1:
 173              	.L5:
  44:src/translator.c **** 	}
  45:src/translator.c **** }
 174              		.loc 1 45 1
 175 0050 00BF     		nop
 176 0052 0837     		adds	r7, r7, #8
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 8
 179 0054 BD46     		mov	sp, r7
 180              	.LCFI4:
 181              		.cfi_def_cfa_register 13
 182              		@ sp needed
 183 0056 80BD     		pop	{r7, pc}
 184              	.L7:
 185              		.align	2
 186              	.L6:
 187 0058 00000000 		.word	RAM
 188 005c 00000000 		.word	.LC0
 189 0060 00000000 		.word	JrnlWrite
 190 0064 00000000 		.word	GprsIdleMSec
 191 0068 81A90300 		.word	240001
 192 006c 00000000 		.word	LedNoModem
 193 0070 00000000 		.word	LedSIM
 194 0074 00000000 		.word	CSQ
 195              		.cfi_endproc
 196              	.LFE27:
 198              		.section	.text.GetChannelBitSignal,"ax",%progbits
 199              		.align	1
 200              		.global	GetChannelBitSignal
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 205              	GetChannelBitSignal:
 206              	.LFB28:
  46:src/translator.c **** 
  47:src/translator.c **** int GetChannelBitSignal(int channelNum, uint16* ChannelData) {
 207              		.loc 1 47 62
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 8
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212 0000 80B4     		push	{r7}
 213              	.LCFI5:
 214              		.cfi_def_cfa_offset 4
 215              		.cfi_offset 7, -4
 216 0002 83B0     		sub	sp, sp, #12
 217              	.LCFI6:
 218              		.cfi_def_cfa_offset 16
 219 0004 00AF     		add	r7, sp, #0
 220              	.LCFI7:
 221              		.cfi_def_cfa_register 7
 222 0006 7860     		str	r0, [r7, #4]
 223 0008 3960     		str	r1, [r7]
  48:src/translator.c **** 
  49:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)] & (1 << ((4 * channelNum) % 16))) {
 224              		.loc 1 49 18
 225 000a 7B68     		ldr	r3, [r7, #4]
 226 000c 002B     		cmp	r3, #0
 227 000e 00DA     		bge	.L9
 228 0010 0333     		adds	r3, r3, #3
 229              	.L9:
 230 0012 9B10     		asrs	r3, r3, #2
 231              		.loc 1 49 17
 232 0014 5B00     		lsls	r3, r3, #1
 233 0016 3A68     		ldr	r2, [r7]
 234 0018 1344     		add	r3, r3, r2
 235 001a 1B88     		ldrh	r3, [r3]
 236 001c 1946     		mov	r1, r3
 237              		.loc 1 49 54
 238 001e 7B68     		ldr	r3, [r7, #4]
 239 0020 9B00     		lsls	r3, r3, #2
 240              		.loc 1 49 68
 241 0022 5A42     		rsbs	r2, r3, #0
 242 0024 03F00F03 		and	r3, r3, #15
 243 0028 02F00F02 		and	r2, r2, #15
 244 002c 58BF     		it	pl
 245 002e 5342     		rsbpl	r3, r2, #0
 246              		.loc 1 49 6
 247 0030 41FA03F3 		asr	r3, r1, r3
 248 0034 03F00103 		and	r3, r3, #1
 249              		.loc 1 49 5
 250 0038 002B     		cmp	r3, #0
 251 003a 01D0     		beq	.L10
  50:src/translator.c **** 		return 1;
 252              		.loc 1 50 10
 253 003c 0123     		movs	r3, #1
 254 003e 00E0     		b	.L11
 255              	.L10:
  51:src/translator.c **** 	} else {
  52:src/translator.c **** 		return 0;
 256              		.loc 1 52 10
 257 0040 0023     		movs	r3, #0
 258              	.L11:
  53:src/translator.c **** 	}
  54:src/translator.c **** }
 259              		.loc 1 54 1
 260 0042 1846     		mov	r0, r3
 261 0044 0C37     		adds	r7, r7, #12
 262              	.LCFI8:
 263              		.cfi_def_cfa_offset 4
 264 0046 BD46     		mov	sp, r7
 265              	.LCFI9:
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 0048 80BC     		pop	{r7}
 269              	.LCFI10:
 270              		.cfi_restore 7
 271              		.cfi_def_cfa_offset 0
 272 004a 7047     		bx	lr
 273              		.cfi_endproc
 274              	.LFE28:
 276              		.section	.text.GetChannelBitRepare,"ax",%progbits
 277              		.align	1
 278              		.global	GetChannelBitRepare
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 283              	GetChannelBitRepare:
 284              	.LFB29:
  55:src/translator.c **** 
  56:src/translator.c **** int GetChannelBitRepare(int channelNum, uint16* ChannelData) {
 285              		.loc 1 56 62
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 8
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290 0000 80B4     		push	{r7}
 291              	.LCFI11:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 7, -4
 294 0002 83B0     		sub	sp, sp, #12
 295              	.LCFI12:
 296              		.cfi_def_cfa_offset 16
 297 0004 00AF     		add	r7, sp, #0
 298              	.LCFI13:
 299              		.cfi_def_cfa_register 7
 300 0006 7860     		str	r0, [r7, #4]
 301 0008 3960     		str	r1, [r7]
  57:src/translator.c **** 	int temp;
  58:src/translator.c **** #ifdef LIDACONF
  59:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
  60:src/translator.c **** 			& (1 << ((4* channelNum ) % 16 + 1)))
  61:src/translator.c **** 	{
  62:src/translator.c **** 		return 1;
  63:src/translator.c **** 	}
  64:src/translator.c **** 	else
  65:src/translator.c **** 	{
  66:src/translator.c **** 		return 0;
  67:src/translator.c **** 	}
  68:src/translator.c **** #else
  69:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
 302              		.loc 1 69 18
 303 000a 7B68     		ldr	r3, [r7, #4]
 304 000c 002B     		cmp	r3, #0
 305 000e 00DA     		bge	.L13
 306 0010 0333     		adds	r3, r3, #3
 307              	.L13:
 308 0012 9B10     		asrs	r3, r3, #2
 309              		.loc 1 69 17
 310 0014 5B00     		lsls	r3, r3, #1
 311 0016 3A68     		ldr	r2, [r7]
 312 0018 1344     		add	r3, r3, r2
 313 001a 1B88     		ldrh	r3, [r3]
 314 001c 1946     		mov	r1, r3
  70:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 3))) {
 315              		.loc 1 70 16
 316 001e 7B68     		ldr	r3, [r7, #4]
 317 0020 9B00     		lsls	r3, r3, #2
 318              		.loc 1 70 30
 319 0022 5A42     		rsbs	r2, r3, #0
 320 0024 03F00F03 		and	r3, r3, #15
 321 0028 02F00F02 		and	r2, r2, #15
 322 002c 58BF     		it	pl
 323 002e 5342     		rsbpl	r3, r2, #0
 324              		.loc 1 70 35
 325 0030 0333     		adds	r3, r3, #3
  69:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 3))) {
 326              		.loc 1 69 6
 327 0032 41FA03F3 		asr	r3, r1, r3
 328 0036 03F00103 		and	r3, r3, #1
  69:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 3))) {
 329              		.loc 1 69 5
 330 003a 002B     		cmp	r3, #0
 331 003c 01D0     		beq	.L14
  71:src/translator.c **** 		return 1;
 332              		.loc 1 71 10
 333 003e 0123     		movs	r3, #1
 334 0040 00E0     		b	.L15
 335              	.L14:
  72:src/translator.c **** 	} else {
  73:src/translator.c **** 		return 0;
 336              		.loc 1 73 10
 337 0042 0023     		movs	r3, #0
 338              	.L15:
  74:src/translator.c **** 	}
  75:src/translator.c **** #endif
  76:src/translator.c **** }
 339              		.loc 1 76 1
 340 0044 1846     		mov	r0, r3
 341 0046 0C37     		adds	r7, r7, #12
 342              	.LCFI14:
 343              		.cfi_def_cfa_offset 4
 344 0048 BD46     		mov	sp, r7
 345              	.LCFI15:
 346              		.cfi_def_cfa_register 13
 347              		@ sp needed
 348 004a 80BC     		pop	{r7}
 349              	.LCFI16:
 350              		.cfi_restore 7
 351              		.cfi_def_cfa_offset 0
 352 004c 7047     		bx	lr
 353              		.cfi_endproc
 354              	.LFE29:
 356              		.section	.text.GetChannelBitDirect,"ax",%progbits
 357              		.align	1
 358              		.global	GetChannelBitDirect
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	GetChannelBitDirect:
 364              	.LFB30:
  77:src/translator.c **** 
  78:src/translator.c **** int GetChannelBitDirect(int channelNum, uint16* ChannelData) {
 365              		.loc 1 78 62
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 8
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 370 0000 80B4     		push	{r7}
 371              	.LCFI17:
 372              		.cfi_def_cfa_offset 4
 373              		.cfi_offset 7, -4
 374 0002 83B0     		sub	sp, sp, #12
 375              	.LCFI18:
 376              		.cfi_def_cfa_offset 16
 377 0004 00AF     		add	r7, sp, #0
 378              	.LCFI19:
 379              		.cfi_def_cfa_register 7
 380 0006 7860     		str	r0, [r7, #4]
 381 0008 3960     		str	r1, [r7]
  79:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
 382              		.loc 1 79 18
 383 000a 7B68     		ldr	r3, [r7, #4]
 384 000c 002B     		cmp	r3, #0
 385 000e 00DA     		bge	.L17
 386 0010 0333     		adds	r3, r3, #3
 387              	.L17:
 388 0012 9B10     		asrs	r3, r3, #2
 389              		.loc 1 79 17
 390 0014 5B00     		lsls	r3, r3, #1
 391 0016 3A68     		ldr	r2, [r7]
 392 0018 1344     		add	r3, r3, r2
 393 001a 1B88     		ldrh	r3, [r3]
 394 001c 1946     		mov	r1, r3
  80:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 2))) {
 395              		.loc 1 80 16
 396 001e 7B68     		ldr	r3, [r7, #4]
 397 0020 9B00     		lsls	r3, r3, #2
 398              		.loc 1 80 30
 399 0022 5A42     		rsbs	r2, r3, #0
 400 0024 03F00F03 		and	r3, r3, #15
 401 0028 02F00F02 		and	r2, r2, #15
 402 002c 58BF     		it	pl
 403 002e 5342     		rsbpl	r3, r2, #0
 404              		.loc 1 80 35
 405 0030 0233     		adds	r3, r3, #2
  79:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
 406              		.loc 1 79 6
 407 0032 41FA03F3 		asr	r3, r1, r3
 408 0036 03F00103 		and	r3, r3, #1
  79:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
 409              		.loc 1 79 5
 410 003a 002B     		cmp	r3, #0
 411 003c 01D0     		beq	.L18
  81:src/translator.c **** 		return 1;
 412              		.loc 1 81 10
 413 003e 0123     		movs	r3, #1
 414 0040 00E0     		b	.L19
 415              	.L18:
  82:src/translator.c **** 	} else {
  83:src/translator.c **** 		return 0;
 416              		.loc 1 83 10
 417 0042 0023     		movs	r3, #0
 418              	.L19:
  84:src/translator.c **** 	}
  85:src/translator.c **** }
 419              		.loc 1 85 1
 420 0044 1846     		mov	r0, r3
 421 0046 0C37     		adds	r7, r7, #12
 422              	.LCFI20:
 423              		.cfi_def_cfa_offset 4
 424 0048 BD46     		mov	sp, r7
 425              	.LCFI21:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 004a 80BC     		pop	{r7}
 429              	.LCFI22:
 430              		.cfi_restore 7
 431              		.cfi_def_cfa_offset 0
 432 004c 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE30:
 436              		.section	.text.GetChannelBitReserv,"ax",%progbits
 437              		.align	1
 438              		.global	GetChannelBitReserv
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 443              	GetChannelBitReserv:
 444              	.LFB31:
  86:src/translator.c **** 
  87:src/translator.c **** int GetChannelBitReserv(int channelNum, uint16* ChannelData) {
 445              		.loc 1 87 62
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 80B4     		push	{r7}
 451              	.LCFI23:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 7, -4
 454 0002 83B0     		sub	sp, sp, #12
 455              	.LCFI24:
 456              		.cfi_def_cfa_offset 16
 457 0004 00AF     		add	r7, sp, #0
 458              	.LCFI25:
 459              		.cfi_def_cfa_register 7
 460 0006 7860     		str	r0, [r7, #4]
 461 0008 3960     		str	r1, [r7]
  88:src/translator.c **** #ifdef LIDACONF
  89:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
  90:src/translator.c **** 			& (1 << ((4* channelNum ) % 16 + 3)))
  91:src/translator.c **** 	{
  92:src/translator.c **** 		return 1;
  93:src/translator.c **** 	}
  94:src/translator.c **** 	else
  95:src/translator.c **** 	{
  96:src/translator.c **** 		return 0;
  97:src/translator.c **** 	}
  98:src/translator.c **** #else
  99:src/translator.c **** 	if (ChannelData[(int) (channelNum / 4)]
 462              		.loc 1 99 18
 463 000a 7B68     		ldr	r3, [r7, #4]
 464 000c 002B     		cmp	r3, #0
 465 000e 00DA     		bge	.L21
 466 0010 0333     		adds	r3, r3, #3
 467              	.L21:
 468 0012 9B10     		asrs	r3, r3, #2
 469              		.loc 1 99 17
 470 0014 5B00     		lsls	r3, r3, #1
 471 0016 3A68     		ldr	r2, [r7]
 472 0018 1344     		add	r3, r3, r2
 473 001a 1B88     		ldrh	r3, [r3]
 474 001c 1946     		mov	r1, r3
 100:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 1)))
 475              		.loc 1 100 16
 476 001e 7B68     		ldr	r3, [r7, #4]
 477 0020 9B00     		lsls	r3, r3, #2
 478              		.loc 1 100 30
 479 0022 5A42     		rsbs	r2, r3, #0
 480 0024 03F00F03 		and	r3, r3, #15
 481 0028 02F00F02 		and	r2, r2, #15
 482 002c 58BF     		it	pl
 483 002e 5342     		rsbpl	r3, r2, #0
 484              		.loc 1 100 35
 485 0030 0133     		adds	r3, r3, #1
  99:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 1)))
 486              		.loc 1 99 6
 487 0032 41FA03F3 		asr	r3, r1, r3
 488 0036 03F00103 		and	r3, r3, #1
  99:src/translator.c **** 			& (1 << ((4 * channelNum) % 16 + 1)))
 489              		.loc 1 99 5
 490 003a 002B     		cmp	r3, #0
 491 003c 01D0     		beq	.L22
 101:src/translator.c **** 		return 1;
 492              		.loc 1 101 10
 493 003e 0123     		movs	r3, #1
 494 0040 00E0     		b	.L23
 495              	.L22:
 102:src/translator.c **** 	else
 103:src/translator.c **** 		return 0;
 496              		.loc 1 103 10
 497 0042 0023     		movs	r3, #0
 498              	.L23:
 104:src/translator.c **** #endif
 105:src/translator.c **** }
 499              		.loc 1 105 1
 500 0044 1846     		mov	r0, r3
 501 0046 0C37     		adds	r7, r7, #12
 502              	.LCFI26:
 503              		.cfi_def_cfa_offset 4
 504 0048 BD46     		mov	sp, r7
 505              	.LCFI27:
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 004a 80BC     		pop	{r7}
 509              	.LCFI28:
 510              		.cfi_restore 7
 511              		.cfi_def_cfa_offset 0
 512 004c 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE31:
 516              		.section	.text.SetChannelBitSignal,"ax",%progbits
 517              		.align	1
 518              		.global	SetChannelBitSignal
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 523              	SetChannelBitSignal:
 524              	.LFB32:
 106:src/translator.c **** 
 107:src/translator.c **** void SetChannelBitSignal(int channelNum, uint16* ChannelData, int bit) {
 525              		.loc 1 107 72
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 16
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530 0000 80B4     		push	{r7}
 531              	.LCFI29:
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 7, -4
 534 0002 85B0     		sub	sp, sp, #20
 535              	.LCFI30:
 536              		.cfi_def_cfa_offset 24
 537 0004 00AF     		add	r7, sp, #0
 538              	.LCFI31:
 539              		.cfi_def_cfa_register 7
 540 0006 F860     		str	r0, [r7, #12]
 541 0008 B960     		str	r1, [r7, #8]
 542 000a 7A60     		str	r2, [r7, #4]
 108:src/translator.c **** 	if (bit) {
 543              		.loc 1 108 5
 544 000c 7B68     		ldr	r3, [r7, #4]
 545 000e 002B     		cmp	r3, #0
 546 0010 23D0     		beq	.L25
 109:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 110:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 547              		.loc 1 110 17
 548 0012 FB68     		ldr	r3, [r7, #12]
 549 0014 002B     		cmp	r3, #0
 550 0016 00DA     		bge	.L26
 551 0018 0333     		adds	r3, r3, #3
 552              	.L26:
 553 001a 9B10     		asrs	r3, r3, #2
 554              		.loc 1 110 16
 555 001c 5B00     		lsls	r3, r3, #1
 556 001e BA68     		ldr	r2, [r7, #8]
 557 0020 1344     		add	r3, r3, r2
 558 0022 1B88     		ldrh	r3, [r3]
 559 0024 1AB2     		sxth	r2, r3
 111:src/translator.c **** 						| (1 << (4 * channelNum) % 16);
 560              		.loc 1 111 18
 561 0026 FB68     		ldr	r3, [r7, #12]
 562 0028 9B00     		lsls	r3, r3, #2
 563              		.loc 1 111 32
 564 002a 5942     		rsbs	r1, r3, #0
 565 002c 03F00F03 		and	r3, r3, #15
 566 0030 01F00F01 		and	r1, r1, #15
 567 0034 58BF     		it	pl
 568 0036 4B42     		rsbpl	r3, r1, #0
 569              		.loc 1 111 12
 570 0038 0121     		movs	r1, #1
 571 003a 01FA03F3 		lsl	r3, r1, r3
 572              		.loc 1 111 7
 573 003e 1BB2     		sxth	r3, r3
 574 0040 1343     		orrs	r3, r3, r2
 575 0042 19B2     		sxth	r1, r3
 109:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 576              		.loc 1 109 15
 577 0044 FB68     		ldr	r3, [r7, #12]
 578 0046 002B     		cmp	r3, #0
 579 0048 00DA     		bge	.L27
 580 004a 0333     		adds	r3, r3, #3
 581              	.L27:
 582 004c 9B10     		asrs	r3, r3, #2
 109:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 583              		.loc 1 109 14
 584 004e 5B00     		lsls	r3, r3, #1
 585 0050 BA68     		ldr	r2, [r7, #8]
 586 0052 1344     		add	r3, r3, r2
 587              		.loc 1 111 7
 588 0054 8AB2     		uxth	r2, r1
 109:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 589              		.loc 1 109 39
 590 0056 1A80     		strh	r2, [r3]	@ movhi
 112:src/translator.c **** 	} else {
 113:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 114:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 115:src/translator.c **** 						& (~(1 << (4 * channelNum) % 16));
 116:src/translator.c **** 	}
 117:src/translator.c **** }
 591              		.loc 1 117 1
 592 0058 24E0     		b	.L31
 593              	.L25:
 114:src/translator.c **** 						& (~(1 << (4 * channelNum) % 16));
 594              		.loc 1 114 17
 595 005a FB68     		ldr	r3, [r7, #12]
 596 005c 002B     		cmp	r3, #0
 597 005e 00DA     		bge	.L29
 598 0060 0333     		adds	r3, r3, #3
 599              	.L29:
 600 0062 9B10     		asrs	r3, r3, #2
 114:src/translator.c **** 						& (~(1 << (4 * channelNum) % 16));
 601              		.loc 1 114 16
 602 0064 5B00     		lsls	r3, r3, #1
 603 0066 BA68     		ldr	r2, [r7, #8]
 604 0068 1344     		add	r3, r3, r2
 605 006a 1B88     		ldrh	r3, [r3]
 606 006c 1AB2     		sxth	r2, r3
 115:src/translator.c **** 	}
 607              		.loc 1 115 20
 608 006e FB68     		ldr	r3, [r7, #12]
 609 0070 9B00     		lsls	r3, r3, #2
 115:src/translator.c **** 	}
 610              		.loc 1 115 34
 611 0072 5942     		rsbs	r1, r3, #0
 612 0074 03F00F03 		and	r3, r3, #15
 613 0078 01F00F01 		and	r1, r1, #15
 614 007c 58BF     		it	pl
 615 007e 4B42     		rsbpl	r3, r1, #0
 115:src/translator.c **** 	}
 616              		.loc 1 115 14
 617 0080 0121     		movs	r1, #1
 618 0082 01FA03F3 		lsl	r3, r1, r3
 115:src/translator.c **** 	}
 619              		.loc 1 115 7
 620 0086 1BB2     		sxth	r3, r3
 621 0088 DB43     		mvns	r3, r3
 622 008a 1BB2     		sxth	r3, r3
 623 008c 1340     		ands	r3, r3, r2
 624 008e 19B2     		sxth	r1, r3
 113:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 625              		.loc 1 113 15
 626 0090 FB68     		ldr	r3, [r7, #12]
 627 0092 002B     		cmp	r3, #0
 628 0094 00DA     		bge	.L30
 629 0096 0333     		adds	r3, r3, #3
 630              	.L30:
 631 0098 9B10     		asrs	r3, r3, #2
 113:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 632              		.loc 1 113 14
 633 009a 5B00     		lsls	r3, r3, #1
 634 009c BA68     		ldr	r2, [r7, #8]
 635 009e 1344     		add	r3, r3, r2
 115:src/translator.c **** 	}
 636              		.loc 1 115 7
 637 00a0 8AB2     		uxth	r2, r1
 113:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 638              		.loc 1 113 39
 639 00a2 1A80     		strh	r2, [r3]	@ movhi
 640              	.L31:
 641              		.loc 1 117 1
 642 00a4 00BF     		nop
 643 00a6 1437     		adds	r7, r7, #20
 644              	.LCFI32:
 645              		.cfi_def_cfa_offset 4
 646 00a8 BD46     		mov	sp, r7
 647              	.LCFI33:
 648              		.cfi_def_cfa_register 13
 649              		@ sp needed
 650 00aa 80BC     		pop	{r7}
 651              	.LCFI34:
 652              		.cfi_restore 7
 653              		.cfi_def_cfa_offset 0
 654 00ac 7047     		bx	lr
 655              		.cfi_endproc
 656              	.LFE32:
 658              		.global	block
 659              		.section	.bss.block,"aw",%nobits
 660              		.align	2
 663              	block:
 664 0000 00000000 		.space	32
 664      00000000 
 664      00000000 
 664      00000000 
 664      00000000 
 665              		.section	.text.SetChannelBitRepare,"ax",%progbits
 666              		.align	1
 667              		.global	SetChannelBitRepare
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 672              	SetChannelBitRepare:
 673              	.LFB33:
 118:src/translator.c **** int block[8];
 119:src/translator.c **** void SetChannelBitRepare(int channelNum, uint16* ChannelData, int bit) {
 674              		.loc 1 119 72
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 16
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679 0000 80B4     		push	{r7}
 680              	.LCFI35:
 681              		.cfi_def_cfa_offset 4
 682              		.cfi_offset 7, -4
 683 0002 85B0     		sub	sp, sp, #20
 684              	.LCFI36:
 685              		.cfi_def_cfa_offset 24
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI37:
 688              		.cfi_def_cfa_register 7
 689 0006 F860     		str	r0, [r7, #12]
 690 0008 B960     		str	r1, [r7, #8]
 691 000a 7A60     		str	r2, [r7, #4]
 120:src/translator.c **** #ifdef LIDACONF
 121:src/translator.c **** 	if (bit)
 122:src/translator.c **** 	{
 123:src/translator.c **** 		ChannelData[(int) (channelNum / 4)]
 124:src/translator.c **** 		= ChannelData[(int) (channelNum / 4)] | (1 << ((4* channelNum )
 125:src/translator.c **** 						% 16 + 1));
 126:src/translator.c **** 	}
 127:src/translator.c **** 	else
 128:src/translator.c **** 	{
 129:src/translator.c **** 		ChannelData[(int) (channelNum / 4)]
 130:src/translator.c **** 		= ChannelData[(int) (channelNum / 4)] & (~(1
 131:src/translator.c **** 						<< ((4* channelNum ) % 16 + 1)));
 132:src/translator.c **** 	}
 133:src/translator.c **** #else
 134:src/translator.c **** 	if (bit) {
 692              		.loc 1 134 5
 693 000c 7B68     		ldr	r3, [r7, #4]
 694 000e 002B     		cmp	r3, #0
 695 0010 29D0     		beq	.L33
 135:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 136:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 696              		.loc 1 136 17
 697 0012 FB68     		ldr	r3, [r7, #12]
 698 0014 002B     		cmp	r3, #0
 699 0016 00DA     		bge	.L34
 700 0018 0333     		adds	r3, r3, #3
 701              	.L34:
 702 001a 9B10     		asrs	r3, r3, #2
 703              		.loc 1 136 16
 704 001c 5B00     		lsls	r3, r3, #1
 705 001e BA68     		ldr	r2, [r7, #8]
 706 0020 1344     		add	r3, r3, r2
 707 0022 1B88     		ldrh	r3, [r3]
 708 0024 1AB2     		sxth	r2, r3
 137:src/translator.c **** 						| (1 << ((4 * channelNum) % 16 + 3));
 709              		.loc 1 137 19
 710 0026 FB68     		ldr	r3, [r7, #12]
 711 0028 9B00     		lsls	r3, r3, #2
 712              		.loc 1 137 33
 713 002a 5942     		rsbs	r1, r3, #0
 714 002c 03F00F03 		and	r3, r3, #15
 715 0030 01F00F01 		and	r1, r1, #15
 716 0034 58BF     		it	pl
 717 0036 4B42     		rsbpl	r3, r1, #0
 718              		.loc 1 137 38
 719 0038 0333     		adds	r3, r3, #3
 720              		.loc 1 137 12
 721 003a 0121     		movs	r1, #1
 722 003c 01FA03F3 		lsl	r3, r1, r3
 723              		.loc 1 137 7
 724 0040 1BB2     		sxth	r3, r3
 725 0042 1343     		orrs	r3, r3, r2
 726 0044 19B2     		sxth	r1, r3
 135:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 727              		.loc 1 135 15
 728 0046 FB68     		ldr	r3, [r7, #12]
 729 0048 002B     		cmp	r3, #0
 730 004a 00DA     		bge	.L35
 731 004c 0333     		adds	r3, r3, #3
 732              	.L35:
 733 004e 9B10     		asrs	r3, r3, #2
 135:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 734              		.loc 1 135 14
 735 0050 5B00     		lsls	r3, r3, #1
 736 0052 BA68     		ldr	r2, [r7, #8]
 737 0054 1344     		add	r3, r3, r2
 738              		.loc 1 137 7
 739 0056 8AB2     		uxth	r2, r1
 135:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 740              		.loc 1 135 39
 741 0058 1A80     		strh	r2, [r3]	@ movhi
 138:src/translator.c **** 		block[channelNum] = 1;
 742              		.loc 1 138 21
 743 005a 1B4A     		ldr	r2, .L40
 744 005c FB68     		ldr	r3, [r7, #12]
 745 005e 0121     		movs	r1, #1
 746 0060 42F82310 		str	r1, [r2, r3, lsl #2]
 139:src/translator.c **** 	} else {
 140:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 141:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 142:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 3)));
 143:src/translator.c **** 		block[channelNum] = 0;
 144:src/translator.c **** 	}
 145:src/translator.c **** #endif
 146:src/translator.c **** }
 747              		.loc 1 146 1
 748 0064 2AE0     		b	.L39
 749              	.L33:
 141:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 3)));
 750              		.loc 1 141 17
 751 0066 FB68     		ldr	r3, [r7, #12]
 752 0068 002B     		cmp	r3, #0
 753 006a 00DA     		bge	.L37
 754 006c 0333     		adds	r3, r3, #3
 755              	.L37:
 756 006e 9B10     		asrs	r3, r3, #2
 141:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 3)));
 757              		.loc 1 141 16
 758 0070 5B00     		lsls	r3, r3, #1
 759 0072 BA68     		ldr	r2, [r7, #8]
 760 0074 1344     		add	r3, r3, r2
 761 0076 1B88     		ldrh	r3, [r3]
 762 0078 1AB2     		sxth	r2, r3
 142:src/translator.c **** 		block[channelNum] = 0;
 763              		.loc 1 142 21
 764 007a FB68     		ldr	r3, [r7, #12]
 765 007c 9B00     		lsls	r3, r3, #2
 142:src/translator.c **** 		block[channelNum] = 0;
 766              		.loc 1 142 35
 767 007e 5942     		rsbs	r1, r3, #0
 768 0080 03F00F03 		and	r3, r3, #15
 769 0084 01F00F01 		and	r1, r1, #15
 770 0088 58BF     		it	pl
 771 008a 4B42     		rsbpl	r3, r1, #0
 142:src/translator.c **** 		block[channelNum] = 0;
 772              		.loc 1 142 40
 773 008c 0333     		adds	r3, r3, #3
 142:src/translator.c **** 		block[channelNum] = 0;
 774              		.loc 1 142 14
 775 008e 0121     		movs	r1, #1
 776 0090 01FA03F3 		lsl	r3, r1, r3
 142:src/translator.c **** 		block[channelNum] = 0;
 777              		.loc 1 142 7
 778 0094 1BB2     		sxth	r3, r3
 779 0096 DB43     		mvns	r3, r3
 780 0098 1BB2     		sxth	r3, r3
 781 009a 1340     		ands	r3, r3, r2
 782 009c 19B2     		sxth	r1, r3
 140:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 783              		.loc 1 140 15
 784 009e FB68     		ldr	r3, [r7, #12]
 785 00a0 002B     		cmp	r3, #0
 786 00a2 00DA     		bge	.L38
 787 00a4 0333     		adds	r3, r3, #3
 788              	.L38:
 789 00a6 9B10     		asrs	r3, r3, #2
 140:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 790              		.loc 1 140 14
 791 00a8 5B00     		lsls	r3, r3, #1
 792 00aa BA68     		ldr	r2, [r7, #8]
 793 00ac 1344     		add	r3, r3, r2
 142:src/translator.c **** 		block[channelNum] = 0;
 794              		.loc 1 142 7
 795 00ae 8AB2     		uxth	r2, r1
 140:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 796              		.loc 1 140 39
 797 00b0 1A80     		strh	r2, [r3]	@ movhi
 143:src/translator.c **** 	}
 798              		.loc 1 143 21
 799 00b2 054A     		ldr	r2, .L40
 800 00b4 FB68     		ldr	r3, [r7, #12]
 801 00b6 0021     		movs	r1, #0
 802 00b8 42F82310 		str	r1, [r2, r3, lsl #2]
 803              	.L39:
 804              		.loc 1 146 1
 805 00bc 00BF     		nop
 806 00be 1437     		adds	r7, r7, #20
 807              	.LCFI38:
 808              		.cfi_def_cfa_offset 4
 809 00c0 BD46     		mov	sp, r7
 810              	.LCFI39:
 811              		.cfi_def_cfa_register 13
 812              		@ sp needed
 813 00c2 80BC     		pop	{r7}
 814              	.LCFI40:
 815              		.cfi_restore 7
 816              		.cfi_def_cfa_offset 0
 817 00c4 7047     		bx	lr
 818              	.L41:
 819 00c6 00BF     		.align	2
 820              	.L40:
 821 00c8 00000000 		.word	block
 822              		.cfi_endproc
 823              	.LFE33:
 825              		.section	.text.SetChannelBitDirect,"ax",%progbits
 826              		.align	1
 827              		.global	SetChannelBitDirect
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 832              	SetChannelBitDirect:
 833              	.LFB34:
 147:src/translator.c **** 
 148:src/translator.c **** void SetChannelBitDirect(int channelNum, uint16* ChannelData, int bit) {
 834              		.loc 1 148 72
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 16
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 0000 80B4     		push	{r7}
 840              	.LCFI41:
 841              		.cfi_def_cfa_offset 4
 842              		.cfi_offset 7, -4
 843 0002 85B0     		sub	sp, sp, #20
 844              	.LCFI42:
 845              		.cfi_def_cfa_offset 24
 846 0004 00AF     		add	r7, sp, #0
 847              	.LCFI43:
 848              		.cfi_def_cfa_register 7
 849 0006 F860     		str	r0, [r7, #12]
 850 0008 B960     		str	r1, [r7, #8]
 851 000a 7A60     		str	r2, [r7, #4]
 149:src/translator.c **** 	if (bit) {
 852              		.loc 1 149 5
 853 000c 7B68     		ldr	r3, [r7, #4]
 854 000e 002B     		cmp	r3, #0
 855 0010 24D0     		beq	.L43
 150:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 151:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 856              		.loc 1 151 17
 857 0012 FB68     		ldr	r3, [r7, #12]
 858 0014 002B     		cmp	r3, #0
 859 0016 00DA     		bge	.L44
 860 0018 0333     		adds	r3, r3, #3
 861              	.L44:
 862 001a 9B10     		asrs	r3, r3, #2
 863              		.loc 1 151 16
 864 001c 5B00     		lsls	r3, r3, #1
 865 001e BA68     		ldr	r2, [r7, #8]
 866 0020 1344     		add	r3, r3, r2
 867 0022 1B88     		ldrh	r3, [r3]
 868 0024 1AB2     		sxth	r2, r3
 152:src/translator.c **** 						| (1 << ((4 * channelNum) % 16 + 2));
 869              		.loc 1 152 19
 870 0026 FB68     		ldr	r3, [r7, #12]
 871 0028 9B00     		lsls	r3, r3, #2
 872              		.loc 1 152 33
 873 002a 5942     		rsbs	r1, r3, #0
 874 002c 03F00F03 		and	r3, r3, #15
 875 0030 01F00F01 		and	r1, r1, #15
 876 0034 58BF     		it	pl
 877 0036 4B42     		rsbpl	r3, r1, #0
 878              		.loc 1 152 38
 879 0038 0233     		adds	r3, r3, #2
 880              		.loc 1 152 12
 881 003a 0121     		movs	r1, #1
 882 003c 01FA03F3 		lsl	r3, r1, r3
 883              		.loc 1 152 7
 884 0040 1BB2     		sxth	r3, r3
 885 0042 1343     		orrs	r3, r3, r2
 886 0044 19B2     		sxth	r1, r3
 150:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 887              		.loc 1 150 15
 888 0046 FB68     		ldr	r3, [r7, #12]
 889 0048 002B     		cmp	r3, #0
 890 004a 00DA     		bge	.L45
 891 004c 0333     		adds	r3, r3, #3
 892              	.L45:
 893 004e 9B10     		asrs	r3, r3, #2
 150:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 894              		.loc 1 150 14
 895 0050 5B00     		lsls	r3, r3, #1
 896 0052 BA68     		ldr	r2, [r7, #8]
 897 0054 1344     		add	r3, r3, r2
 898              		.loc 1 152 7
 899 0056 8AB2     		uxth	r2, r1
 150:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 900              		.loc 1 150 39
 901 0058 1A80     		strh	r2, [r3]	@ movhi
 153:src/translator.c **** 	} else {
 154:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 155:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 156:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 2)));
 157:src/translator.c **** 	}
 158:src/translator.c **** }
 902              		.loc 1 158 1
 903 005a 25E0     		b	.L49
 904              	.L43:
 155:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 2)));
 905              		.loc 1 155 17
 906 005c FB68     		ldr	r3, [r7, #12]
 907 005e 002B     		cmp	r3, #0
 908 0060 00DA     		bge	.L47
 909 0062 0333     		adds	r3, r3, #3
 910              	.L47:
 911 0064 9B10     		asrs	r3, r3, #2
 155:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 2)));
 912              		.loc 1 155 16
 913 0066 5B00     		lsls	r3, r3, #1
 914 0068 BA68     		ldr	r2, [r7, #8]
 915 006a 1344     		add	r3, r3, r2
 916 006c 1B88     		ldrh	r3, [r3]
 917 006e 1AB2     		sxth	r2, r3
 156:src/translator.c **** 	}
 918              		.loc 1 156 21
 919 0070 FB68     		ldr	r3, [r7, #12]
 920 0072 9B00     		lsls	r3, r3, #2
 156:src/translator.c **** 	}
 921              		.loc 1 156 35
 922 0074 5942     		rsbs	r1, r3, #0
 923 0076 03F00F03 		and	r3, r3, #15
 924 007a 01F00F01 		and	r1, r1, #15
 925 007e 58BF     		it	pl
 926 0080 4B42     		rsbpl	r3, r1, #0
 156:src/translator.c **** 	}
 927              		.loc 1 156 40
 928 0082 0233     		adds	r3, r3, #2
 156:src/translator.c **** 	}
 929              		.loc 1 156 14
 930 0084 0121     		movs	r1, #1
 931 0086 01FA03F3 		lsl	r3, r1, r3
 156:src/translator.c **** 	}
 932              		.loc 1 156 7
 933 008a 1BB2     		sxth	r3, r3
 934 008c DB43     		mvns	r3, r3
 935 008e 1BB2     		sxth	r3, r3
 936 0090 1340     		ands	r3, r3, r2
 937 0092 19B2     		sxth	r1, r3
 154:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 938              		.loc 1 154 15
 939 0094 FB68     		ldr	r3, [r7, #12]
 940 0096 002B     		cmp	r3, #0
 941 0098 00DA     		bge	.L48
 942 009a 0333     		adds	r3, r3, #3
 943              	.L48:
 944 009c 9B10     		asrs	r3, r3, #2
 154:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 945              		.loc 1 154 14
 946 009e 5B00     		lsls	r3, r3, #1
 947 00a0 BA68     		ldr	r2, [r7, #8]
 948 00a2 1344     		add	r3, r3, r2
 156:src/translator.c **** 	}
 949              		.loc 1 156 7
 950 00a4 8AB2     		uxth	r2, r1
 154:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 951              		.loc 1 154 39
 952 00a6 1A80     		strh	r2, [r3]	@ movhi
 953              	.L49:
 954              		.loc 1 158 1
 955 00a8 00BF     		nop
 956 00aa 1437     		adds	r7, r7, #20
 957              	.LCFI44:
 958              		.cfi_def_cfa_offset 4
 959 00ac BD46     		mov	sp, r7
 960              	.LCFI45:
 961              		.cfi_def_cfa_register 13
 962              		@ sp needed
 963 00ae 80BC     		pop	{r7}
 964              	.LCFI46:
 965              		.cfi_restore 7
 966              		.cfi_def_cfa_offset 0
 967 00b0 7047     		bx	lr
 968              		.cfi_endproc
 969              	.LFE34:
 971              		.section	.text.SetChannelBitReserv,"ax",%progbits
 972              		.align	1
 973              		.global	SetChannelBitReserv
 974              		.syntax unified
 975              		.thumb
 976              		.thumb_func
 978              	SetChannelBitReserv:
 979              	.LFB35:
 159:src/translator.c **** 
 160:src/translator.c **** void SetChannelBitReserv(int channelNum, uint16* ChannelData, int bit) {
 980              		.loc 1 160 72
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 16
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984              		@ link register save eliminated.
 985 0000 80B4     		push	{r7}
 986              	.LCFI47:
 987              		.cfi_def_cfa_offset 4
 988              		.cfi_offset 7, -4
 989 0002 85B0     		sub	sp, sp, #20
 990              	.LCFI48:
 991              		.cfi_def_cfa_offset 24
 992 0004 00AF     		add	r7, sp, #0
 993              	.LCFI49:
 994              		.cfi_def_cfa_register 7
 995 0006 F860     		str	r0, [r7, #12]
 996 0008 B960     		str	r1, [r7, #8]
 997 000a 7A60     		str	r2, [r7, #4]
 161:src/translator.c **** #ifdef LIDACONF
 162:src/translator.c **** 	if (bit)
 163:src/translator.c **** 	{
 164:src/translator.c **** 		ChannelData[(int) (channelNum / 4)]
 165:src/translator.c **** 		= ChannelData[(int) (channelNum / 4)] | (1 << ((4* channelNum )
 166:src/translator.c **** 						% 16 + 3));
 167:src/translator.c **** 	}
 168:src/translator.c **** 	else
 169:src/translator.c **** 	{
 170:src/translator.c **** 		ChannelData[(int) (channelNum / 4)]
 171:src/translator.c **** 		= ChannelData[(int) (channelNum / 4)] & (~(1
 172:src/translator.c **** 						<< ((4* channelNum ) % 16 + 3)));
 173:src/translator.c **** 	}
 174:src/translator.c **** #else
 175:src/translator.c **** 	if (bit) {
 998              		.loc 1 175 5
 999 000c 7B68     		ldr	r3, [r7, #4]
 1000 000e 002B     		cmp	r3, #0
 1001 0010 24D0     		beq	.L51
 176:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 177:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 1002              		.loc 1 177 17
 1003 0012 FB68     		ldr	r3, [r7, #12]
 1004 0014 002B     		cmp	r3, #0
 1005 0016 00DA     		bge	.L52
 1006 0018 0333     		adds	r3, r3, #3
 1007              	.L52:
 1008 001a 9B10     		asrs	r3, r3, #2
 1009              		.loc 1 177 16
 1010 001c 5B00     		lsls	r3, r3, #1
 1011 001e BA68     		ldr	r2, [r7, #8]
 1012 0020 1344     		add	r3, r3, r2
 1013 0022 1B88     		ldrh	r3, [r3]
 1014 0024 1AB2     		sxth	r2, r3
 178:src/translator.c **** 						| (1 << ((4 * channelNum) % 16 + 1));
 1015              		.loc 1 178 19
 1016 0026 FB68     		ldr	r3, [r7, #12]
 1017 0028 9B00     		lsls	r3, r3, #2
 1018              		.loc 1 178 33
 1019 002a 5942     		rsbs	r1, r3, #0
 1020 002c 03F00F03 		and	r3, r3, #15
 1021 0030 01F00F01 		and	r1, r1, #15
 1022 0034 58BF     		it	pl
 1023 0036 4B42     		rsbpl	r3, r1, #0
 1024              		.loc 1 178 38
 1025 0038 0133     		adds	r3, r3, #1
 1026              		.loc 1 178 12
 1027 003a 0121     		movs	r1, #1
 1028 003c 01FA03F3 		lsl	r3, r1, r3
 1029              		.loc 1 178 7
 1030 0040 1BB2     		sxth	r3, r3
 1031 0042 1343     		orrs	r3, r3, r2
 1032 0044 19B2     		sxth	r1, r3
 176:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 1033              		.loc 1 176 15
 1034 0046 FB68     		ldr	r3, [r7, #12]
 1035 0048 002B     		cmp	r3, #0
 1036 004a 00DA     		bge	.L53
 1037 004c 0333     		adds	r3, r3, #3
 1038              	.L53:
 1039 004e 9B10     		asrs	r3, r3, #2
 176:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 1040              		.loc 1 176 14
 1041 0050 5B00     		lsls	r3, r3, #1
 1042 0052 BA68     		ldr	r2, [r7, #8]
 1043 0054 1344     		add	r3, r3, r2
 1044              		.loc 1 178 7
 1045 0056 8AB2     		uxth	r2, r1
 176:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 1046              		.loc 1 176 39
 1047 0058 1A80     		strh	r2, [r3]	@ movhi
 179:src/translator.c **** 	} else {
 180:src/translator.c **** 		ChannelData[(int) (channelNum / 4)] =
 181:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 182:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 1)));
 183:src/translator.c **** 	}
 184:src/translator.c **** #endif
 185:src/translator.c **** }
 1048              		.loc 1 185 1
 1049 005a 25E0     		b	.L57
 1050              	.L51:
 181:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 1)));
 1051              		.loc 1 181 17
 1052 005c FB68     		ldr	r3, [r7, #12]
 1053 005e 002B     		cmp	r3, #0
 1054 0060 00DA     		bge	.L55
 1055 0062 0333     		adds	r3, r3, #3
 1056              	.L55:
 1057 0064 9B10     		asrs	r3, r3, #2
 181:src/translator.c **** 						& (~(1 << ((4 * channelNum) % 16 + 1)));
 1058              		.loc 1 181 16
 1059 0066 5B00     		lsls	r3, r3, #1
 1060 0068 BA68     		ldr	r2, [r7, #8]
 1061 006a 1344     		add	r3, r3, r2
 1062 006c 1B88     		ldrh	r3, [r3]
 1063 006e 1AB2     		sxth	r2, r3
 182:src/translator.c **** 	}
 1064              		.loc 1 182 21
 1065 0070 FB68     		ldr	r3, [r7, #12]
 1066 0072 9B00     		lsls	r3, r3, #2
 182:src/translator.c **** 	}
 1067              		.loc 1 182 35
 1068 0074 5942     		rsbs	r1, r3, #0
 1069 0076 03F00F03 		and	r3, r3, #15
 1070 007a 01F00F01 		and	r1, r1, #15
 1071 007e 58BF     		it	pl
 1072 0080 4B42     		rsbpl	r3, r1, #0
 182:src/translator.c **** 	}
 1073              		.loc 1 182 40
 1074 0082 0133     		adds	r3, r3, #1
 182:src/translator.c **** 	}
 1075              		.loc 1 182 14
 1076 0084 0121     		movs	r1, #1
 1077 0086 01FA03F3 		lsl	r3, r1, r3
 182:src/translator.c **** 	}
 1078              		.loc 1 182 7
 1079 008a 1BB2     		sxth	r3, r3
 1080 008c DB43     		mvns	r3, r3
 1081 008e 1BB2     		sxth	r3, r3
 1082 0090 1340     		ands	r3, r3, r2
 1083 0092 19B2     		sxth	r1, r3
 180:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 1084              		.loc 1 180 15
 1085 0094 FB68     		ldr	r3, [r7, #12]
 1086 0096 002B     		cmp	r3, #0
 1087 0098 00DA     		bge	.L56
 1088 009a 0333     		adds	r3, r3, #3
 1089              	.L56:
 1090 009c 9B10     		asrs	r3, r3, #2
 180:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 1091              		.loc 1 180 14
 1092 009e 5B00     		lsls	r3, r3, #1
 1093 00a0 BA68     		ldr	r2, [r7, #8]
 1094 00a2 1344     		add	r3, r3, r2
 182:src/translator.c **** 	}
 1095              		.loc 1 182 7
 1096 00a4 8AB2     		uxth	r2, r1
 180:src/translator.c **** 				ChannelData[(int) (channelNum / 4)]
 1097              		.loc 1 180 39
 1098 00a6 1A80     		strh	r2, [r3]	@ movhi
 1099              	.L57:
 1100              		.loc 1 185 1
 1101 00a8 00BF     		nop
 1102 00aa 1437     		adds	r7, r7, #20
 1103              	.LCFI50:
 1104              		.cfi_def_cfa_offset 4
 1105 00ac BD46     		mov	sp, r7
 1106              	.LCFI51:
 1107              		.cfi_def_cfa_register 13
 1108              		@ sp needed
 1109 00ae 80BC     		pop	{r7}
 1110              	.LCFI52:
 1111              		.cfi_restore 7
 1112              		.cfi_def_cfa_offset 0
 1113 00b0 7047     		bx	lr
 1114              		.cfi_endproc
 1115              	.LFE35:
 1117              		.section	.text.GetDiskretFromRam,"ax",%progbits
 1118              		.align	1
 1119              		.global	GetDiskretFromRam
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1124              	GetDiskretFromRam:
 1125              	.LFB36:
 186:src/translator.c **** 
 187:src/translator.c **** int GetDiskretFromRam(int i) {
 1126              		.loc 1 187 30
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 8
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 1131 0000 80B4     		push	{r7}
 1132              	.LCFI53:
 1133              		.cfi_def_cfa_offset 4
 1134              		.cfi_offset 7, -4
 1135 0002 83B0     		sub	sp, sp, #12
 1136              	.LCFI54:
 1137              		.cfi_def_cfa_offset 16
 1138 0004 00AF     		add	r7, sp, #0
 1139              	.LCFI55:
 1140              		.cfi_def_cfa_register 7
 1141 0006 7860     		str	r0, [r7, #4]
 188:src/translator.c **** 
 189:src/translator.c **** 	return ((RAM.diskrets[i / 11] >> (i % 11)) & 0x1);
 1142              		.loc 1 189 26
 1143 0008 7B68     		ldr	r3, [r7, #4]
 1144 000a 114A     		ldr	r2, .L60
 1145 000c 82FB0312 		smull	r1, r2, r2, r3
 1146 0010 5210     		asrs	r2, r2, #1
 1147 0012 DB17     		asrs	r3, r3, #31
 1148 0014 D31A     		subs	r3, r2, r3
 1149              		.loc 1 189 23
 1150 0016 0F4A     		ldr	r2, .L60+4
 1151 0018 03F50073 		add	r3, r3, #512
 1152 001c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ unaligned
 1153 0020 9BB2     		uxth	r3, r3
 1154 0022 1846     		mov	r0, r3
 1155              		.loc 1 189 38
 1156 0024 7968     		ldr	r1, [r7, #4]
 1157 0026 0A4B     		ldr	r3, .L60
 1158 0028 83FB0123 		smull	r2, r3, r3, r1
 1159 002c 5A10     		asrs	r2, r3, #1
 1160 002e CB17     		asrs	r3, r1, #31
 1161 0030 D21A     		subs	r2, r2, r3
 1162 0032 1346     		mov	r3, r2
 1163 0034 9B00     		lsls	r3, r3, #2
 1164 0036 1344     		add	r3, r3, r2
 1165 0038 5B00     		lsls	r3, r3, #1
 1166 003a 1344     		add	r3, r3, r2
 1167 003c CA1A     		subs	r2, r1, r3
 1168              		.loc 1 189 32
 1169 003e 40FA02F3 		asr	r3, r0, r2
 1170              		.loc 1 189 45
 1171 0042 03F00103 		and	r3, r3, #1
 190:src/translator.c **** }
 1172              		.loc 1 190 1
 1173 0046 1846     		mov	r0, r3
 1174 0048 0C37     		adds	r7, r7, #12
 1175              	.LCFI56:
 1176              		.cfi_def_cfa_offset 4
 1177 004a BD46     		mov	sp, r7
 1178              	.LCFI57:
 1179              		.cfi_def_cfa_register 13
 1180              		@ sp needed
 1181 004c 80BC     		pop	{r7}
 1182              	.LCFI58:
 1183              		.cfi_restore 7
 1184              		.cfi_def_cfa_offset 0
 1185 004e 7047     		bx	lr
 1186              	.L61:
 1187              		.align	2
 1188              	.L60:
 1189 0050 E9A28B2E 		.word	780903145
 1190 0054 00000000 		.word	RAM
 1191              		.cfi_endproc
 1192              	.LFE36:
 1194              		.section	.text.SetRelayToRam,"ax",%progbits
 1195              		.align	1
 1196              		.global	SetRelayToRam
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1201              	SetRelayToRam:
 1202              	.LFB37:
 191:src/translator.c **** void SetRelayToRam(int i, int vol) {
 1203              		.loc 1 191 36
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 8
 1206              		@ frame_needed = 1, uses_anonymous_args = 0
 1207              		@ link register save eliminated.
 1208 0000 80B4     		push	{r7}
 1209              	.LCFI59:
 1210              		.cfi_def_cfa_offset 4
 1211              		.cfi_offset 7, -4
 1212 0002 83B0     		sub	sp, sp, #12
 1213              	.LCFI60:
 1214              		.cfi_def_cfa_offset 16
 1215 0004 00AF     		add	r7, sp, #0
 1216              	.LCFI61:
 1217              		.cfi_def_cfa_register 7
 1218 0006 7860     		str	r0, [r7, #4]
 1219 0008 3960     		str	r1, [r7]
 192:src/translator.c **** 	if (vol != 0) {
 1220              		.loc 1 192 5
 1221 000a 3B68     		ldr	r3, [r7]
 1222 000c 002B     		cmp	r3, #0
 1223 000e 22D0     		beq	.L63
 193:src/translator.c **** 		RAM.relays[i / 16] |= (1 << (i % 16));
 1224              		.loc 1 193 16
 1225 0010 7B68     		ldr	r3, [r7, #4]
 1226 0012 002B     		cmp	r3, #0
 1227 0014 00DA     		bge	.L64
 1228 0016 0F33     		adds	r3, r3, #15
 1229              	.L64:
 1230 0018 1B11     		asrs	r3, r3, #4
 1231 001a 1A46     		mov	r2, r3
 1232              		.loc 1 193 22
 1233 001c 2249     		ldr	r1, .L68
 1234 001e 02F50173 		add	r3, r2, #516
 1235 0022 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ unaligned
 1236 0026 9BB2     		uxth	r3, r3
 1237 0028 19B2     		sxth	r1, r3
 1238              		.loc 1 193 34
 1239 002a 7B68     		ldr	r3, [r7, #4]
 1240 002c 5842     		rsbs	r0, r3, #0
 1241 002e 03F00F03 		and	r3, r3, #15
 1242 0032 00F00F00 		and	r0, r0, #15
 1243 0036 58BF     		it	pl
 1244 0038 4342     		rsbpl	r3, r0, #0
 1245              		.loc 1 193 28
 1246 003a 0120     		movs	r0, #1
 1247 003c 00FA03F3 		lsl	r3, r0, r3
 1248              		.loc 1 193 22
 1249 0040 1BB2     		sxth	r3, r3
 1250 0042 0B43     		orrs	r3, r3, r1
 1251 0044 1BB2     		sxth	r3, r3
 1252 0046 98B2     		uxth	r0, r3
 1253 0048 1749     		ldr	r1, .L68
 1254 004a 02F50173 		add	r3, r2, #516
 1255 004e 0246     		mov	r2, r0	@ movhi
 1256 0050 21F81320 		strh	r2, [r1, r3, lsl #1]	@ unaligned
 194:src/translator.c **** 	} else {
 195:src/translator.c **** 		RAM.relays[i / 16] &= ~(1 << (i % 16));
 196:src/translator.c **** 	}
 197:src/translator.c **** }
 1257              		.loc 1 197 1
 1258 0054 23E0     		b	.L67
 1259              	.L63:
 195:src/translator.c **** 	}
 1260              		.loc 1 195 16
 1261 0056 7B68     		ldr	r3, [r7, #4]
 1262 0058 002B     		cmp	r3, #0
 1263 005a 00DA     		bge	.L66
 1264 005c 0F33     		adds	r3, r3, #15
 1265              	.L66:
 1266 005e 1B11     		asrs	r3, r3, #4
 1267 0060 1A46     		mov	r2, r3
 195:src/translator.c **** 	}
 1268              		.loc 1 195 22
 1269 0062 1149     		ldr	r1, .L68
 1270 0064 02F50173 		add	r3, r2, #516
 1271 0068 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ unaligned
 1272 006c 9BB2     		uxth	r3, r3
 1273 006e 19B2     		sxth	r1, r3
 195:src/translator.c **** 	}
 1274              		.loc 1 195 35
 1275 0070 7B68     		ldr	r3, [r7, #4]
 1276 0072 5842     		rsbs	r0, r3, #0
 1277 0074 03F00F03 		and	r3, r3, #15
 1278 0078 00F00F00 		and	r0, r0, #15
 1279 007c 58BF     		it	pl
 1280 007e 4342     		rsbpl	r3, r0, #0
 195:src/translator.c **** 	}
 1281              		.loc 1 195 29
 1282 0080 0120     		movs	r0, #1
 1283 0082 00FA03F3 		lsl	r3, r0, r3
 195:src/translator.c **** 	}
 1284              		.loc 1 195 22
 1285 0086 1BB2     		sxth	r3, r3
 1286 0088 DB43     		mvns	r3, r3
 1287 008a 1BB2     		sxth	r3, r3
 1288 008c 0B40     		ands	r3, r3, r1
 1289 008e 1BB2     		sxth	r3, r3
 1290 0090 98B2     		uxth	r0, r3
 1291 0092 0549     		ldr	r1, .L68
 1292 0094 02F50173 		add	r3, r2, #516
 1293 0098 0246     		mov	r2, r0	@ movhi
 1294 009a 21F81320 		strh	r2, [r1, r3, lsl #1]	@ unaligned
 1295              	.L67:
 1296              		.loc 1 197 1
 1297 009e 00BF     		nop
 1298 00a0 0C37     		adds	r7, r7, #12
 1299              	.LCFI62:
 1300              		.cfi_def_cfa_offset 4
 1301 00a2 BD46     		mov	sp, r7
 1302              	.LCFI63:
 1303              		.cfi_def_cfa_register 13
 1304              		@ sp needed
 1305 00a4 80BC     		pop	{r7}
 1306              	.LCFI64:
 1307              		.cfi_restore 7
 1308              		.cfi_def_cfa_offset 0
 1309 00a6 7047     		bx	lr
 1310              	.L69:
 1311              		.align	2
 1312              	.L68:
 1313 00a8 00000000 		.word	RAM
 1314              		.cfi_endproc
 1315              	.LFE37:
 1317              		.section	.text.CheckDiscretMask,"ax",%progbits
 1318              		.align	1
 1319              		.global	CheckDiscretMask
 1320              		.syntax unified
 1321              		.thumb
 1322              		.thumb_func
 1324              	CheckDiscretMask:
 1325              	.LFB38:
 198:src/translator.c **** int CheckDiscretMask(uint16 *mask) {
 1326              		.loc 1 198 36
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 16
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330              		@ link register save eliminated.
 1331 0000 80B4     		push	{r7}
 1332              	.LCFI65:
 1333              		.cfi_def_cfa_offset 4
 1334              		.cfi_offset 7, -4
 1335 0002 85B0     		sub	sp, sp, #20
 1336              	.LCFI66:
 1337              		.cfi_def_cfa_offset 24
 1338 0004 00AF     		add	r7, sp, #0
 1339              	.LCFI67:
 1340              		.cfi_def_cfa_register 7
 1341 0006 7860     		str	r0, [r7, #4]
 199:src/translator.c **** 	int rezult = 1;
 1342              		.loc 1 199 6
 1343 0008 0123     		movs	r3, #1
 1344 000a FB60     		str	r3, [r7, #12]
 1345              	.LBB3:
 200:src/translator.c **** 	for (int i = 0; i < 4; i++) {
 1346              		.loc 1 200 11
 1347 000c 0023     		movs	r3, #0
 1348 000e BB60     		str	r3, [r7, #8]
 1349              		.loc 1 200 2
 1350 0010 7FE0     		b	.L71
 1351              	.L74:
 201:src/translator.c **** 		if ((RAM.diskrets[i] & mask[i]) != (mask[i])) {
 1352              		.loc 1 201 20
 1353 0012 454A     		ldr	r2, .L76
 1354 0014 BB68     		ldr	r3, [r7, #8]
 1355 0016 03F50073 		add	r3, r3, #512
 1356 001a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ unaligned
 1357 001e 9AB2     		uxth	r2, r3
 1358              		.loc 1 201 30
 1359 0020 BB68     		ldr	r3, [r7, #8]
 1360 0022 5B00     		lsls	r3, r3, #1
 1361 0024 7968     		ldr	r1, [r7, #4]
 1362 0026 0B44     		add	r3, r3, r1
 1363 0028 1B88     		ldrh	r3, [r3]
 1364              		.loc 1 201 35
 1365 002a 1340     		ands	r3, r3, r2
 1366 002c 9AB2     		uxth	r2, r3
 1367              		.loc 1 201 43
 1368 002e BB68     		ldr	r3, [r7, #8]
 1369 0030 5B00     		lsls	r3, r3, #1
 1370 0032 7968     		ldr	r1, [r7, #4]
 1371 0034 0B44     		add	r3, r3, r1
 1372 0036 1B88     		ldrh	r3, [r3]
 1373              		.loc 1 201 6
 1374 0038 9A42     		cmp	r2, r3
 1375 003a 4BD0     		beq	.L72
 202:src/translator.c **** 			rezult = 0;
 1376              		.loc 1 202 11
 1377 003c 0023     		movs	r3, #0
 1378 003e FB60     		str	r3, [r7, #12]
 203:src/translator.c **** 			RAM.ErrorDiscretLogic[i] &= (~mask[i]);
 1379              		.loc 1 203 29
 1380 0040 394A     		ldr	r2, .L76
 1381 0042 BB68     		ldr	r3, [r7, #8]
 1382 0044 03F54173 		add	r3, r3, #772
 1383 0048 5B00     		lsls	r3, r3, #1
 1384 004a 1344     		add	r3, r3, r2
 1385 004c 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1386 004e 9BB2     		uxth	r3, r3
 1387 0050 1AB2     		sxth	r2, r3
 1388              		.loc 1 203 38
 1389 0052 BB68     		ldr	r3, [r7, #8]
 1390 0054 5B00     		lsls	r3, r3, #1
 1391 0056 7968     		ldr	r1, [r7, #4]
 1392 0058 0B44     		add	r3, r3, r1
 1393 005a 1B88     		ldrh	r3, [r3]
 1394              		.loc 1 203 29
 1395 005c 1BB2     		sxth	r3, r3
 1396 005e DB43     		mvns	r3, r3
 1397 0060 1BB2     		sxth	r3, r3
 1398 0062 1340     		ands	r3, r3, r2
 1399 0064 1BB2     		sxth	r3, r3
 1400 0066 99B2     		uxth	r1, r3
 1401 0068 2F4A     		ldr	r2, .L76
 1402 006a BB68     		ldr	r3, [r7, #8]
 1403 006c 03F54173 		add	r3, r3, #772
 1404 0070 5B00     		lsls	r3, r3, #1
 1405 0072 1344     		add	r3, r3, r2
 1406 0074 0A46     		mov	r2, r1	@ movhi
 1407 0076 5A80     		strh	r2, [r3, #2]	@ unaligned
 204:src/translator.c **** 			RAM.ErrorDiscretLogic[i] |= ((~(RAM.diskrets[i] & mask[i]))
 1408              		.loc 1 204 29
 1409 0078 2B4A     		ldr	r2, .L76
 1410 007a BB68     		ldr	r3, [r7, #8]
 1411 007c 03F54173 		add	r3, r3, #772
 1412 0080 5B00     		lsls	r3, r3, #1
 1413 0082 1344     		add	r3, r3, r2
 1414 0084 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1415 0086 9BB2     		uxth	r3, r3
 1416 0088 1AB2     		sxth	r2, r3
 1417              		.loc 1 204 48
 1418 008a 2749     		ldr	r1, .L76
 1419 008c BB68     		ldr	r3, [r7, #8]
 1420 008e 03F50073 		add	r3, r3, #512
 1421 0092 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ unaligned
 1422 0096 99B2     		uxth	r1, r3
 1423              		.loc 1 204 58
 1424 0098 BB68     		ldr	r3, [r7, #8]
 1425 009a 5B00     		lsls	r3, r3, #1
 1426 009c 7868     		ldr	r0, [r7, #4]
 1427 009e 0344     		add	r3, r3, r0
 1428 00a0 1B88     		ldrh	r3, [r3]
 205:src/translator.c **** 					& mask[i]);
 1429              		.loc 1 205 6
 1430 00a2 0B40     		ands	r3, r3, r1
 1431 00a4 9BB2     		uxth	r3, r3
 1432 00a6 1BB2     		sxth	r3, r3
 1433 00a8 DB43     		mvns	r3, r3
 1434 00aa 19B2     		sxth	r1, r3
 1435              		.loc 1 205 12
 1436 00ac BB68     		ldr	r3, [r7, #8]
 1437 00ae 5B00     		lsls	r3, r3, #1
 1438 00b0 7868     		ldr	r0, [r7, #4]
 1439 00b2 0344     		add	r3, r3, r0
 1440 00b4 1B88     		ldrh	r3, [r3]
 1441 00b6 1BB2     		sxth	r3, r3
 1442              		.loc 1 205 6
 1443 00b8 0B40     		ands	r3, r3, r1
 1444 00ba 1BB2     		sxth	r3, r3
 204:src/translator.c **** 			RAM.ErrorDiscretLogic[i] |= ((~(RAM.diskrets[i] & mask[i]))
 1445              		.loc 1 204 29
 1446 00bc 1343     		orrs	r3, r3, r2
 1447 00be 1BB2     		sxth	r3, r3
 1448 00c0 99B2     		uxth	r1, r3
 1449 00c2 194A     		ldr	r2, .L76
 1450 00c4 BB68     		ldr	r3, [r7, #8]
 1451 00c6 03F54173 		add	r3, r3, #772
 1452 00ca 5B00     		lsls	r3, r3, #1
 1453 00cc 1344     		add	r3, r3, r2
 1454 00ce 0A46     		mov	r2, r1	@ movhi
 1455 00d0 5A80     		strh	r2, [r3, #2]	@ unaligned
 1456 00d2 1BE0     		b	.L73
 1457              	.L72:
 206:src/translator.c **** 		} else {
 207:src/translator.c **** 			RAM.ErrorDiscretLogic[i] &= (~mask[i]);
 1458              		.loc 1 207 29
 1459 00d4 144A     		ldr	r2, .L76
 1460 00d6 BB68     		ldr	r3, [r7, #8]
 1461 00d8 03F54173 		add	r3, r3, #772
 1462 00dc 5B00     		lsls	r3, r3, #1
 1463 00de 1344     		add	r3, r3, r2
 1464 00e0 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1465 00e2 9BB2     		uxth	r3, r3
 1466 00e4 1AB2     		sxth	r2, r3
 1467              		.loc 1 207 38
 1468 00e6 BB68     		ldr	r3, [r7, #8]
 1469 00e8 5B00     		lsls	r3, r3, #1
 1470 00ea 7968     		ldr	r1, [r7, #4]
 1471 00ec 0B44     		add	r3, r3, r1
 1472 00ee 1B88     		ldrh	r3, [r3]
 1473              		.loc 1 207 29
 1474 00f0 1BB2     		sxth	r3, r3
 1475 00f2 DB43     		mvns	r3, r3
 1476 00f4 1BB2     		sxth	r3, r3
 1477 00f6 1340     		ands	r3, r3, r2
 1478 00f8 1BB2     		sxth	r3, r3
 1479 00fa 99B2     		uxth	r1, r3
 1480 00fc 0A4A     		ldr	r2, .L76
 1481 00fe BB68     		ldr	r3, [r7, #8]
 1482 0100 03F54173 		add	r3, r3, #772
 1483 0104 5B00     		lsls	r3, r3, #1
 1484 0106 1344     		add	r3, r3, r2
 1485 0108 0A46     		mov	r2, r1	@ movhi
 1486 010a 5A80     		strh	r2, [r3, #2]	@ unaligned
 1487              	.L73:
 200:src/translator.c **** 		if ((RAM.diskrets[i] & mask[i]) != (mask[i])) {
 1488              		.loc 1 200 26 discriminator 2
 1489 010c BB68     		ldr	r3, [r7, #8]
 1490 010e 0133     		adds	r3, r3, #1
 1491 0110 BB60     		str	r3, [r7, #8]
 1492              	.L71:
 200:src/translator.c **** 		if ((RAM.diskrets[i] & mask[i]) != (mask[i])) {
 1493              		.loc 1 200 2 discriminator 1
 1494 0112 BB68     		ldr	r3, [r7, #8]
 1495 0114 032B     		cmp	r3, #3
 1496 0116 7FF77CAF 		ble	.L74
 1497              	.LBE3:
 208:src/translator.c **** 		}
 209:src/translator.c **** 	}
 210:src/translator.c **** 	return rezult;
 1498              		.loc 1 210 9
 1499 011a FB68     		ldr	r3, [r7, #12]
 211:src/translator.c **** }
 1500              		.loc 1 211 1
 1501 011c 1846     		mov	r0, r3
 1502 011e 1437     		adds	r7, r7, #20
 1503              	.LCFI68:
 1504              		.cfi_def_cfa_offset 4
 1505 0120 BD46     		mov	sp, r7
 1506              	.LCFI69:
 1507              		.cfi_def_cfa_register 13
 1508              		@ sp needed
 1509 0122 80BC     		pop	{r7}
 1510              	.LCFI70:
 1511              		.cfi_restore 7
 1512              		.cfi_def_cfa_offset 0
 1513 0124 7047     		bx	lr
 1514              	.L77:
 1515 0126 00BF     		.align	2
 1516              	.L76:
 1517 0128 00000000 		.word	RAM
 1518              		.cfi_endproc
 1519              	.LFE38:
 1521              		.section	.text.CheckDiscretMaskNegative,"ax",%progbits
 1522              		.align	1
 1523              		.global	CheckDiscretMaskNegative
 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1528              	CheckDiscretMaskNegative:
 1529              	.LFB39:
 212:src/translator.c **** 
 213:src/translator.c **** int CheckDiscretMaskNegative(uint16 *mask) {
 1530              		.loc 1 213 44
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 16
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535 0000 80B4     		push	{r7}
 1536              	.LCFI71:
 1537              		.cfi_def_cfa_offset 4
 1538              		.cfi_offset 7, -4
 1539 0002 85B0     		sub	sp, sp, #20
 1540              	.LCFI72:
 1541              		.cfi_def_cfa_offset 24
 1542 0004 00AF     		add	r7, sp, #0
 1543              	.LCFI73:
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
 214:src/translator.c **** 	int rezult = 1;
 1546              		.loc 1 214 6
 1547 0008 0123     		movs	r3, #1
 1548 000a FB60     		str	r3, [r7, #12]
 1549              	.LBB4:
 215:src/translator.c **** 	for (int i = 0; i < 4; i++) {
 1550              		.loc 1 215 11
 1551 000c 0023     		movs	r3, #0
 1552 000e BB60     		str	r3, [r7, #8]
 1553              		.loc 1 215 2
 1554 0010 6DE0     		b	.L79
 1555              	.L82:
 216:src/translator.c **** 		if ((RAM.diskrets[i] & mask[i]) == 0) {
 1556              		.loc 1 216 20
 1557 0012 3B4A     		ldr	r2, .L84
 1558 0014 BB68     		ldr	r3, [r7, #8]
 1559 0016 03F50073 		add	r3, r3, #512
 1560 001a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ unaligned
 1561 001e 9AB2     		uxth	r2, r3
 1562              		.loc 1 216 30
 1563 0020 BB68     		ldr	r3, [r7, #8]
 1564 0022 5B00     		lsls	r3, r3, #1
 1565 0024 7968     		ldr	r1, [r7, #4]
 1566 0026 0B44     		add	r3, r3, r1
 1567 0028 1B88     		ldrh	r3, [r3]
 1568              		.loc 1 216 35
 1569 002a 1340     		ands	r3, r3, r2
 1570 002c 9BB2     		uxth	r3, r3
 1571              		.loc 1 216 6
 1572 002e 002B     		cmp	r3, #0
 1573 0030 1CD1     		bne	.L80
 217:src/translator.c **** 			RAM.ErrorDiscretLogic[i] &= (~mask[i]);
 1574              		.loc 1 217 29
 1575 0032 334A     		ldr	r2, .L84
 1576 0034 BB68     		ldr	r3, [r7, #8]
 1577 0036 03F54173 		add	r3, r3, #772
 1578 003a 5B00     		lsls	r3, r3, #1
 1579 003c 1344     		add	r3, r3, r2
 1580 003e 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1581 0040 9BB2     		uxth	r3, r3
 1582 0042 1AB2     		sxth	r2, r3
 1583              		.loc 1 217 38
 1584 0044 BB68     		ldr	r3, [r7, #8]
 1585 0046 5B00     		lsls	r3, r3, #1
 1586 0048 7968     		ldr	r1, [r7, #4]
 1587 004a 0B44     		add	r3, r3, r1
 1588 004c 1B88     		ldrh	r3, [r3]
 1589              		.loc 1 217 29
 1590 004e 1BB2     		sxth	r3, r3
 1591 0050 DB43     		mvns	r3, r3
 1592 0052 1BB2     		sxth	r3, r3
 1593 0054 1340     		ands	r3, r3, r2
 1594 0056 1BB2     		sxth	r3, r3
 1595 0058 99B2     		uxth	r1, r3
 1596 005a 294A     		ldr	r2, .L84
 1597 005c BB68     		ldr	r3, [r7, #8]
 1598 005e 03F54173 		add	r3, r3, #772
 1599 0062 5B00     		lsls	r3, r3, #1
 1600 0064 1344     		add	r3, r3, r2
 1601 0066 0A46     		mov	r2, r1	@ movhi
 1602 0068 5A80     		strh	r2, [r3, #2]	@ unaligned
 1603 006a 3DE0     		b	.L81
 1604              	.L80:
 218:src/translator.c **** 		} else {
 219:src/translator.c **** 			rezult = 0;
 1605              		.loc 1 219 11
 1606 006c 0023     		movs	r3, #0
 1607 006e FB60     		str	r3, [r7, #12]
 220:src/translator.c **** 			RAM.ErrorDiscretLogic[i] &= (~mask[i]);
 1608              		.loc 1 220 29
 1609 0070 234A     		ldr	r2, .L84
 1610 0072 BB68     		ldr	r3, [r7, #8]
 1611 0074 03F54173 		add	r3, r3, #772
 1612 0078 5B00     		lsls	r3, r3, #1
 1613 007a 1344     		add	r3, r3, r2
 1614 007c 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1615 007e 9BB2     		uxth	r3, r3
 1616 0080 1AB2     		sxth	r2, r3
 1617              		.loc 1 220 38
 1618 0082 BB68     		ldr	r3, [r7, #8]
 1619 0084 5B00     		lsls	r3, r3, #1
 1620 0086 7968     		ldr	r1, [r7, #4]
 1621 0088 0B44     		add	r3, r3, r1
 1622 008a 1B88     		ldrh	r3, [r3]
 1623              		.loc 1 220 29
 1624 008c 1BB2     		sxth	r3, r3
 1625 008e DB43     		mvns	r3, r3
 1626 0090 1BB2     		sxth	r3, r3
 1627 0092 1340     		ands	r3, r3, r2
 1628 0094 1BB2     		sxth	r3, r3
 1629 0096 99B2     		uxth	r1, r3
 1630 0098 194A     		ldr	r2, .L84
 1631 009a BB68     		ldr	r3, [r7, #8]
 1632 009c 03F54173 		add	r3, r3, #772
 1633 00a0 5B00     		lsls	r3, r3, #1
 1634 00a2 1344     		add	r3, r3, r2
 1635 00a4 0A46     		mov	r2, r1	@ movhi
 1636 00a6 5A80     		strh	r2, [r3, #2]	@ unaligned
 221:src/translator.c **** 			RAM.ErrorDiscretLogic[i] |= ((RAM.diskrets[i] & mask[i]));
 1637              		.loc 1 221 29
 1638 00a8 154A     		ldr	r2, .L84
 1639 00aa BB68     		ldr	r3, [r7, #8]
 1640 00ac 03F54173 		add	r3, r3, #772
 1641 00b0 5B00     		lsls	r3, r3, #1
 1642 00b2 1344     		add	r3, r3, r2
 1643 00b4 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1644 00b6 9AB2     		uxth	r2, r3
 1645              		.loc 1 221 46
 1646 00b8 1149     		ldr	r1, .L84
 1647 00ba BB68     		ldr	r3, [r7, #8]
 1648 00bc 03F50073 		add	r3, r3, #512
 1649 00c0 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ unaligned
 1650 00c4 99B2     		uxth	r1, r3
 1651              		.loc 1 221 56
 1652 00c6 BB68     		ldr	r3, [r7, #8]
 1653 00c8 5B00     		lsls	r3, r3, #1
 1654 00ca 7868     		ldr	r0, [r7, #4]
 1655 00cc 0344     		add	r3, r3, r0
 1656 00ce 1B88     		ldrh	r3, [r3]
 1657              		.loc 1 221 29
 1658 00d0 0B40     		ands	r3, r3, r1
 1659 00d2 9BB2     		uxth	r3, r3
 1660 00d4 1343     		orrs	r3, r3, r2
 1661 00d6 99B2     		uxth	r1, r3
 1662 00d8 094A     		ldr	r2, .L84
 1663 00da BB68     		ldr	r3, [r7, #8]
 1664 00dc 03F54173 		add	r3, r3, #772
 1665 00e0 5B00     		lsls	r3, r3, #1
 1666 00e2 1344     		add	r3, r3, r2
 1667 00e4 0A46     		mov	r2, r1	@ movhi
 1668 00e6 5A80     		strh	r2, [r3, #2]	@ unaligned
 1669              	.L81:
 215:src/translator.c **** 		if ((RAM.diskrets[i] & mask[i]) == 0) {
 1670              		.loc 1 215 26 discriminator 2
 1671 00e8 BB68     		ldr	r3, [r7, #8]
 1672 00ea 0133     		adds	r3, r3, #1
 1673 00ec BB60     		str	r3, [r7, #8]
 1674              	.L79:
 215:src/translator.c **** 		if ((RAM.diskrets[i] & mask[i]) == 0) {
 1675              		.loc 1 215 2 discriminator 1
 1676 00ee BB68     		ldr	r3, [r7, #8]
 1677 00f0 032B     		cmp	r3, #3
 1678 00f2 8EDD     		ble	.L82
 1679              	.LBE4:
 222:src/translator.c **** 		}
 223:src/translator.c **** 	}
 224:src/translator.c **** 	return rezult;
 1680              		.loc 1 224 9
 1681 00f4 FB68     		ldr	r3, [r7, #12]
 225:src/translator.c **** }
 1682              		.loc 1 225 1
 1683 00f6 1846     		mov	r0, r3
 1684 00f8 1437     		adds	r7, r7, #20
 1685              	.LCFI74:
 1686              		.cfi_def_cfa_offset 4
 1687 00fa BD46     		mov	sp, r7
 1688              	.LCFI75:
 1689              		.cfi_def_cfa_register 13
 1690              		@ sp needed
 1691 00fc 80BC     		pop	{r7}
 1692              	.LCFI76:
 1693              		.cfi_restore 7
 1694              		.cfi_def_cfa_offset 0
 1695 00fe 7047     		bx	lr
 1696              	.L85:
 1697              		.align	2
 1698              	.L84:
 1699 0100 00000000 		.word	RAM
 1700              		.cfi_endproc
 1701              	.LFE39:
 1703              		.section	.rodata
 1704 0011 000000   		.align	2
 1705              	.LC1:
 1706 0014 C2EAEB2E 		.ascii	"\302\352\353. \352\340\355\340\353\340:\000"
 1706      20EAE0ED 
 1706      E0EBE03A 
 1706      00
 1707 0021 000000   		.align	2
 1708              	.LC2:
 1709 0024 C2FBEAEB 		.ascii	"\302\373\352\353. \352\340\355\340\353\340:\000"
 1709      2E20EAE0 
 1709      EDE0EBE0 
 1709      3A00
 1710              		.section	.text.CheckCUSignal,"ax",%progbits
 1711              		.align	1
 1712              		.global	CheckCUSignal
 1713              		.syntax unified
 1714              		.thumb
 1715              		.thumb_func
 1717              	CheckCUSignal:
 1718              	.LFB40:
 226:src/translator.c **** void CheckCUSignal() {
 1719              		.loc 1 226 22
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 304
 1722              		@ frame_needed = 1, uses_anonymous_args = 0
 1723 0000 90B5     		push	{r4, r7, lr}
 1724              	.LCFI77:
 1725              		.cfi_def_cfa_offset 12
 1726              		.cfi_offset 4, -12
 1727              		.cfi_offset 7, -8
 1728              		.cfi_offset 14, -4
 1729 0002 CDB0     		sub	sp, sp, #308
 1730              	.LCFI78:
 1731              		.cfi_def_cfa_offset 320
 1732 0004 00AF     		add	r7, sp, #0
 1733              	.LCFI79:
 1734              		.cfi_def_cfa_register 7
 227:src/translator.c **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 1735              		.loc 1 227 12
 1736 0006 444B     		ldr	r3, .L93
 1737 0008 C7F82831 		str	r3, [r7, #296]
 1738              	.LBB5:
 228:src/translator.c **** 	char buffer[256];
 229:src/translator.c **** 	char minbuf[32];
 230:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 1739              		.loc 1 230 11
 1740 000c 0023     		movs	r3, #0
 1741 000e C7F82C31 		str	r3, [r7, #300]
 1742              		.loc 1 230 2
 1743 0012 77E0     		b	.L87
 1744              	.L91:
 1745              	.LBB6:
 231:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 1746              		.loc 1 231 40
 1747 0014 D7F82811 		ldr	r1, [r7, #296]
 1748 0018 D7F82C21 		ldr	r2, [r7, #300]
 1749 001c 1346     		mov	r3, r2
 1750 001e 5B00     		lsls	r3, r3, #1
 1751 0020 1344     		add	r3, r3, r2
 1752 0022 9B00     		lsls	r3, r3, #2
 1753 0024 0B44     		add	r3, r3, r1
 1754 0026 03F20243 		addw	r3, r3, #1026
 1755 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1756              		.loc 1 231 6
 1757 002c 002B     		cmp	r3, #0
 1758 002e 63D0     		beq	.L92
 232:src/translator.c **** 			continue;
 233:src/translator.c **** 		itoa1(i + 1, minbuf);
 1759              		.loc 1 233 3
 1760 0030 D7F82C31 		ldr	r3, [r7, #300]
 1761 0034 0133     		adds	r3, r3, #1
 1762 0036 3A1D     		adds	r2, r7, #4
 1763 0038 1146     		mov	r1, r2
 1764 003a 1846     		mov	r0, r3
 1765 003c 374B     		ldr	r3, .L93+4
 1766 003e 9847     		blx	r3
 1767              	.LVL2:
 234:src/translator.c **** 		uint8 TempReleInd = pxConfig->devcfg.logica.confCU[i].releNum - 1;
 1768              		.loc 1 234 56
 1769 0040 D7F82811 		ldr	r1, [r7, #296]
 1770 0044 D7F82C21 		ldr	r2, [r7, #300]
 1771 0048 1346     		mov	r3, r2
 1772 004a 5B00     		lsls	r3, r3, #1
 1773 004c 1344     		add	r3, r3, r2
 1774 004e 9B00     		lsls	r3, r3, #2
 1775 0050 0B44     		add	r3, r3, r1
 1776 0052 03F20243 		addw	r3, r3, #1026
 1777 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1778              		.loc 1 234 9
 1779 0058 013B     		subs	r3, r3, #1
 1780 005a 87F82731 		strb	r3, [r7, #295]
 235:src/translator.c **** 		if (GetChannelBitSignal(i, RAM.OutputCommand)
 1781              		.loc 1 235 7
 1782 005e 3049     		ldr	r1, .L93+8
 1783 0060 D7F82C01 		ldr	r0, [r7, #300]
 1784 0064 2F4B     		ldr	r3, .L93+12
 1785 0066 9847     		blx	r3
 1786              	.LVL3:
 1787 0068 0246     		mov	r2, r0
 236:src/translator.c **** 				!= ((RAM.relays[TempReleInd / 16] >> (TempReleInd % 16))
 1788              		.loc 1 236 33
 1789 006a 97F82731 		ldrb	r3, [r7, #295]	@ zero_extendqisi2
 1790 006e 1B09     		lsrs	r3, r3, #4
 1791 0070 DBB2     		uxtb	r3, r3
 1792              		.loc 1 236 20
 1793 0072 2D49     		ldr	r1, .L93+16
 1794 0074 03F50173 		add	r3, r3, #516
 1795 0078 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ unaligned
 1796 007c 9BB2     		uxth	r3, r3
 1797 007e 1946     		mov	r1, r3
 1798              		.loc 1 236 55
 1799 0080 97F82731 		ldrb	r3, [r7, #295]	@ zero_extendqisi2
 1800 0084 03F00F03 		and	r3, r3, #15
 1801              		.loc 1 236 39
 1802 0088 41FA03F3 		asr	r3, r1, r3
 237:src/translator.c **** 						& (0x0001))) {
 1803              		.loc 1 237 7
 1804 008c 03F00103 		and	r3, r3, #1
 235:src/translator.c **** 		if (GetChannelBitSignal(i, RAM.OutputCommand)
 1805              		.loc 1 235 6
 1806 0090 9A42     		cmp	r2, r3
 1807 0092 32D0     		beq	.L89
 238:src/translator.c **** 			if (GetChannelBitSignal(i, RAM.OutputCommand) == 1) {
 1808              		.loc 1 238 8
 1809 0094 2249     		ldr	r1, .L93+8
 1810 0096 D7F82C01 		ldr	r0, [r7, #300]
 1811 009a 224B     		ldr	r3, .L93+12
 1812 009c 9847     		blx	r3
 1813              	.LVL4:
 1814 009e 0346     		mov	r3, r0
 1815              		.loc 1 238 7
 1816 00a0 012B     		cmp	r3, #1
 1817 00a2 14D1     		bne	.L90
 1818              	.LBB7:
 239:src/translator.c **** 				strcpy(buffer, "Вкл. канала:");
 1819              		.loc 1 239 5
 1820 00a4 07F12403 		add	r3, r7, #36
 1821 00a8 204A     		ldr	r2, .L93+20
 1822 00aa 1C46     		mov	r4, r3
 1823 00ac 1346     		mov	r3, r2
 1824 00ae 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1825 00b0 07C4     		stmia	r4!, {r0, r1, r2}
 1826 00b2 2370     		strb	r3, [r4]
 240:src/translator.c **** 				strcat(buffer, minbuf);
 1827              		.loc 1 240 5
 1828 00b4 3A1D     		adds	r2, r7, #4
 1829 00b6 07F12403 		add	r3, r7, #36
 1830 00ba 1146     		mov	r1, r2
 1831 00bc 1846     		mov	r0, r3
 1832 00be 1C4B     		ldr	r3, .L93+24
 1833 00c0 9847     		blx	r3
 1834              	.LVL5:
 241:src/translator.c **** 
 242:src/translator.c **** 				JrnlWrite(buffer);
 1835              		.loc 1 242 5
 1836 00c2 07F12403 		add	r3, r7, #36
 1837 00c6 1846     		mov	r0, r3
 1838 00c8 1A4B     		ldr	r3, .L93+28
 1839 00ca 9847     		blx	r3
 1840              	.LVL6:
 1841              	.LBE7:
 1842 00cc 15E0     		b	.L89
 1843              	.L90:
 1844              	.LBB8:
 243:src/translator.c **** 			} else {
 244:src/translator.c **** 				strcpy(buffer, "Выкл. канала:");
 1845              		.loc 1 244 5
 1846 00ce 07F12403 		add	r3, r7, #36
 1847 00d2 194A     		ldr	r2, .L93+32
 1848 00d4 1C46     		mov	r4, r3
 1849 00d6 1346     		mov	r3, r2
 1850 00d8 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1851 00da 07C4     		stmia	r4!, {r0, r1, r2}
 1852 00dc 2380     		strh	r3, [r4]	@ movhi
 245:src/translator.c **** 				strcat(buffer, minbuf);
 1853              		.loc 1 245 5
 1854 00de 3A1D     		adds	r2, r7, #4
 1855 00e0 07F12403 		add	r3, r7, #36
 1856 00e4 1146     		mov	r1, r2
 1857 00e6 1846     		mov	r0, r3
 1858 00e8 114B     		ldr	r3, .L93+24
 1859 00ea 9847     		blx	r3
 1860              	.LVL7:
 246:src/translator.c **** 				JrnlWrite(buffer);
 1861              		.loc 1 246 5
 1862 00ec 07F12403 		add	r3, r7, #36
 1863 00f0 1846     		mov	r0, r3
 1864 00f2 104B     		ldr	r3, .L93+28
 1865 00f4 9847     		blx	r3
 1866              	.LVL8:
 1867 00f6 00E0     		b	.L89
 1868              	.L92:
 1869              	.LBE8:
 232:src/translator.c **** 		itoa1(i + 1, minbuf);
 1870              		.loc 1 232 4
 1871 00f8 00BF     		nop
 1872              	.L89:
 1873              	.LBE6:
 230:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 1874              		.loc 1 230 26 discriminator 2
 1875 00fa D7F82C31 		ldr	r3, [r7, #300]
 1876 00fe 0133     		adds	r3, r3, #1
 1877 0100 C7F82C31 		str	r3, [r7, #300]
 1878              	.L87:
 230:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 1879              		.loc 1 230 2 discriminator 1
 1880 0104 D7F82C31 		ldr	r3, [r7, #300]
 1881 0108 072B     		cmp	r3, #7
 1882 010a 83DD     		ble	.L91
 1883              	.LBE5:
 247:src/translator.c **** 			}
 248:src/translator.c **** 		}
 249:src/translator.c **** 	}
 250:src/translator.c **** }
 1884              		.loc 1 250 1
 1885 010c 00BF     		nop
 1886 010e 00BF     		nop
 1887 0110 07F59A77 		add	r7, r7, #308
 1888              	.LCFI80:
 1889              		.cfi_def_cfa_offset 12
 1890 0114 BD46     		mov	sp, r7
 1891              	.LCFI81:
 1892              		.cfi_def_cfa_register 13
 1893              		@ sp needed
 1894 0116 90BD     		pop	{r4, r7, pc}
 1895              	.L94:
 1896              		.align	2
 1897              	.L93:
 1898 0118 00B00208 		.word	134393856
 1899 011c 00000000 		.word	itoa1
 1900 0120 04000000 		.word	RAM+4
 1901 0124 00000000 		.word	GetChannelBitSignal
 1902 0128 00000000 		.word	RAM
 1903 012c 14000000 		.word	.LC1
 1904 0130 00000000 		.word	strcat
 1905 0134 00000000 		.word	JrnlWrite
 1906 0138 24000000 		.word	.LC2
 1907              		.cfi_endproc
 1908              	.LFE40:
 1910              		.global	NeedWrite
 1911              		.section	.bss.NeedWrite,"aw",%nobits
 1914              	NeedWrite:
 1915 0000 00       		.space	1
 1916              		.global	message
 1917              		.section	.bss.message,"aw",%nobits
 1918              		.align	2
 1921              	message:
 1922 0000 00000000 		.space	30
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1923              		.section	.rodata
 1924 0032 0000     		.align	2
 1925              	.LC3:
 1926 0034 CEF82E20 		.ascii	"\316\370. \357\350\362\340\355\350\377\000"
 1926      EFE8F2E0 
 1926      EDE8FF00 
 1927              		.align	2
 1928              	.LC4:
 1929 0040 CEF82E20 		.ascii	"\316\370. \366\345\357. \363\357\360.\000"
 1929      F6E5EF2E 
 1929      20F3EFF0 
 1929      2E00
 1930 004e 0000     		.align	2
 1931              	.LC5:
 1932 0050 C4E2E5F0 		.ascii	"\304\342\345\360\374 \356\362\352\360\373\362\340\000"
 1932      FC20EEF2 
 1932      EAF0FBF2 
 1932      E000
 1933 005e 0000     		.align	2
 1934              	.LC6:
 1935 0060 CEF82E20 		.ascii	"\316\370. \363\357\360\340\342\353\000"
 1935      F3EFF0E0 
 1935      E2EB00
 1936 006b 00       		.align	2
 1937              	.LC7:
 1938 006c CEF82E20 		.ascii	"\316\370. \357\360\345\344\356\365\360.\000"
 1938      EFF0E5E4 
 1938      EEF5F02E 
 1938      00
 1939 0079 000000   		.align	2
 1940              	.LC8:
 1941 007c CDE5E8E7 		.ascii	"\315\345\350\347\342 \356\370\350\341\352\340!\000"
 1941      E220EEF8 
 1941      E8E1EAE0 
 1941      2100
 1942 008a 0000     		.align	2
 1943              	.LC9:
 1944 008c CDEEF0EC 		.ascii	"\315\356\360\354\340 \357\350\362\340\355\350\345\000"
 1944      E020EFE8 
 1944      F2E0EDE8 
 1944      E500
 1945 009a 0000     		.align	2
 1946              	.LC10:
 1947 009c CDEEF0EC 		.ascii	"\315\356\360\354\340 \366\345\357.\363\357\360.\000"
 1947      E020F6E5 
 1947      EF2EF3EF 
 1947      F02E00
 1948 00ab 00       		.align	2
 1949              	.LC11:
 1950 00ac C4E2E5F0 		.ascii	"\304\342\345\360\374 \347\340\352\360\373\362\340\000"
 1950      FC20E7E0 
 1950      EAF0FBF2 
 1950      E000
 1951 00ba 0000     		.align	2
 1952              	.LC12:
 1953 00bc CDEEF0EC 		.ascii	"\315\356\360\354\340 \363\357\360.\000"
 1953      E020F3EF 
 1953      F02E00
 1954 00c7 00       		.align	2
 1955              	.LC13:
 1956 00c8 CDEEF0EC 		.ascii	"\315\356\360\354\340 \357\360\345\344\356\365\360.\000"
 1956      E020EFF0 
 1956      E5E4EEF5 
 1956      F02E00
 1957 00d7 00       		.align	2
 1958              	.LC14:
 1959 00d8 CDE5E8E7 		.ascii	"\315\345\350\347\342 \355\356\360\354\340\000"
 1959      E220EDEE 
 1959      F0ECE000 
 1960              		.section	.text.CheckErrors,"ax",%progbits
 1961              		.align	1
 1962              		.global	CheckErrors
 1963              		.syntax unified
 1964              		.thumb
 1965              		.thumb_func
 1967              	CheckErrors:
 1968              	.LFB41:
 251:src/translator.c **** bool NeedWrite = false;
 252:src/translator.c **** char message[30];
 253:src/translator.c **** void CheckErrors() {
 1969              		.loc 1 253 20
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 8
 1972              		@ frame_needed = 1, uses_anonymous_args = 0
 1973 0000 90B5     		push	{r4, r7, lr}
 1974              	.LCFI82:
 1975              		.cfi_def_cfa_offset 12
 1976              		.cfi_offset 4, -12
 1977              		.cfi_offset 7, -8
 1978              		.cfi_offset 14, -4
 1979 0002 83B0     		sub	sp, sp, #12
 1980              	.LCFI83:
 1981              		.cfi_def_cfa_offset 24
 1982 0004 00AF     		add	r7, sp, #0
 1983              	.LCFI84:
 1984              		.cfi_def_cfa_register 7
 254:src/translator.c **** 
 255:src/translator.c **** 	uint8 diffMask;
 256:src/translator.c **** 	if (prevLogicFlags != RAM.LogicErrorFlags) {
 1985              		.loc 1 256 27
 1986 0006 764B     		ldr	r3, .L118
 1987 0008 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 1988              		.loc 1 256 21
 1989 000a 764B     		ldr	r3, .L118+4
 1990 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1991              		.loc 1 256 5
 1992 000e 9A42     		cmp	r2, r3
 1993 0010 00F0E180 		beq	.L116
 257:src/translator.c **** 		diffMask = (prevLogicFlags) ^ (RAM.LogicErrorFlags);
 1994              		.loc 1 257 37
 1995 0014 724B     		ldr	r3, .L118
 1996 0016 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 1997              		.loc 1 257 12
 1998 0018 724B     		ldr	r3, .L118+4
 1999 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2000 001c 5340     		eors	r3, r3, r2
 2001 001e FB70     		strb	r3, [r7, #3]
 2002              	.LBB9:
 258:src/translator.c **** 
 259:src/translator.c **** 		for (int i = 0; i < 8; i++) {
 2003              		.loc 1 259 12
 2004 0020 0023     		movs	r3, #0
 2005 0022 7B60     		str	r3, [r7, #4]
 2006              		.loc 1 259 3
 2007 0024 CFE0     		b	.L97
 2008              	.L115:
 260:src/translator.c **** 			if (((diffMask >> i) & 0x01) == 0x01) {
 2009              		.loc 1 260 19
 2010 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2011 0028 7B68     		ldr	r3, [r7, #4]
 2012 002a 42FA03F3 		asr	r3, r2, r3
 2013              		.loc 1 260 25
 2014 002e 03F00103 		and	r3, r3, #1
 2015              		.loc 1 260 7
 2016 0032 002B     		cmp	r3, #0
 2017 0034 00F0C380 		beq	.L117
 261:src/translator.c **** 				if (((RAM.LogicErrorFlags >> i) & 0x01) == 0x01) {
 2018              		.loc 1 261 14
 2019 0038 694B     		ldr	r3, .L118
 2020 003a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2021 003c 1A46     		mov	r2, r3
 2022              		.loc 1 261 31
 2023 003e 7B68     		ldr	r3, [r7, #4]
 2024 0040 42FA03F3 		asr	r3, r2, r3
 2025              		.loc 1 261 37
 2026 0044 03F00103 		and	r3, r3, #1
 2027              		.loc 1 261 8
 2028 0048 002B     		cmp	r3, #0
 2029 004a 58D0     		beq	.L99
 262:src/translator.c **** 					switch (i) {
 2030              		.loc 1 262 6
 2031 004c 7B68     		ldr	r3, [r7, #4]
 2032 004e 042B     		cmp	r3, #4
 2033 0050 49D8     		bhi	.L100
 2034 0052 01A2     		adr	r2, .L102
 2035 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2036              		.p2align 2
 2037              	.L102:
 2038 0058 6D000000 		.word	.L106+1
 2039 005c 83000000 		.word	.L105+1
 2040 0060 9B000000 		.word	.L104+1
 2041 0064 B3000000 		.word	.L103+1
 2042 0068 CF000000 		.word	.L101+1
 2043              		.p2align 1
 2044              	.L106:
 2045              	.LBB10:
 263:src/translator.c **** 					case 0:
 264:src/translator.c **** 						strcpy(message, "Ош. питания");
 2046              		.loc 1 264 7
 2047 006c 5E4B     		ldr	r3, .L118+8
 2048 006e 5F4A     		ldr	r2, .L118+12
 2049 0070 07CA     		ldm	r2, {r0, r1, r2}
 2050 0072 83E80700 		stm	r3, {r0, r1, r2}
 265:src/translator.c **** 						NeedWrite = true;
 2051              		.loc 1 265 17
 2052 0076 5E4B     		ldr	r3, .L118+16
 2053 0078 0122     		movs	r2, #1
 2054 007a 1A70     		strb	r2, [r3]
 266:src/translator.c **** 						CheckDiscretsErrors();
 2055              		.loc 1 266 7
 2056 007c 5D4B     		ldr	r3, .L118+20
 2057 007e 9847     		blx	r3
 2058              	.LVL9:
 267:src/translator.c **** 						break;
 2059              		.loc 1 267 7
 2060 0080 9EE0     		b	.L98
 2061              	.L105:
 268:src/translator.c **** 					case 1:
 269:src/translator.c **** 						strcpy(message, "Ош. цеп. упр.");
 2062              		.loc 1 269 7
 2063 0082 594A     		ldr	r2, .L118+8
 2064 0084 5C4B     		ldr	r3, .L118+24
 2065 0086 1446     		mov	r4, r2
 2066 0088 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2067 008a 07C4     		stmia	r4!, {r0, r1, r2}
 2068 008c 2380     		strh	r3, [r4]	@ movhi
 270:src/translator.c **** 						NeedWrite = true;
 2069              		.loc 1 270 17
 2070 008e 584B     		ldr	r3, .L118+16
 2071 0090 0122     		movs	r2, #1
 2072 0092 1A70     		strb	r2, [r3]
 271:src/translator.c **** 						CheckDiscretsErrors();
 2073              		.loc 1 271 7
 2074 0094 574B     		ldr	r3, .L118+20
 2075 0096 9847     		blx	r3
 2076              	.LVL10:
 272:src/translator.c **** 						break;
 2077              		.loc 1 272 7
 2078 0098 92E0     		b	.L98
 2079              	.L104:
 273:src/translator.c **** 					case 2:
 274:src/translator.c **** 						strcpy(message, "Дверь открыта");
 2080              		.loc 1 274 7
 2081 009a 534A     		ldr	r2, .L118+8
 2082 009c 574B     		ldr	r3, .L118+28
 2083 009e 1446     		mov	r4, r2
 2084 00a0 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2085 00a2 07C4     		stmia	r4!, {r0, r1, r2}
 2086 00a4 2380     		strh	r3, [r4]	@ movhi
 275:src/translator.c **** 						NeedWrite = true;
 2087              		.loc 1 275 17
 2088 00a6 524B     		ldr	r3, .L118+16
 2089 00a8 0122     		movs	r2, #1
 2090 00aa 1A70     		strb	r2, [r3]
 276:src/translator.c **** 						CheckDiscretsErrors();
 2091              		.loc 1 276 7
 2092 00ac 514B     		ldr	r3, .L118+20
 2093 00ae 9847     		blx	r3
 2094              	.LVL11:
 277:src/translator.c **** 						break;
 2095              		.loc 1 277 7
 2096 00b0 86E0     		b	.L98
 2097              	.L103:
 278:src/translator.c **** 					case 3:
 279:src/translator.c **** 						strcpy(message, "Ош. управл");
 2098              		.loc 1 279 7
 2099 00b2 4D4B     		ldr	r3, .L118+8
 2100 00b4 524A     		ldr	r2, .L118+32
 2101 00b6 07CA     		ldm	r2, {r0, r1, r2}
 2102 00b8 03C3     		stmia	r3!, {r0, r1}
 2103 00ba 1A80     		strh	r2, [r3]	@ movhi
 2104 00bc 0233     		adds	r3, r3, #2
 2105 00be 120C     		lsrs	r2, r2, #16
 2106 00c0 1A70     		strb	r2, [r3]
 280:src/translator.c **** 						NeedWrite = true;
 2107              		.loc 1 280 17
 2108 00c2 4B4B     		ldr	r3, .L118+16
 2109 00c4 0122     		movs	r2, #1
 2110 00c6 1A70     		strb	r2, [r3]
 281:src/translator.c **** 						CheckDiscretsErrors();
 2111              		.loc 1 281 7
 2112 00c8 4A4B     		ldr	r3, .L118+20
 2113 00ca 9847     		blx	r3
 2114              	.LVL12:
 282:src/translator.c **** 						break;
 2115              		.loc 1 282 7
 2116 00cc 78E0     		b	.L98
 2117              	.L101:
 283:src/translator.c **** 					case 4:
 284:src/translator.c **** 						strcpy(message, "Ош. предохр.");
 2118              		.loc 1 284 7
 2119 00ce 464A     		ldr	r2, .L118+8
 2120 00d0 4C4B     		ldr	r3, .L118+36
 2121 00d2 1446     		mov	r4, r2
 2122 00d4 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2123 00d6 07C4     		stmia	r4!, {r0, r1, r2}
 2124 00d8 2370     		strb	r3, [r4]
 285:src/translator.c **** 						NeedWrite = true;
 2125              		.loc 1 285 17
 2126 00da 454B     		ldr	r3, .L118+16
 2127 00dc 0122     		movs	r2, #1
 2128 00de 1A70     		strb	r2, [r3]
 286:src/translator.c **** 						CheckDiscretsErrors();
 2129              		.loc 1 286 7
 2130 00e0 444B     		ldr	r3, .L118+20
 2131 00e2 9847     		blx	r3
 2132              	.LVL13:
 287:src/translator.c **** 						break;
 2133              		.loc 1 287 7
 2134 00e4 6CE0     		b	.L98
 2135              	.L100:
 288:src/translator.c **** 					default:
 289:src/translator.c **** 						strcpy(message, "Неизв ошибка!");
 2136              		.loc 1 289 7
 2137 00e6 404A     		ldr	r2, .L118+8
 2138 00e8 474B     		ldr	r3, .L118+40
 2139 00ea 1446     		mov	r4, r2
 2140 00ec 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2141 00ee 07C4     		stmia	r4!, {r0, r1, r2}
 2142 00f0 2380     		strh	r3, [r4]	@ movhi
 290:src/translator.c **** 						NeedWrite = true;
 2143              		.loc 1 290 17
 2144 00f2 3F4B     		ldr	r3, .L118+16
 2145 00f4 0122     		movs	r2, #1
 2146 00f6 1A70     		strb	r2, [r3]
 291:src/translator.c **** 						CheckDiscretsErrors();
 2147              		.loc 1 291 7
 2148 00f8 3E4B     		ldr	r3, .L118+20
 2149 00fa 9847     		blx	r3
 2150              	.LVL14:
 292:src/translator.c **** 						break;
 2151              		.loc 1 292 7
 2152 00fc 60E0     		b	.L98
 2153              	.L99:
 2154              	.LBE10:
 293:src/translator.c **** 					}
 294:src/translator.c **** 				} else {
 295:src/translator.c **** 					switch (i) {
 2155              		.loc 1 295 6
 2156 00fe 7B68     		ldr	r3, [r7, #4]
 2157 0100 042B     		cmp	r3, #4
 2158 0102 51D8     		bhi	.L108
 2159 0104 01A2     		adr	r2, .L110
 2160 0106 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2161 010a 00BF     		.p2align 2
 2162              	.L110:
 2163 010c 21010000 		.word	.L114+1
 2164 0110 39010000 		.word	.L113+1
 2165 0114 57010000 		.word	.L112+1
 2166 0118 6F010000 		.word	.L111+1
 2167 011c 8B010000 		.word	.L109+1
 2168              		.p2align 1
 2169              	.L114:
 2170              	.LBB11:
 296:src/translator.c **** 					case 0:
 297:src/translator.c **** 						strcpy(message, "Норма питание");
 2171              		.loc 1 297 7
 2172 0120 314A     		ldr	r2, .L118+8
 2173 0122 3A4B     		ldr	r3, .L118+44
 2174 0124 1446     		mov	r4, r2
 2175 0126 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2176 0128 07C4     		stmia	r4!, {r0, r1, r2}
 2177 012a 2380     		strh	r3, [r4]	@ movhi
 298:src/translator.c **** 						NeedWrite = true;
 2178              		.loc 1 298 17
 2179 012c 304B     		ldr	r3, .L118+16
 2180 012e 0122     		movs	r2, #1
 2181 0130 1A70     		strb	r2, [r3]
 299:src/translator.c **** 						CheckDiscretsErrors();
 2182              		.loc 1 299 7
 2183 0132 304B     		ldr	r3, .L118+20
 2184 0134 9847     		blx	r3
 2185              	.LVL15:
 300:src/translator.c **** 						break;
 2186              		.loc 1 300 7
 2187 0136 43E0     		b	.L98
 2188              	.L113:
 301:src/translator.c **** 					case 1:
 302:src/translator.c **** 						strcpy(message, "Норма цеп.упр.");
 2189              		.loc 1 302 7
 2190 0138 2B4A     		ldr	r2, .L118+8
 2191 013a 354B     		ldr	r3, .L118+48
 2192 013c 1446     		mov	r4, r2
 2193 013e 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2194 0140 07C4     		stmia	r4!, {r0, r1, r2}
 2195 0142 2380     		strh	r3, [r4]	@ movhi
 2196 0144 0234     		adds	r4, r4, #2
 2197 0146 1B0C     		lsrs	r3, r3, #16
 2198 0148 2370     		strb	r3, [r4]
 303:src/translator.c **** 						NeedWrite = true;
 2199              		.loc 1 303 17
 2200 014a 294B     		ldr	r3, .L118+16
 2201 014c 0122     		movs	r2, #1
 2202 014e 1A70     		strb	r2, [r3]
 304:src/translator.c **** 						CheckDiscretsErrors();
 2203              		.loc 1 304 7
 2204 0150 284B     		ldr	r3, .L118+20
 2205 0152 9847     		blx	r3
 2206              	.LVL16:
 305:src/translator.c **** 						break;
 2207              		.loc 1 305 7
 2208 0154 34E0     		b	.L98
 2209              	.L112:
 306:src/translator.c **** 					case 2:
 307:src/translator.c **** 						strcpy(message, "Дверь закрыта");
 2210              		.loc 1 307 7
 2211 0156 244A     		ldr	r2, .L118+8
 2212 0158 2E4B     		ldr	r3, .L118+52
 2213 015a 1446     		mov	r4, r2
 2214 015c 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2215 015e 07C4     		stmia	r4!, {r0, r1, r2}
 2216 0160 2380     		strh	r3, [r4]	@ movhi
 308:src/translator.c **** 						NeedWrite = true;
 2217              		.loc 1 308 17
 2218 0162 234B     		ldr	r3, .L118+16
 2219 0164 0122     		movs	r2, #1
 2220 0166 1A70     		strb	r2, [r3]
 309:src/translator.c **** 						CheckDiscretsErrors();
 2221              		.loc 1 309 7
 2222 0168 224B     		ldr	r3, .L118+20
 2223 016a 9847     		blx	r3
 2224              	.LVL17:
 310:src/translator.c **** 						break;
 2225              		.loc 1 310 7
 2226 016c 28E0     		b	.L98
 2227              	.L111:
 311:src/translator.c **** 					case 3:
 312:src/translator.c **** 						strcpy(message, "Норма упр.");
 2228              		.loc 1 312 7
 2229 016e 1E4B     		ldr	r3, .L118+8
 2230 0170 294A     		ldr	r2, .L118+56
 2231 0172 07CA     		ldm	r2, {r0, r1, r2}
 2232 0174 03C3     		stmia	r3!, {r0, r1}
 2233 0176 1A80     		strh	r2, [r3]	@ movhi
 2234 0178 0233     		adds	r3, r3, #2
 2235 017a 120C     		lsrs	r2, r2, #16
 2236 017c 1A70     		strb	r2, [r3]
 313:src/translator.c **** 						NeedWrite = true;
 2237              		.loc 1 313 17
 2238 017e 1C4B     		ldr	r3, .L118+16
 2239 0180 0122     		movs	r2, #1
 2240 0182 1A70     		strb	r2, [r3]
 314:src/translator.c **** 						CheckDiscretsErrors();
 2241              		.loc 1 314 7
 2242 0184 1B4B     		ldr	r3, .L118+20
 2243 0186 9847     		blx	r3
 2244              	.LVL18:
 315:src/translator.c **** 						break;
 2245              		.loc 1 315 7
 2246 0188 1AE0     		b	.L98
 2247              	.L109:
 316:src/translator.c **** 					case 4:
 317:src/translator.c **** 						strcpy(message, "Норма предохр.");
 2248              		.loc 1 317 7
 2249 018a 174A     		ldr	r2, .L118+8
 2250 018c 234B     		ldr	r3, .L118+60
 2251 018e 1446     		mov	r4, r2
 2252 0190 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2253 0192 07C4     		stmia	r4!, {r0, r1, r2}
 2254 0194 2380     		strh	r3, [r4]	@ movhi
 2255 0196 0234     		adds	r4, r4, #2
 2256 0198 1B0C     		lsrs	r3, r3, #16
 2257 019a 2370     		strb	r3, [r4]
 318:src/translator.c **** 						NeedWrite = true;
 2258              		.loc 1 318 17
 2259 019c 144B     		ldr	r3, .L118+16
 2260 019e 0122     		movs	r2, #1
 2261 01a0 1A70     		strb	r2, [r3]
 319:src/translator.c **** 						CheckDiscretsErrors();
 2262              		.loc 1 319 7
 2263 01a2 144B     		ldr	r3, .L118+20
 2264 01a4 9847     		blx	r3
 2265              	.LVL19:
 320:src/translator.c **** 						break;
 2266              		.loc 1 320 7
 2267 01a6 0BE0     		b	.L98
 2268              	.L108:
 321:src/translator.c **** 					default:
 322:src/translator.c **** 						strcpy(message, "Неизв норма");
 2269              		.loc 1 322 7
 2270 01a8 0F4B     		ldr	r3, .L118+8
 2271 01aa 1D4A     		ldr	r2, .L118+64
 2272 01ac 07CA     		ldm	r2, {r0, r1, r2}
 2273 01ae 83E80700 		stm	r3, {r0, r1, r2}
 323:src/translator.c **** 						NeedWrite = true;
 2274              		.loc 1 323 17
 2275 01b2 0F4B     		ldr	r3, .L118+16
 2276 01b4 0122     		movs	r2, #1
 2277 01b6 1A70     		strb	r2, [r3]
 324:src/translator.c **** 						CheckDiscretsErrors();
 2278              		.loc 1 324 7
 2279 01b8 0E4B     		ldr	r3, .L118+20
 2280 01ba 9847     		blx	r3
 2281              	.LVL20:
 325:src/translator.c **** 						break;
 2282              		.loc 1 325 7
 2283 01bc 00E0     		b	.L98
 2284              	.L117:
 2285              	.LBE11:
 326:src/translator.c **** 					}
 327:src/translator.c **** 				}
 2286              		.loc 1 327 5
 2287 01be 00BF     		nop
 2288              	.L98:
 259:src/translator.c **** 			if (((diffMask >> i) & 0x01) == 0x01) {
 2289              		.loc 1 259 27 discriminator 2
 2290 01c0 7B68     		ldr	r3, [r7, #4]
 2291 01c2 0133     		adds	r3, r3, #1
 2292 01c4 7B60     		str	r3, [r7, #4]
 2293              	.L97:
 259:src/translator.c **** 			if (((diffMask >> i) & 0x01) == 0x01) {
 2294              		.loc 1 259 3 discriminator 1
 2295 01c6 7B68     		ldr	r3, [r7, #4]
 2296 01c8 072B     		cmp	r3, #7
 2297 01ca 7FF72CAF 		ble	.L115
 2298              	.LBE9:
 328:src/translator.c **** 			}
 329:src/translator.c **** 		}
 330:src/translator.c **** 		prevLogicFlags = RAM.LogicErrorFlags;
 2299              		.loc 1 330 23
 2300 01ce 044B     		ldr	r3, .L118
 2301 01d0 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 2302              		.loc 1 330 18
 2303 01d2 044B     		ldr	r3, .L118+4
 2304 01d4 1A70     		strb	r2, [r3]
 2305              	.L116:
 331:src/translator.c **** 	}
 332:src/translator.c **** }
 2306              		.loc 1 332 1
 2307 01d6 00BF     		nop
 2308 01d8 0C37     		adds	r7, r7, #12
 2309              	.LCFI85:
 2310              		.cfi_def_cfa_offset 12
 2311 01da BD46     		mov	sp, r7
 2312              	.LCFI86:
 2313              		.cfi_def_cfa_register 13
 2314              		@ sp needed
 2315 01dc 90BD     		pop	{r4, r7, pc}
 2316              	.L119:
 2317 01de 00BF     		.align	2
 2318              	.L118:
 2319 01e0 00000000 		.word	RAM
 2320 01e4 00000000 		.word	prevLogicFlags
 2321 01e8 00000000 		.word	message
 2322 01ec 34000000 		.word	.LC3
 2323 01f0 00000000 		.word	NeedWrite
 2324 01f4 00000000 		.word	CheckDiscretsErrors
 2325 01f8 40000000 		.word	.LC4
 2326 01fc 50000000 		.word	.LC5
 2327 0200 60000000 		.word	.LC6
 2328 0204 6C000000 		.word	.LC7
 2329 0208 7C000000 		.word	.LC8
 2330 020c 8C000000 		.word	.LC9
 2331 0210 9C000000 		.word	.LC10
 2332 0214 AC000000 		.word	.LC11
 2333 0218 BC000000 		.word	.LC12
 2334 021c C8000000 		.word	.LC13
 2335 0220 D8000000 		.word	.LC14
 2336              		.cfi_endproc
 2337              	.LFE41:
 2339              		.section	.rodata
 2340              		.align	2
 2341              	.LC15:
 2342 00e4 C43A00   		.ascii	"\304:\000"
 2343 00e7 00       		.align	2
 2344              	.LC16:
 2345 00e8 2830293A 		.ascii	"(0):\000"
 2345      00
 2346 00ed 000000   		.align	2
 2347              	.LC17:
 2348 00f0 2831293A 		.ascii	"(1):\000"
 2348      00
 2349              		.section	.text.CheckDiscretsErrors,"ax",%progbits
 2350              		.align	1
 2351              		.global	CheckDiscretsErrors
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2356              	CheckDiscretsErrors:
 2357              	.LFB42:
 333:src/translator.c **** 
 334:src/translator.c **** void CheckDiscretsErrors() {
 2358              		.loc 1 334 28
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 88
 2361              		@ frame_needed = 1, uses_anonymous_args = 0
 2362 0000 80B5     		push	{r7, lr}
 2363              	.LCFI87:
 2364              		.cfi_def_cfa_offset 8
 2365              		.cfi_offset 7, -8
 2366              		.cfi_offset 14, -4
 2367 0002 96B0     		sub	sp, sp, #88
 2368              	.LCFI88:
 2369              		.cfi_def_cfa_offset 96
 2370 0004 00AF     		add	r7, sp, #0
 2371              	.LCFI89:
 2372              		.cfi_def_cfa_register 7
 335:src/translator.c **** 	uint16 diffMask = 0;
 2373              		.loc 1 335 9
 2374 0006 0023     		movs	r3, #0
 2375 0008 A7F84E30 		strh	r3, [r7, #78]	@ movhi
 2376              	.LBB12:
 336:src/translator.c **** 	char buffer[64];
 337:src/translator.c **** 	char conv_buf[8];
 338:src/translator.c **** 	for (int it = 0; it < 4; it++)
 2377              		.loc 1 338 11
 2378 000c 0023     		movs	r3, #0
 2379 000e 7B65     		str	r3, [r7, #84]
 2380              		.loc 1 338 2
 2381 0010 B8E0     		b	.L121
 2382              	.L127:
 339:src/translator.c **** 		if (prevErrDiscretLogic[it] != RAM.ErrorDiscretLogic[it]) {
 2383              		.loc 1 339 26
 2384 0012 674A     		ldr	r2, .L129
 2385 0014 7B6D     		ldr	r3, [r7, #84]
 2386 0016 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 2387              		.loc 1 339 55
 2388 001a 6649     		ldr	r1, .L129+4
 2389 001c 7B6D     		ldr	r3, [r7, #84]
 2390 001e 03F54173 		add	r3, r3, #772
 2391 0022 5B00     		lsls	r3, r3, #1
 2392 0024 0B44     		add	r3, r3, r1
 2393 0026 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 2394 0028 9BB2     		uxth	r3, r3
 2395              		.loc 1 339 6
 2396 002a 9A42     		cmp	r2, r3
 2397 002c 00F0A780 		beq	.L122
 340:src/translator.c **** 			diffMask = prevErrDiscretLogic[it] ^ RAM.ErrorDiscretLogic[it];
 2398              		.loc 1 340 34
 2399 0030 5F4A     		ldr	r2, .L129
 2400 0032 7B6D     		ldr	r3, [r7, #84]
 2401 0034 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 2402              		.loc 1 340 62
 2403 0038 5E49     		ldr	r1, .L129+4
 2404 003a 7B6D     		ldr	r3, [r7, #84]
 2405 003c 03F54173 		add	r3, r3, #772
 2406 0040 5B00     		lsls	r3, r3, #1
 2407 0042 0B44     		add	r3, r3, r1
 2408 0044 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 2409 0046 9BB2     		uxth	r3, r3
 2410              		.loc 1 340 13
 2411 0048 5340     		eors	r3, r3, r2
 2412 004a A7F84E30 		strh	r3, [r7, #78]	@ movhi
 2413              	.LBB13:
 341:src/translator.c **** 
 342:src/translator.c **** 			for (int i = 0; i < 11; i++) {
 2414              		.loc 1 342 13
 2415 004e 0023     		movs	r3, #0
 2416 0050 3B65     		str	r3, [r7, #80]
 2417              		.loc 1 342 4
 2418 0052 84E0     		b	.L123
 2419              	.L126:
 343:src/translator.c **** 				if ((diffMask >> i) & 0x0001 == 0x0001) {
 2420              		.loc 1 343 19
 2421 0054 B7F84E20 		ldrh	r2, [r7, #78]
 2422 0058 3B6D     		ldr	r3, [r7, #80]
 2423 005a 42FA03F3 		asr	r3, r2, r3
 2424              		.loc 1 343 25
 2425 005e 03F00103 		and	r3, r3, #1
 2426              		.loc 1 343 8
 2427 0062 002B     		cmp	r3, #0
 2428 0064 78D0     		beq	.L124
 344:src/translator.c **** 					if ((RAM.ErrorDiscretLogic[it] >> i) & 0x0001 == 0x0001) {
 2429              		.loc 1 344 32
 2430 0066 534A     		ldr	r2, .L129+4
 2431 0068 7B6D     		ldr	r3, [r7, #84]
 2432 006a 03F54173 		add	r3, r3, #772
 2433 006e 5B00     		lsls	r3, r3, #1
 2434 0070 1344     		add	r3, r3, r2
 2435 0072 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 2436 0074 9BB2     		uxth	r3, r3
 2437 0076 1A46     		mov	r2, r3
 2438              		.loc 1 344 37
 2439 0078 3B6D     		ldr	r3, [r7, #80]
 2440 007a 42FA03F3 		asr	r3, r2, r3
 2441              		.loc 1 344 43
 2442 007e 03F00103 		and	r3, r3, #1
 2443              		.loc 1 344 9
 2444 0082 002B     		cmp	r3, #0
 2445 0084 34D0     		beq	.L125
 2446              	.LBB14:
 345:src/translator.c **** 						strcpy(buffer, "Д:");
 2447              		.loc 1 345 7
 2448 0086 07F10C03 		add	r3, r7, #12
 2449 008a 4B4A     		ldr	r2, .L129+8
 2450 008c 1268     		ldr	r2, [r2]
 2451 008e 1146     		mov	r1, r2	@ movhi
 2452 0090 1980     		strh	r1, [r3]	@ movhi
 2453 0092 0233     		adds	r3, r3, #2
 2454 0094 120C     		lsrs	r2, r2, #16
 2455 0096 1A70     		strb	r2, [r3]
 346:src/translator.c **** 						itoa1(i + 1, conv_buf);
 2456              		.loc 1 346 7
 2457 0098 3B6D     		ldr	r3, [r7, #80]
 2458 009a 0133     		adds	r3, r3, #1
 2459 009c 3A1D     		adds	r2, r7, #4
 2460 009e 1146     		mov	r1, r2
 2461 00a0 1846     		mov	r0, r3
 2462 00a2 464B     		ldr	r3, .L129+12
 2463 00a4 9847     		blx	r3
 2464              	.LVL21:
 347:src/translator.c **** 						strcat(buffer, conv_buf);
 2465              		.loc 1 347 7
 2466 00a6 3A1D     		adds	r2, r7, #4
 2467 00a8 07F10C03 		add	r3, r7, #12
 2468 00ac 1146     		mov	r1, r2
 2469 00ae 1846     		mov	r0, r3
 2470 00b0 434B     		ldr	r3, .L129+16
 2471 00b2 9847     		blx	r3
 2472              	.LVL22:
 348:src/translator.c **** 						strcat(buffer, "(0):");
 2473              		.loc 1 348 7
 2474 00b4 07F10C03 		add	r3, r7, #12
 2475 00b8 1846     		mov	r0, r3
 2476 00ba 424B     		ldr	r3, .L129+20
 2477 00bc 9847     		blx	r3
 2478              	.LVL23:
 2479 00be 0346     		mov	r3, r0
 2480 00c0 1A46     		mov	r2, r3
 2481 00c2 07F10C03 		add	r3, r7, #12
 2482 00c6 1344     		add	r3, r3, r2
 2483 00c8 3F4A     		ldr	r2, .L129+24
 2484 00ca 1068     		ldr	r0, [r2]
 2485 00cc 1860     		str	r0, [r3]	@ unaligned
 2486 00ce 1279     		ldrb	r2, [r2, #4]
 2487 00d0 1A71     		strb	r2, [r3, #4]
 349:src/translator.c **** 						strcat(buffer, message);
 2488              		.loc 1 349 7
 2489 00d2 07F10C03 		add	r3, r7, #12
 2490 00d6 3D49     		ldr	r1, .L129+28
 2491 00d8 1846     		mov	r0, r3
 2492 00da 394B     		ldr	r3, .L129+16
 2493 00dc 9847     		blx	r3
 2494              	.LVL24:
 350:src/translator.c **** 						JrnlWrite(buffer);
 2495              		.loc 1 350 7
 2496 00de 07F10C03 		add	r3, r7, #12
 2497 00e2 1846     		mov	r0, r3
 2498 00e4 3A4B     		ldr	r3, .L129+32
 2499 00e6 9847     		blx	r3
 2500              	.LVL25:
 351:src/translator.c **** 						NeedWrite = false;
 2501              		.loc 1 351 17
 2502 00e8 3A4B     		ldr	r3, .L129+36
 2503 00ea 0022     		movs	r2, #0
 2504 00ec 1A70     		strb	r2, [r3]
 2505              	.LBE14:
 2506 00ee 33E0     		b	.L124
 2507              	.L125:
 2508              	.LBB15:
 352:src/translator.c **** 
 353:src/translator.c **** 					} else {
 354:src/translator.c **** 						strcpy(buffer, "Д:");
 2509              		.loc 1 354 7
 2510 00f0 07F10C03 		add	r3, r7, #12
 2511 00f4 304A     		ldr	r2, .L129+8
 2512 00f6 1268     		ldr	r2, [r2]
 2513 00f8 1146     		mov	r1, r2	@ movhi
 2514 00fa 1980     		strh	r1, [r3]	@ movhi
 2515 00fc 0233     		adds	r3, r3, #2
 2516 00fe 120C     		lsrs	r2, r2, #16
 2517 0100 1A70     		strb	r2, [r3]
 355:src/translator.c **** 						itoa1(i + 1, conv_buf);
 2518              		.loc 1 355 7
 2519 0102 3B6D     		ldr	r3, [r7, #80]
 2520 0104 0133     		adds	r3, r3, #1
 2521 0106 3A1D     		adds	r2, r7, #4
 2522 0108 1146     		mov	r1, r2
 2523 010a 1846     		mov	r0, r3
 2524 010c 2B4B     		ldr	r3, .L129+12
 2525 010e 9847     		blx	r3
 2526              	.LVL26:
 356:src/translator.c **** 						strcat(buffer, conv_buf);
 2527              		.loc 1 356 7
 2528 0110 3A1D     		adds	r2, r7, #4
 2529 0112 07F10C03 		add	r3, r7, #12
 2530 0116 1146     		mov	r1, r2
 2531 0118 1846     		mov	r0, r3
 2532 011a 294B     		ldr	r3, .L129+16
 2533 011c 9847     		blx	r3
 2534              	.LVL27:
 357:src/translator.c **** 						strcat(buffer, "(1):");
 2535              		.loc 1 357 7
 2536 011e 07F10C03 		add	r3, r7, #12
 2537 0122 1846     		mov	r0, r3
 2538 0124 274B     		ldr	r3, .L129+20
 2539 0126 9847     		blx	r3
 2540              	.LVL28:
 2541 0128 0346     		mov	r3, r0
 2542 012a 1A46     		mov	r2, r3
 2543 012c 07F10C03 		add	r3, r7, #12
 2544 0130 1344     		add	r3, r3, r2
 2545 0132 294A     		ldr	r2, .L129+40
 2546 0134 1068     		ldr	r0, [r2]
 2547 0136 1860     		str	r0, [r3]	@ unaligned
 2548 0138 1279     		ldrb	r2, [r2, #4]
 2549 013a 1A71     		strb	r2, [r3, #4]
 358:src/translator.c **** 						strcat(buffer, message);
 2550              		.loc 1 358 7
 2551 013c 07F10C03 		add	r3, r7, #12
 2552 0140 2249     		ldr	r1, .L129+28
 2553 0142 1846     		mov	r0, r3
 2554 0144 1E4B     		ldr	r3, .L129+16
 2555 0146 9847     		blx	r3
 2556              	.LVL29:
 359:src/translator.c **** 						JrnlWrite(buffer);
 2557              		.loc 1 359 7
 2558 0148 07F10C03 		add	r3, r7, #12
 2559 014c 1846     		mov	r0, r3
 2560 014e 204B     		ldr	r3, .L129+32
 2561 0150 9847     		blx	r3
 2562              	.LVL30:
 360:src/translator.c **** 						NeedWrite = false;
 2563              		.loc 1 360 17
 2564 0152 204B     		ldr	r3, .L129+36
 2565 0154 0022     		movs	r2, #0
 2566 0156 1A70     		strb	r2, [r3]
 2567              	.L124:
 2568              	.LBE15:
 342:src/translator.c **** 				if ((diffMask >> i) & 0x0001 == 0x0001) {
 2569              		.loc 1 342 29 discriminator 2
 2570 0158 3B6D     		ldr	r3, [r7, #80]
 2571 015a 0133     		adds	r3, r3, #1
 2572 015c 3B65     		str	r3, [r7, #80]
 2573              	.L123:
 342:src/translator.c **** 				if ((diffMask >> i) & 0x0001 == 0x0001) {
 2574              		.loc 1 342 4 discriminator 1
 2575 015e 3B6D     		ldr	r3, [r7, #80]
 2576 0160 0A2B     		cmp	r3, #10
 2577 0162 7FF777AF 		ble	.L126
 2578              	.LBE13:
 361:src/translator.c **** 					}
 362:src/translator.c **** 
 363:src/translator.c **** 				}
 364:src/translator.c **** 
 365:src/translator.c **** 			}
 366:src/translator.c **** 
 367:src/translator.c **** 			prevErrDiscretLogic[it] = RAM.ErrorDiscretLogic[it];
 2579              		.loc 1 367 51
 2580 0166 134A     		ldr	r2, .L129+4
 2581 0168 7B6D     		ldr	r3, [r7, #84]
 2582 016a 03F54173 		add	r3, r3, #772
 2583 016e 5B00     		lsls	r3, r3, #1
 2584 0170 1344     		add	r3, r3, r2
 2585 0172 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 2586 0174 99B2     		uxth	r1, r3
 2587              		.loc 1 367 28
 2588 0176 0E4A     		ldr	r2, .L129
 2589 0178 7B6D     		ldr	r3, [r7, #84]
 2590 017a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 2591              	.L122:
 338:src/translator.c **** 		if (prevErrDiscretLogic[it] != RAM.ErrorDiscretLogic[it]) {
 2592              		.loc 1 338 29 discriminator 2
 2593 017e 7B6D     		ldr	r3, [r7, #84]
 2594 0180 0133     		adds	r3, r3, #1
 2595 0182 7B65     		str	r3, [r7, #84]
 2596              	.L121:
 338:src/translator.c **** 		if (prevErrDiscretLogic[it] != RAM.ErrorDiscretLogic[it]) {
 2597              		.loc 1 338 2 discriminator 1
 2598 0184 7B6D     		ldr	r3, [r7, #84]
 2599 0186 032B     		cmp	r3, #3
 2600 0188 7FF743AF 		ble	.L127
 2601              	.LBE12:
 368:src/translator.c **** 		}
 369:src/translator.c **** 	if (NeedWrite == true) {
 2602              		.loc 1 369 16
 2603 018c 114B     		ldr	r3, .L129+36
 2604 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2605              		.loc 1 369 5
 2606 0190 002B     		cmp	r3, #0
 2607 0192 05D0     		beq	.L128
 370:src/translator.c **** 		JrnlWrite(message);
 2608              		.loc 1 370 3
 2609 0194 0D48     		ldr	r0, .L129+28
 2610 0196 0E4B     		ldr	r3, .L129+32
 2611 0198 9847     		blx	r3
 2612              	.LVL31:
 371:src/translator.c **** 		NeedWrite = false;
 2613              		.loc 1 371 13
 2614 019a 0E4B     		ldr	r3, .L129+36
 2615 019c 0022     		movs	r2, #0
 2616 019e 1A70     		strb	r2, [r3]
 2617              	.L128:
 372:src/translator.c **** 	}
 373:src/translator.c **** 	strcpy(message, "");
 2618              		.loc 1 373 2
 2619 01a0 0A4B     		ldr	r3, .L129+28
 2620 01a2 0022     		movs	r2, #0
 2621 01a4 1A70     		strb	r2, [r3]
 374:src/translator.c **** }
 2622              		.loc 1 374 1
 2623 01a6 00BF     		nop
 2624 01a8 5837     		adds	r7, r7, #88
 2625              	.LCFI90:
 2626              		.cfi_def_cfa_offset 8
 2627 01aa BD46     		mov	sp, r7
 2628              	.LCFI91:
 2629              		.cfi_def_cfa_register 13
 2630              		@ sp needed
 2631 01ac 80BD     		pop	{r7, pc}
 2632              	.L130:
 2633 01ae 00BF     		.align	2
 2634              	.L129:
 2635 01b0 00000000 		.word	prevErrDiscretLogic
 2636 01b4 00000000 		.word	RAM
 2637 01b8 E4000000 		.word	.LC15
 2638 01bc 00000000 		.word	itoa1
 2639 01c0 00000000 		.word	strcat
 2640 01c4 00000000 		.word	strlen
 2641 01c8 E8000000 		.word	.LC16
 2642 01cc 00000000 		.word	message
 2643 01d0 00000000 		.word	JrnlWrite
 2644 01d4 00000000 		.word	NeedWrite
 2645 01d8 F0000000 		.word	.LC17
 2646              		.cfi_endproc
 2647              	.LFE42:
 2649              		.global	minbuf
 2650              		.section	.bss.minbuf,"aw",%nobits
 2651              		.align	2
 2654              	minbuf:
 2655 0000 00000000 		.space	20
 2655      00000000 
 2655      00000000 
 2655      00000000 
 2655      00000000 
 2656              		.global	buffer
 2657              		.section	.bss.buffer,"aw",%nobits
 2658              		.align	2
 2661              	buffer:
 2662 0000 00000000 		.space	256
 2662      00000000 
 2662      00000000 
 2662      00000000 
 2662      00000000 
 2663              		.section	.rodata
 2664 00f5 000000   		.align	2
 2665              	.LC18:
 2666 00f8 D1E1F0EE 		.ascii	"\321\341\360\356\361 \356\362 \361\362\356\360. \362"
 2666      F120EEF2 
 2666      20F1F2EE 
 2666      F02E20F2 
 2667 0108 E0E9ECE5 		.ascii	"\340\351\354\345\360\340\000"
 2667      F0E000
 2668 010f 00       		.align	2
 2669              	.LC19:
 2670 0110 CAEEE420 		.ascii	"\312\356\344 \356\370\350\341\352\350=\000"
 2670      EEF8E8E1 
 2670      EAE83D00 
 2671              		.align	2
 2672              	.LC20:
 2673 011c CAEEEDF2 		.ascii	"\312\356\355\362\360\356\353\353\345\360 \302\373\352"
 2673      F0EEEBEB 
 2673      E5F020C2 
 2673      FBEA
 2674 012a EB00     		.ascii	"\353\000"
 2675              		.align	2
 2676              	.LC21:
 2677 012c CAEEEDF2 		.ascii	"\312\356\355\362\360\356\353\353\345\360 \302\352\353"
 2677      F0EEEBEB 
 2677      E5F020C2 
 2677      EAEB
 2678 013a 00       		.ascii	"\000"
 2679              		.section	.text.CheckPowerOn,"ax",%progbits
 2680              		.align	1
 2681              		.global	CheckPowerOn
 2682              		.syntax unified
 2683              		.thumb
 2684              		.thumb_func
 2686              	CheckPowerOn:
 2687              	.LFB43:
 375:src/translator.c **** 
 376:src/translator.c **** char minbuf[20];
 377:src/translator.c **** char buffer[256];
 378:src/translator.c **** 
 379:src/translator.c **** 
 380:src/translator.c **** void CheckPowerOn() {
 2688              		.loc 1 380 21
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 8
 2691              		@ frame_needed = 1, uses_anonymous_args = 0
 2692 0000 80B5     		push	{r7, lr}
 2693              	.LCFI92:
 2694              		.cfi_def_cfa_offset 8
 2695              		.cfi_offset 7, -8
 2696              		.cfi_offset 14, -4
 2697 0002 82B0     		sub	sp, sp, #8
 2698              	.LCFI93:
 2699              		.cfi_def_cfa_offset 16
 2700 0004 00AF     		add	r7, sp, #0
 2701              	.LCFI94:
 2702              		.cfi_def_cfa_register 7
 381:src/translator.c **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 2703              		.loc 1 381 12
 2704 0006 424B     		ldr	r3, .L141
 2705 0008 3B60     		str	r3, [r7]
 382:src/translator.c **** 	portENTER_CRITICAL();
 2706              		.loc 1 382 2
 2707 000a 424B     		ldr	r3, .L141+4
 2708 000c 9847     		blx	r3
 2709              	.LVL32:
 383:src/translator.c **** 	{
 384:src/translator.c **** 		if (bPowerOn == false) {
 2710              		.loc 1 384 16
 2711 000e 424B     		ldr	r3, .L141+8
 2712 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2713 0012 83F00103 		eor	r3, r3, #1
 2714 0016 DBB2     		uxtb	r3, r3
 2715              		.loc 1 384 6
 2716 0018 002B     		cmp	r3, #0
 2717 001a 73D0     		beq	.L132
 385:src/translator.c **** 			bPowerOn = true;
 2718              		.loc 1 385 13
 2719 001c 3E4B     		ldr	r3, .L141+8
 2720 001e 0122     		movs	r2, #1
 2721 0020 1A70     		strb	r2, [r3]
 386:src/translator.c **** 			if (RCC->CSR & RCC_CSR_IWDGRSTF) {
 2722              		.loc 1 386 11
 2723 0022 3E4B     		ldr	r3, .L141+12
 2724 0024 5B6A     		ldr	r3, [r3, #36]
 2725              		.loc 1 386 17
 2726 0026 03F00053 		and	r3, r3, #536870912
 2727              		.loc 1 386 7
 2728 002a 002B     		cmp	r3, #0
 2729 002c 23D0     		beq	.L133
 2730              	.LBB16:
 387:src/translator.c **** 				JrnlWrite("Сброс от стор. таймера");
 2731              		.loc 1 387 5
 2732 002e 3C48     		ldr	r0, .L141+16
 2733 0030 3C4B     		ldr	r3, .L141+20
 2734 0032 9847     		blx	r3
 2735              	.LVL33:
 388:src/translator.c **** 				itoa1(T1, minbuf);
 2736              		.loc 1 388 5
 2737 0034 3C4B     		ldr	r3, .L141+24
 2738 0036 1B88     		ldrh	r3, [r3]
 2739 0038 3C49     		ldr	r1, .L141+28
 2740 003a 1846     		mov	r0, r3
 2741 003c 3C4B     		ldr	r3, .L141+32
 2742 003e 9847     		blx	r3
 2743              	.LVL34:
 389:src/translator.c **** 				strcpy(buffer, "Код ошибки=");
 2744              		.loc 1 389 5
 2745 0040 3C4B     		ldr	r3, .L141+36
 2746 0042 3D4A     		ldr	r2, .L141+40
 2747 0044 07CA     		ldm	r2, {r0, r1, r2}
 2748 0046 83E80700 		stm	r3, {r0, r1, r2}
 390:src/translator.c **** 				strcat(buffer, minbuf);
 2749              		.loc 1 390 5
 2750 004a 3849     		ldr	r1, .L141+28
 2751 004c 3948     		ldr	r0, .L141+36
 2752 004e 3B4B     		ldr	r3, .L141+44
 2753 0050 9847     		blx	r3
 2754              	.LVL35:
 391:src/translator.c **** 				JrnlWrite(buffer);
 2755              		.loc 1 391 5
 2756 0052 3848     		ldr	r0, .L141+36
 2757 0054 334B     		ldr	r3, .L141+20
 2758 0056 9847     		blx	r3
 2759              	.LVL36:
 392:src/translator.c **** 				RAM.LocalCommand[0] = BKP_ReadBackupRegister(BKP_DR1);
 2760              		.loc 1 392 27
 2761 0058 0420     		movs	r0, #4
 2762 005a 394B     		ldr	r3, .L141+48
 2763 005c 9847     		blx	r3
 2764              	.LVL37:
 2765 005e 0346     		mov	r3, r0
 2766 0060 1A46     		mov	r2, r3
 2767              		.loc 1 392 25
 2768 0062 384B     		ldr	r3, .L141+52
 2769 0064 1A80     		strh	r2, [r3]	@ unaligned
 393:src/translator.c **** 				RAM.LocalCommand[1] = BKP_ReadBackupRegister(BKP_DR2);
 2770              		.loc 1 393 27
 2771 0066 0820     		movs	r0, #8
 2772 0068 354B     		ldr	r3, .L141+48
 2773 006a 9847     		blx	r3
 2774              	.LVL38:
 2775 006c 0346     		mov	r3, r0
 2776 006e 1A46     		mov	r2, r3
 2777              		.loc 1 393 25
 2778 0070 344B     		ldr	r3, .L141+52
 2779 0072 5A80     		strh	r2, [r3, #2]	@ unaligned
 2780              	.LBE16:
 2781 0074 05E0     		b	.L134
 2782              	.L133:
 394:src/translator.c **** 			} else {
 395:src/translator.c **** 				//Запись в журнал - выключения контроллера
 396:src/translator.c **** 				JrnlWriteOff("Контроллер Выкл");
 2783              		.loc 1 396 5
 2784 0076 3448     		ldr	r0, .L141+56
 2785 0078 344B     		ldr	r3, .L141+60
 2786 007a 9847     		blx	r3
 2787              	.LVL39:
 397:src/translator.c **** 				//Запись в журнал - включения контроллера
 398:src/translator.c **** 				JrnlWrite("Контроллер Вкл");
 2788              		.loc 1 398 5
 2789 007c 3448     		ldr	r0, .L141+64
 2790 007e 294B     		ldr	r3, .L141+20
 2791 0080 9847     		blx	r3
 2792              	.LVL40:
 2793              	.L134:
 2794              	.LBB17:
 399:src/translator.c **** 
 400:src/translator.c **** 				//RAM.LocalCommand[0] = BKP_ReadBackupRegister(BKP_DR1);//сохранение состояния по выключению пи
 401:src/translator.c **** 				//RAM.LocalCommand[1] = BKP_ReadBackupRegister(BKP_DR2);
 402:src/translator.c **** 
 403:src/translator.c **** 			}
 404:src/translator.c **** 
 405:src/translator.c **** 			//Инициализирование начальных значений
 406:src/translator.c **** 			for (int i = 0; i < 8; i++) {
 2795              		.loc 1 406 13
 2796 0082 0023     		movs	r3, #0
 2797 0084 7B60     		str	r3, [r7, #4]
 2798              		.loc 1 406 4
 2799 0086 3AE0     		b	.L135
 2800              	.L140:
 407:src/translator.c **** 				if (GetChannelBitDirect(i, RAM.OutputCommand) == 1) {
 2801              		.loc 1 407 9
 2802 0088 3249     		ldr	r1, .L141+68
 2803 008a 7868     		ldr	r0, [r7, #4]
 2804 008c 324B     		ldr	r3, .L141+72
 2805 008e 9847     		blx	r3
 2806              	.LVL41:
 2807 0090 0346     		mov	r3, r0
 2808              		.loc 1 407 8
 2809 0092 012B     		cmp	r3, #1
 2810 0094 0AD1     		bne	.L136
 408:src/translator.c **** 					ChanelDirect[i] = true;
 2811              		.loc 1 408 22
 2812 0096 314A     		ldr	r2, .L141+76
 2813 0098 7B68     		ldr	r3, [r7, #4]
 2814 009a 1344     		add	r3, r3, r2
 2815 009c 0122     		movs	r2, #1
 2816 009e 1A70     		strb	r2, [r3]
 409:src/translator.c **** 					ChanelChangeDirect[i] = true;
 2817              		.loc 1 409 28
 2818 00a0 2F4A     		ldr	r2, .L141+80
 2819 00a2 7B68     		ldr	r3, [r7, #4]
 2820 00a4 1344     		add	r3, r3, r2
 2821 00a6 0122     		movs	r2, #1
 2822 00a8 1A70     		strb	r2, [r3]
 2823 00aa 09E0     		b	.L137
 2824              	.L136:
 410:src/translator.c **** 				} else {
 411:src/translator.c **** 
 412:src/translator.c **** 					ChanelDirect[i] = false;
 2825              		.loc 1 412 22
 2826 00ac 2B4A     		ldr	r2, .L141+76
 2827 00ae 7B68     		ldr	r3, [r7, #4]
 2828 00b0 1344     		add	r3, r3, r2
 2829 00b2 0022     		movs	r2, #0
 2830 00b4 1A70     		strb	r2, [r3]
 413:src/translator.c **** 					ChanelChangeDirect[i] = false;
 2831              		.loc 1 413 28
 2832 00b6 2A4A     		ldr	r2, .L141+80
 2833 00b8 7B68     		ldr	r3, [r7, #4]
 2834 00ba 1344     		add	r3, r3, r2
 2835 00bc 0022     		movs	r2, #0
 2836 00be 1A70     		strb	r2, [r3]
 2837              	.L137:
 414:src/translator.c **** 				}
 415:src/translator.c **** 				if (GetChannelBitRepare(i, RAM.OutputCommand) == 1) {
 2838              		.loc 1 415 9
 2839 00c0 2449     		ldr	r1, .L141+68
 2840 00c2 7868     		ldr	r0, [r7, #4]
 2841 00c4 274B     		ldr	r3, .L141+84
 2842 00c6 9847     		blx	r3
 2843              	.LVL42:
 2844 00c8 0346     		mov	r3, r0
 2845              		.loc 1 415 8
 2846 00ca 012B     		cmp	r3, #1
 2847 00cc 0AD1     		bne	.L138
 416:src/translator.c **** 					ChanelRepare[i] = true;
 2848              		.loc 1 416 22
 2849 00ce 264A     		ldr	r2, .L141+88
 2850 00d0 7B68     		ldr	r3, [r7, #4]
 2851 00d2 1344     		add	r3, r3, r2
 2852 00d4 0122     		movs	r2, #1
 2853 00d6 1A70     		strb	r2, [r3]
 417:src/translator.c **** 					ChanelChangeRepare[i] = true;
 2854              		.loc 1 417 28
 2855 00d8 244A     		ldr	r2, .L141+92
 2856 00da 7B68     		ldr	r3, [r7, #4]
 2857 00dc 1344     		add	r3, r3, r2
 2858 00de 0122     		movs	r2, #1
 2859 00e0 1A70     		strb	r2, [r3]
 2860 00e2 09E0     		b	.L139
 2861              	.L138:
 418:src/translator.c **** 				} else {
 419:src/translator.c **** 					ChanelRepare[i] = false;
 2862              		.loc 1 419 22
 2863 00e4 204A     		ldr	r2, .L141+88
 2864 00e6 7B68     		ldr	r3, [r7, #4]
 2865 00e8 1344     		add	r3, r3, r2
 2866 00ea 0022     		movs	r2, #0
 2867 00ec 1A70     		strb	r2, [r3]
 420:src/translator.c **** 					ChanelChangeRepare[i] = false;
 2868              		.loc 1 420 28
 2869 00ee 1F4A     		ldr	r2, .L141+92
 2870 00f0 7B68     		ldr	r3, [r7, #4]
 2871 00f2 1344     		add	r3, r3, r2
 2872 00f4 0022     		movs	r2, #0
 2873 00f6 1A70     		strb	r2, [r3]
 2874              	.L139:
 406:src/translator.c **** 				if (GetChannelBitDirect(i, RAM.OutputCommand) == 1) {
 2875              		.loc 1 406 28 discriminator 2
 2876 00f8 7B68     		ldr	r3, [r7, #4]
 2877 00fa 0133     		adds	r3, r3, #1
 2878 00fc 7B60     		str	r3, [r7, #4]
 2879              	.L135:
 406:src/translator.c **** 				if (GetChannelBitDirect(i, RAM.OutputCommand) == 1) {
 2880              		.loc 1 406 4 discriminator 1
 2881 00fe 7B68     		ldr	r3, [r7, #4]
 2882 0100 072B     		cmp	r3, #7
 2883 0102 C1DD     		ble	.L140
 2884              	.L132:
 2885              	.LBE17:
 421:src/translator.c **** 				}
 422:src/translator.c **** 			}
 423:src/translator.c **** 			///
 424:src/translator.c **** 		}
 425:src/translator.c **** 
 426:src/translator.c **** 	}
 427:src/translator.c **** 	portEXIT_CRITICAL();
 2886              		.loc 1 427 2
 2887 0104 1A4B     		ldr	r3, .L141+96
 2888 0106 9847     		blx	r3
 2889              	.LVL43:
 428:src/translator.c **** }
 2890              		.loc 1 428 1
 2891 0108 00BF     		nop
 2892 010a 0837     		adds	r7, r7, #8
 2893              	.LCFI95:
 2894              		.cfi_def_cfa_offset 8
 2895 010c BD46     		mov	sp, r7
 2896              	.LCFI96:
 2897              		.cfi_def_cfa_register 13
 2898              		@ sp needed
 2899 010e 80BD     		pop	{r7, pc}
 2900              	.L142:
 2901              		.align	2
 2902              	.L141:
 2903 0110 00B00208 		.word	134393856
 2904 0114 00000000 		.word	vPortEnterCritical
 2905 0118 00000000 		.word	bPowerOn
 2906 011c 00100240 		.word	1073876992
 2907 0120 F8000000 		.word	.LC18
 2908 0124 00000000 		.word	JrnlWrite
 2909 0128 00000000 		.word	T1
 2910 012c 00000000 		.word	minbuf
 2911 0130 00000000 		.word	itoa1
 2912 0134 00000000 		.word	buffer
 2913 0138 10010000 		.word	.LC19
 2914 013c 00000000 		.word	strcat
 2915 0140 00000000 		.word	BKP_ReadBackupRegister
 2916 0144 00000000 		.word	RAM
 2917 0148 1C010000 		.word	.LC20
 2918 014c 00000000 		.word	JrnlWriteOff
 2919 0150 2C010000 		.word	.LC21
 2920 0154 04000000 		.word	RAM+4
 2921 0158 00000000 		.word	GetChannelBitDirect
 2922 015c 00000000 		.word	ChanelDirect
 2923 0160 00000000 		.word	ChanelChangeDirect
 2924 0164 00000000 		.word	GetChannelBitRepare
 2925 0168 00000000 		.word	ChanelRepare
 2926 016c 00000000 		.word	ChanelChangeRepare
 2927 0170 00000000 		.word	vPortExitCritical
 2928              		.cfi_endproc
 2929              	.LFE43:
 2931              		.section	.rodata
 2932 013b 00       		.align	2
 2933              	.LC22:
 2934 013c C0E2F22E 		.ascii	"\300\342\362.\360\345\346\350\354 \342\361\345\365 "
 2934      F0E5E6E8 
 2934      EC20E2F1 
 2934      E5F520
 2935 014b CAD300   		.ascii	"\312\323\000"
 2936 014e 0000     		.align	2
 2937              	.LC23:
 2938 0150 D0F3F7ED 		.ascii	"\320\363\367\355\356\351 \360\345\346\350\354.\312\323"
 2938      EEE920F0 
 2938      E5E6E8EC 
 2938      2ECAD3
 2939 015f 3A00     		.ascii	":\000"
 2940 0161 000000   		.align	2
 2941              	.LC24:
 2942 0164 C0E2F2EE 		.ascii	"\300\342\362\356 \360\345\346\350\354.\312\323:\000"
 2942      20F0E5E6 
 2942      E8EC2ECA 
 2942      D33A00
 2943 0173 00       		.align	2
 2944              	.LC25:
 2945 0174 C2EAEB2E 		.ascii	"\302\352\353. \320\345\354. \360\345\346\350\354.\312"
 2945      20D0E5EC 
 2945      2E20F0E5 
 2945      E6E8EC2E 
 2945      CA
 2946 0185 D33A00   		.ascii	"\323:\000"
 2947              		.align	2
 2948              	.LC26:
 2949 0188 CEF2EAEB 		.ascii	"\316\362\352\353. \320\345\354. \360\345\346\350\354"
 2949      2E20D0E5 
 2949      EC2E20F0 
 2949      E5E6E8EC 
 2950 0198 2ECAD33A 		.ascii	".\312\323:\000"
 2950      00
 2951              		.section	.text.DoProgram,"ax",%progbits
 2952              		.align	1
 2953              		.global	DoProgram
 2954              		.syntax unified
 2955              		.thumb
 2956              		.thumb_func
 2958              	DoProgram:
 2959              	.LFB44:
 429:src/translator.c **** 
 430:src/translator.c **** //--------------------------------------------------------------------------
 431:src/translator.c **** void DoProgram() {
 2960              		.loc 1 431 18
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 448
 2963              		@ frame_needed = 1, uses_anonymous_args = 0
 2964 0000 B0B5     		push	{r4, r5, r7, lr}
 2965              	.LCFI97:
 2966              		.cfi_def_cfa_offset 16
 2967              		.cfi_offset 4, -16
 2968              		.cfi_offset 5, -12
 2969              		.cfi_offset 7, -8
 2970              		.cfi_offset 14, -4
 2971 0002 F0B0     		sub	sp, sp, #448
 2972              	.LCFI98:
 2973              		.cfi_def_cfa_offset 464
 2974 0004 00AF     		add	r7, sp, #0
 2975              	.LCFI99:
 2976              		.cfi_def_cfa_register 7
 432:src/translator.c **** 
 433:src/translator.c **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 2977              		.loc 1 433 12
 2978 0006 AD4B     		ldr	r3, .L265
 2979 0008 C7F86031 		str	r3, [r7, #352]
 434:src/translator.c **** 	DATATIME dtl, dt;
 435:src/translator.c **** 	bool reverseDay;
 436:src/translator.c **** 	char tmp_buf[8];
 437:src/translator.c **** 
 438:src/translator.c **** 	if (RAM.reset != 0) {
 2980              		.loc 1 438 9
 2981 000c AC4B     		ldr	r3, .L265+4
 2982 000e B3F80436 		ldrh	r3, [r3, #1540]	@ unaligned
 2983 0012 9BB2     		uxth	r3, r3
 2984              		.loc 1 438 5
 2985 0014 002B     		cmp	r3, #0
 2986 0016 2DD0     		beq	.L144
 439:src/translator.c **** 		if (RAM.reset == 1)
 2987              		.loc 1 439 10
 2988 0018 A94B     		ldr	r3, .L265+4
 2989 001a B3F80436 		ldrh	r3, [r3, #1540]	@ unaligned
 2990 001e 9BB2     		uxth	r3, r3
 2991              		.loc 1 439 6
 2992 0020 012B     		cmp	r3, #1
 2993 0022 18D1     		bne	.L145
 440:src/translator.c **** 		{
 441:src/translator.c **** 			Reset();
 2994              		.loc 1 441 4
 2995 0024 A74B     		ldr	r3, .L265+8
 2996 0026 9847     		blx	r3
 2997              	.LVL44:
 442:src/translator.c **** 			prevLogicFlags = 0;
 2998              		.loc 1 442 19
 2999 0028 A74B     		ldr	r3, .L265+12
 3000 002a 0022     		movs	r2, #0
 3001 002c 1A70     		strb	r2, [r3]
 3002              	.LBB18:
 443:src/translator.c **** 			for (int i = 0; i < 4; i++)
 3003              		.loc 1 443 13
 3004 002e 0023     		movs	r3, #0
 3005 0030 C7F8B831 		str	r3, [r7, #440]
 3006              		.loc 1 443 4
 3007 0034 0AE0     		b	.L146
 3008              	.L147:
 444:src/translator.c **** 				{
 445:src/translator.c **** 				prevErrDiscretLogic[i] = 0;
 3009              		.loc 1 445 28 discriminator 3
 3010 0036 A54A     		ldr	r2, .L265+16
 3011 0038 D7F8B831 		ldr	r3, [r7, #440]
 3012 003c 0021     		movs	r1, #0
 3013 003e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 443:src/translator.c **** 			for (int i = 0; i < 4; i++)
 3014              		.loc 1 443 28 discriminator 3
 3015 0042 D7F8B831 		ldr	r3, [r7, #440]
 3016 0046 0133     		adds	r3, r3, #1
 3017 0048 C7F8B831 		str	r3, [r7, #440]
 3018              	.L146:
 443:src/translator.c **** 			for (int i = 0; i < 4; i++)
 3019              		.loc 1 443 4 discriminator 1
 3020 004c D7F8B831 		ldr	r3, [r7, #440]
 3021 0050 032B     		cmp	r3, #3
 3022 0052 F0DD     		ble	.L147
 3023 0054 07E0     		b	.L148
 3024              	.L145:
 3025              	.LBE18:
 446:src/translator.c **** 				}
 447:src/translator.c **** 			}
 448:src/translator.c **** 		else if (RAM.reset == 2)
 3026              		.loc 1 448 15
 3027 0056 9A4B     		ldr	r3, .L265+4
 3028 0058 B3F80436 		ldrh	r3, [r3, #1540]	@ unaligned
 3029 005c 9BB2     		uxth	r3, r3
 3030              		.loc 1 448 11
 3031 005e 022B     		cmp	r3, #2
 3032 0060 01D1     		bne	.L148
 449:src/translator.c **** 			{
 450:src/translator.c **** 			JrnlClear();
 3033              		.loc 1 450 4
 3034 0062 9B4B     		ldr	r3, .L265+20
 3035 0064 9847     		blx	r3
 3036              	.LVL45:
 3037              	.L148:
 451:src/translator.c **** 			}
 452:src/translator.c **** 		RAM.reset = 0;
 3038              		.loc 1 452 13
 3039 0066 964B     		ldr	r3, .L265+4
 3040 0068 0022     		movs	r2, #0
 3041 006a 83F80426 		strb	r2, [r3, #1540]
 3042 006e 0022     		movs	r2, #0
 3043 0070 83F80526 		strb	r2, [r3, #1541]
 3044              	.L144:
 453:src/translator.c **** 	}
 454:src/translator.c **** 
 455:src/translator.c **** 	/* int jrnlLength = GetJrnlLength();
 456:src/translator.c **** 		    if (jrnlLength == 0)
 457:src/translator.c **** 			{
 458:src/translator.c **** 
 459:src/translator.c **** 			}*/
 460:src/translator.c **** 
 461:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 51);
 3045              		.loc 1 461 2
 3046 0074 3321     		movs	r1, #51
 3047 0076 1C20     		movs	r0, #28
 3048 0078 964B     		ldr	r3, .L265+24
 3049 007a 9847     		blx	r3
 3050              	.LVL46:
 462:src/translator.c **** 	CheckPowerOn();
 3051              		.loc 1 462 2
 3052 007c 964B     		ldr	r3, .L265+28
 3053 007e 9847     		blx	r3
 3054              	.LVL47:
 463:src/translator.c **** 
 464:src/translator.c **** 	uint16 u1 = 0;
 3055              		.loc 1 464 9
 3056 0080 0023     		movs	r3, #0
 3057 0082 A7F85E31 		strh	r3, [r7, #350]	@ movhi
 465:src/translator.c **** 	int DelayForStopTime;
 466:src/translator.c **** 
 467:src/translator.c **** 	if (pxConfig->devcfg.logica.StopTime == 0x01) {
 3058              		.loc 1 467 29
 3059 0086 D7F86031 		ldr	r3, [r7, #352]
 3060 008a B3F87C34 		ldrh	r3, [r3, #1148]	@ unaligned
 3061 008e 9BB2     		uxth	r3, r3
 3062              		.loc 1 467 5
 3063 0090 012B     		cmp	r3, #1
 3064 0092 28D1     		bne	.L149
 3065              	.LBB19:
 468:src/translator.c **** 		vTaskDelay(2000);
 3066              		.loc 1 468 3
 3067 0094 4FF4FA60 		mov	r0, #2000
 3068 0098 904B     		ldr	r3, .L265+32
 3069 009a 9847     		blx	r3
 3070              	.LVL48:
 469:src/translator.c **** 		portENTER_CRITICAL();
 3071              		.loc 1 469 3
 3072 009c 904B     		ldr	r3, .L265+36
 3073 009e 9847     		blx	r3
 3074              	.LVL49:
 3075              	.LBB20:
 470:src/translator.c **** 		{
 471:src/translator.c **** 			uint16 u1 = 0;
 3076              		.loc 1 471 11
 3077 00a0 07F5E073 		add	r3, r7, #448
 3078 00a4 A3F5DB73 		sub	r3, r3, #438
 3079 00a8 0022     		movs	r2, #0
 3080 00aa 1A80     		strh	r2, [r3]	@ movhi
 3081              	.LBB21:
 472:src/translator.c **** 			for (int i = 0; i < 100000; i++) {
 3082              		.loc 1 472 13
 3083 00ac 0023     		movs	r3, #0
 3084 00ae C7F8B431 		str	r3, [r7, #436]
 3085              		.loc 1 472 4
 3086 00b2 04E0     		b	.L150
 3087              	.L151:
 3088              		.loc 1 472 33 discriminator 3
 3089 00b4 D7F8B431 		ldr	r3, [r7, #436]
 3090 00b8 0133     		adds	r3, r3, #1
 3091 00ba C7F8B431 		str	r3, [r7, #436]
 3092              	.L150:
 3093              		.loc 1 472 4 discriminator 1
 3094 00be D7F8B431 		ldr	r3, [r7, #436]
 3095 00c2 884A     		ldr	r2, .L265+40
 3096 00c4 9342     		cmp	r3, r2
 3097 00c6 F5DD     		ble	.L151
 3098              	.LBE21:
 473:src/translator.c **** 			}
 474:src/translator.c **** 			I2C_Time_BufferWrite(0xFF, 0x0E, 1);
 3099              		.loc 1 474 4
 3100 00c8 0122     		movs	r2, #1
 3101 00ca 0E21     		movs	r1, #14
 3102 00cc FF20     		movs	r0, #255
 3103 00ce 864B     		ldr	r3, .L265+44
 3104 00d0 9847     		blx	r3
 3105              	.LVL50:
 475:src/translator.c **** 			MemSetWords((uint16) (0x823E), &u1, 0x1);
 3106              		.loc 1 475 4
 3107 00d2 07F10A03 		add	r3, r7, #10
 3108 00d6 0122     		movs	r2, #1
 3109 00d8 1946     		mov	r1, r3
 3110 00da 48F23E20 		movw	r0, #33342
 3111 00de 834B     		ldr	r3, .L265+48
 3112 00e0 9847     		blx	r3
 3113              	.LVL51:
 3114              	.LBE20:
 476:src/translator.c **** 		}
 477:src/translator.c **** 		portEXIT_CRITICAL();
 3115              		.loc 1 477 3
 3116 00e2 834B     		ldr	r3, .L265+52
 3117 00e4 9847     		blx	r3
 3118              	.LVL52:
 3119              	.L149:
 3120              	.LBE19:
 478:src/translator.c **** 	}
 479:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 52);
 3121              		.loc 1 479 2
 3122 00e6 3421     		movs	r1, #52
 3123 00e8 1C20     		movs	r0, #28
 3124 00ea 7A4B     		ldr	r3, .L265+24
 3125 00ec 9847     		blx	r3
 3126              	.LVL53:
 3127              	.LBB22:
 480:src/translator.c **** 	if (pxConfig->devcfg.logica.SwitchTime * 1000 < atcGetCounter()) {
 3128              		.loc 1 480 29
 3129 00ee D7F86031 		ldr	r3, [r7, #352]
 3130 00f2 B3F87834 		ldrh	r3, [r3, #1144]	@ unaligned
 3131 00f6 9BB2     		uxth	r3, r3
 3132 00f8 1A46     		mov	r2, r3
 3133              		.loc 1 480 41
 3134 00fa 4FF47A73 		mov	r3, #1000
 3135 00fe 03FB02F4 		mul	r4, r3, r2
 3136              		.loc 1 480 50
 3137 0102 7C4B     		ldr	r3, .L265+56
 3138 0104 9847     		blx	r3
 3139              	.LVL54:
 3140 0106 0346     		mov	r3, r0
 3141              		.loc 1 480 5
 3142 0108 9C42     		cmp	r4, r3
 3143 010a 6DDA     		bge	.L152
 481:src/translator.c **** 
 482:src/translator.c **** 		if (CountReset == 0) {
 3144              		.loc 1 482 18
 3145 010c 7A4B     		ldr	r3, .L265+60
 3146 010e 1B88     		ldrh	r3, [r3]
 3147              		.loc 1 482 6
 3148 0110 002B     		cmp	r3, #0
 3149 0112 22D1     		bne	.L153
 3150              	.LBB23:
 483:src/translator.c **** 			bool Direct = false;
 3151              		.loc 1 483 9
 3152 0114 0023     		movs	r3, #0
 3153 0116 87F8B331 		strb	r3, [r7, #435]
 3154              	.LBB24:
 484:src/translator.c **** 
 485:src/translator.c **** 			for (int i = 0; i < 8; i++) {
 3155              		.loc 1 485 13
 3156 011a 0023     		movs	r3, #0
 3157 011c C7F8AC31 		str	r3, [r7, #428]
 3158              		.loc 1 485 4
 3159 0120 10E0     		b	.L154
 3160              	.L157:
 486:src/translator.c **** 				if (GetChannelBitDirect(i, RAM.LocalCommand)) {
 3161              		.loc 1 486 9
 3162 0122 6749     		ldr	r1, .L265+4
 3163 0124 D7F8AC01 		ldr	r0, [r7, #428]
 3164 0128 744B     		ldr	r3, .L265+64
 3165 012a 9847     		blx	r3
 3166              	.LVL55:
 3167 012c 0346     		mov	r3, r0
 3168              		.loc 1 486 8
 3169 012e 002B     		cmp	r3, #0
 3170 0130 03D0     		beq	.L155
 487:src/translator.c **** 					Direct = true;
 3171              		.loc 1 487 13
 3172 0132 0123     		movs	r3, #1
 3173 0134 87F8B331 		strb	r3, [r7, #435]
 488:src/translator.c **** 					break;
 3174              		.loc 1 488 6
 3175 0138 08E0     		b	.L156
 3176              	.L155:
 485:src/translator.c **** 				if (GetChannelBitDirect(i, RAM.LocalCommand)) {
 3177              		.loc 1 485 28 discriminator 2
 3178 013a D7F8AC31 		ldr	r3, [r7, #428]
 3179 013e 0133     		adds	r3, r3, #1
 3180 0140 C7F8AC31 		str	r3, [r7, #428]
 3181              	.L154:
 485:src/translator.c **** 				if (GetChannelBitDirect(i, RAM.LocalCommand)) {
 3182              		.loc 1 485 4 discriminator 1
 3183 0144 D7F8AC31 		ldr	r3, [r7, #428]
 3184 0148 072B     		cmp	r3, #7
 3185 014a EADD     		ble	.L157
 3186              	.L156:
 3187              	.LBE24:
 489:src/translator.c **** 				}
 490:src/translator.c **** 			}
 491:src/translator.c **** 			if (Direct == true) {
 3188              		.loc 1 491 7
 3189 014c 97F8B331 		ldrb	r3, [r7, #435]	@ zero_extendqisi2
 3190 0150 002B     		cmp	r3, #0
 3191 0152 02D0     		beq	.L153
 492:src/translator.c **** 				JrnlWrite("Авт.режим всех КУ");
 3192              		.loc 1 492 5
 3193 0154 6A48     		ldr	r0, .L265+68
 3194 0156 6B4B     		ldr	r3, .L265+72
 3195 0158 9847     		blx	r3
 3196              	.LVL56:
 3197              	.L153:
 3198              	.LBE23:
 3199              	.LBB25:
 493:src/translator.c **** 
 494:src/translator.c **** 			}
 495:src/translator.c **** 		}
 496:src/translator.c **** 		for (int i = 0; i < 8; i++) {
 3200              		.loc 1 496 12
 3201 015a 0023     		movs	r3, #0
 3202 015c C7F8A831 		str	r3, [r7, #424]
 3203              		.loc 1 496 3
 3204 0160 11E0     		b	.L158
 3205              	.L160:
 497:src/translator.c **** 			if (!block[i]) {
 3206              		.loc 1 497 14
 3207 0162 694A     		ldr	r2, .L265+76
 3208 0164 D7F8A831 		ldr	r3, [r7, #424]
 3209 0168 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3210              		.loc 1 497 7
 3211 016c 002B     		cmp	r3, #0
 3212 016e 05D1     		bne	.L159
 498:src/translator.c **** 				SetChannelBitDirect(i, RAM.LocalCommand, 0); //OutputCommand
 3213              		.loc 1 498 5
 3214 0170 0022     		movs	r2, #0
 3215 0172 5349     		ldr	r1, .L265+4
 3216 0174 D7F8A801 		ldr	r0, [r7, #424]
 3217 0178 644B     		ldr	r3, .L265+80
 3218 017a 9847     		blx	r3
 3219              	.LVL57:
 3220              	.L159:
 496:src/translator.c **** 			if (!block[i]) {
 3221              		.loc 1 496 27 discriminator 2
 3222 017c D7F8A831 		ldr	r3, [r7, #424]
 3223 0180 0133     		adds	r3, r3, #1
 3224 0182 C7F8A831 		str	r3, [r7, #424]
 3225              	.L158:
 496:src/translator.c **** 			if (!block[i]) {
 3226              		.loc 1 496 3 discriminator 1
 3227 0186 D7F8A831 		ldr	r3, [r7, #424]
 3228 018a 072B     		cmp	r3, #7
 3229 018c E9DD     		ble	.L160
 3230              	.LBE25:
 3231              	.LBB26:
 499:src/translator.c **** 			}
 500:src/translator.c **** 		}
 501:src/translator.c **** 		for (int i = 0; i < 8; i++) {
 3232              		.loc 1 501 12
 3233 018e 0023     		movs	r3, #0
 3234 0190 C7F8A431 		str	r3, [r7, #420]
 3235              		.loc 1 501 3
 3236 0194 24E0     		b	.L161
 3237              	.L164:
 502:src/translator.c **** 			if (GetChannelBitDirect(i, RAM.LocalCommand) == 1) {
 3238              		.loc 1 502 8
 3239 0196 4A49     		ldr	r1, .L265+4
 3240 0198 D7F8A401 		ldr	r0, [r7, #420]
 3241 019c 574B     		ldr	r3, .L265+64
 3242 019e 9847     		blx	r3
 3243              	.LVL58:
 3244 01a0 0346     		mov	r3, r0
 3245              		.loc 1 502 7
 3246 01a2 012B     		cmp	r3, #1
 3247 01a4 06D1     		bne	.L162
 503:src/translator.c **** 				ChanelChangeDirect[i] = true;
 3248              		.loc 1 503 27
 3249 01a6 5A4A     		ldr	r2, .L265+84
 3250 01a8 D7F8A431 		ldr	r3, [r7, #420]
 3251 01ac 1344     		add	r3, r3, r2
 3252 01ae 0122     		movs	r2, #1
 3253 01b0 1A70     		strb	r2, [r3]
 3254 01b2 05E0     		b	.L163
 3255              	.L162:
 504:src/translator.c **** 			} else {
 505:src/translator.c **** 				ChanelChangeDirect[i] = false;
 3256              		.loc 1 505 27
 3257 01b4 564A     		ldr	r2, .L265+84
 3258 01b6 D7F8A431 		ldr	r3, [r7, #420]
 3259 01ba 1344     		add	r3, r3, r2
 3260 01bc 0022     		movs	r2, #0
 3261 01be 1A70     		strb	r2, [r3]
 3262              	.L163:
 506:src/translator.c **** 			}
 507:src/translator.c **** 			ChanelDirect[i] = ChanelChangeDirect[i];
 3263              		.loc 1 507 40 discriminator 2
 3264 01c0 534A     		ldr	r2, .L265+84
 3265 01c2 D7F8A431 		ldr	r3, [r7, #420]
 3266 01c6 1344     		add	r3, r3, r2
 3267 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3268              		.loc 1 507 20 discriminator 2
 3269 01ca 524A     		ldr	r2, .L265+88
 3270 01cc D7F8A431 		ldr	r3, [r7, #420]
 3271 01d0 1344     		add	r3, r3, r2
 3272 01d2 0A46     		mov	r2, r1
 3273 01d4 1A70     		strb	r2, [r3]
 501:src/translator.c **** 			if (GetChannelBitDirect(i, RAM.LocalCommand) == 1) {
 3274              		.loc 1 501 27 discriminator 2
 3275 01d6 D7F8A431 		ldr	r3, [r7, #420]
 3276 01da 0133     		adds	r3, r3, #1
 3277 01dc C7F8A431 		str	r3, [r7, #420]
 3278              	.L161:
 501:src/translator.c **** 			if (GetChannelBitDirect(i, RAM.LocalCommand) == 1) {
 3279              		.loc 1 501 3 discriminator 1
 3280 01e0 D7F8A431 		ldr	r3, [r7, #420]
 3281 01e4 072B     		cmp	r3, #7
 3282 01e6 D6DD     		ble	.L164
 3283              	.L152:
 3284              	.LBE26:
 3285              	.LBE22:
 508:src/translator.c **** 		}
 509:src/translator.c **** 
 510:src/translator.c **** 	}
 511:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 53);
 3286              		.loc 1 511 2
 3287 01e8 3521     		movs	r1, #53
 3288 01ea 1C20     		movs	r0, #28
 3289 01ec 394B     		ldr	r3, .L265+24
 3290 01ee 9847     		blx	r3
 3291              	.LVL59:
 3292              	.LBB27:
 512:src/translator.c **** 	if (pxConfig->devcfg.logica.SwitchTime * 1000 < atcGetCounter()) {
 3293              		.loc 1 512 29
 3294 01f0 D7F86031 		ldr	r3, [r7, #352]
 3295 01f4 B3F87834 		ldrh	r3, [r3, #1144]	@ unaligned
 3296 01f8 9BB2     		uxth	r3, r3
 3297 01fa 1A46     		mov	r2, r3
 3298              		.loc 1 512 41
 3299 01fc 4FF47A73 		mov	r3, #1000
 3300 0200 03FB02F4 		mul	r4, r3, r2
 3301              		.loc 1 512 50
 3302 0204 3B4B     		ldr	r3, .L265+56
 3303 0206 9847     		blx	r3
 3304              	.LVL60:
 3305 0208 0346     		mov	r3, r0
 3306              		.loc 1 512 5
 3307 020a 9C42     		cmp	r4, r3
 3308 020c 34DA     		bge	.L165
 3309              	.LBB28:
 3310              	.LBB29:
 513:src/translator.c **** 		for (int i = 0; i < 8; i++) {
 3311              		.loc 1 513 12
 3312 020e 0023     		movs	r3, #0
 3313 0210 C7F8A031 		str	r3, [r7, #416]
 3314              		.loc 1 513 3
 3315 0214 2AE0     		b	.L166
 3316              	.L168:
 514:src/translator.c **** 			if (!block[i]) {
 3317              		.loc 1 514 14
 3318 0216 3C4A     		ldr	r2, .L265+76
 3319 0218 D7F8A031 		ldr	r3, [r7, #416]
 3320 021c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3321              		.loc 1 514 7
 3322 0220 002B     		cmp	r3, #0
 3323 0222 1ED1     		bne	.L167
 3324              	.LBB30:
 515:src/translator.c **** 				uint16 tmpGrNum = pxConfig->devcfg.logica.confCU[i].grafNum;
 3325              		.loc 1 515 12
 3326 0224 D7F86011 		ldr	r1, [r7, #352]
 3327 0228 D7F8A021 		ldr	r2, [r7, #416]
 3328 022c 1346     		mov	r3, r2
 3329 022e 5B00     		lsls	r3, r3, #1
 3330 0230 1344     		add	r3, r3, r2
 3331 0232 9B00     		lsls	r3, r3, #2
 3332 0234 0B44     		add	r3, r3, r1
 3333 0236 03F58063 		add	r3, r3, #1024
 3334 023a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3335 023c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3336 023e 1B02     		lsls	r3, r3, #8
 3337 0240 1343     		orrs	r3, r3, r2
 3338 0242 A7F85C31 		strh	r3, [r7, #348]	@ movhi
 516:src/translator.c **** 				if (tmpGrNum > 0 && tmpGrNum < 9) {
 3339              		.loc 1 516 8
 3340 0246 B7F85C31 		ldrh	r3, [r7, #348]
 3341 024a 002B     		cmp	r3, #0
 3342 024c 09D0     		beq	.L167
 3343              		.loc 1 516 22 discriminator 1
 3344 024e B7F85C31 		ldrh	r3, [r7, #348]
 3345 0252 082B     		cmp	r3, #8
 3346 0254 05D8     		bhi	.L167
 517:src/translator.c **** 					SetChannelBitDirect(i, RAM.LocalCommand, 0);
 3347              		.loc 1 517 6
 3348 0256 0022     		movs	r2, #0
 3349 0258 1949     		ldr	r1, .L265+4
 3350 025a D7F8A001 		ldr	r0, [r7, #416]
 3351 025e 2B4B     		ldr	r3, .L265+80
 3352 0260 9847     		blx	r3
 3353              	.LVL61:
 3354              	.L167:
 3355              	.LBE30:
 513:src/translator.c **** 			if (!block[i]) {
 3356              		.loc 1 513 27 discriminator 2
 3357 0262 D7F8A031 		ldr	r3, [r7, #416]
 3358 0266 0133     		adds	r3, r3, #1
 3359 0268 C7F8A031 		str	r3, [r7, #416]
 3360              	.L166:
 513:src/translator.c **** 			if (!block[i]) {
 3361              		.loc 1 513 3 discriminator 1
 3362 026c D7F8A031 		ldr	r3, [r7, #416]
 3363 0270 072B     		cmp	r3, #7
 3364 0272 D0DD     		ble	.L168
 3365              	.LBE29:
 518:src/translator.c **** 				}
 519:src/translator.c **** 			}
 520:src/translator.c **** 		}
 521:src/translator.c **** 		atcResetCounter();
 3366              		.loc 1 521 3
 3367 0274 284B     		ldr	r3, .L265+92
 3368 0276 9847     		blx	r3
 3369              	.LVL62:
 3370              	.L165:
 3371              	.LBE28:
 3372              	.LBE27:
 522:src/translator.c **** 	}
 523:src/translator.c **** 
 524:src/translator.c **** 	rtcGetDataTime(&dt);
 3373              		.loc 1 524 2
 3374 0278 07F59473 		add	r3, r7, #296
 3375 027c 1846     		mov	r0, r3
 3376 027e 274B     		ldr	r3, .L265+96
 3377 0280 9847     		blx	r3
 3378              	.LVL63:
 525:src/translator.c **** 	rtcGetDataTime(&dtl);
 3379              		.loc 1 525 2
 3380 0282 07F59C73 		add	r3, r7, #312
 3381 0286 1846     		mov	r0, r3
 3382 0288 244B     		ldr	r3, .L265+96
 3383 028a 9847     		blx	r3
 3384              	.LVL64:
 526:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 54);
 3385              		.loc 1 526 2
 3386 028c 3621     		movs	r1, #54
 3387 028e 1C20     		movs	r0, #28
 3388 0290 104B     		ldr	r3, .L265+24
 3389 0292 9847     		blx	r3
 3390              	.LVL65:
 527:src/translator.c **** 	if (CheckDiscretMask(pxConfig->devcfg.logica.MaskControl)) {
 3391              		.loc 1 527 46
 3392 0294 D7F86031 		ldr	r3, [r7, #352]
 3393 0298 03F58D63 		add	r3, r3, #1128
 3394              		.loc 1 527 6
 3395 029c 1846     		mov	r0, r3
 3396 029e 204B     		ldr	r3, .L265+100
 3397 02a0 9847     		blx	r3
 3398              	.LVL66:
 3399 02a2 0346     		mov	r3, r0
 3400              		.loc 1 527 5
 3401 02a4 002B     		cmp	r3, #0
 3402 02a6 3FD0     		beq	.L169
 528:src/translator.c **** 
 529:src/translator.c **** 		RAM.LogicErrorFlags &= ~(1 << 3);
 3403              		.loc 1 529 23
 3404 02a8 054B     		ldr	r3, .L265+4
 3405 02aa 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3406 02ac 23F00803 		bic	r3, r3, #8
 3407 02b0 DAB2     		uxtb	r2, r3
 3408 02b2 034B     		ldr	r3, .L265+4
 3409 02b4 1A72     		strb	r2, [r3, #8]
 530:src/translator.c **** 		CheckErrors();
 3410              		.loc 1 530 3
 3411 02b6 1B4B     		ldr	r3, .L265+104
 3412 02b8 9847     		blx	r3
 3413              	.LVL67:
 3414 02ba 3EE0     		b	.L170
 3415              	.L266:
 3416              		.align	2
 3417              	.L265:
 3418 02bc 00B00208 		.word	134393856
 3419 02c0 00000000 		.word	RAM
 3420 02c4 00000000 		.word	Reset
 3421 02c8 00000000 		.word	prevLogicFlags
 3422 02cc 00000000 		.word	prevErrDiscretLogic
 3423 02d0 00000000 		.word	JrnlClear
 3424 02d4 00000000 		.word	BKP_WriteBackupRegister
 3425 02d8 00000000 		.word	CheckPowerOn
 3426 02dc 00000000 		.word	vTaskDelay
 3427 02e0 00000000 		.word	vPortEnterCritical
 3428 02e4 9F860100 		.word	99999
 3429 02e8 00000000 		.word	I2C_Time_BufferWrite
 3430 02ec 00000000 		.word	MemSetWords
 3431 02f0 00000000 		.word	vPortExitCritical
 3432 02f4 00000000 		.word	atcGetCounter
 3433 02f8 00000000 		.word	CountReset
 3434 02fc 00000000 		.word	GetChannelBitDirect
 3435 0300 3C010000 		.word	.LC22
 3436 0304 00000000 		.word	JrnlWrite
 3437 0308 00000000 		.word	block
 3438 030c 00000000 		.word	SetChannelBitDirect
 3439 0310 00000000 		.word	ChanelChangeDirect
 3440 0314 00000000 		.word	ChanelDirect
 3441 0318 00000000 		.word	atcResetCounter
 3442 031c 00000000 		.word	rtcGetDataTime
 3443 0320 00000000 		.word	CheckDiscretMask
 3444 0324 00000000 		.word	CheckErrors
 3445              	.L169:
 531:src/translator.c **** 
 532:src/translator.c **** 	} else {
 533:src/translator.c **** 
 534:src/translator.c **** 		RAM.LogicErrorFlags |= (1 << 3);
 3446              		.loc 1 534 23
 3447 0328 714B     		ldr	r3, .L267
 3448 032a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3449 032c 43F00803 		orr	r3, r3, #8
 3450 0330 DAB2     		uxtb	r2, r3
 3451 0332 6F4B     		ldr	r3, .L267
 3452 0334 1A72     		strb	r2, [r3, #8]
 535:src/translator.c **** 		CheckErrors();
 3453              		.loc 1 535 3
 3454 0336 6F4B     		ldr	r3, .L267+4
 3455 0338 9847     		blx	r3
 3456              	.LVL68:
 3457              	.L170:
 536:src/translator.c **** 
 537:src/translator.c **** 	}
 538:src/translator.c **** 
 539:src/translator.c **** 
 540:src/translator.c **** 	if (CheckDiscretMask(pxConfig->devcfg.logica.MaskPower)) {
 3458              		.loc 1 540 46
 3459 033a D7F86031 		ldr	r3, [r7, #352]
 3460 033e 03F58E63 		add	r3, r3, #1136
 3461              		.loc 1 540 6
 3462 0342 1846     		mov	r0, r3
 3463 0344 6C4B     		ldr	r3, .L267+8
 3464 0346 9847     		blx	r3
 3465              	.LVL69:
 3466 0348 0346     		mov	r3, r0
 3467              		.loc 1 540 5
 3468 034a 002B     		cmp	r3, #0
 3469 034c 09D0     		beq	.L171
 541:src/translator.c **** 
 542:src/translator.c **** 		RAM.LogicErrorFlags &= ~(1);
 3470              		.loc 1 542 23
 3471 034e 684B     		ldr	r3, .L267
 3472 0350 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3473 0352 23F00103 		bic	r3, r3, #1
 3474 0356 DAB2     		uxtb	r2, r3
 3475 0358 654B     		ldr	r3, .L267
 3476 035a 1A72     		strb	r2, [r3, #8]
 543:src/translator.c **** 		CheckErrors();
 3477              		.loc 1 543 3
 3478 035c 654B     		ldr	r3, .L267+4
 3479 035e 9847     		blx	r3
 3480              	.LVL70:
 3481 0360 08E0     		b	.L172
 3482              	.L171:
 544:src/translator.c **** 
 545:src/translator.c **** 	} else {
 546:src/translator.c **** 
 547:src/translator.c **** 		RAM.LogicErrorFlags |= (1);
 3483              		.loc 1 547 23
 3484 0362 634B     		ldr	r3, .L267
 3485 0364 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3486 0366 43F00103 		orr	r3, r3, #1
 3487 036a DAB2     		uxtb	r2, r3
 3488 036c 604B     		ldr	r3, .L267
 3489 036e 1A72     		strb	r2, [r3, #8]
 548:src/translator.c **** 		CheckErrors();
 3490              		.loc 1 548 3
 3491 0370 604B     		ldr	r3, .L267+4
 3492 0372 9847     		blx	r3
 3493              	.LVL71:
 3494              	.L172:
 549:src/translator.c **** 
 550:src/translator.c **** 	}
 551:src/translator.c **** 
 552:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 55);
 3495              		.loc 1 552 2
 3496 0374 3721     		movs	r1, #55
 3497 0376 1C20     		movs	r0, #28
 3498 0378 604B     		ldr	r3, .L267+12
 3499 037a 9847     		blx	r3
 3500              	.LVL72:
 3501              	.LBB31:
 553:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 3502              		.loc 1 553 11
 3503 037c 0023     		movs	r3, #0
 3504 037e C7F89C31 		str	r3, [r7, #412]
 3505              		.loc 1 553 2
 3506 0382 40E0     		b	.L173
 3507              	.L176:
 554:src/translator.c **** 		if (GetChannelBitRepare(i, RAM.CommonCommand) == 1) {
 3508              		.loc 1 554 7
 3509 0384 5E49     		ldr	r1, .L267+16
 3510 0386 D7F89C01 		ldr	r0, [r7, #412]
 3511 038a 5E4B     		ldr	r3, .L267+20
 3512 038c 9847     		blx	r3
 3513              	.LVL73:
 3514 038e 0346     		mov	r3, r0
 3515              		.loc 1 554 6
 3516 0390 012B     		cmp	r3, #1
 3517 0392 33D1     		bne	.L174
 555:src/translator.c **** 			if (GetChannelBitRepare(i, RAM.OutputCommand) == 1)
 3518              		.loc 1 555 8
 3519 0394 5C49     		ldr	r1, .L267+24
 3520 0396 D7F89C01 		ldr	r0, [r7, #412]
 3521 039a 5A4B     		ldr	r3, .L267+20
 3522 039c 9847     		blx	r3
 3523              	.LVL74:
 3524 039e 0346     		mov	r3, r0
 3525              		.loc 1 555 7
 3526 03a0 012B     		cmp	r3, #1
 3527 03a2 2AD0     		beq	.L257
 556:src/translator.c **** 				continue;
 557:src/translator.c **** 			SetChannelBitSignal(i, RAM.LocalCommand,GetChannelBitSignal(i, RAM.CommonCommand));
 3528              		.loc 1 557 4
 3529 03a4 5649     		ldr	r1, .L267+16
 3530 03a6 D7F89C01 		ldr	r0, [r7, #412]
 3531 03aa 584B     		ldr	r3, .L267+28
 3532 03ac 9847     		blx	r3
 3533              	.LVL75:
 3534 03ae 0346     		mov	r3, r0
 3535 03b0 1A46     		mov	r2, r3
 3536 03b2 4F49     		ldr	r1, .L267
 3537 03b4 D7F89C01 		ldr	r0, [r7, #412]
 3538 03b8 554B     		ldr	r3, .L267+32
 3539 03ba 9847     		blx	r3
 3540              	.LVL76:
 558:src/translator.c **** 			SetChannelBitDirect(i, RAM.LocalCommand,GetChannelBitDirect(i, RAM.CommonCommand));
 3541              		.loc 1 558 4
 3542 03bc 5049     		ldr	r1, .L267+16
 3543 03be D7F89C01 		ldr	r0, [r7, #412]
 3544 03c2 544B     		ldr	r3, .L267+36
 3545 03c4 9847     		blx	r3
 3546              	.LVL77:
 3547 03c6 0346     		mov	r3, r0
 3548 03c8 1A46     		mov	r2, r3
 3549 03ca 4949     		ldr	r1, .L267
 3550 03cc D7F89C01 		ldr	r0, [r7, #412]
 3551 03d0 514B     		ldr	r3, .L267+40
 3552 03d2 9847     		blx	r3
 3553              	.LVL78:
 559:src/translator.c **** 			SetChannelBitReserv(i, RAM.LocalCommand,GetChannelBitReserv(i, RAM.CommonCommand));
 3554              		.loc 1 559 4
 3555 03d4 4A49     		ldr	r1, .L267+16
 3556 03d6 D7F89C01 		ldr	r0, [r7, #412]
 3557 03da 504B     		ldr	r3, .L267+44
 3558 03dc 9847     		blx	r3
 3559              	.LVL79:
 3560 03de 0346     		mov	r3, r0
 3561 03e0 1A46     		mov	r2, r3
 3562 03e2 4349     		ldr	r1, .L267
 3563 03e4 D7F89C01 		ldr	r0, [r7, #412]
 3564 03e8 4D4B     		ldr	r3, .L267+48
 3565 03ea 9847     		blx	r3
 3566              	.LVL80:
 560:src/translator.c **** 			SetChannelBitRepare(i, RAM.CommonCommand, 0); //insurance to make global command only once.
 3567              		.loc 1 560 4
 3568 03ec 0022     		movs	r2, #0
 3569 03ee 4449     		ldr	r1, .L267+16
 3570 03f0 D7F89C01 		ldr	r0, [r7, #412]
 3571 03f4 4B4B     		ldr	r3, .L267+52
 3572 03f6 9847     		blx	r3
 3573              	.LVL81:
 3574 03f8 00E0     		b	.L174
 3575              	.L257:
 556:src/translator.c **** 			SetChannelBitSignal(i, RAM.LocalCommand,GetChannelBitSignal(i, RAM.CommonCommand));
 3576              		.loc 1 556 5
 3577 03fa 00BF     		nop
 3578              	.L174:
 553:src/translator.c **** 		if (GetChannelBitRepare(i, RAM.CommonCommand) == 1) {
 3579              		.loc 1 553 26 discriminator 2
 3580 03fc D7F89C31 		ldr	r3, [r7, #412]
 3581 0400 0133     		adds	r3, r3, #1
 3582 0402 C7F89C31 		str	r3, [r7, #412]
 3583              	.L173:
 553:src/translator.c **** 		if (GetChannelBitRepare(i, RAM.CommonCommand) == 1) {
 3584              		.loc 1 553 2 discriminator 1
 3585 0406 D7F89C31 		ldr	r3, [r7, #412]
 3586 040a 072B     		cmp	r3, #7
 3587 040c BADD     		ble	.L176
 3588              	.LBE31:
 561:src/translator.c **** 		}
 562:src/translator.c **** 	}
 563:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 56);
 3589              		.loc 1 563 2
 3590 040e 3821     		movs	r1, #56
 3591 0410 1C20     		movs	r0, #28
 3592 0412 3A4B     		ldr	r3, .L267+12
 3593 0414 9847     		blx	r3
 3594              	.LVL82:
 3595              	.LBB32:
 564:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 3596              		.loc 1 564 11
 3597 0416 0023     		movs	r3, #0
 3598 0418 C7F89831 		str	r3, [r7, #408]
 3599              		.loc 1 564 2
 3600 041c 5BE0     		b	.L177
 3601              	.L181:
 565:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 3602              		.loc 1 565 40
 3603 041e D7F86011 		ldr	r1, [r7, #352]
 3604 0422 D7F89821 		ldr	r2, [r7, #408]
 3605 0426 1346     		mov	r3, r2
 3606 0428 5B00     		lsls	r3, r3, #1
 3607 042a 1344     		add	r3, r3, r2
 3608 042c 9B00     		lsls	r3, r3, #2
 3609 042e 0B44     		add	r3, r3, r1
 3610 0430 03F20243 		addw	r3, r3, #1026
 3611 0434 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3612              		.loc 1 565 6
 3613 0436 002B     		cmp	r3, #0
 3614 0438 47D0     		beq	.L258
 566:src/translator.c **** 			continue;
 567:src/translator.c **** 
 568:src/translator.c **** 		SetChannelBitRepare(i, RAM.OutputCommand,GetChannelBitRepare(i, RAM.LocalCommand));
 3615              		.loc 1 568 3
 3616 043a 2D49     		ldr	r1, .L267
 3617 043c D7F89801 		ldr	r0, [r7, #408]
 3618 0440 304B     		ldr	r3, .L267+20
 3619 0442 9847     		blx	r3
 3620              	.LVL83:
 3621 0444 0346     		mov	r3, r0
 3622 0446 1A46     		mov	r2, r3
 3623 0448 2F49     		ldr	r1, .L267+24
 3624 044a D7F89801 		ldr	r0, [r7, #408]
 3625 044e 354B     		ldr	r3, .L267+52
 3626 0450 9847     		blx	r3
 3627              	.LVL84:
 569:src/translator.c **** 		SetChannelBitReserv(i, RAM.OutputCommand,GetChannelBitReserv(i, RAM.LocalCommand));
 3628              		.loc 1 569 3
 3629 0452 2749     		ldr	r1, .L267
 3630 0454 D7F89801 		ldr	r0, [r7, #408]
 3631 0458 304B     		ldr	r3, .L267+44
 3632 045a 9847     		blx	r3
 3633              	.LVL85:
 3634 045c 0346     		mov	r3, r0
 3635 045e 1A46     		mov	r2, r3
 3636 0460 2949     		ldr	r1, .L267+24
 3637 0462 D7F89801 		ldr	r0, [r7, #408]
 3638 0466 2E4B     		ldr	r3, .L267+48
 3639 0468 9847     		blx	r3
 3640              	.LVL86:
 570:src/translator.c **** 
 571:src/translator.c **** 		if (GetChannelBitDirect(i, RAM.LocalCommand) == 1) {
 3641              		.loc 1 571 7
 3642 046a 2149     		ldr	r1, .L267
 3643 046c D7F89801 		ldr	r0, [r7, #408]
 3644 0470 284B     		ldr	r3, .L267+36
 3645 0472 9847     		blx	r3
 3646              	.LVL87:
 3647 0474 0346     		mov	r3, r0
 3648              		.loc 1 571 6
 3649 0476 012B     		cmp	r3, #1
 3650 0478 12D1     		bne	.L180
 572:src/translator.c **** 			SetChannelBitDirect(i, RAM.OutputCommand, 1);
 3651              		.loc 1 572 4
 3652 047a 0122     		movs	r2, #1
 3653 047c 2249     		ldr	r1, .L267+24
 3654 047e D7F89801 		ldr	r0, [r7, #408]
 3655 0482 254B     		ldr	r3, .L267+40
 3656 0484 9847     		blx	r3
 3657              	.LVL88:
 573:src/translator.c **** 
 574:src/translator.c **** 			SetChannelBitSignal(i, RAM.OutputCommand,
 3658              		.loc 1 574 4
 3659 0486 1A49     		ldr	r1, .L267
 3660 0488 D7F89801 		ldr	r0, [r7, #408]
 3661 048c 1F4B     		ldr	r3, .L267+28
 3662 048e 9847     		blx	r3
 3663              	.LVL89:
 3664 0490 0346     		mov	r3, r0
 3665 0492 1A46     		mov	r2, r3
 3666 0494 1C49     		ldr	r1, .L267+24
 3667 0496 D7F89801 		ldr	r0, [r7, #408]
 3668 049a 1D4B     		ldr	r3, .L267+32
 3669 049c 9847     		blx	r3
 3670              	.LVL90:
 3671 049e 15E0     		b	.L179
 3672              	.L180:
 575:src/translator.c **** 					GetChannelBitSignal(i, RAM.LocalCommand));
 576:src/translator.c **** 
 577:src/translator.c **** 		} else {
 578:src/translator.c **** 			SetChannelBitDirect(i, RAM.OutputCommand, 0);
 3673              		.loc 1 578 4
 3674 04a0 0022     		movs	r2, #0
 3675 04a2 1949     		ldr	r1, .L267+24
 3676 04a4 D7F89801 		ldr	r0, [r7, #408]
 3677 04a8 1B4B     		ldr	r3, .L267+40
 3678 04aa 9847     		blx	r3
 3679              	.LVL91:
 579:src/translator.c **** 			if (GetChannelBitRepare(i, RAM.LocalCommand) == 1) {
 3680              		.loc 1 579 8
 3681 04ac 1049     		ldr	r1, .L267
 3682 04ae D7F89801 		ldr	r0, [r7, #408]
 3683 04b2 144B     		ldr	r3, .L267+20
 3684 04b4 9847     		blx	r3
 3685              	.LVL92:
 3686 04b6 0346     		mov	r3, r0
 3687              		.loc 1 579 7
 3688 04b8 012B     		cmp	r3, #1
 3689 04ba 07D1     		bne	.L179
 580:src/translator.c **** 				SetChannelBitSignal(i, RAM.OutputCommand, 0);
 3690              		.loc 1 580 5
 3691 04bc 0022     		movs	r2, #0
 3692 04be 1249     		ldr	r1, .L267+24
 3693 04c0 D7F89801 		ldr	r0, [r7, #408]
 3694 04c4 124B     		ldr	r3, .L267+32
 3695 04c6 9847     		blx	r3
 3696              	.LVL93:
 3697 04c8 00E0     		b	.L179
 3698              	.L258:
 566:src/translator.c **** 
 3699              		.loc 1 566 4
 3700 04ca 00BF     		nop
 3701              	.L179:
 564:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 3702              		.loc 1 564 26 discriminator 2
 3703 04cc D7F89831 		ldr	r3, [r7, #408]
 3704 04d0 0133     		adds	r3, r3, #1
 3705 04d2 C7F89831 		str	r3, [r7, #408]
 3706              	.L177:
 564:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 3707              		.loc 1 564 2 discriminator 1
 3708 04d6 D7F89831 		ldr	r3, [r7, #408]
 3709 04da 072B     		cmp	r3, #7
 3710 04dc 9FDD     		ble	.L181
 3711              	.LBE32:
 581:src/translator.c **** 			}
 582:src/translator.c **** 
 583:src/translator.c **** 		}
 584:src/translator.c **** 
 585:src/translator.c **** 	}
 586:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 57);
 3712              		.loc 1 586 2
 3713 04de 3921     		movs	r1, #57
 3714 04e0 1C20     		movs	r0, #28
 3715 04e2 064B     		ldr	r3, .L267+12
 3716 04e4 9847     		blx	r3
 3717              	.LVL94:
 3718              	.LBB33:
 587:src/translator.c **** 	//grafs check
 588:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 3719              		.loc 1 588 11
 3720 04e6 0023     		movs	r3, #0
 3721 04e8 C7F89431 		str	r3, [r7, #404]
 3722              		.loc 1 588 2
 3723 04ec CAE3     		b	.L182
 3724              	.L268:
 3725 04ee 00BF     		.align	2
 3726              	.L267:
 3727 04f0 00000000 		.word	RAM
 3728 04f4 00000000 		.word	CheckErrors
 3729 04f8 00000000 		.word	CheckDiscretMask
 3730 04fc 00000000 		.word	BKP_WriteBackupRegister
 3731 0500 FC030000 		.word	RAM+1020
 3732 0504 00000000 		.word	GetChannelBitRepare
 3733 0508 04000000 		.word	RAM+4
 3734 050c 00000000 		.word	GetChannelBitSignal
 3735 0510 00000000 		.word	SetChannelBitSignal
 3736 0514 00000000 		.word	GetChannelBitDirect
 3737 0518 00000000 		.word	SetChannelBitDirect
 3738 051c 00000000 		.word	GetChannelBitReserv
 3739 0520 00000000 		.word	SetChannelBitReserv
 3740 0524 00000000 		.word	SetChannelBitRepare
 3741              	.L206:
 3742              	.LBB34:
 589:src/translator.c **** 		uint16 tmpGrNum = pxConfig->devcfg.logica.confCU[i].grafNum;
 3743              		.loc 1 589 10
 3744 0528 D7F86011 		ldr	r1, [r7, #352]
 3745 052c D7F89421 		ldr	r2, [r7, #404]
 3746 0530 1346     		mov	r3, r2
 3747 0532 5B00     		lsls	r3, r3, #1
 3748 0534 1344     		add	r3, r3, r2
 3749 0536 9B00     		lsls	r3, r3, #2
 3750 0538 0B44     		add	r3, r3, r1
 3751 053a 03F58063 		add	r3, r3, #1024
 3752 053e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3753 0540 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3754 0542 1B02     		lsls	r3, r3, #8
 3755 0544 1343     		orrs	r3, r3, r2
 3756 0546 A7F89231 		strh	r3, [r7, #402]	@ movhi
 590:src/translator.c **** 
 591:src/translator.c **** 		if (GetChannelBitRepare(i, RAM.OutputCommand)) {
 3757              		.loc 1 591 7
 3758 054a D749     		ldr	r1, .L269
 3759 054c D7F89401 		ldr	r0, [r7, #404]
 3760 0550 D64B     		ldr	r3, .L269+4
 3761 0552 9847     		blx	r3
 3762              	.LVL95:
 3763 0554 0346     		mov	r3, r0
 3764              		.loc 1 591 6
 3765 0556 002B     		cmp	r3, #0
 3766 0558 40F08C83 		bne	.L259
 592:src/translator.c **** 
 593:src/translator.c **** 			continue;
 594:src/translator.c **** 		}
 595:src/translator.c **** 
 596:src/translator.c **** 		if (GetChannelBitDirect(i, RAM.OutputCommand)) {
 3767              		.loc 1 596 7
 3768 055c D249     		ldr	r1, .L269
 3769 055e D7F89401 		ldr	r0, [r7, #404]
 3770 0562 D34B     		ldr	r3, .L269+8
 3771 0564 9847     		blx	r3
 3772              	.LVL96:
 3773 0566 0346     		mov	r3, r0
 3774              		.loc 1 596 6
 3775 0568 002B     		cmp	r3, #0
 3776 056a 40F08583 		bne	.L260
 597:src/translator.c **** 			continue;
 598:src/translator.c **** 		}
 599:src/translator.c **** 
 600:src/translator.c **** 		if (tmpGrNum > 0 && tmpGrNum < 5) {
 3777              		.loc 1 600 6
 3778 056e B7F89231 		ldrh	r3, [r7, #402]
 3779 0572 002B     		cmp	r3, #0
 3780 0574 00F01281 		beq	.L186
 3781              		.loc 1 600 20 discriminator 1
 3782 0578 B7F89231 		ldrh	r3, [r7, #402]
 3783 057c 042B     		cmp	r3, #4
 3784 057e 00F20D81 		bhi	.L186
 3785              	.LBB35:
 601:src/translator.c **** 			tmpGrNum--;
 3786              		.loc 1 601 12
 3787 0582 B7F89231 		ldrh	r3, [r7, #402]
 3788 0586 013B     		subs	r3, r3, #1
 3789 0588 A7F89231 		strh	r3, [r7, #402]	@ movhi
 602:src/translator.c **** 			reverseDay = false;
 3790              		.loc 1 602 15
 3791 058c 0023     		movs	r3, #0
 3792 058e 87F8BF31 		strb	r3, [r7, #447]
 603:src/translator.c **** 			uint8 tmp = 0;
 3793              		.loc 1 603 10
 3794 0592 0023     		movs	r3, #0
 3795 0594 87F85A31 		strb	r3, [r7, #346]
 604:src/translator.c **** 			uint8 startHour =
 605:src/translator.c **** 					pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month - 1][dt.Data
 606:src/translator.c **** 							- 1].StartHour;
 3796              		.loc 1 606 12
 3797 0598 B7F89221 		ldrh	r2, [r7, #402]
 605:src/translator.c **** 							- 1].StartHour;
 3798              		.loc 1 605 51
 3799 059c B7F82A31 		ldrh	r3, [r7, #298]
 605:src/translator.c **** 							- 1].StartHour;
 3800              		.loc 1 605 58
 3801 05a0 013B     		subs	r3, r3, #1
 605:src/translator.c **** 							- 1].StartHour;
 3802              		.loc 1 605 65
 3803 05a2 B7F82C11 		ldrh	r1, [r7, #300]
 3804              		.loc 1 606 8
 3805 05a6 481E     		subs	r0, r1, #1
 604:src/translator.c **** 			uint8 startHour =
 3806              		.loc 1 604 10
 3807 05a8 D7F86011 		ldr	r1, [r7, #352]
 3808 05ac 5C01     		lsls	r4, r3, #5
 3809 05ae 1346     		mov	r3, r2
 3810 05b0 5B00     		lsls	r3, r3, #1
 3811 05b2 1344     		add	r3, r3, r2
 3812 05b4 DB01     		lsls	r3, r3, #7
 3813 05b6 1344     		add	r3, r3, r2
 3814 05b8 2344     		add	r3, r3, r4
 3815 05ba 0344     		add	r3, r3, r0
 3816 05bc 03F52073 		add	r3, r3, #640
 3817 05c0 9B00     		lsls	r3, r3, #2
 3818 05c2 0B44     		add	r3, r3, r1
 3819 05c4 5B78     		ldrb	r3, [r3, #1]
 3820 05c6 87F89131 		strb	r3, [r7, #401]
 607:src/translator.c **** 			uint8 startMin = pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month
 608:src/translator.c **** 					- 1][dt.Data - 1].StartMin;
 3821              		.loc 1 608 23
 3822 05ca B7F89221 		ldrh	r2, [r7, #402]
 607:src/translator.c **** 			uint8 startMin = pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month
 3823              		.loc 1 607 66
 3824 05ce B7F82A31 		ldrh	r3, [r7, #298]
 3825              		.loc 1 608 6
 3826 05d2 013B     		subs	r3, r3, #1
 3827              		.loc 1 608 13
 3828 05d4 B7F82C11 		ldrh	r1, [r7, #300]
 3829              		.loc 1 608 19
 3830 05d8 481E     		subs	r0, r1, #1
 607:src/translator.c **** 			uint8 startMin = pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month
 3831              		.loc 1 607 10
 3832 05da D7F86011 		ldr	r1, [r7, #352]
 3833 05de 5C01     		lsls	r4, r3, #5
 3834 05e0 1346     		mov	r3, r2
 3835 05e2 5B00     		lsls	r3, r3, #1
 3836 05e4 1344     		add	r3, r3, r2
 3837 05e6 DB01     		lsls	r3, r3, #7
 3838 05e8 1344     		add	r3, r3, r2
 3839 05ea 2344     		add	r3, r3, r4
 3840 05ec 0344     		add	r3, r3, r0
 3841 05ee 03F52073 		add	r3, r3, #640
 3842 05f2 11F82330 		ldrb	r3, [r1, r3, lsl #2]
 3843 05f6 87F89031 		strb	r3, [r7, #400]
 609:src/translator.c **** 			uint8 finishHour =
 610:src/translator.c **** 					pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month - 1][dt.Data
 611:src/translator.c **** 							- 1].FinishHour;
 3844              		.loc 1 611 12
 3845 05fa B7F89221 		ldrh	r2, [r7, #402]
 610:src/translator.c **** 							- 1].FinishHour;
 3846              		.loc 1 610 51
 3847 05fe B7F82A31 		ldrh	r3, [r7, #298]
 610:src/translator.c **** 							- 1].FinishHour;
 3848              		.loc 1 610 58
 3849 0602 013B     		subs	r3, r3, #1
 610:src/translator.c **** 							- 1].FinishHour;
 3850              		.loc 1 610 65
 3851 0604 B7F82C11 		ldrh	r1, [r7, #300]
 3852              		.loc 1 611 8
 3853 0608 481E     		subs	r0, r1, #1
 609:src/translator.c **** 			uint8 finishHour =
 3854              		.loc 1 609 10
 3855 060a D7F86011 		ldr	r1, [r7, #352]
 3856 060e 5C01     		lsls	r4, r3, #5
 3857 0610 1346     		mov	r3, r2
 3858 0612 5B00     		lsls	r3, r3, #1
 3859 0614 1344     		add	r3, r3, r2
 3860 0616 DB01     		lsls	r3, r3, #7
 3861 0618 1344     		add	r3, r3, r2
 3862 061a 2344     		add	r3, r3, r4
 3863 061c 0344     		add	r3, r3, r0
 3864 061e 03F52073 		add	r3, r3, #640
 3865 0622 9B00     		lsls	r3, r3, #2
 3866 0624 0B44     		add	r3, r3, r1
 3867 0626 DB78     		ldrb	r3, [r3, #3]
 3868 0628 87F88F31 		strb	r3, [r7, #399]
 612:src/translator.c **** 			uint8 finishMin =
 613:src/translator.c **** 					pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month - 1][dt.Data
 614:src/translator.c **** 							- 1].FinishMin;
 3869              		.loc 1 614 12
 3870 062c B7F89221 		ldrh	r2, [r7, #402]
 613:src/translator.c **** 							- 1].FinishMin;
 3871              		.loc 1 613 51
 3872 0630 B7F82A31 		ldrh	r3, [r7, #298]
 613:src/translator.c **** 							- 1].FinishMin;
 3873              		.loc 1 613 58
 3874 0634 013B     		subs	r3, r3, #1
 613:src/translator.c **** 							- 1].FinishMin;
 3875              		.loc 1 613 65
 3876 0636 B7F82C11 		ldrh	r1, [r7, #300]
 3877              		.loc 1 614 8
 3878 063a 481E     		subs	r0, r1, #1
 612:src/translator.c **** 			uint8 finishMin =
 3879              		.loc 1 612 10
 3880 063c D7F86011 		ldr	r1, [r7, #352]
 3881 0640 5C01     		lsls	r4, r3, #5
 3882 0642 1346     		mov	r3, r2
 3883 0644 5B00     		lsls	r3, r3, #1
 3884 0646 1344     		add	r3, r3, r2
 3885 0648 DB01     		lsls	r3, r3, #7
 3886 064a 1344     		add	r3, r3, r2
 3887 064c 2344     		add	r3, r3, r4
 3888 064e 0344     		add	r3, r3, r0
 3889 0650 03F52073 		add	r3, r3, #640
 3890 0654 9B00     		lsls	r3, r3, #2
 3891 0656 0B44     		add	r3, r3, r1
 3892 0658 9B78     		ldrb	r3, [r3, #2]
 3893 065a 87F88E31 		strb	r3, [r7, #398]
 615:src/translator.c **** 			if (startHour * 60 + startMin > finishHour * 60 + finishMin) {
 3894              		.loc 1 615 18
 3895 065e 97F89121 		ldrb	r2, [r7, #401]	@ zero_extendqisi2
 3896 0662 1346     		mov	r3, r2
 3897 0664 1B01     		lsls	r3, r3, #4
 3898 0666 9B1A     		subs	r3, r3, r2
 3899 0668 9B00     		lsls	r3, r3, #2
 3900 066a 1A46     		mov	r2, r3
 3901              		.loc 1 615 23
 3902 066c 97F89031 		ldrb	r3, [r7, #400]	@ zero_extendqisi2
 3903 0670 D118     		adds	r1, r2, r3
 3904              		.loc 1 615 47
 3905 0672 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 3906 0676 1346     		mov	r3, r2
 3907 0678 1B01     		lsls	r3, r3, #4
 3908 067a 9B1A     		subs	r3, r3, r2
 3909 067c 9B00     		lsls	r3, r3, #2
 3910 067e 1A46     		mov	r2, r3
 3911              		.loc 1 615 52
 3912 0680 97F88E31 		ldrb	r3, [r7, #398]	@ zero_extendqisi2
 3913 0684 1344     		add	r3, r3, r2
 3914              		.loc 1 615 7
 3915 0686 9942     		cmp	r1, r3
 3916 0688 1ADD     		ble	.L187
 616:src/translator.c **** 				reverseDay = true;
 3917              		.loc 1 616 16
 3918 068a 0123     		movs	r3, #1
 3919 068c 87F8BF31 		strb	r3, [r7, #447]
 617:src/translator.c **** 				tmp = startHour;
 3920              		.loc 1 617 9
 3921 0690 97F89131 		ldrb	r3, [r7, #401]
 3922 0694 87F85A31 		strb	r3, [r7, #346]
 618:src/translator.c **** 				startHour = finishHour;
 3923              		.loc 1 618 15
 3924 0698 97F88F31 		ldrb	r3, [r7, #399]
 3925 069c 87F89131 		strb	r3, [r7, #401]
 619:src/translator.c **** 				finishHour = tmp;
 3926              		.loc 1 619 16
 3927 06a0 97F85A31 		ldrb	r3, [r7, #346]
 3928 06a4 87F88F31 		strb	r3, [r7, #399]
 620:src/translator.c **** 
 621:src/translator.c **** 				tmp = startMin;
 3929              		.loc 1 621 9
 3930 06a8 97F89031 		ldrb	r3, [r7, #400]
 3931 06ac 87F85A31 		strb	r3, [r7, #346]
 622:src/translator.c **** 				startMin = finishMin;
 3932              		.loc 1 622 14
 3933 06b0 97F88E31 		ldrb	r3, [r7, #398]
 3934 06b4 87F89031 		strb	r3, [r7, #400]
 623:src/translator.c **** 				finishMin = tmp;
 3935              		.loc 1 623 15
 3936 06b8 97F85A31 		ldrb	r3, [r7, #346]
 3937 06bc 87F88E31 		strb	r3, [r7, #398]
 3938              	.L187:
 624:src/translator.c **** 			}
 625:src/translator.c **** 			//-------------- graph 1-3 without economy-------------------
 626:src/translator.c **** 			if(!((finishHour==startHour)&(finishMin==startMin)))
 3939              		.loc 1 626 32
 3940 06c0 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 3941 06c4 97F89131 		ldrb	r3, [r7, #401]	@ zero_extendqisi2
 3942 06c8 9A42     		cmp	r2, r3
 3943 06ca 14BF     		ite	ne
 3944 06cc 0123     		movne	r3, #1
 3945 06ce 0023     		moveq	r3, #0
 3946 06d0 DAB2     		uxtb	r2, r3
 3947 06d2 97F88E11 		ldrb	r1, [r7, #398]	@ zero_extendqisi2
 3948 06d6 97F89031 		ldrb	r3, [r7, #400]	@ zero_extendqisi2
 3949 06da 9942     		cmp	r1, r3
 3950 06dc 14BF     		ite	ne
 3951 06de 0123     		movne	r3, #1
 3952 06e0 0023     		moveq	r3, #0
 3953 06e2 DBB2     		uxtb	r3, r3
 3954              		.loc 1 626 7
 3955 06e4 1343     		orrs	r3, r3, r2
 3956 06e6 DBB2     		uxtb	r3, r3
 3957              		.loc 1 626 6
 3958 06e8 002B     		cmp	r3, #0
 3959 06ea 57D0     		beq	.L186
 627:src/translator.c **** 			{
 628:src/translator.c **** 			if ((startHour * 60 + startMin <= (dt.Hour * 60 + dt.Min))
 3960              		.loc 1 628 19
 3961 06ec 97F89121 		ldrb	r2, [r7, #401]	@ zero_extendqisi2
 3962 06f0 1346     		mov	r3, r2
 3963 06f2 1B01     		lsls	r3, r3, #4
 3964 06f4 9B1A     		subs	r3, r3, r2
 3965 06f6 9B00     		lsls	r3, r3, #2
 3966 06f8 1A46     		mov	r2, r3
 3967              		.loc 1 628 24
 3968 06fa 97F89031 		ldrb	r3, [r7, #400]	@ zero_extendqisi2
 3969 06fe 1A44     		add	r2, r2, r3
 3970              		.loc 1 628 41
 3971 0700 B7F83031 		ldrh	r3, [r7, #304]
 3972 0704 1946     		mov	r1, r3
 3973              		.loc 1 628 47
 3974 0706 0B46     		mov	r3, r1
 3975 0708 1B01     		lsls	r3, r3, #4
 3976 070a 5B1A     		subs	r3, r3, r1
 3977 070c 9B00     		lsls	r3, r3, #2
 3978 070e 1946     		mov	r1, r3
 3979              		.loc 1 628 56
 3980 0710 B7F83231 		ldrh	r3, [r7, #306]
 3981              		.loc 1 628 52
 3982 0714 0B44     		add	r3, r3, r1
 3983              		.loc 1 628 7
 3984 0716 9A42     		cmp	r2, r3
 3985 0718 2BDC     		bgt	.L188
 629:src/translator.c **** 					&& (finishHour * 60 + finishMin > (dt.Hour * 60 + dt.Min))) {
 3986              		.loc 1 629 21
 3987 071a 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 3988 071e 1346     		mov	r3, r2
 3989 0720 1B01     		lsls	r3, r3, #4
 3990 0722 9B1A     		subs	r3, r3, r2
 3991 0724 9B00     		lsls	r3, r3, #2
 3992 0726 1A46     		mov	r2, r3
 3993              		.loc 1 629 26
 3994 0728 97F88E31 		ldrb	r3, [r7, #398]	@ zero_extendqisi2
 3995 072c 1A44     		add	r2, r2, r3
 3996              		.loc 1 629 43
 3997 072e B7F83031 		ldrh	r3, [r7, #304]
 3998 0732 1946     		mov	r1, r3
 3999              		.loc 1 629 49
 4000 0734 0B46     		mov	r3, r1
 4001 0736 1B01     		lsls	r3, r3, #4
 4002 0738 5B1A     		subs	r3, r3, r1
 4003 073a 9B00     		lsls	r3, r3, #2
 4004 073c 1946     		mov	r1, r3
 4005              		.loc 1 629 58
 4006 073e B7F83231 		ldrh	r3, [r7, #306]
 4007              		.loc 1 629 54
 4008 0742 0B44     		add	r3, r3, r1
 4009              		.loc 1 629 6
 4010 0744 9A42     		cmp	r2, r3
 4011 0746 14DD     		ble	.L188
 630:src/translator.c **** 				if (!reverseDay)
 4012              		.loc 1 630 9
 4013 0748 97F8BF31 		ldrb	r3, [r7, #447]
 4014 074c 83F00103 		eor	r3, r3, #1
 4015 0750 DBB2     		uxtb	r3, r3
 4016              		.loc 1 630 8
 4017 0752 002B     		cmp	r3, #0
 4018 0754 06D0     		beq	.L189
 631:src/translator.c **** 					SetChannelBitSignal(i, RAM.OutputCommand, 0);
 4019              		.loc 1 631 6
 4020 0756 0022     		movs	r2, #0
 4021 0758 5349     		ldr	r1, .L269
 4022 075a D7F89401 		ldr	r0, [r7, #404]
 4023 075e 554B     		ldr	r3, .L269+12
 4024 0760 9847     		blx	r3
 4025              	.LVL97:
 632:src/translator.c **** 				else
 633:src/translator.c **** 					SetChannelBitSignal(i, RAM.OutputCommand, 1);
 634:src/translator.c **** 				continue;
 4026              		.loc 1 634 5
 4027 0762 8AE2     		b	.L184
 4028              	.L189:
 633:src/translator.c **** 				continue;
 4029              		.loc 1 633 6
 4030 0764 0122     		movs	r2, #1
 4031 0766 5049     		ldr	r1, .L269
 4032 0768 D7F89401 		ldr	r0, [r7, #404]
 4033 076c 514B     		ldr	r3, .L269+12
 4034 076e 9847     		blx	r3
 4035              	.LVL98:
 4036              		.loc 1 634 5
 4037 0770 83E2     		b	.L184
 4038              	.L188:
 635:src/translator.c **** 			} else {
 636:src/translator.c **** 				if (!reverseDay)
 4039              		.loc 1 636 9
 4040 0772 97F8BF31 		ldrb	r3, [r7, #447]
 4041 0776 83F00103 		eor	r3, r3, #1
 4042 077a DBB2     		uxtb	r3, r3
 4043              		.loc 1 636 8
 4044 077c 002B     		cmp	r3, #0
 4045 077e 06D0     		beq	.L191
 637:src/translator.c **** 					SetChannelBitSignal(i, RAM.OutputCommand, 1);
 4046              		.loc 1 637 6
 4047 0780 0122     		movs	r2, #1
 4048 0782 4949     		ldr	r1, .L269
 4049 0784 D7F89401 		ldr	r0, [r7, #404]
 4050 0788 4A4B     		ldr	r3, .L269+12
 4051 078a 9847     		blx	r3
 4052              	.LVL99:
 638:src/translator.c **** 				else
 639:src/translator.c **** 					SetChannelBitSignal(i, RAM.OutputCommand, 0);
 640:src/translator.c **** 				continue;
 4053              		.loc 1 640 5
 4054 078c 75E2     		b	.L184
 4055              	.L191:
 639:src/translator.c **** 				continue;
 4056              		.loc 1 639 6
 4057 078e 0022     		movs	r2, #0
 4058 0790 4549     		ldr	r1, .L269
 4059 0792 D7F89401 		ldr	r0, [r7, #404]
 4060 0796 474B     		ldr	r3, .L269+12
 4061 0798 9847     		blx	r3
 4062              	.LVL100:
 4063              		.loc 1 640 5
 4064 079a 6EE2     		b	.L184
 4065              	.L186:
 4066              	.LBE35:
 641:src/translator.c **** 			}
 642:src/translator.c **** 			}
 643:src/translator.c **** 		}
 644:src/translator.c **** 		BKP_WriteBackupRegister(BKP_DR7, 58);
 4067              		.loc 1 644 3
 4068 079c 3A21     		movs	r1, #58
 4069 079e 1C20     		movs	r0, #28
 4070 07a0 454B     		ldr	r3, .L269+16
 4071 07a2 9847     		blx	r3
 4072              	.LVL101:
 645:src/translator.c **** 		if (tmpGrNum == 5) {
 4073              		.loc 1 645 6
 4074 07a4 B7F89231 		ldrh	r3, [r7, #402]
 4075 07a8 052B     		cmp	r3, #5
 4076 07aa 40F08E80 		bne	.L193
 4077              	.LBB36:
 646:src/translator.c **** 			tmpGrNum--;
 4078              		.loc 1 646 12
 4079 07ae B7F89231 		ldrh	r3, [r7, #402]
 4080 07b2 013B     		subs	r3, r3, #1
 4081 07b4 A7F89231 		strh	r3, [r7, #402]	@ movhi
 647:src/translator.c **** 
 648:src/translator.c **** 			uint8 startMonth = pxConfig->devconst.Schedule4.StartMonth;
 4082              		.loc 1 648 10
 4083 07b8 D7F86031 		ldr	r3, [r7, #352]
 4084 07bc 03F58053 		add	r3, r3, #4096
 4085 07c0 93F80D3C 		ldrb	r3, [r3, #3085]
 4086 07c4 87F84F31 		strb	r3, [r7, #335]
 649:src/translator.c **** 			uint8 startDate = pxConfig->devconst.Schedule4.StartDay;
 4087              		.loc 1 649 10
 4088 07c8 D7F86031 		ldr	r3, [r7, #352]
 4089 07cc 03F58053 		add	r3, r3, #4096
 4090 07d0 93F80C3C 		ldrb	r3, [r3, #3084]
 4091 07d4 87F84E31 		strb	r3, [r7, #334]
 650:src/translator.c **** 			uint8 finishMonth = pxConfig->devconst.Schedule4.FinishMonth;
 4092              		.loc 1 650 10
 4093 07d8 D7F86031 		ldr	r3, [r7, #352]
 4094 07dc 03F58053 		add	r3, r3, #4096
 4095 07e0 93F80F3C 		ldrb	r3, [r3, #3087]
 4096 07e4 87F84D31 		strb	r3, [r7, #333]
 651:src/translator.c **** 			uint8 finishDate = pxConfig->devconst.Schedule4.FinishDay;
 4097              		.loc 1 651 10
 4098 07e8 D7F86031 		ldr	r3, [r7, #352]
 4099 07ec 03F58053 		add	r3, r3, #4096
 4100 07f0 93F80E3C 		ldrb	r3, [r3, #3086]
 4101 07f4 87F84C31 		strb	r3, [r7, #332]
 652:src/translator.c **** 
 653:src/translator.c **** 			uint8 FnMonth =
 4102              		.loc 1 653 10
 4103 07f8 97F84D21 		ldrb	r2, [r7, #333]	@ zero_extendqisi2
 4104 07fc 97F84F31 		ldrb	r3, [r7, #335]	@ zero_extendqisi2
 4105 0800 9A42     		cmp	r2, r3
 4106 0802 04D8     		bhi	.L194
 4107              		.loc 1 653 10 is_stmt 0 discriminator 1
 4108 0804 97F84D31 		ldrb	r3, [r7, #333]
 4109 0808 0C33     		adds	r3, r3, #12
 4110 080a DBB2     		uxtb	r3, r3
 4111 080c 01E0     		b	.L195
 4112              	.L194:
 4113              		.loc 1 653 10 discriminator 2
 4114 080e 97F84D31 		ldrb	r3, [r7, #333]	@ zero_extendqisi2
 4115              	.L195:
 4116              		.loc 1 653 10 discriminator 4
 4117 0812 87F84B31 		strb	r3, [r7, #331]
 654:src/translator.c **** 					(finishMonth > startMonth) ?
 655:src/translator.c **** 							finishMonth : (finishMonth + 12);
 656:src/translator.c **** 			uint8 CurMonth =
 657:src/translator.c **** 					(dt.Month * 31 + dt.Data >= startMonth * 31 + startDate) ?
 4118              		.loc 1 657 9 is_stmt 1 discriminator 4
 4119 0816 B7F82A31 		ldrh	r3, [r7, #298]
 4120 081a 1A46     		mov	r2, r3
 4121              		.loc 1 657 16 discriminator 4
 4122 081c 1346     		mov	r3, r2
 4123 081e 5B01     		lsls	r3, r3, #5
 4124 0820 9B1A     		subs	r3, r3, r2
 4125              		.loc 1 657 25 discriminator 4
 4126 0822 B7F82C21 		ldrh	r2, [r7, #300]
 4127              		.loc 1 657 21 discriminator 4
 4128 0826 9918     		adds	r1, r3, r2
 4129              		.loc 1 657 45 discriminator 4
 4130 0828 97F84F21 		ldrb	r2, [r7, #335]	@ zero_extendqisi2
 4131 082c 1346     		mov	r3, r2
 4132 082e 5B01     		lsls	r3, r3, #5
 4133 0830 9A1A     		subs	r2, r3, r2
 4134              		.loc 1 657 50 discriminator 4
 4135 0832 97F84E31 		ldrb	r3, [r7, #334]	@ zero_extendqisi2
 4136 0836 1344     		add	r3, r3, r2
 656:src/translator.c **** 					(dt.Month * 31 + dt.Data >= startMonth * 31 + startDate) ?
 4137              		.loc 1 656 10 discriminator 4
 4138 0838 9942     		cmp	r1, r3
 4139 083a 03DB     		blt	.L196
 658:src/translator.c **** 							dt.Month : (dt.Month + 12);
 4140              		.loc 1 658 10 discriminator 1
 4141 083c B7F82A31 		ldrh	r3, [r7, #298]
 656:src/translator.c **** 					(dt.Month * 31 + dt.Data >= startMonth * 31 + startDate) ?
 4142              		.loc 1 656 10 discriminator 1
 4143 0840 DBB2     		uxtb	r3, r3
 4144 0842 04E0     		b	.L197
 4145              	.L196:
 4146              		.loc 1 658 22 discriminator 2
 4147 0844 B7F82A31 		ldrh	r3, [r7, #298]
 4148              		.loc 1 658 29 discriminator 2
 4149 0848 DBB2     		uxtb	r3, r3
 656:src/translator.c **** 					(dt.Month * 31 + dt.Data >= startMonth * 31 + startDate) ?
 4150              		.loc 1 656 10 discriminator 2
 4151 084a 0C33     		adds	r3, r3, #12
 4152 084c DBB2     		uxtb	r3, r3
 4153              	.L197:
 656:src/translator.c **** 					(dt.Month * 31 + dt.Data >= startMonth * 31 + startDate) ?
 4154              		.loc 1 656 10 is_stmt 0 discriminator 4
 4155 084e 87F84A31 		strb	r3, [r7, #330]
 659:src/translator.c **** 			//-------------- graph 4 heating-------------------
 660:src/translator.c **** 			if ((startMonth * 31 + startDate <= CurMonth * 31 + dt.Data)
 4156              		.loc 1 660 20 is_stmt 1 discriminator 4
 4157 0852 97F84F21 		ldrb	r2, [r7, #335]	@ zero_extendqisi2
 4158 0856 1346     		mov	r3, r2
 4159 0858 5B01     		lsls	r3, r3, #5
 4160 085a 9A1A     		subs	r2, r3, r2
 4161              		.loc 1 660 25 discriminator 4
 4162 085c 97F84E31 		ldrb	r3, [r7, #334]	@ zero_extendqisi2
 4163 0860 D118     		adds	r1, r2, r3
 4164              		.loc 1 660 49 discriminator 4
 4165 0862 97F84A21 		ldrb	r2, [r7, #330]	@ zero_extendqisi2
 4166 0866 1346     		mov	r3, r2
 4167 0868 5B01     		lsls	r3, r3, #5
 4168 086a 9B1A     		subs	r3, r3, r2
 4169              		.loc 1 660 58 discriminator 4
 4170 086c B7F82C21 		ldrh	r2, [r7, #300]
 4171              		.loc 1 660 54 discriminator 4
 4172 0870 1344     		add	r3, r3, r2
 4173              		.loc 1 660 7 discriminator 4
 4174 0872 9942     		cmp	r1, r3
 4175 0874 22DC     		bgt	.L198
 661:src/translator.c **** 					&& (FnMonth * 31 + finishDate > CurMonth * 31 + dt.Data)) {
 4176              		.loc 1 661 18
 4177 0876 97F84B21 		ldrb	r2, [r7, #331]	@ zero_extendqisi2
 4178 087a 1346     		mov	r3, r2
 4179 087c 5B01     		lsls	r3, r3, #5
 4180 087e 9A1A     		subs	r2, r3, r2
 4181              		.loc 1 661 23
 4182 0880 97F84C31 		ldrb	r3, [r7, #332]	@ zero_extendqisi2
 4183 0884 D118     		adds	r1, r2, r3
 4184              		.loc 1 661 47
 4185 0886 97F84A21 		ldrb	r2, [r7, #330]	@ zero_extendqisi2
 4186 088a 1346     		mov	r3, r2
 4187 088c 5B01     		lsls	r3, r3, #5
 4188 088e 9B1A     		subs	r3, r3, r2
 4189              		.loc 1 661 56
 4190 0890 B7F82C21 		ldrh	r2, [r7, #300]
 4191              		.loc 1 661 52
 4192 0894 1344     		add	r3, r3, r2
 4193              		.loc 1 661 6
 4194 0896 9942     		cmp	r1, r3
 4195 0898 10DD     		ble	.L198
 662:src/translator.c **** 				SetChannelBitSignal(i, RAM.OutputCommand, 1);
 4196              		.loc 1 662 5
 4197 089a 0122     		movs	r2, #1
 4198 089c 0249     		ldr	r1, .L269
 4199 089e D7F89401 		ldr	r0, [r7, #404]
 4200 08a2 044B     		ldr	r3, .L269+12
 4201 08a4 9847     		blx	r3
 4202              	.LVL102:
 663:src/translator.c **** 				continue;
 4203              		.loc 1 663 5
 4204 08a6 E8E1     		b	.L184
 4205              	.L270:
 4206              		.align	2
 4207              	.L269:
 4208 08a8 04000000 		.word	RAM+4
 4209 08ac 00000000 		.word	GetChannelBitRepare
 4210 08b0 00000000 		.word	GetChannelBitDirect
 4211 08b4 00000000 		.word	SetChannelBitSignal
 4212 08b8 00000000 		.word	BKP_WriteBackupRegister
 4213              	.L198:
 664:src/translator.c **** 			} else {
 665:src/translator.c **** 				SetChannelBitSignal(i, RAM.OutputCommand, 0);
 4214              		.loc 1 665 5
 4215 08bc 0022     		movs	r2, #0
 4216 08be E449     		ldr	r1, .L271
 4217 08c0 D7F89401 		ldr	r0, [r7, #404]
 4218 08c4 E34B     		ldr	r3, .L271+4
 4219 08c6 9847     		blx	r3
 4220              	.LVL103:
 666:src/translator.c **** 				continue;
 4221              		.loc 1 666 5
 4222 08c8 D7E1     		b	.L184
 4223              	.L193:
 4224              	.LBE36:
 667:src/translator.c **** 			}
 668:src/translator.c **** 		}
 669:src/translator.c **** 		if (tmpGrNum < 9 && tmpGrNum > 5) {
 4225              		.loc 1 669 6
 4226 08ca B7F89231 		ldrh	r3, [r7, #402]
 4227 08ce 082B     		cmp	r3, #8
 4228 08d0 00F2D381 		bhi	.L184
 4229              		.loc 1 669 20 discriminator 1
 4230 08d4 B7F89231 		ldrh	r3, [r7, #402]
 4231 08d8 052B     		cmp	r3, #5
 4232 08da 40F2CE81 		bls	.L184
 4233              	.LBB37:
 670:src/translator.c **** 			tmpGrNum -= 6;
 4234              		.loc 1 670 13
 4235 08de B7F89231 		ldrh	r3, [r7, #402]	@ movhi
 4236 08e2 063B     		subs	r3, r3, #6
 4237 08e4 A7F89231 		strh	r3, [r7, #402]	@ movhi
 671:src/translator.c **** 			uint8 startHour =
 672:src/translator.c **** 					pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month - 1][dt.Data
 673:src/translator.c **** 							- 1].StartHour;
 4238              		.loc 1 673 12
 4239 08e8 B7F89221 		ldrh	r2, [r7, #402]
 672:src/translator.c **** 							- 1].StartHour;
 4240              		.loc 1 672 51
 4241 08ec B7F82A31 		ldrh	r3, [r7, #298]
 672:src/translator.c **** 							- 1].StartHour;
 4242              		.loc 1 672 58
 4243 08f0 013B     		subs	r3, r3, #1
 672:src/translator.c **** 							- 1].StartHour;
 4244              		.loc 1 672 65
 4245 08f2 B7F82C11 		ldrh	r1, [r7, #300]
 4246              		.loc 1 673 8
 4247 08f6 481E     		subs	r0, r1, #1
 671:src/translator.c **** 			uint8 startHour =
 4248              		.loc 1 671 10
 4249 08f8 D7F86011 		ldr	r1, [r7, #352]
 4250 08fc 5C01     		lsls	r4, r3, #5
 4251 08fe 1346     		mov	r3, r2
 4252 0900 5B00     		lsls	r3, r3, #1
 4253 0902 1344     		add	r3, r3, r2
 4254 0904 DB01     		lsls	r3, r3, #7
 4255 0906 1344     		add	r3, r3, r2
 4256 0908 2344     		add	r3, r3, r4
 4257 090a 0344     		add	r3, r3, r0
 4258 090c 03F52073 		add	r3, r3, #640
 4259 0910 9B00     		lsls	r3, r3, #2
 4260 0912 0B44     		add	r3, r3, r1
 4261 0914 5B78     		ldrb	r3, [r3, #1]
 4262 0916 87F85931 		strb	r3, [r7, #345]
 674:src/translator.c **** 			uint8 startMin = pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month
 675:src/translator.c **** 					- 1][dt.Data - 1].StartMin;
 4263              		.loc 1 675 23
 4264 091a B7F89221 		ldrh	r2, [r7, #402]
 674:src/translator.c **** 			uint8 startMin = pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month
 4265              		.loc 1 674 66
 4266 091e B7F82A31 		ldrh	r3, [r7, #298]
 4267              		.loc 1 675 6
 4268 0922 013B     		subs	r3, r3, #1
 4269              		.loc 1 675 13
 4270 0924 B7F82C11 		ldrh	r1, [r7, #300]
 4271              		.loc 1 675 19
 4272 0928 481E     		subs	r0, r1, #1
 674:src/translator.c **** 			uint8 startMin = pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month
 4273              		.loc 1 674 10
 4274 092a D7F86011 		ldr	r1, [r7, #352]
 4275 092e 5C01     		lsls	r4, r3, #5
 4276 0930 1346     		mov	r3, r2
 4277 0932 5B00     		lsls	r3, r3, #1
 4278 0934 1344     		add	r3, r3, r2
 4279 0936 DB01     		lsls	r3, r3, #7
 4280 0938 1344     		add	r3, r3, r2
 4281 093a 2344     		add	r3, r3, r4
 4282 093c 0344     		add	r3, r3, r0
 4283 093e 03F52073 		add	r3, r3, #640
 4284 0942 11F82330 		ldrb	r3, [r1, r3, lsl #2]
 4285 0946 87F85831 		strb	r3, [r7, #344]
 676:src/translator.c **** 			uint8 finishHour =
 677:src/translator.c **** 					pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month - 1][dt.Data
 678:src/translator.c **** 							- 1].FinishHour;
 4286              		.loc 1 678 12
 4287 094a B7F89221 		ldrh	r2, [r7, #402]
 677:src/translator.c **** 							- 1].FinishHour;
 4288              		.loc 1 677 51
 4289 094e B7F82A31 		ldrh	r3, [r7, #298]
 677:src/translator.c **** 							- 1].FinishHour;
 4290              		.loc 1 677 58
 4291 0952 013B     		subs	r3, r3, #1
 677:src/translator.c **** 							- 1].FinishHour;
 4292              		.loc 1 677 65
 4293 0954 B7F82C11 		ldrh	r1, [r7, #300]
 4294              		.loc 1 678 8
 4295 0958 481E     		subs	r0, r1, #1
 676:src/translator.c **** 			uint8 finishHour =
 4296              		.loc 1 676 10
 4297 095a D7F86011 		ldr	r1, [r7, #352]
 4298 095e 5C01     		lsls	r4, r3, #5
 4299 0960 1346     		mov	r3, r2
 4300 0962 5B00     		lsls	r3, r3, #1
 4301 0964 1344     		add	r3, r3, r2
 4302 0966 DB01     		lsls	r3, r3, #7
 4303 0968 1344     		add	r3, r3, r2
 4304 096a 2344     		add	r3, r3, r4
 4305 096c 0344     		add	r3, r3, r0
 4306 096e 03F52073 		add	r3, r3, #640
 4307 0972 9B00     		lsls	r3, r3, #2
 4308 0974 0B44     		add	r3, r3, r1
 4309 0976 DB78     		ldrb	r3, [r3, #3]
 4310 0978 87F85731 		strb	r3, [r7, #343]
 679:src/translator.c **** 			uint8 finishMin =
 680:src/translator.c **** 					pxConfig->devconst.Graph[tmpGrNum].Shedule[dt.Month - 1][dt.Data
 681:src/translator.c **** 							- 1].FinishMin;
 4311              		.loc 1 681 12
 4312 097c B7F89221 		ldrh	r2, [r7, #402]
 680:src/translator.c **** 							- 1].FinishMin;
 4313              		.loc 1 680 51
 4314 0980 B7F82A31 		ldrh	r3, [r7, #298]
 680:src/translator.c **** 							- 1].FinishMin;
 4315              		.loc 1 680 58
 4316 0984 013B     		subs	r3, r3, #1
 680:src/translator.c **** 							- 1].FinishMin;
 4317              		.loc 1 680 65
 4318 0986 B7F82C11 		ldrh	r1, [r7, #300]
 4319              		.loc 1 681 8
 4320 098a 481E     		subs	r0, r1, #1
 679:src/translator.c **** 			uint8 finishMin =
 4321              		.loc 1 679 10
 4322 098c D7F86011 		ldr	r1, [r7, #352]
 4323 0990 5C01     		lsls	r4, r3, #5
 4324 0992 1346     		mov	r3, r2
 4325 0994 5B00     		lsls	r3, r3, #1
 4326 0996 1344     		add	r3, r3, r2
 4327 0998 DB01     		lsls	r3, r3, #7
 4328 099a 1344     		add	r3, r3, r2
 4329 099c 2344     		add	r3, r3, r4
 4330 099e 0344     		add	r3, r3, r0
 4331 09a0 03F52073 		add	r3, r3, #640
 4332 09a4 9B00     		lsls	r3, r3, #2
 4333 09a6 0B44     		add	r3, r3, r1
 4334 09a8 9B78     		ldrb	r3, [r3, #2]
 4335 09aa 87F85631 		strb	r3, [r7, #342]
 682:src/translator.c **** 			//-------------- graphs 1-3 with economy-------------------
 683:src/translator.c **** 			if(!((finishHour==startHour)&(finishMin==startMin)))
 4336              		.loc 1 683 32
 4337 09ae 97F85721 		ldrb	r2, [r7, #343]	@ zero_extendqisi2
 4338 09b2 97F85931 		ldrb	r3, [r7, #345]	@ zero_extendqisi2
 4339 09b6 9A42     		cmp	r2, r3
 4340 09b8 14BF     		ite	ne
 4341 09ba 0123     		movne	r3, #1
 4342 09bc 0023     		moveq	r3, #0
 4343 09be DAB2     		uxtb	r2, r3
 4344 09c0 97F85611 		ldrb	r1, [r7, #342]	@ zero_extendqisi2
 4345 09c4 97F85831 		ldrb	r3, [r7, #344]	@ zero_extendqisi2
 4346 09c8 9942     		cmp	r1, r3
 4347 09ca 14BF     		ite	ne
 4348 09cc 0123     		movne	r3, #1
 4349 09ce 0023     		moveq	r3, #0
 4350 09d0 DBB2     		uxtb	r3, r3
 4351              		.loc 1 683 7
 4352 09d2 1343     		orrs	r3, r3, r2
 4353 09d4 DBB2     		uxtb	r3, r3
 4354              		.loc 1 683 6
 4355 09d6 002B     		cmp	r3, #0
 4356 09d8 00F04F81 		beq	.L184
 684:src/translator.c ****             {
 685:src/translator.c **** 			if (startHour * 60 + startMin <= dt.Hour * 60 + dt.Min
 4357              		.loc 1 685 18
 4358 09dc 97F85921 		ldrb	r2, [r7, #345]	@ zero_extendqisi2
 4359 09e0 1346     		mov	r3, r2
 4360 09e2 1B01     		lsls	r3, r3, #4
 4361 09e4 9B1A     		subs	r3, r3, r2
 4362 09e6 9B00     		lsls	r3, r3, #2
 4363 09e8 1A46     		mov	r2, r3
 4364              		.loc 1 685 23
 4365 09ea 97F85831 		ldrb	r3, [r7, #344]	@ zero_extendqisi2
 4366 09ee 1A44     		add	r2, r2, r3
 4367              		.loc 1 685 39
 4368 09f0 B7F83031 		ldrh	r3, [r7, #304]
 4369 09f4 1946     		mov	r1, r3
 4370              		.loc 1 685 45
 4371 09f6 0B46     		mov	r3, r1
 4372 09f8 1B01     		lsls	r3, r3, #4
 4373 09fa 5B1A     		subs	r3, r3, r1
 4374 09fc 9B00     		lsls	r3, r3, #2
 4375 09fe 1946     		mov	r1, r3
 4376              		.loc 1 685 54
 4377 0a00 B7F83231 		ldrh	r3, [r7, #306]
 4378              		.loc 1 685 50
 4379 0a04 0B44     		add	r3, r3, r1
 4380              		.loc 1 685 7
 4381 0a06 9A42     		cmp	r2, r3
 4382 0a08 1DDC     		bgt	.L199
 686:src/translator.c **** 					&& finishHour * 60 + finishMin > dt.Hour * 60 + dt.Min) {
 4383              		.loc 1 686 20
 4384 0a0a 97F85721 		ldrb	r2, [r7, #343]	@ zero_extendqisi2
 4385 0a0e 1346     		mov	r3, r2
 4386 0a10 1B01     		lsls	r3, r3, #4
 4387 0a12 9B1A     		subs	r3, r3, r2
 4388 0a14 9B00     		lsls	r3, r3, #2
 4389 0a16 1A46     		mov	r2, r3
 4390              		.loc 1 686 25
 4391 0a18 97F85631 		ldrb	r3, [r7, #342]	@ zero_extendqisi2
 4392 0a1c 1A44     		add	r2, r2, r3
 4393              		.loc 1 686 41
 4394 0a1e B7F83031 		ldrh	r3, [r7, #304]
 4395 0a22 1946     		mov	r1, r3
 4396              		.loc 1 686 47
 4397 0a24 0B46     		mov	r3, r1
 4398 0a26 1B01     		lsls	r3, r3, #4
 4399 0a28 5B1A     		subs	r3, r3, r1
 4400 0a2a 9B00     		lsls	r3, r3, #2
 4401 0a2c 1946     		mov	r1, r3
 4402              		.loc 1 686 56
 4403 0a2e B7F83231 		ldrh	r3, [r7, #306]
 4404              		.loc 1 686 52
 4405 0a32 0B44     		add	r3, r3, r1
 4406              		.loc 1 686 6
 4407 0a34 9A42     		cmp	r2, r3
 4408 0a36 06DD     		ble	.L199
 687:src/translator.c **** 				SetChannelBitSignal(i, RAM.OutputCommand, 0);
 4409              		.loc 1 687 5
 4410 0a38 0022     		movs	r2, #0
 4411 0a3a 8549     		ldr	r1, .L271
 4412 0a3c D7F89401 		ldr	r0, [r7, #404]
 4413 0a40 844B     		ldr	r3, .L271+4
 4414 0a42 9847     		blx	r3
 4415              	.LVL104:
 688:src/translator.c **** 				continue;
 4416              		.loc 1 688 5
 4417 0a44 19E1     		b	.L184
 4418              	.L199:
 689:src/translator.c **** 			} else {
 690:src/translator.c **** 				//date economy
 691:src/translator.c **** 				if ((pxConfig->devconst.Graph[tmpGrNum].EconomyDate.StartMonth
 4419              		.loc 1 691 56
 4420 0a46 B7F89231 		ldrh	r3, [r7, #402]
 4421 0a4a D7F86021 		ldr	r2, [r7, #352]
 4422 0a4e 40F20461 		movw	r1, #1540
 4423 0a52 01FB03F3 		mul	r3, r1, r3
 4424 0a56 1344     		add	r3, r3, r2
 4425 0a58 03F58053 		add	r3, r3, #4096
 4426 0a5c 0133     		adds	r3, r3, #1
 4427 0a5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4428 0a60 1A46     		mov	r2, r3
 692:src/translator.c **** 						* 31
 4429              		.loc 1 692 7
 4430 0a62 1346     		mov	r3, r2
 4431 0a64 5B01     		lsls	r3, r3, #5
 4432 0a66 9B1A     		subs	r3, r3, r2
 693:src/translator.c **** 						+ pxConfig->devconst.Graph[tmpGrNum].EconomyDate.StartDay
 4433              		.loc 1 693 55
 4434 0a68 B7F89221 		ldrh	r2, [r7, #402]
 4435 0a6c D7F86011 		ldr	r1, [r7, #352]
 4436 0a70 40F20460 		movw	r0, #1540
 4437 0a74 00FB02F2 		mul	r2, r0, r2
 4438 0a78 0A44     		add	r2, r2, r1
 4439 0a7a 02F58052 		add	r2, r2, #4096
 4440 0a7e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4441              		.loc 1 693 7
 4442 0a80 1A44     		add	r2, r2, r3
 694:src/translator.c **** 						<= dtl.Month * 31 + dtl.Data)
 4443              		.loc 1 694 13
 4444 0a82 B7F83A31 		ldrh	r3, [r7, #314]
 4445 0a86 1946     		mov	r1, r3
 4446              		.loc 1 694 20
 4447 0a88 0B46     		mov	r3, r1
 4448 0a8a 5B01     		lsls	r3, r3, #5
 4449 0a8c 5B1A     		subs	r3, r3, r1
 4450              		.loc 1 694 30
 4451 0a8e B7F83C11 		ldrh	r1, [r7, #316]
 4452              		.loc 1 694 25
 4453 0a92 0B44     		add	r3, r3, r1
 691:src/translator.c **** 						* 31
 4454              		.loc 1 691 8
 4455 0a94 9A42     		cmp	r2, r3
 4456 0a96 00F3E680 		bgt	.L200
 695:src/translator.c **** 						&& (pxConfig->devconst.Graph[tmpGrNum].EconomyDate.FinishMonth
 4457              		.loc 1 695 57
 4458 0a9a B7F89231 		ldrh	r3, [r7, #402]
 4459 0a9e D7F86021 		ldr	r2, [r7, #352]
 4460 0aa2 40F20461 		movw	r1, #1540
 4461 0aa6 01FB03F3 		mul	r3, r1, r3
 4462 0aaa 1344     		add	r3, r3, r2
 4463 0aac 03F58053 		add	r3, r3, #4096
 4464 0ab0 0333     		adds	r3, r3, #3
 4465 0ab2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4466 0ab4 1A46     		mov	r2, r3
 696:src/translator.c **** 								* 31
 4467              		.loc 1 696 9
 4468 0ab6 1346     		mov	r3, r2
 4469 0ab8 5B01     		lsls	r3, r3, #5
 4470 0aba 9A1A     		subs	r2, r3, r2
 697:src/translator.c **** 								+ pxConfig->devconst.Graph[tmpGrNum].EconomyDate.FinishDay
 4471              		.loc 1 697 57
 4472 0abc B7F89231 		ldrh	r3, [r7, #402]
 4473 0ac0 D7F86011 		ldr	r1, [r7, #352]
 4474 0ac4 40F20460 		movw	r0, #1540
 4475 0ac8 00FB03F3 		mul	r3, r0, r3
 4476 0acc 0B44     		add	r3, r3, r1
 4477 0ace 03F58053 		add	r3, r3, #4096
 4478 0ad2 0233     		adds	r3, r3, #2
 4479 0ad4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4480              		.loc 1 697 9
 4481 0ad6 1A44     		add	r2, r2, r3
 698:src/translator.c **** 								>= dtl.Month * 31 + dtl.Data)) {
 4482              		.loc 1 698 15
 4483 0ad8 B7F83A31 		ldrh	r3, [r7, #314]
 4484 0adc 1946     		mov	r1, r3
 4485              		.loc 1 698 22
 4486 0ade 0B46     		mov	r3, r1
 4487 0ae0 5B01     		lsls	r3, r3, #5
 4488 0ae2 5B1A     		subs	r3, r3, r1
 4489              		.loc 1 698 32
 4490 0ae4 B7F83C11 		ldrh	r1, [r7, #316]
 4491              		.loc 1 698 27
 4492 0ae8 0B44     		add	r3, r3, r1
 695:src/translator.c **** 								* 31
 4493              		.loc 1 695 7
 4494 0aea 9A42     		cmp	r2, r3
 4495 0aec C0F2BB80 		blt	.L200
 4496              	.LBB38:
 699:src/translator.c **** 					//time economy
 700:src/translator.c **** 					uint8 startHourEk =
 701:src/translator.c **** 							pxConfig->devconst.Graph[tmpGrNum].Shedule[dtl.Month
 702:src/translator.c **** 									- 1][31].StartHour;
 4497              		.loc 1 702 18
 4498 0af0 B7F89231 		ldrh	r3, [r7, #402]
 701:src/translator.c **** 									- 1][31].StartHour;
 4499              		.loc 1 701 54
 4500 0af4 B7F83A21 		ldrh	r2, [r7, #314]
 4501              		.loc 1 702 10
 4502 0af8 511E     		subs	r1, r2, #1
 700:src/translator.c **** 							pxConfig->devconst.Graph[tmpGrNum].Shedule[dtl.Month
 4503              		.loc 1 700 12
 4504 0afa D7F86021 		ldr	r2, [r7, #352]
 4505 0afe C901     		lsls	r1, r1, #7
 4506 0b00 40F20460 		movw	r0, #1540
 4507 0b04 00FB03F3 		mul	r3, r0, r3
 4508 0b08 0B44     		add	r3, r3, r1
 4509 0b0a 1344     		add	r3, r3, r2
 4510 0b0c 03F67D23 		addw	r3, r3, #2685
 4511 0b10 1B78     		ldrb	r3, [r3]
 4512 0b12 87F85531 		strb	r3, [r7, #341]
 703:src/translator.c **** 					uint8 startMinEk =
 704:src/translator.c **** 							pxConfig->devconst.Graph[tmpGrNum].Shedule[dtl.Month
 705:src/translator.c **** 									- 1][31].StartMin;
 4513              		.loc 1 705 18
 4514 0b16 B7F89231 		ldrh	r3, [r7, #402]
 704:src/translator.c **** 									- 1][31].StartMin;
 4515              		.loc 1 704 54
 4516 0b1a B7F83A21 		ldrh	r2, [r7, #314]
 4517              		.loc 1 705 10
 4518 0b1e 511E     		subs	r1, r2, #1
 703:src/translator.c **** 					uint8 startMinEk =
 4519              		.loc 1 703 12
 4520 0b20 D7F86021 		ldr	r2, [r7, #352]
 4521 0b24 C901     		lsls	r1, r1, #7
 4522 0b26 40F20460 		movw	r0, #1540
 4523 0b2a 00FB03F3 		mul	r3, r0, r3
 4524 0b2e 0B44     		add	r3, r3, r1
 4525 0b30 1344     		add	r3, r3, r2
 4526 0b32 03F67C23 		addw	r3, r3, #2684
 4527 0b36 1B78     		ldrb	r3, [r3]
 4528 0b38 87F85431 		strb	r3, [r7, #340]
 706:src/translator.c **** 					uint8 finishHourEk =
 707:src/translator.c **** 							pxConfig->devconst.Graph[tmpGrNum].Shedule[dtl.Month
 708:src/translator.c **** 									- 1][31].FinishHour;
 4529              		.loc 1 708 18
 4530 0b3c B7F89231 		ldrh	r3, [r7, #402]
 707:src/translator.c **** 									- 1][31].FinishHour;
 4531              		.loc 1 707 54
 4532 0b40 B7F83A21 		ldrh	r2, [r7, #314]
 4533              		.loc 1 708 10
 4534 0b44 511E     		subs	r1, r2, #1
 706:src/translator.c **** 					uint8 finishHourEk =
 4535              		.loc 1 706 12
 4536 0b46 D7F86021 		ldr	r2, [r7, #352]
 4537 0b4a C901     		lsls	r1, r1, #7
 4538 0b4c 40F20460 		movw	r0, #1540
 4539 0b50 00FB03F3 		mul	r3, r0, r3
 4540 0b54 0B44     		add	r3, r3, r1
 4541 0b56 1344     		add	r3, r3, r2
 4542 0b58 03F67F23 		addw	r3, r3, #2687
 4543 0b5c 1B78     		ldrb	r3, [r3]
 4544 0b5e 87F85331 		strb	r3, [r7, #339]
 709:src/translator.c **** 					uint8 finishMinEk =
 710:src/translator.c **** 							pxConfig->devconst.Graph[tmpGrNum].Shedule[dtl.Month
 711:src/translator.c **** 									- 1][31].FinishMin;
 4545              		.loc 1 711 18
 4546 0b62 B7F89231 		ldrh	r3, [r7, #402]
 710:src/translator.c **** 									- 1][31].FinishMin;
 4547              		.loc 1 710 54
 4548 0b66 B7F83A21 		ldrh	r2, [r7, #314]
 4549              		.loc 1 711 10
 4550 0b6a 511E     		subs	r1, r2, #1
 709:src/translator.c **** 					uint8 finishMinEk =
 4551              		.loc 1 709 12
 4552 0b6c D7F86021 		ldr	r2, [r7, #352]
 4553 0b70 C901     		lsls	r1, r1, #7
 4554 0b72 40F20460 		movw	r0, #1540
 4555 0b76 00FB03F3 		mul	r3, r0, r3
 4556 0b7a 0B44     		add	r3, r3, r1
 4557 0b7c 1344     		add	r3, r3, r2
 4558 0b7e 03F67E23 		addw	r3, r3, #2686
 4559 0b82 1B78     		ldrb	r3, [r3]
 4560 0b84 87F85231 		strb	r3, [r7, #338]
 712:src/translator.c **** 					uint8 FnEKHour =
 4561              		.loc 1 712 12
 4562 0b88 97F85321 		ldrb	r2, [r7, #339]	@ zero_extendqisi2
 4563 0b8c 97F85531 		ldrb	r3, [r7, #341]	@ zero_extendqisi2
 4564 0b90 9A42     		cmp	r2, r3
 4565 0b92 04D8     		bhi	.L201
 4566              		.loc 1 712 12 is_stmt 0 discriminator 1
 4567 0b94 97F85331 		ldrb	r3, [r7, #339]
 4568 0b98 1833     		adds	r3, r3, #24
 4569 0b9a DBB2     		uxtb	r3, r3
 4570 0b9c 01E0     		b	.L202
 4571              	.L201:
 4572              		.loc 1 712 12 discriminator 2
 4573 0b9e 97F85331 		ldrb	r3, [r7, #339]	@ zero_extendqisi2
 4574              	.L202:
 4575              		.loc 1 712 12 discriminator 4
 4576 0ba2 87F85131 		strb	r3, [r7, #337]
 713:src/translator.c **** 							(finishHourEk > startHourEk) ?
 714:src/translator.c **** 									finishHourEk : (finishHourEk + 24);
 715:src/translator.c **** 					uint8 CurHour =
 716:src/translator.c **** 							(dtl.Hour * 60 + dtl.Min
 4577              		.loc 1 716 12 is_stmt 1 discriminator 4
 4578 0ba6 B7F84031 		ldrh	r3, [r7, #320]
 4579 0baa 1A46     		mov	r2, r3
 4580              		.loc 1 716 18 discriminator 4
 4581 0bac 1346     		mov	r3, r2
 4582 0bae 1B01     		lsls	r3, r3, #4
 4583 0bb0 9B1A     		subs	r3, r3, r2
 4584 0bb2 9B00     		lsls	r3, r3, #2
 4585 0bb4 1A46     		mov	r2, r3
 4586              		.loc 1 716 28 discriminator 4
 4587 0bb6 B7F84231 		ldrh	r3, [r7, #322]
 4588              		.loc 1 716 23 discriminator 4
 4589 0bba D118     		adds	r1, r2, r3
 717:src/translator.c **** 									>= startHourEk * 60 + startMinEk) ?
 4590              		.loc 1 717 25 discriminator 4
 4591 0bbc 97F85521 		ldrb	r2, [r7, #341]	@ zero_extendqisi2
 4592 0bc0 1346     		mov	r3, r2
 4593 0bc2 1B01     		lsls	r3, r3, #4
 4594 0bc4 9B1A     		subs	r3, r3, r2
 4595 0bc6 9B00     		lsls	r3, r3, #2
 4596 0bc8 1A46     		mov	r2, r3
 4597              		.loc 1 717 30 discriminator 4
 4598 0bca 97F85431 		ldrb	r3, [r7, #340]	@ zero_extendqisi2
 4599 0bce 1344     		add	r3, r3, r2
 715:src/translator.c **** 							(dtl.Hour * 60 + dtl.Min
 4600              		.loc 1 715 12 discriminator 4
 4601 0bd0 9942     		cmp	r1, r3
 4602 0bd2 03DB     		blt	.L203
 718:src/translator.c **** 									dtl.Hour : (dtl.Hour + 24);
 4603              		.loc 1 718 13 discriminator 1
 4604 0bd4 B7F84031 		ldrh	r3, [r7, #320]
 715:src/translator.c **** 							(dtl.Hour * 60 + dtl.Min
 4605              		.loc 1 715 12 discriminator 1
 4606 0bd8 DBB2     		uxtb	r3, r3
 4607 0bda 04E0     		b	.L204
 4608              	.L203:
 4609              		.loc 1 718 25 discriminator 2
 4610 0bdc B7F84031 		ldrh	r3, [r7, #320]
 4611              		.loc 1 718 31 discriminator 2
 4612 0be0 DBB2     		uxtb	r3, r3
 715:src/translator.c **** 							(dtl.Hour * 60 + dtl.Min
 4613              		.loc 1 715 12 discriminator 2
 4614 0be2 1833     		adds	r3, r3, #24
 4615 0be4 DBB2     		uxtb	r3, r3
 4616              	.L204:
 715:src/translator.c **** 							(dtl.Hour * 60 + dtl.Min
 4617              		.loc 1 715 12 is_stmt 0 discriminator 4
 4618 0be6 87F85031 		strb	r3, [r7, #336]
 719:src/translator.c **** 
 720:src/translator.c **** 					if ((startHourEk * 60 + startMinEk <= CurHour * 60 + dtl.Min)
 4619              		.loc 1 720 23 is_stmt 1 discriminator 4
 4620 0bea 97F85521 		ldrb	r2, [r7, #341]	@ zero_extendqisi2
 4621 0bee 1346     		mov	r3, r2
 4622 0bf0 1B01     		lsls	r3, r3, #4
 4623 0bf2 9B1A     		subs	r3, r3, r2
 4624 0bf4 9B00     		lsls	r3, r3, #2
 4625 0bf6 1A46     		mov	r2, r3
 4626              		.loc 1 720 28 discriminator 4
 4627 0bf8 97F85431 		ldrb	r3, [r7, #340]	@ zero_extendqisi2
 4628 0bfc D118     		adds	r1, r2, r3
 4629              		.loc 1 720 52 discriminator 4
 4630 0bfe 97F85021 		ldrb	r2, [r7, #336]	@ zero_extendqisi2
 4631 0c02 1346     		mov	r3, r2
 4632 0c04 1B01     		lsls	r3, r3, #4
 4633 0c06 9B1A     		subs	r3, r3, r2
 4634 0c08 9B00     		lsls	r3, r3, #2
 4635 0c0a 1A46     		mov	r2, r3
 4636              		.loc 1 720 62 discriminator 4
 4637 0c0c B7F84231 		ldrh	r3, [r7, #322]
 4638              		.loc 1 720 57 discriminator 4
 4639 0c10 1344     		add	r3, r3, r2
 4640              		.loc 1 720 9 discriminator 4
 4641 0c12 9942     		cmp	r1, r3
 4642 0c14 20DC     		bgt	.L205
 721:src/translator.c **** 							&& (FnEKHour * 60 + finishMinEk
 4643              		.loc 1 721 21
 4644 0c16 97F85121 		ldrb	r2, [r7, #337]	@ zero_extendqisi2
 4645 0c1a 1346     		mov	r3, r2
 4646 0c1c 1B01     		lsls	r3, r3, #4
 4647 0c1e 9B1A     		subs	r3, r3, r2
 4648 0c20 9B00     		lsls	r3, r3, #2
 4649 0c22 1A46     		mov	r2, r3
 4650              		.loc 1 721 26
 4651 0c24 97F85231 		ldrb	r3, [r7, #338]	@ zero_extendqisi2
 4652 0c28 D118     		adds	r1, r2, r3
 722:src/translator.c **** 									> CurHour * 60 + dtl.Min)) {
 4653              		.loc 1 722 20
 4654 0c2a 97F85021 		ldrb	r2, [r7, #336]	@ zero_extendqisi2
 4655 0c2e 1346     		mov	r3, r2
 4656 0c30 1B01     		lsls	r3, r3, #4
 4657 0c32 9B1A     		subs	r3, r3, r2
 4658 0c34 9B00     		lsls	r3, r3, #2
 4659 0c36 1A46     		mov	r2, r3
 4660              		.loc 1 722 30
 4661 0c38 B7F84231 		ldrh	r3, [r7, #322]
 4662              		.loc 1 722 25
 4663 0c3c 1344     		add	r3, r3, r2
 721:src/translator.c **** 							&& (FnEKHour * 60 + finishMinEk
 4664              		.loc 1 721 8
 4665 0c3e 9942     		cmp	r1, r3
 4666 0c40 0ADD     		ble	.L205
 723:src/translator.c **** 						SetChannelBitSignal(i, RAM.OutputCommand, 1);
 4667              		.loc 1 723 7
 4668 0c42 0122     		movs	r2, #1
 4669 0c44 0249     		ldr	r1, .L271
 4670 0c46 D7F89401 		ldr	r0, [r7, #404]
 4671 0c4a 024B     		ldr	r3, .L271+4
 4672 0c4c 9847     		blx	r3
 4673              	.LVL105:
 724:src/translator.c **** 						continue;
 4674              		.loc 1 724 7
 4675 0c4e 14E0     		b	.L184
 4676              	.L272:
 4677              		.align	2
 4678              	.L271:
 4679 0c50 04000000 		.word	RAM+4
 4680 0c54 00000000 		.word	SetChannelBitSignal
 4681              	.L205:
 725:src/translator.c **** 					} else {
 726:src/translator.c **** 						SetChannelBitSignal(i, RAM.OutputCommand, 0);
 4682              		.loc 1 726 7
 4683 0c58 0022     		movs	r2, #0
 4684 0c5a AE49     		ldr	r1, .L273
 4685 0c5c D7F89401 		ldr	r0, [r7, #404]
 4686 0c60 AD4B     		ldr	r3, .L273+4
 4687 0c62 9847     		blx	r3
 4688              	.LVL106:
 727:src/translator.c **** 						continue;
 4689              		.loc 1 727 7
 4690 0c64 09E0     		b	.L184
 4691              	.L200:
 4692              	.LBE38:
 728:src/translator.c **** 					}
 729:src/translator.c **** 				} else {
 730:src/translator.c **** 					SetChannelBitSignal(i, RAM.OutputCommand, 1);
 4693              		.loc 1 730 6
 4694 0c66 0122     		movs	r2, #1
 4695 0c68 AA49     		ldr	r1, .L273
 4696 0c6a D7F89401 		ldr	r0, [r7, #404]
 4697 0c6e AA4B     		ldr	r3, .L273+4
 4698 0c70 9847     		blx	r3
 4699              	.LVL107:
 731:src/translator.c **** 					continue;
 4700              		.loc 1 731 6
 4701 0c72 02E0     		b	.L184
 4702              	.L259:
 4703              	.LBE37:
 593:src/translator.c **** 		}
 4704              		.loc 1 593 4
 4705 0c74 00BF     		nop
 4706 0c76 00E0     		b	.L184
 4707              	.L260:
 597:src/translator.c **** 		}
 4708              		.loc 1 597 4
 4709 0c78 00BF     		nop
 4710              	.L184:
 4711              	.LBE34:
 588:src/translator.c **** 		uint16 tmpGrNum = pxConfig->devcfg.logica.confCU[i].grafNum;
 4712              		.loc 1 588 26 discriminator 2
 4713 0c7a D7F89431 		ldr	r3, [r7, #404]
 4714 0c7e 0133     		adds	r3, r3, #1
 4715 0c80 C7F89431 		str	r3, [r7, #404]
 4716              	.L182:
 588:src/translator.c **** 		uint16 tmpGrNum = pxConfig->devcfg.logica.confCU[i].grafNum;
 4717              		.loc 1 588 2 discriminator 1
 4718 0c84 D7F89431 		ldr	r3, [r7, #404]
 4719 0c88 072B     		cmp	r3, #7
 4720 0c8a 7FF74DAC 		ble	.L206
 4721              	.LBE33:
 732:src/translator.c **** 				}
 733:src/translator.c **** 			}
 734:src/translator.c **** 			/////
 735:src/translator.c **** 			}
 736:src/translator.c **** 		}
 737:src/translator.c **** 
 738:src/translator.c **** 	}
 739:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 59);
 4722              		.loc 1 739 2
 4723 0c8e 3B21     		movs	r1, #59
 4724 0c90 1C20     		movs	r0, #28
 4725 0c92 A24B     		ldr	r3, .L273+8
 4726 0c94 9847     		blx	r3
 4727              	.LVL108:
 4728              	.LBB39:
 740:src/translator.c **** 	//error and condition module for iFIX
 741:src/translator.c **** 	for (int i = 0; i < 4; i++) {
 4729              		.loc 1 741 11
 4730 0c96 0023     		movs	r3, #0
 4731 0c98 C7F88831 		str	r3, [r7, #392]
 4732              		.loc 1 741 2
 4733 0c9c 28E0     		b	.L207
 4734              	.L208:
 742:src/translator.c **** 		RAM.ErrorAndConditionModule[i * 2] = RAM.ErrorDiscretLogic[i];
 4735              		.loc 1 742 33 discriminator 3
 4736 0c9e D7F88831 		ldr	r3, [r7, #392]
 4737 0ca2 5A00     		lsls	r2, r3, #1
 4738              		.loc 1 742 61 discriminator 3
 4739 0ca4 9E49     		ldr	r1, .L273+12
 4740 0ca6 D7F88831 		ldr	r3, [r7, #392]
 4741 0caa 03F54173 		add	r3, r3, #772
 4742 0cae 5B00     		lsls	r3, r3, #1
 4743 0cb0 0B44     		add	r3, r3, r1
 4744 0cb2 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 4745 0cb4 98B2     		uxth	r0, r3
 4746              		.loc 1 742 38 discriminator 3
 4747 0cb6 9A49     		ldr	r1, .L273+12
 4748 0cb8 131D     		adds	r3, r2, #4
 4749 0cba 5B00     		lsls	r3, r3, #1
 4750 0cbc 0B44     		add	r3, r3, r1
 4751 0cbe 0246     		mov	r2, r0	@ movhi
 4752 0cc0 5A80     		strh	r2, [r3, #2]	@ unaligned
 743:src/translator.c **** 		RAM.ErrorAndConditionModule[i * 2 + 1] = RAM.diskrets[i];
 4753              		.loc 1 743 33 discriminator 3
 4754 0cc2 D7F88831 		ldr	r3, [r7, #392]
 4755 0cc6 5B00     		lsls	r3, r3, #1
 4756              		.loc 1 743 37 discriminator 3
 4757 0cc8 0133     		adds	r3, r3, #1
 4758              		.loc 1 743 56 discriminator 3
 4759 0cca 9549     		ldr	r1, .L273+12
 4760 0ccc D7F88821 		ldr	r2, [r7, #392]
 4761 0cd0 02F50072 		add	r2, r2, #512
 4762 0cd4 31F81220 		ldrh	r2, [r1, r2, lsl #1]	@ unaligned
 4763 0cd8 91B2     		uxth	r1, r2
 4764              		.loc 1 743 42 discriminator 3
 4765 0cda 914A     		ldr	r2, .L273+12
 4766 0cdc 0433     		adds	r3, r3, #4
 4767 0cde 5B00     		lsls	r3, r3, #1
 4768 0ce0 1344     		add	r3, r3, r2
 4769 0ce2 0A46     		mov	r2, r1	@ movhi
 4770 0ce4 5A80     		strh	r2, [r3, #2]	@ unaligned
 741:src/translator.c **** 		RAM.ErrorAndConditionModule[i * 2] = RAM.ErrorDiscretLogic[i];
 4771              		.loc 1 741 26 discriminator 3
 4772 0ce6 D7F88831 		ldr	r3, [r7, #392]
 4773 0cea 0133     		adds	r3, r3, #1
 4774 0cec C7F88831 		str	r3, [r7, #392]
 4775              	.L207:
 741:src/translator.c **** 		RAM.ErrorAndConditionModule[i * 2] = RAM.ErrorDiscretLogic[i];
 4776              		.loc 1 741 2 discriminator 1
 4777 0cf0 D7F88831 		ldr	r3, [r7, #392]
 4778 0cf4 032B     		cmp	r3, #3
 4779 0cf6 D2DD     		ble	.L208
 4780              	.LBE39:
 744:src/translator.c **** 	}
 745:src/translator.c **** 
 746:src/translator.c **** 	//Сброс устройства
 747:src/translator.c **** 	CheckCUSignal();
 4781              		.loc 1 747 2
 4782 0cf8 8A4B     		ldr	r3, .L273+16
 4783 0cfa 9847     		blx	r3
 4784              	.LVL109:
 748:src/translator.c **** 
 749:src/translator.c **** 	// send signals to rele
 750:src/translator.c **** 	uint8 tempReleMaskCounter = 0;
 4785              		.loc 1 750 8
 4786 0cfc 0023     		movs	r3, #0
 4787 0cfe 87F88731 		strb	r3, [r7, #391]
 751:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 60);
 4788              		.loc 1 751 2
 4789 0d02 3C21     		movs	r1, #60
 4790 0d04 1C20     		movs	r0, #28
 4791 0d06 854B     		ldr	r3, .L273+8
 4792 0d08 9847     		blx	r3
 4793              	.LVL110:
 4794              	.LBB40:
 752:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 4795              		.loc 1 752 11
 4796 0d0a 0023     		movs	r3, #0
 4797 0d0c C7F88031 		str	r3, [r7, #384]
 4798              		.loc 1 752 2
 4799 0d10 3BE0     		b	.L209
 4800              	.L212:
 4801              	.LBB41:
 753:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 4802              		.loc 1 753 40
 4803 0d12 D7F86011 		ldr	r1, [r7, #352]
 4804 0d16 D7F88021 		ldr	r2, [r7, #384]
 4805 0d1a 1346     		mov	r3, r2
 4806 0d1c 5B00     		lsls	r3, r3, #1
 4807 0d1e 1344     		add	r3, r3, r2
 4808 0d20 9B00     		lsls	r3, r3, #2
 4809 0d22 0B44     		add	r3, r3, r1
 4810 0d24 03F20243 		addw	r3, r3, #1026
 4811 0d28 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4812              		.loc 1 753 6
 4813 0d2a 002B     		cmp	r3, #0
 4814 0d2c 27D0     		beq	.L261
 754:src/translator.c **** 			continue;
 755:src/translator.c **** 		uint8 TempReleInd = pxConfig->devcfg.logica.confCU[i].releNum - 1;
 4815              		.loc 1 755 56
 4816 0d2e D7F86011 		ldr	r1, [r7, #352]
 4817 0d32 D7F88021 		ldr	r2, [r7, #384]
 4818 0d36 1346     		mov	r3, r2
 4819 0d38 5B00     		lsls	r3, r3, #1
 4820 0d3a 1344     		add	r3, r3, r2
 4821 0d3c 9B00     		lsls	r3, r3, #2
 4822 0d3e 0B44     		add	r3, r3, r1
 4823 0d40 03F20243 		addw	r3, r3, #1026
 4824 0d44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4825              		.loc 1 755 9
 4826 0d46 013B     		subs	r3, r3, #1
 4827 0d48 87F85B31 		strb	r3, [r7, #347]
 756:src/translator.c **** 		SetRelayToRam(TempReleInd, GetChannelBitSignal(i, RAM.OutputCommand));
 4828              		.loc 1 756 3
 4829 0d4c 97F85B41 		ldrb	r4, [r7, #347]	@ zero_extendqisi2
 4830 0d50 7049     		ldr	r1, .L273
 4831 0d52 D7F88001 		ldr	r0, [r7, #384]
 4832 0d56 744B     		ldr	r3, .L273+20
 4833 0d58 9847     		blx	r3
 4834              	.LVL111:
 4835 0d5a 0346     		mov	r3, r0
 4836 0d5c 1946     		mov	r1, r3
 4837 0d5e 2046     		mov	r0, r4
 4838 0d60 724B     		ldr	r3, .L273+24
 4839 0d62 9847     		blx	r3
 4840              	.LVL112:
 757:src/translator.c **** 
 758:src/translator.c **** 		tempReleMaskCounter |= (1 << TempReleInd);
 4841              		.loc 1 758 29
 4842 0d64 97F85B31 		ldrb	r3, [r7, #347]	@ zero_extendqisi2
 4843 0d68 0122     		movs	r2, #1
 4844 0d6a 02FA03F3 		lsl	r3, r2, r3
 4845              		.loc 1 758 23
 4846 0d6e 5AB2     		sxtb	r2, r3
 4847 0d70 97F98731 		ldrsb	r3, [r7, #391]
 4848 0d74 1343     		orrs	r3, r3, r2
 4849 0d76 5BB2     		sxtb	r3, r3
 4850 0d78 87F88731 		strb	r3, [r7, #391]
 4851 0d7c 00E0     		b	.L211
 4852              	.L261:
 754:src/translator.c **** 		uint8 TempReleInd = pxConfig->devcfg.logica.confCU[i].releNum - 1;
 4853              		.loc 1 754 4
 4854 0d7e 00BF     		nop
 4855              	.L211:
 4856              	.LBE41:
 752:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 4857              		.loc 1 752 26 discriminator 2
 4858 0d80 D7F88031 		ldr	r3, [r7, #384]
 4859 0d84 0133     		adds	r3, r3, #1
 4860 0d86 C7F88031 		str	r3, [r7, #384]
 4861              	.L209:
 752:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 4862              		.loc 1 752 2 discriminator 1
 4863 0d8a D7F88031 		ldr	r3, [r7, #384]
 4864 0d8e 072B     		cmp	r3, #7
 4865 0d90 BFDD     		ble	.L212
 4866              	.LBE40:
 4867              	.LBB42:
 759:src/translator.c **** 	}
 760:src/translator.c **** 	//switch off unused relays
 761:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 4868              		.loc 1 761 11
 4869 0d92 0023     		movs	r3, #0
 4870 0d94 C7F87C31 		str	r3, [r7, #380]
 4871              		.loc 1 761 2
 4872 0d98 13E0     		b	.L213
 4873              	.L215:
 762:src/translator.c **** 		if ((tempReleMaskCounter & (1 << i)) == 0) {
 4874              		.loc 1 762 40
 4875 0d9a 97F88721 		ldrb	r2, [r7, #391]	@ zero_extendqisi2
 4876 0d9e D7F87C31 		ldr	r3, [r7, #380]
 4877 0da2 42FA03F3 		asr	r3, r2, r3
 4878 0da6 03F00103 		and	r3, r3, #1
 4879              		.loc 1 762 6
 4880 0daa 002B     		cmp	r3, #0
 4881 0dac 04D1     		bne	.L214
 763:src/translator.c **** 			SetRelayToRam(i, 0);
 4882              		.loc 1 763 4
 4883 0dae 0021     		movs	r1, #0
 4884 0db0 D7F87C01 		ldr	r0, [r7, #380]
 4885 0db4 5D4B     		ldr	r3, .L273+24
 4886 0db6 9847     		blx	r3
 4887              	.LVL113:
 4888              	.L214:
 761:src/translator.c **** 		if ((tempReleMaskCounter & (1 << i)) == 0) {
 4889              		.loc 1 761 26 discriminator 2
 4890 0db8 D7F87C31 		ldr	r3, [r7, #380]
 4891 0dbc 0133     		adds	r3, r3, #1
 4892 0dbe C7F87C31 		str	r3, [r7, #380]
 4893              	.L213:
 761:src/translator.c **** 		if ((tempReleMaskCounter & (1 << i)) == 0) {
 4894              		.loc 1 761 2 discriminator 1
 4895 0dc2 D7F87C31 		ldr	r3, [r7, #380]
 4896 0dc6 072B     		cmp	r3, #7
 4897 0dc8 E7DD     		ble	.L215
 4898              	.LBE42:
 764:src/translator.c **** 		}
 765:src/translator.c **** 	}
 766:src/translator.c **** 
 767:src/translator.c **** 	vTaskDelay(20);
 4899              		.loc 1 767 2
 4900 0dca 1420     		movs	r0, #20
 4901 0dcc 584B     		ldr	r3, .L273+28
 4902 0dce 9847     		blx	r3
 4903              	.LVL114:
 768:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 61);
 4904              		.loc 1 768 2
 4905 0dd0 3D21     		movs	r1, #61
 4906 0dd2 1C20     		movs	r0, #28
 4907 0dd4 514B     		ldr	r3, .L273+8
 4908 0dd6 9847     		blx	r3
 4909              	.LVL115:
 4910              	.LBB43:
 769:src/translator.c **** 	//Get Channel Condition CU
 770:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 4911              		.loc 1 770 11
 4912 0dd8 0023     		movs	r3, #0
 4913 0dda C7F87831 		str	r3, [r7, #376]
 4914              		.loc 1 770 2
 4915 0dde 42E0     		b	.L216
 4916              	.L220:
 771:src/translator.c **** 
 772:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].discNum == 0)
 4917              		.loc 1 772 40
 4918 0de0 D7F86011 		ldr	r1, [r7, #352]
 4919 0de4 D7F87821 		ldr	r2, [r7, #376]
 4920 0de8 1346     		mov	r3, r2
 4921 0dea 5B00     		lsls	r3, r3, #1
 4922 0dec 1344     		add	r3, r3, r2
 4923 0dee 9B00     		lsls	r3, r3, #2
 4924 0df0 0B44     		add	r3, r3, r1
 4925 0df2 03F20343 		addw	r3, r3, #1027
 4926 0df6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4927              		.loc 1 772 6
 4928 0df8 002B     		cmp	r3, #0
 4929 0dfa 2ED0     		beq	.L262
 773:src/translator.c **** 			continue;
 774:src/translator.c **** 		if (GetDiskretFromRam(pxConfig->devcfg.logica.confCU[i].discNum - 1)
 4930              		.loc 1 774 58
 4931 0dfc D7F86011 		ldr	r1, [r7, #352]
 4932 0e00 D7F87821 		ldr	r2, [r7, #376]
 4933 0e04 1346     		mov	r3, r2
 4934 0e06 5B00     		lsls	r3, r3, #1
 4935 0e08 1344     		add	r3, r3, r2
 4936 0e0a 9B00     		lsls	r3, r3, #2
 4937 0e0c 0B44     		add	r3, r3, r1
 4938 0e0e 03F20343 		addw	r3, r3, #1027
 4939 0e12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4940              		.loc 1 774 7
 4941 0e14 013B     		subs	r3, r3, #1
 4942 0e16 1846     		mov	r0, r3
 4943 0e18 464B     		ldr	r3, .L273+32
 4944 0e1a 9847     		blx	r3
 4945              	.LVL116:
 4946 0e1c 0346     		mov	r3, r0
 4947              		.loc 1 774 6
 4948 0e1e 002B     		cmp	r3, #0
 4949 0e20 0ED1     		bne	.L219
 775:src/translator.c **** 				== 0) {
 776:src/translator.c **** 			RAM.ChannelCondition &= (uint8) (~(1 << i));
 4950              		.loc 1 776 25
 4951 0e22 3F4B     		ldr	r3, .L273+12
 4952 0e24 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 4953              		.loc 1 776 41
 4954 0e26 0121     		movs	r1, #1
 4955 0e28 D7F87831 		ldr	r3, [r7, #376]
 4956 0e2c 01FA03F3 		lsl	r3, r1, r3
 4957              		.loc 1 776 28
 4958 0e30 DBB2     		uxtb	r3, r3
 4959 0e32 DB43     		mvns	r3, r3
 4960 0e34 DBB2     		uxtb	r3, r3
 4961              		.loc 1 776 25
 4962 0e36 1340     		ands	r3, r3, r2
 4963 0e38 DAB2     		uxtb	r2, r3
 4964 0e3a 394B     		ldr	r3, .L273+12
 4965 0e3c 5A72     		strb	r2, [r3, #9]
 4966 0e3e 0DE0     		b	.L218
 4967              	.L219:
 777:src/translator.c **** 		} else {
 778:src/translator.c **** 			RAM.ChannelCondition |= (uint8) (1 << i);
 4968              		.loc 1 778 25
 4969 0e40 374B     		ldr	r3, .L273+12
 4970 0e42 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 4971              		.loc 1 778 39
 4972 0e44 0121     		movs	r1, #1
 4973 0e46 D7F87831 		ldr	r3, [r7, #376]
 4974 0e4a 01FA03F3 		lsl	r3, r1, r3
 4975              		.loc 1 778 28
 4976 0e4e DBB2     		uxtb	r3, r3
 4977              		.loc 1 778 25
 4978 0e50 1343     		orrs	r3, r3, r2
 4979 0e52 DAB2     		uxtb	r2, r3
 4980 0e54 324B     		ldr	r3, .L273+12
 4981 0e56 5A72     		strb	r2, [r3, #9]
 4982 0e58 00E0     		b	.L218
 4983              	.L262:
 773:src/translator.c **** 		if (GetDiskretFromRam(pxConfig->devcfg.logica.confCU[i].discNum - 1)
 4984              		.loc 1 773 4
 4985 0e5a 00BF     		nop
 4986              	.L218:
 770:src/translator.c **** 
 4987              		.loc 1 770 26 discriminator 2
 4988 0e5c D7F87831 		ldr	r3, [r7, #376]
 4989 0e60 0133     		adds	r3, r3, #1
 4990 0e62 C7F87831 		str	r3, [r7, #376]
 4991              	.L216:
 770:src/translator.c **** 
 4992              		.loc 1 770 2 discriminator 1
 4993 0e66 D7F87831 		ldr	r3, [r7, #376]
 4994 0e6a 072B     		cmp	r3, #7
 4995 0e6c B8DD     		ble	.L220
 4996              	.LBE43:
 779:src/translator.c **** 		}
 780:src/translator.c **** 	}
 781:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 62);
 4997              		.loc 1 781 2
 4998 0e6e 3E21     		movs	r1, #62
 4999 0e70 1C20     		movs	r0, #28
 5000 0e72 2A4B     		ldr	r3, .L273+8
 5001 0e74 9847     		blx	r3
 5002              	.LVL117:
 5003              	.LBB44:
 782:src/translator.c **** 	//Check Channel
 783:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 5004              		.loc 1 783 11
 5005 0e76 0023     		movs	r3, #0
 5006 0e78 C7F87431 		str	r3, [r7, #372]
 5007              		.loc 1 783 2
 5008 0e7c 74E0     		b	.L221
 5009              	.L225:
 784:src/translator.c **** 
 785:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].discNum == 0) {
 5010              		.loc 1 785 40
 5011 0e7e D7F86011 		ldr	r1, [r7, #352]
 5012 0e82 D7F87421 		ldr	r2, [r7, #372]
 5013 0e86 1346     		mov	r3, r2
 5014 0e88 5B00     		lsls	r3, r3, #1
 5015 0e8a 1344     		add	r3, r3, r2
 5016 0e8c 9B00     		lsls	r3, r3, #2
 5017 0e8e 0B44     		add	r3, r3, r1
 5018 0e90 03F20343 		addw	r3, r3, #1027
 5019 0e94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5020              		.loc 1 785 6
 5021 0e96 002B     		cmp	r3, #0
 5022 0e98 13D1     		bne	.L222
 786:src/translator.c **** 			RAM.ErrorChannel &= ~(1 << i);
 5023              		.loc 1 786 21
 5024 0e9a 214B     		ldr	r3, .L273+12
 5025 0e9c B3F80836 		ldrh	r3, [r3, #1544]	@ unaligned
 5026 0ea0 9BB2     		uxth	r3, r3
 5027 0ea2 1AB2     		sxth	r2, r3
 5028              		.loc 1 786 28
 5029 0ea4 0121     		movs	r1, #1
 5030 0ea6 D7F87431 		ldr	r3, [r7, #372]
 5031 0eaa 01FA03F3 		lsl	r3, r1, r3
 5032              		.loc 1 786 21
 5033 0eae 1BB2     		sxth	r3, r3
 5034 0eb0 DB43     		mvns	r3, r3
 5035 0eb2 1BB2     		sxth	r3, r3
 5036 0eb4 1340     		ands	r3, r3, r2
 5037 0eb6 1BB2     		sxth	r3, r3
 5038 0eb8 9AB2     		uxth	r2, r3
 5039 0eba 194B     		ldr	r3, .L273+12
 5040 0ebc A3F80826 		strh	r2, [r3, #1544]	@ unaligned
 787:src/translator.c **** 			continue;
 5041              		.loc 1 787 4
 5042 0ec0 4DE0     		b	.L223
 5043              	.L222:
 788:src/translator.c **** 		}
 789:src/translator.c **** 		if (((RAM.ChannelCondition) & (1 << i)) >> i
 5044              		.loc 1 789 12
 5045 0ec2 174B     		ldr	r3, .L273+12
 5046 0ec4 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 5047 0ec6 1946     		mov	r1, r3
 5048              		.loc 1 789 36
 5049 0ec8 0122     		movs	r2, #1
 5050 0eca D7F87431 		ldr	r3, [r7, #372]
 5051 0ece 02FA03F3 		lsl	r3, r2, r3
 5052              		.loc 1 789 31
 5053 0ed2 01EA0302 		and	r2, r1, r3
 5054              		.loc 1 789 43
 5055 0ed6 D7F87431 		ldr	r3, [r7, #372]
 5056 0eda 42FA03F4 		asr	r4, r2, r3
 790:src/translator.c **** 				!= GetChannelBitSignal(i, RAM.OutputCommand)) {
 5057              		.loc 1 790 8
 5058 0ede 0D49     		ldr	r1, .L273
 5059 0ee0 D7F87401 		ldr	r0, [r7, #372]
 5060 0ee4 104B     		ldr	r3, .L273+20
 5061 0ee6 9847     		blx	r3
 5062              	.LVL118:
 5063 0ee8 0346     		mov	r3, r0
 789:src/translator.c **** 				!= GetChannelBitSignal(i, RAM.OutputCommand)) {
 5064              		.loc 1 789 6
 5065 0eea 9C42     		cmp	r4, r3
 5066 0eec 24D0     		beq	.L224
 791:src/translator.c **** 			RAM.ErrorChannel |= (1 << i);
 5067              		.loc 1 791 21
 5068 0eee 0C4B     		ldr	r3, .L273+12
 5069 0ef0 B3F80836 		ldrh	r3, [r3, #1544]	@ unaligned
 5070 0ef4 9BB2     		uxth	r3, r3
 5071 0ef6 1AB2     		sxth	r2, r3
 5072              		.loc 1 791 27
 5073 0ef8 0121     		movs	r1, #1
 5074 0efa D7F87431 		ldr	r3, [r7, #372]
 5075 0efe 01FA03F3 		lsl	r3, r1, r3
 5076              		.loc 1 791 21
 5077 0f02 1BB2     		sxth	r3, r3
 5078 0f04 1343     		orrs	r3, r3, r2
 5079 0f06 1BB2     		sxth	r3, r3
 5080 0f08 9AB2     		uxth	r2, r3
 5081 0f0a 054B     		ldr	r3, .L273+12
 5082 0f0c A3F80826 		strh	r2, [r3, #1544]	@ unaligned
 5083 0f10 25E0     		b	.L223
 5084              	.L274:
 5085 0f12 00BF     		.align	2
 5086              	.L273:
 5087 0f14 04000000 		.word	RAM+4
 5088 0f18 00000000 		.word	SetChannelBitSignal
 5089 0f1c 00000000 		.word	BKP_WriteBackupRegister
 5090 0f20 00000000 		.word	RAM
 5091 0f24 00000000 		.word	CheckCUSignal
 5092 0f28 00000000 		.word	GetChannelBitSignal
 5093 0f2c 00000000 		.word	SetRelayToRam
 5094 0f30 00000000 		.word	vTaskDelay
 5095 0f34 00000000 		.word	GetDiskretFromRam
 5096              	.L224:
 792:src/translator.c **** 		} else {
 793:src/translator.c **** 			RAM.ErrorChannel &= ~(1 << i);
 5097              		.loc 1 793 21
 5098 0f38 9D4B     		ldr	r3, .L275
 5099 0f3a B3F80836 		ldrh	r3, [r3, #1544]	@ unaligned
 5100 0f3e 9BB2     		uxth	r3, r3
 5101 0f40 1AB2     		sxth	r2, r3
 5102              		.loc 1 793 28
 5103 0f42 0121     		movs	r1, #1
 5104 0f44 D7F87431 		ldr	r3, [r7, #372]
 5105 0f48 01FA03F3 		lsl	r3, r1, r3
 5106              		.loc 1 793 21
 5107 0f4c 1BB2     		sxth	r3, r3
 5108 0f4e DB43     		mvns	r3, r3
 5109 0f50 1BB2     		sxth	r3, r3
 5110 0f52 1340     		ands	r3, r3, r2
 5111 0f54 1BB2     		sxth	r3, r3
 5112 0f56 9AB2     		uxth	r2, r3
 5113 0f58 954B     		ldr	r3, .L275
 5114 0f5a A3F80826 		strh	r2, [r3, #1544]	@ unaligned
 5115              	.L223:
 783:src/translator.c **** 
 5116              		.loc 1 783 26 discriminator 2
 5117 0f5e D7F87431 		ldr	r3, [r7, #372]
 5118 0f62 0133     		adds	r3, r3, #1
 5119 0f64 C7F87431 		str	r3, [r7, #372]
 5120              	.L221:
 783:src/translator.c **** 
 5121              		.loc 1 783 2 discriminator 1
 5122 0f68 D7F87431 		ldr	r3, [r7, #372]
 5123 0f6c 072B     		cmp	r3, #7
 5124 0f6e 86DD     		ble	.L225
 5125              	.LBE44:
 794:src/translator.c **** 		}
 795:src/translator.c **** 	}
 796:src/translator.c **** 
 797:src/translator.c **** 	if (RAM.ErrorChannel != 0) {
 5126              		.loc 1 797 9
 5127 0f70 8F4B     		ldr	r3, .L275
 5128 0f72 B3F80836 		ldrh	r3, [r3, #1544]	@ unaligned
 5129 0f76 9BB2     		uxth	r3, r3
 5130              		.loc 1 797 5
 5131 0f78 002B     		cmp	r3, #0
 5132 0f7a 09D0     		beq	.L226
 798:src/translator.c **** 		RAM.LogicErrorFlags |= (1 << 1);
 5133              		.loc 1 798 23
 5134 0f7c 8C4B     		ldr	r3, .L275
 5135 0f7e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5136 0f80 43F00203 		orr	r3, r3, #2
 5137 0f84 DAB2     		uxtb	r2, r3
 5138 0f86 8A4B     		ldr	r3, .L275
 5139 0f88 1A72     		strb	r2, [r3, #8]
 799:src/translator.c **** 		CheckErrors();
 5140              		.loc 1 799 3
 5141 0f8a 8A4B     		ldr	r3, .L275+4
 5142 0f8c 9847     		blx	r3
 5143              	.LVL119:
 5144 0f8e 08E0     		b	.L227
 5145              	.L226:
 800:src/translator.c **** 
 801:src/translator.c **** 	} else {
 802:src/translator.c **** 		RAM.LogicErrorFlags &= ~(1 << 1);
 5146              		.loc 1 802 23
 5147 0f90 874B     		ldr	r3, .L275
 5148 0f92 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5149 0f94 23F00203 		bic	r3, r3, #2
 5150 0f98 DAB2     		uxtb	r2, r3
 5151 0f9a 854B     		ldr	r3, .L275
 5152 0f9c 1A72     		strb	r2, [r3, #8]
 803:src/translator.c **** 		CheckErrors();
 5153              		.loc 1 803 3
 5154 0f9e 854B     		ldr	r3, .L275+4
 5155 0fa0 9847     		blx	r3
 5156              	.LVL120:
 5157              	.L227:
 804:src/translator.c **** 
 805:src/translator.c **** 	}
 806:src/translator.c **** 
 807:src/translator.c **** 
 808:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 63);
 5158              		.loc 1 808 2
 5159 0fa2 3F21     		movs	r1, #63
 5160 0fa4 1C20     		movs	r0, #28
 5161 0fa6 844B     		ldr	r3, .L275+8
 5162 0fa8 9847     		blx	r3
 5163              	.LVL121:
 5164              	.LBB45:
 809:src/translator.c **** 	//Check Fuse on Channels
 810:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 5165              		.loc 1 810 11
 5166 0faa 0023     		movs	r3, #0
 5167 0fac C7F87031 		str	r3, [r7, #368]
 5168              		.loc 1 810 2
 5169 0fb0 A8E0     		b	.L228
 5170              	.L235:
 811:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 5171              		.loc 1 811 40
 5172 0fb2 D7F86011 		ldr	r1, [r7, #352]
 5173 0fb6 D7F87021 		ldr	r2, [r7, #368]
 5174 0fba 1346     		mov	r3, r2
 5175 0fbc 5B00     		lsls	r3, r3, #1
 5176 0fbe 1344     		add	r3, r3, r2
 5177 0fc0 9B00     		lsls	r3, r3, #2
 5178 0fc2 0B44     		add	r3, r3, r1
 5179 0fc4 03F20243 		addw	r3, r3, #1026
 5180 0fc8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5181              		.loc 1 811 6
 5182 0fca 002B     		cmp	r3, #0
 5183 0fcc 00F09280 		beq	.L263
 812:src/translator.c **** 			continue;
 813:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].discNum == 0)
 5184              		.loc 1 813 40
 5185 0fd0 D7F86011 		ldr	r1, [r7, #352]
 5186 0fd4 D7F87021 		ldr	r2, [r7, #368]
 5187 0fd8 1346     		mov	r3, r2
 5188 0fda 5B00     		lsls	r3, r3, #1
 5189 0fdc 1344     		add	r3, r3, r2
 5190 0fde 9B00     		lsls	r3, r3, #2
 5191 0fe0 0B44     		add	r3, r3, r1
 5192 0fe2 03F20343 		addw	r3, r3, #1027
 5193 0fe6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5194              		.loc 1 813 6
 5195 0fe8 002B     		cmp	r3, #0
 5196 0fea 00F08580 		beq	.L264
 814:src/translator.c **** 			continue;
 815:src/translator.c **** 		if (GetDiskretFromRam(pxConfig->devcfg.logica.confCU[i].discNum - 1)) {
 5197              		.loc 1 815 58
 5198 0fee D7F86011 		ldr	r1, [r7, #352]
 5199 0ff2 D7F87021 		ldr	r2, [r7, #368]
 5200 0ff6 1346     		mov	r3, r2
 5201 0ff8 5B00     		lsls	r3, r3, #1
 5202 0ffa 1344     		add	r3, r3, r2
 5203 0ffc 9B00     		lsls	r3, r3, #2
 5204 0ffe 0B44     		add	r3, r3, r1
 5205 1000 03F20343 		addw	r3, r3, #1027
 5206 1004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5207              		.loc 1 815 7
 5208 1006 013B     		subs	r3, r3, #1
 5209 1008 1846     		mov	r0, r3
 5210 100a 6C4B     		ldr	r3, .L275+12
 5211 100c 9847     		blx	r3
 5212              	.LVL122:
 5213 100e 0346     		mov	r3, r0
 5214              		.loc 1 815 6
 5215 1010 002B     		cmp	r3, #0
 5216 1012 37D0     		beq	.L232
 816:src/translator.c **** 			if (CheckDiscretMask(pxConfig->devcfg.logica.confCU[i].Mask)) {
 5217              		.loc 1 816 58
 5218 1014 D7F87021 		ldr	r2, [r7, #368]
 5219 1018 1346     		mov	r3, r2
 5220 101a 5B00     		lsls	r3, r3, #1
 5221 101c 1344     		add	r3, r3, r2
 5222 101e 9B00     		lsls	r3, r3, #2
 5223 1020 03F58063 		add	r3, r3, #1024
 5224 1024 D7F86021 		ldr	r2, [r7, #352]
 5225 1028 1344     		add	r3, r3, r2
 5226 102a 0433     		adds	r3, r3, #4
 5227              		.loc 1 816 8
 5228 102c 1846     		mov	r0, r3
 5229 102e 644B     		ldr	r3, .L275+16
 5230 1030 9847     		blx	r3
 5231              	.LVL123:
 5232 1032 0346     		mov	r3, r0
 5233              		.loc 1 816 7
 5234 1034 002B     		cmp	r3, #0
 5235 1036 13D0     		beq	.L233
 817:src/translator.c **** 				RAM.ErrorFuseChannel &= ~(1 << i);
 5236              		.loc 1 817 26
 5237 1038 5D4B     		ldr	r3, .L275
 5238 103a B3F80636 		ldrh	r3, [r3, #1542]	@ unaligned
 5239 103e 9BB2     		uxth	r3, r3
 5240 1040 1AB2     		sxth	r2, r3
 5241              		.loc 1 817 33
 5242 1042 0121     		movs	r1, #1
 5243 1044 D7F87031 		ldr	r3, [r7, #368]
 5244 1048 01FA03F3 		lsl	r3, r1, r3
 5245              		.loc 1 817 26
 5246 104c 1BB2     		sxth	r3, r3
 5247 104e DB43     		mvns	r3, r3
 5248 1050 1BB2     		sxth	r3, r3
 5249 1052 1340     		ands	r3, r3, r2
 5250 1054 1BB2     		sxth	r3, r3
 5251 1056 9AB2     		uxth	r2, r3
 5252 1058 554B     		ldr	r3, .L275
 5253 105a A3F80626 		strh	r2, [r3, #1542]	@ unaligned
 5254 105e 4CE0     		b	.L230
 5255              	.L233:
 818:src/translator.c **** 			} else {
 819:src/translator.c **** 				RAM.ErrorFuseChannel |= (1 << i);
 5256              		.loc 1 819 26
 5257 1060 534B     		ldr	r3, .L275
 5258 1062 B3F80636 		ldrh	r3, [r3, #1542]	@ unaligned
 5259 1066 9BB2     		uxth	r3, r3
 5260 1068 1AB2     		sxth	r2, r3
 5261              		.loc 1 819 32
 5262 106a 0121     		movs	r1, #1
 5263 106c D7F87031 		ldr	r3, [r7, #368]
 5264 1070 01FA03F3 		lsl	r3, r1, r3
 5265              		.loc 1 819 26
 5266 1074 1BB2     		sxth	r3, r3
 5267 1076 1343     		orrs	r3, r3, r2
 5268 1078 1BB2     		sxth	r3, r3
 5269 107a 9AB2     		uxth	r2, r3
 5270 107c 4C4B     		ldr	r3, .L275
 5271 107e A3F80626 		strh	r2, [r3, #1542]	@ unaligned
 5272 1082 3AE0     		b	.L230
 5273              	.L232:
 820:src/translator.c **** 			}
 821:src/translator.c **** 		} else {
 822:src/translator.c **** 			if (CheckDiscretMaskNegative(
 823:src/translator.c **** 					pxConfig->devcfg.logica.confCU[i].Mask)) {
 5274              		.loc 1 823 39
 5275 1084 D7F87021 		ldr	r2, [r7, #368]
 5276 1088 1346     		mov	r3, r2
 5277 108a 5B00     		lsls	r3, r3, #1
 5278 108c 1344     		add	r3, r3, r2
 5279 108e 9B00     		lsls	r3, r3, #2
 5280 1090 03F58063 		add	r3, r3, #1024
 5281 1094 D7F86021 		ldr	r2, [r7, #352]
 5282 1098 1344     		add	r3, r3, r2
 5283 109a 0433     		adds	r3, r3, #4
 822:src/translator.c **** 					pxConfig->devcfg.logica.confCU[i].Mask)) {
 5284              		.loc 1 822 8
 5285 109c 1846     		mov	r0, r3
 5286 109e 494B     		ldr	r3, .L275+20
 5287 10a0 9847     		blx	r3
 5288              	.LVL124:
 5289 10a2 0346     		mov	r3, r0
 822:src/translator.c **** 					pxConfig->devcfg.logica.confCU[i].Mask)) {
 5290              		.loc 1 822 7
 5291 10a4 002B     		cmp	r3, #0
 5292 10a6 13D0     		beq	.L234
 824:src/translator.c **** 				RAM.ErrorFuseChannel &= ~(1 << i);
 5293              		.loc 1 824 26
 5294 10a8 414B     		ldr	r3, .L275
 5295 10aa B3F80636 		ldrh	r3, [r3, #1542]	@ unaligned
 5296 10ae 9BB2     		uxth	r3, r3
 5297 10b0 1AB2     		sxth	r2, r3
 5298              		.loc 1 824 33
 5299 10b2 0121     		movs	r1, #1
 5300 10b4 D7F87031 		ldr	r3, [r7, #368]
 5301 10b8 01FA03F3 		lsl	r3, r1, r3
 5302              		.loc 1 824 26
 5303 10bc 1BB2     		sxth	r3, r3
 5304 10be DB43     		mvns	r3, r3
 5305 10c0 1BB2     		sxth	r3, r3
 5306 10c2 1340     		ands	r3, r3, r2
 5307 10c4 1BB2     		sxth	r3, r3
 5308 10c6 9AB2     		uxth	r2, r3
 5309 10c8 394B     		ldr	r3, .L275
 5310 10ca A3F80626 		strh	r2, [r3, #1542]	@ unaligned
 5311 10ce 14E0     		b	.L230
 5312              	.L234:
 825:src/translator.c **** 			} else {
 826:src/translator.c **** 				RAM.ErrorFuseChannel |= (1 << i);
 5313              		.loc 1 826 26
 5314 10d0 374B     		ldr	r3, .L275
 5315 10d2 B3F80636 		ldrh	r3, [r3, #1542]	@ unaligned
 5316 10d6 9BB2     		uxth	r3, r3
 5317 10d8 1AB2     		sxth	r2, r3
 5318              		.loc 1 826 32
 5319 10da 0121     		movs	r1, #1
 5320 10dc D7F87031 		ldr	r3, [r7, #368]
 5321 10e0 01FA03F3 		lsl	r3, r1, r3
 5322              		.loc 1 826 26
 5323 10e4 1BB2     		sxth	r3, r3
 5324 10e6 1343     		orrs	r3, r3, r2
 5325 10e8 1BB2     		sxth	r3, r3
 5326 10ea 9AB2     		uxth	r2, r3
 5327 10ec 304B     		ldr	r3, .L275
 5328 10ee A3F80626 		strh	r2, [r3, #1542]	@ unaligned
 5329 10f2 02E0     		b	.L230
 5330              	.L263:
 812:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].discNum == 0)
 5331              		.loc 1 812 4
 5332 10f4 00BF     		nop
 5333 10f6 00E0     		b	.L230
 5334              	.L264:
 814:src/translator.c **** 		if (GetDiskretFromRam(pxConfig->devcfg.logica.confCU[i].discNum - 1)) {
 5335              		.loc 1 814 4
 5336 10f8 00BF     		nop
 5337              	.L230:
 810:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 5338              		.loc 1 810 26 discriminator 2
 5339 10fa D7F87031 		ldr	r3, [r7, #368]
 5340 10fe 0133     		adds	r3, r3, #1
 5341 1100 C7F87031 		str	r3, [r7, #368]
 5342              	.L228:
 810:src/translator.c **** 		if (pxConfig->devcfg.logica.confCU[i].releNum == 0)
 5343              		.loc 1 810 2 discriminator 1
 5344 1104 D7F87031 		ldr	r3, [r7, #368]
 5345 1108 072B     		cmp	r3, #7
 5346 110a 7FF752AF 		ble	.L235
 5347              	.LBE45:
 827:src/translator.c **** 			}
 828:src/translator.c **** 		}
 829:src/translator.c **** 	}
 830:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 64);
 5348              		.loc 1 830 2
 5349 110e 4021     		movs	r1, #64
 5350 1110 1C20     		movs	r0, #28
 5351 1112 294B     		ldr	r3, .L275+8
 5352 1114 9847     		blx	r3
 5353              	.LVL125:
 831:src/translator.c **** 	if (RAM.ErrorFuseChannel != 0) {
 5354              		.loc 1 831 9
 5355 1116 264B     		ldr	r3, .L275
 5356 1118 B3F80636 		ldrh	r3, [r3, #1542]	@ unaligned
 5357 111c 9BB2     		uxth	r3, r3
 5358              		.loc 1 831 5
 5359 111e 002B     		cmp	r3, #0
 5360 1120 09D0     		beq	.L236
 832:src/translator.c **** 		RAM.LogicErrorFlags |= (1 << 4);
 5361              		.loc 1 832 23
 5362 1122 234B     		ldr	r3, .L275
 5363 1124 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5364 1126 43F01003 		orr	r3, r3, #16
 5365 112a DAB2     		uxtb	r2, r3
 5366 112c 204B     		ldr	r3, .L275
 5367 112e 1A72     		strb	r2, [r3, #8]
 833:src/translator.c **** 		CheckErrors();
 5368              		.loc 1 833 3
 5369 1130 204B     		ldr	r3, .L275+4
 5370 1132 9847     		blx	r3
 5371              	.LVL126:
 5372 1134 08E0     		b	.L237
 5373              	.L236:
 834:src/translator.c **** 
 835:src/translator.c **** 	} else {
 836:src/translator.c **** 		RAM.LogicErrorFlags &= ~(1 << 4);
 5374              		.loc 1 836 23
 5375 1136 1E4B     		ldr	r3, .L275
 5376 1138 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5377 113a 23F01003 		bic	r3, r3, #16
 5378 113e DAB2     		uxtb	r2, r3
 5379 1140 1B4B     		ldr	r3, .L275
 5380 1142 1A72     		strb	r2, [r3, #8]
 837:src/translator.c **** 		CheckErrors();
 5381              		.loc 1 837 3
 5382 1144 1B4B     		ldr	r3, .L275+4
 5383 1146 9847     		blx	r3
 5384              	.LVL127:
 5385              	.L237:
 838:src/translator.c **** 
 839:src/translator.c **** 	}
 840:src/translator.c **** 
 841:src/translator.c **** 
 842:src/translator.c **** 	//check Security
 843:src/translator.c **** 	if (CheckDiscretMask(pxConfig->devcfg.logica.MaskSecurity)) {
 5386              		.loc 1 843 46
 5387 1148 D7F86031 		ldr	r3, [r7, #352]
 5388 114c 03F58C63 		add	r3, r3, #1120
 5389              		.loc 1 843 6
 5390 1150 1846     		mov	r0, r3
 5391 1152 1B4B     		ldr	r3, .L275+16
 5392 1154 9847     		blx	r3
 5393              	.LVL128:
 5394 1156 0346     		mov	r3, r0
 5395              		.loc 1 843 5
 5396 1158 002B     		cmp	r3, #0
 5397 115a 09D0     		beq	.L238
 844:src/translator.c **** 		RAM.LogicErrorFlags &= ~(1 << 2);
 5398              		.loc 1 844 23
 5399 115c 144B     		ldr	r3, .L275
 5400 115e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5401 1160 23F00403 		bic	r3, r3, #4
 5402 1164 DAB2     		uxtb	r2, r3
 5403 1166 124B     		ldr	r3, .L275
 5404 1168 1A72     		strb	r2, [r3, #8]
 845:src/translator.c **** 		CheckErrors();
 5405              		.loc 1 845 3
 5406 116a 124B     		ldr	r3, .L275+4
 5407 116c 9847     		blx	r3
 5408              	.LVL129:
 5409 116e 08E0     		b	.L239
 5410              	.L238:
 846:src/translator.c **** 
 847:src/translator.c **** 	} else {
 848:src/translator.c **** 		RAM.LogicErrorFlags |= (1 << 2);
 5411              		.loc 1 848 23
 5412 1170 0F4B     		ldr	r3, .L275
 5413 1172 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5414 1174 43F00403 		orr	r3, r3, #4
 5415 1178 DAB2     		uxtb	r2, r3
 5416 117a 0D4B     		ldr	r3, .L275
 5417 117c 1A72     		strb	r2, [r3, #8]
 849:src/translator.c **** 		CheckErrors();
 5418              		.loc 1 849 3
 5419 117e 0D4B     		ldr	r3, .L275+4
 5420 1180 9847     		blx	r3
 5421              	.LVL130:
 5422              	.L239:
 850:src/translator.c **** 
 851:src/translator.c **** 	}
 852:src/translator.c **** 
 853:src/translator.c **** 
 854:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 65);
 5423              		.loc 1 854 2
 5424 1182 4121     		movs	r1, #65
 5425 1184 1C20     		movs	r0, #28
 5426 1186 0C4B     		ldr	r3, .L275+8
 5427 1188 9847     		blx	r3
 5428              	.LVL131:
 855:src/translator.c **** 	if ((pxConfig->devcfg.logica.SwitchTime) == 0xFFFF) {
 5429              		.loc 1 855 30
 5430 118a D7F86031 		ldr	r3, [r7, #352]
 5431 118e B3F87834 		ldrh	r3, [r3, #1144]	@ unaligned
 5432 1192 9BB2     		uxth	r3, r3
 5433              		.loc 1 855 5
 5434 1194 4FF6FF72 		movw	r2, #65535
 5435 1198 9342     		cmp	r3, r2
 5436 119a 2DD1     		bne	.L240
 5437              	.LBB46:
 856:src/translator.c **** 		uint16 u1 = 0;
 5438              		.loc 1 856 10
 5439 119c 07F5E073 		add	r3, r7, #448
 5440 11a0 A3F5DC73 		sub	r3, r3, #440
 5441 11a4 0022     		movs	r2, #0
 5442 11a6 1A80     		strh	r2, [r3]	@ movhi
 5443              	.LBB47:
 857:src/translator.c **** 		for (int i = 0; i < 64; i++) {
 5444              		.loc 1 857 12
 5445 11a8 0023     		movs	r3, #0
 5446 11aa C7F86C31 		str	r3, [r7, #364]
 5447              		.loc 1 857 3
 5448 11ae 1FE0     		b	.L241
 5449              	.L276:
 5450              		.align	2
 5451              	.L275:
 5452 11b0 00000000 		.word	RAM
 5453 11b4 00000000 		.word	CheckErrors
 5454 11b8 00000000 		.word	BKP_WriteBackupRegister
 5455 11bc 00000000 		.word	GetDiskretFromRam
 5456 11c0 00000000 		.word	CheckDiscretMask
 5457 11c4 00000000 		.word	CheckDiscretMaskNegative
 5458              	.L242:
 858:src/translator.c **** 			MemSetWords((uint16) (0x8200 + i), &u1, 0x1);
 5459              		.loc 1 858 4 discriminator 3
 5460 11c8 D7F86C31 		ldr	r3, [r7, #364]
 5461 11cc 9BB2     		uxth	r3, r3
 5462 11ce A3F5FC43 		sub	r3, r3, #32256
 5463 11d2 9BB2     		uxth	r3, r3
 5464 11d4 07F10801 		add	r1, r7, #8
 5465 11d8 0122     		movs	r2, #1
 5466 11da 1846     		mov	r0, r3
 5467 11dc 384B     		ldr	r3, .L277
 5468 11de 9847     		blx	r3
 5469              	.LVL132:
 859:src/translator.c **** 			vTaskDelay(1);
 5470              		.loc 1 859 4 discriminator 3
 5471 11e0 0120     		movs	r0, #1
 5472 11e2 384B     		ldr	r3, .L277+4
 5473 11e4 9847     		blx	r3
 5474              	.LVL133:
 857:src/translator.c **** 		for (int i = 0; i < 64; i++) {
 5475              		.loc 1 857 28 discriminator 3
 5476 11e6 D7F86C31 		ldr	r3, [r7, #364]
 5477 11ea 0133     		adds	r3, r3, #1
 5478 11ec C7F86C31 		str	r3, [r7, #364]
 5479              	.L241:
 857:src/translator.c **** 		for (int i = 0; i < 64; i++) {
 5480              		.loc 1 857 3 discriminator 1
 5481 11f0 D7F86C31 		ldr	r3, [r7, #364]
 5482 11f4 3F2B     		cmp	r3, #63
 5483 11f6 E7DD     		ble	.L242
 5484              	.L240:
 5485              	.LBE47:
 5486              	.LBE46:
 860:src/translator.c **** 		}
 861:src/translator.c **** 
 862:src/translator.c **** 	}
 863:src/translator.c **** 
 864:src/translator.c **** 	if (pxConfig->devcfg.logica.SwitchTime > 1800
 5487              		.loc 1 864 29
 5488 11f8 D7F86031 		ldr	r3, [r7, #352]
 5489 11fc B3F87834 		ldrh	r3, [r3, #1144]	@ unaligned
 5490 1200 9BB2     		uxth	r3, r3
 5491              		.loc 1 864 5
 5492 1202 B3F5E16F 		cmp	r3, #1800
 5493 1206 06D8     		bhi	.L243
 865:src/translator.c **** 			|| pxConfig->devcfg.logica.SwitchTime == 0) {
 5494              		.loc 1 865 30
 5495 1208 D7F86031 		ldr	r3, [r7, #352]
 5496 120c B3F87834 		ldrh	r3, [r3, #1144]	@ unaligned
 5497 1210 9BB2     		uxth	r3, r3
 5498              		.loc 1 865 4
 5499 1212 002B     		cmp	r3, #0
 5500 1214 11D1     		bne	.L244
 5501              	.L243:
 5502              	.LBB48:
 866:src/translator.c **** 		uint16 u1 = 300;
 5503              		.loc 1 866 10
 5504 1216 07F5E073 		add	r3, r7, #448
 5505 121a A3F5DD73 		sub	r3, r3, #442
 5506 121e 4FF49672 		mov	r2, #300
 5507 1222 1A80     		strh	r2, [r3]	@ movhi
 867:src/translator.c **** 		portENTER_CRITICAL();
 5508              		.loc 1 867 3
 5509 1224 284B     		ldr	r3, .L277+8
 5510 1226 9847     		blx	r3
 5511              	.LVL134:
 868:src/translator.c **** 		{
 869:src/translator.c **** 			MemSetWords((uint16) (0x823C), &u1, 0x1);
 5512              		.loc 1 869 4
 5513 1228 BB1D     		adds	r3, r7, #6
 5514 122a 0122     		movs	r2, #1
 5515 122c 1946     		mov	r1, r3
 5516 122e 48F23C20 		movw	r0, #33340
 5517 1232 234B     		ldr	r3, .L277
 5518 1234 9847     		blx	r3
 5519              	.LVL135:
 870:src/translator.c **** 		}
 871:src/translator.c **** 		portEXIT_CRITICAL();
 5520              		.loc 1 871 3
 5521 1236 254B     		ldr	r3, .L277+12
 5522 1238 9847     		blx	r3
 5523              	.LVL136:
 5524              	.L244:
 5525              	.LBE48:
 872:src/translator.c **** 	}
 873:src/translator.c **** 
 874:src/translator.c **** 	SetCRC(&RAM.LogicErrorFlags, 18);
 5526              		.loc 1 874 2
 5527 123a 1221     		movs	r1, #18
 5528 123c 2448     		ldr	r0, .L277+16
 5529 123e 254B     		ldr	r3, .L277+20
 5530 1240 9847     		blx	r3
 5531              	.LVL137:
 875:src/translator.c **** 
 876:src/translator.c **** 	BKP_WriteBackupRegister(BKP_DR7, 66);
 5532              		.loc 1 876 2
 5533 1242 4221     		movs	r1, #66
 5534 1244 1C20     		movs	r0, #28
 5535 1246 244B     		ldr	r3, .L277+24
 5536 1248 9847     		blx	r3
 5537              	.LVL138:
 5538              	.LBB49:
 877:src/translator.c **** 	//Блок записи в журнал о ручном режиме, ремонтном режиме каналов
 878:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 5539              		.loc 1 878 11
 5540 124a 0023     		movs	r3, #0
 5541 124c C7F86831 		str	r3, [r7, #360]
 5542              		.loc 1 878 2
 5543 1250 2EE0     		b	.L245
 5544              	.L250:
 879:src/translator.c **** 		if (GetChannelBitDirect(i, RAM.OutputCommand) == 1) {
 5545              		.loc 1 879 7
 5546 1252 2249     		ldr	r1, .L277+28
 5547 1254 D7F86801 		ldr	r0, [r7, #360]
 5548 1258 214B     		ldr	r3, .L277+32
 5549 125a 9847     		blx	r3
 5550              	.LVL139:
 5551 125c 0346     		mov	r3, r0
 5552              		.loc 1 879 6
 5553 125e 012B     		cmp	r3, #1
 5554 1260 06D1     		bne	.L246
 880:src/translator.c **** 			ChanelChangeDirect[i] = true;
 5555              		.loc 1 880 26
 5556 1262 204A     		ldr	r2, .L277+36
 5557 1264 D7F86831 		ldr	r3, [r7, #360]
 5558 1268 1344     		add	r3, r3, r2
 5559 126a 0122     		movs	r2, #1
 5560 126c 1A70     		strb	r2, [r3]
 5561 126e 05E0     		b	.L247
 5562              	.L246:
 881:src/translator.c **** 		} else {
 882:src/translator.c **** 			ChanelChangeDirect[i] = false;
 5563              		.loc 1 882 26
 5564 1270 1C4A     		ldr	r2, .L277+36
 5565 1272 D7F86831 		ldr	r3, [r7, #360]
 5566 1276 1344     		add	r3, r3, r2
 5567 1278 0022     		movs	r2, #0
 5568 127a 1A70     		strb	r2, [r3]
 5569              	.L247:
 883:src/translator.c **** 		}
 884:src/translator.c **** 		if (GetChannelBitRepare(i, RAM.OutputCommand) == 1) {
 5570              		.loc 1 884 7
 5571 127c 1749     		ldr	r1, .L277+28
 5572 127e D7F86801 		ldr	r0, [r7, #360]
 5573 1282 194B     		ldr	r3, .L277+40
 5574 1284 9847     		blx	r3
 5575              	.LVL140:
 5576 1286 0346     		mov	r3, r0
 5577              		.loc 1 884 6
 5578 1288 012B     		cmp	r3, #1
 5579 128a 06D1     		bne	.L248
 885:src/translator.c **** 			ChanelChangeRepare[i] = true;
 5580              		.loc 1 885 26
 5581 128c 174A     		ldr	r2, .L277+44
 5582 128e D7F86831 		ldr	r3, [r7, #360]
 5583 1292 1344     		add	r3, r3, r2
 5584 1294 0122     		movs	r2, #1
 5585 1296 1A70     		strb	r2, [r3]
 5586 1298 05E0     		b	.L249
 5587              	.L248:
 886:src/translator.c **** 		} else {
 887:src/translator.c **** 			ChanelChangeRepare[i] = false;
 5588              		.loc 1 887 26
 5589 129a 144A     		ldr	r2, .L277+44
 5590 129c D7F86831 		ldr	r3, [r7, #360]
 5591 12a0 1344     		add	r3, r3, r2
 5592 12a2 0022     		movs	r2, #0
 5593 12a4 1A70     		strb	r2, [r3]
 5594              	.L249:
 878:src/translator.c **** 		if (GetChannelBitDirect(i, RAM.OutputCommand) == 1) {
 5595              		.loc 1 878 26 discriminator 2
 5596 12a6 D7F86831 		ldr	r3, [r7, #360]
 5597 12aa 0133     		adds	r3, r3, #1
 5598 12ac C7F86831 		str	r3, [r7, #360]
 5599              	.L245:
 878:src/translator.c **** 		if (GetChannelBitDirect(i, RAM.OutputCommand) == 1) {
 5600              		.loc 1 878 2 discriminator 1
 5601 12b0 D7F86831 		ldr	r3, [r7, #360]
 5602 12b4 072B     		cmp	r3, #7
 5603 12b6 CCDD     		ble	.L250
 5604              	.LBE49:
 5605              	.LBB50:
 888:src/translator.c **** 		}
 889:src/translator.c **** 	}
 890:src/translator.c **** 	char minbuf[20];
 891:src/translator.c **** 	char buffer[256];
 892:src/translator.c **** 	for (int i = 0; i < 8; i++) {
 5606              		.loc 1 892 11
 5607 12b8 0023     		movs	r3, #0
 5608 12ba C7F86431 		str	r3, [r7, #356]
 5609              		.loc 1 892 2
 5610 12be 21E1     		b	.L251
 5611              	.L278:
 5612              		.align	2
 5613              	.L277:
 5614 12c0 00000000 		.word	MemSetWords
 5615 12c4 00000000 		.word	vTaskDelay
 5616 12c8 00000000 		.word	vPortEnterCritical
 5617 12cc 00000000 		.word	vPortExitCritical
 5618 12d0 08000000 		.word	RAM+8
 5619 12d4 00000000 		.word	SetCRC
 5620 12d8 00000000 		.word	BKP_WriteBackupRegister
 5621 12dc 04000000 		.word	RAM+4
 5622 12e0 00000000 		.word	GetChannelBitDirect
 5623 12e4 00000000 		.word	ChanelChangeDirect
 5624 12e8 00000000 		.word	GetChannelBitRepare
 5625 12ec 00000000 		.word	ChanelChangeRepare
 5626              	.L256:
 893:src/translator.c **** 		if ((ChanelChangeDirect[i] == true) && (ChanelDirect[i] == false)) {
 5627              		.loc 1 893 26
 5628 12f0 8A4A     		ldr	r2, .L279
 5629 12f2 D7F86431 		ldr	r3, [r7, #356]
 5630 12f6 1344     		add	r3, r3, r2
 5631 12f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5632              		.loc 1 893 6
 5633 12fa 002B     		cmp	r3, #0
 5634 12fc 36D0     		beq	.L252
 5635              		.loc 1 893 55 discriminator 1
 5636 12fe 884A     		ldr	r2, .L279+4
 5637 1300 D7F86431 		ldr	r3, [r7, #356]
 5638 1304 1344     		add	r3, r3, r2
 5639 1306 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5640              		.loc 1 893 59 discriminator 1
 5641 1308 83F00103 		eor	r3, r3, #1
 5642 130c DBB2     		uxtb	r3, r3
 5643              		.loc 1 893 39 discriminator 1
 5644 130e 002B     		cmp	r3, #0
 5645 1310 2CD0     		beq	.L252
 5646              	.LBB51:
 894:src/translator.c **** 			itoa1(i + 1, minbuf);
 5647              		.loc 1 894 4
 5648 1312 D7F86431 		ldr	r3, [r7, #356]
 5649 1316 0133     		adds	r3, r3, #1
 5650 1318 07F58672 		add	r2, r7, #268
 5651 131c 1146     		mov	r1, r2
 5652 131e 1846     		mov	r0, r3
 5653 1320 804B     		ldr	r3, .L279+8
 5654 1322 9847     		blx	r3
 5655              	.LVL141:
 895:src/translator.c **** 			manualwork=1;
 5656              		.loc 1 895 14
 5657 1324 804B     		ldr	r3, .L279+12
 5658 1326 0122     		movs	r2, #1
 5659 1328 1A60     		str	r2, [r3]
 896:src/translator.c **** 			strcpy(buffer, "Ручной режим.КУ:");
 5660              		.loc 1 896 4
 5661 132a 07F10C03 		add	r3, r7, #12
 5662 132e 7F4A     		ldr	r2, .L279+16
 5663 1330 1C46     		mov	r4, r3
 5664 1332 1546     		mov	r5, r2
 5665 1334 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5666 1336 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5667 1338 2B68     		ldr	r3, [r5]
 5668 133a 2370     		strb	r3, [r4]
 897:src/translator.c **** 			strcat(buffer, minbuf);
 5669              		.loc 1 897 4
 5670 133c 07F58672 		add	r2, r7, #268
 5671 1340 07F10C03 		add	r3, r7, #12
 5672 1344 1146     		mov	r1, r2
 5673 1346 1846     		mov	r0, r3
 5674 1348 794B     		ldr	r3, .L279+20
 5675 134a 9847     		blx	r3
 5676              	.LVL142:
 898:src/translator.c **** 			JrnlWrite(buffer);
 5677              		.loc 1 898 4
 5678 134c 07F10C03 		add	r3, r7, #12
 5679 1350 1846     		mov	r0, r3
 5680 1352 784B     		ldr	r3, .L279+24
 5681 1354 9847     		blx	r3
 5682              	.LVL143:
 899:src/translator.c **** 			ChanelDirect[i] = ChanelChangeDirect[i];
 5683              		.loc 1 899 40
 5684 1356 714A     		ldr	r2, .L279
 5685 1358 D7F86431 		ldr	r3, [r7, #356]
 5686 135c 1344     		add	r3, r3, r2
 5687 135e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5688              		.loc 1 899 20
 5689 1360 6F4A     		ldr	r2, .L279+4
 5690 1362 D7F86431 		ldr	r3, [r7, #356]
 5691 1366 1344     		add	r3, r3, r2
 5692 1368 0A46     		mov	r2, r1
 5693 136a 1A70     		strb	r2, [r3]
 5694              	.L252:
 5695              	.LBE51:
 900:src/translator.c **** 
 901:src/translator.c **** 		}
 902:src/translator.c **** 		if ((ChanelChangeDirect[i] == false) && (ChanelDirect[i] == true)) {
 5696              		.loc 1 902 26
 5697 136c 6B4A     		ldr	r2, .L279
 5698 136e D7F86431 		ldr	r3, [r7, #356]
 5699 1372 1344     		add	r3, r3, r2
 5700 1374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5701              		.loc 1 902 30
 5702 1376 83F00103 		eor	r3, r3, #1
 5703 137a DBB2     		uxtb	r3, r3
 5704              		.loc 1 902 6
 5705 137c 002B     		cmp	r3, #0
 5706 137e 35D0     		beq	.L253
 5707              		.loc 1 902 56 discriminator 1
 5708 1380 674A     		ldr	r2, .L279+4
 5709 1382 D7F86431 		ldr	r3, [r7, #356]
 5710 1386 1344     		add	r3, r3, r2
 5711 1388 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5712              		.loc 1 902 40 discriminator 1
 5713 138a 002B     		cmp	r3, #0
 5714 138c 2ED0     		beq	.L253
 5715              	.LBB52:
 903:src/translator.c **** 			itoa1(i + 1, minbuf);
 5716              		.loc 1 903 4
 5717 138e D7F86431 		ldr	r3, [r7, #356]
 5718 1392 0133     		adds	r3, r3, #1
 5719 1394 07F58672 		add	r2, r7, #268
 5720 1398 1146     		mov	r1, r2
 5721 139a 1846     		mov	r0, r3
 5722 139c 614B     		ldr	r3, .L279+8
 5723 139e 9847     		blx	r3
 5724              	.LVL144:
 904:src/translator.c **** 			manualwork=0;
 5725              		.loc 1 904 14
 5726 13a0 614B     		ldr	r3, .L279+12
 5727 13a2 0022     		movs	r2, #0
 5728 13a4 1A60     		str	r2, [r3]
 905:src/translator.c **** 			strcpy(buffer, "Авто режим.КУ:");
 5729              		.loc 1 905 4
 5730 13a6 07F10C03 		add	r3, r7, #12
 5731 13aa 634A     		ldr	r2, .L279+28
 5732 13ac 1C46     		mov	r4, r3
 5733 13ae 1346     		mov	r3, r2
 5734 13b0 0FCB     		ldm	r3, {r0, r1, r2, r3}
 5735 13b2 07C4     		stmia	r4!, {r0, r1, r2}
 5736 13b4 2380     		strh	r3, [r4]	@ movhi
 5737 13b6 0234     		adds	r4, r4, #2
 5738 13b8 1B0C     		lsrs	r3, r3, #16
 5739 13ba 2370     		strb	r3, [r4]
 906:src/translator.c **** 			strcat(buffer, minbuf);
 5740              		.loc 1 906 4
 5741 13bc 07F58672 		add	r2, r7, #268
 5742 13c0 07F10C03 		add	r3, r7, #12
 5743 13c4 1146     		mov	r1, r2
 5744 13c6 1846     		mov	r0, r3
 5745 13c8 594B     		ldr	r3, .L279+20
 5746 13ca 9847     		blx	r3
 5747              	.LVL145:
 907:src/translator.c **** 			JrnlWrite(buffer);
 5748              		.loc 1 907 4
 5749 13cc 07F10C03 		add	r3, r7, #12
 5750 13d0 1846     		mov	r0, r3
 5751 13d2 584B     		ldr	r3, .L279+24
 5752 13d4 9847     		blx	r3
 5753              	.LVL146:
 908:src/translator.c **** 			ChanelDirect[i] = ChanelChangeDirect[i];
 5754              		.loc 1 908 40
 5755 13d6 514A     		ldr	r2, .L279
 5756 13d8 D7F86431 		ldr	r3, [r7, #356]
 5757 13dc 1344     		add	r3, r3, r2
 5758 13de 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5759              		.loc 1 908 20
 5760 13e0 4F4A     		ldr	r2, .L279+4
 5761 13e2 D7F86431 		ldr	r3, [r7, #356]
 5762 13e6 1344     		add	r3, r3, r2
 5763 13e8 0A46     		mov	r2, r1
 5764 13ea 1A70     		strb	r2, [r3]
 5765              	.L253:
 5766              	.LBE52:
 909:src/translator.c **** 
 910:src/translator.c **** 		}
 911:src/translator.c **** 		if ((ChanelChangeRepare[i] == true) && (ChanelRepare[i] == false)) {
 5767              		.loc 1 911 26
 5768 13ec 534A     		ldr	r2, .L279+32
 5769 13ee D7F86431 		ldr	r3, [r7, #356]
 5770 13f2 1344     		add	r3, r3, r2
 5771 13f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5772              		.loc 1 911 6
 5773 13f6 002B     		cmp	r3, #0
 5774 13f8 33D0     		beq	.L254
 5775              		.loc 1 911 55 discriminator 1
 5776 13fa 514A     		ldr	r2, .L279+36
 5777 13fc D7F86431 		ldr	r3, [r7, #356]
 5778 1400 1344     		add	r3, r3, r2
 5779 1402 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5780              		.loc 1 911 59 discriminator 1
 5781 1404 83F00103 		eor	r3, r3, #1
 5782 1408 DBB2     		uxtb	r3, r3
 5783              		.loc 1 911 39 discriminator 1
 5784 140a 002B     		cmp	r3, #0
 5785 140c 29D0     		beq	.L254
 5786              	.LBB53:
 912:src/translator.c **** 			itoa1(i + 1, minbuf);
 5787              		.loc 1 912 4
 5788 140e D7F86431 		ldr	r3, [r7, #356]
 5789 1412 0133     		adds	r3, r3, #1
 5790 1414 07F58672 		add	r2, r7, #268
 5791 1418 1146     		mov	r1, r2
 5792 141a 1846     		mov	r0, r3
 5793 141c 414B     		ldr	r3, .L279+8
 5794 141e 9847     		blx	r3
 5795              	.LVL147:
 913:src/translator.c **** 			strcpy(buffer, "Вкл. Рем. режим.КУ:");
 5796              		.loc 1 913 4
 5797 1420 07F10C03 		add	r3, r7, #12
 5798 1424 474A     		ldr	r2, .L279+40
 5799 1426 1C46     		mov	r4, r3
 5800 1428 1546     		mov	r5, r2
 5801 142a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5802 142c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5803 142e 2B68     		ldr	r3, [r5]
 5804 1430 2360     		str	r3, [r4]
 914:src/translator.c **** 			strcat(buffer, minbuf);
 5805              		.loc 1 914 4
 5806 1432 07F58672 		add	r2, r7, #268
 5807 1436 07F10C03 		add	r3, r7, #12
 5808 143a 1146     		mov	r1, r2
 5809 143c 1846     		mov	r0, r3
 5810 143e 3C4B     		ldr	r3, .L279+20
 5811 1440 9847     		blx	r3
 5812              	.LVL148:
 915:src/translator.c **** 			JrnlWrite(buffer);
 5813              		.loc 1 915 4
 5814 1442 07F10C03 		add	r3, r7, #12
 5815 1446 1846     		mov	r0, r3
 5816 1448 3A4B     		ldr	r3, .L279+24
 5817 144a 9847     		blx	r3
 5818              	.LVL149:
 916:src/translator.c **** 			ChanelRepare[i] = ChanelChangeRepare[i];
 5819              		.loc 1 916 40
 5820 144c 3B4A     		ldr	r2, .L279+32
 5821 144e D7F86431 		ldr	r3, [r7, #356]
 5822 1452 1344     		add	r3, r3, r2
 5823 1454 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5824              		.loc 1 916 20
 5825 1456 3A4A     		ldr	r2, .L279+36
 5826 1458 D7F86431 		ldr	r3, [r7, #356]
 5827 145c 1344     		add	r3, r3, r2
 5828 145e 0A46     		mov	r2, r1
 5829 1460 1A70     		strb	r2, [r3]
 5830              	.L254:
 5831              	.LBE53:
 917:src/translator.c **** 
 918:src/translator.c **** 		}
 919:src/translator.c **** 
 920:src/translator.c **** 		if ((ChanelChangeRepare[i] == false) && (ChanelRepare[i] == true)) {
 5832              		.loc 1 920 26
 5833 1462 364A     		ldr	r2, .L279+32
 5834 1464 D7F86431 		ldr	r3, [r7, #356]
 5835 1468 1344     		add	r3, r3, r2
 5836 146a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5837              		.loc 1 920 30
 5838 146c 83F00103 		eor	r3, r3, #1
 5839 1470 DBB2     		uxtb	r3, r3
 5840              		.loc 1 920 6
 5841 1472 002B     		cmp	r3, #0
 5842 1474 33D0     		beq	.L255
 5843              		.loc 1 920 56 discriminator 1
 5844 1476 324A     		ldr	r2, .L279+36
 5845 1478 D7F86431 		ldr	r3, [r7, #356]
 5846 147c 1344     		add	r3, r3, r2
 5847 147e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5848              		.loc 1 920 40 discriminator 1
 5849 1480 002B     		cmp	r3, #0
 5850 1482 2CD0     		beq	.L255
 5851              	.LBB54:
 921:src/translator.c **** 			itoa1(i + 1, minbuf);
 5852              		.loc 1 921 4
 5853 1484 D7F86431 		ldr	r3, [r7, #356]
 5854 1488 0133     		adds	r3, r3, #1
 5855 148a 07F58672 		add	r2, r7, #268
 5856 148e 1146     		mov	r1, r2
 5857 1490 1846     		mov	r0, r3
 5858 1492 244B     		ldr	r3, .L279+8
 5859 1494 9847     		blx	r3
 5860              	.LVL150:
 922:src/translator.c **** 			strcpy(buffer, "Откл. Рем. режим.КУ:");
 5861              		.loc 1 922 4
 5862 1496 07F10C03 		add	r3, r7, #12
 5863 149a 2B4A     		ldr	r2, .L279+44
 5864 149c 1C46     		mov	r4, r3
 5865 149e 1546     		mov	r5, r2
 5866 14a0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5867 14a2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5868 14a4 95E80300 		ldm	r5, {r0, r1}
 5869 14a8 2060     		str	r0, [r4]
 5870 14aa 0434     		adds	r4, r4, #4
 5871 14ac 2170     		strb	r1, [r4]
 923:src/translator.c **** 			strcat(buffer, minbuf);
 5872              		.loc 1 923 4
 5873 14ae 07F58672 		add	r2, r7, #268
 5874 14b2 07F10C03 		add	r3, r7, #12
 5875 14b6 1146     		mov	r1, r2
 5876 14b8 1846     		mov	r0, r3
 5877 14ba 1D4B     		ldr	r3, .L279+20
 5878 14bc 9847     		blx	r3
 5879              	.LVL151:
 924:src/translator.c **** 			JrnlWrite(buffer);
 5880              		.loc 1 924 4
 5881 14be 07F10C03 		add	r3, r7, #12
 5882 14c2 1846     		mov	r0, r3
 5883 14c4 1B4B     		ldr	r3, .L279+24
 5884 14c6 9847     		blx	r3
 5885              	.LVL152:
 925:src/translator.c **** 			ChanelRepare[i] = ChanelChangeRepare[i];
 5886              		.loc 1 925 40
 5887 14c8 1C4A     		ldr	r2, .L279+32
 5888 14ca D7F86431 		ldr	r3, [r7, #356]
 5889 14ce 1344     		add	r3, r3, r2
 5890 14d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5891              		.loc 1 925 20
 5892 14d2 1B4A     		ldr	r2, .L279+36
 5893 14d4 D7F86431 		ldr	r3, [r7, #356]
 5894 14d8 1344     		add	r3, r3, r2
 5895 14da 0A46     		mov	r2, r1
 5896 14dc 1A70     		strb	r2, [r3]
 5897              	.L255:
 5898              	.LBE54:
 926:src/translator.c **** 
 927:src/translator.c **** 		}
 928:src/translator.c **** 
 929:src/translator.c **** 		BKP_WriteBackupRegister(BKP_DR1, RAM.LocalCommand[0]);
 5899              		.loc 1 929 3 discriminator 2
 5900 14de 1B4B     		ldr	r3, .L279+48
 5901 14e0 1B88     		ldrh	r3, [r3]	@ unaligned
 5902 14e2 9BB2     		uxth	r3, r3
 5903 14e4 1946     		mov	r1, r3
 5904 14e6 0420     		movs	r0, #4
 5905 14e8 194B     		ldr	r3, .L279+52
 5906 14ea 9847     		blx	r3
 5907              	.LVL153:
 930:src/translator.c **** 		BKP_WriteBackupRegister(BKP_DR2, RAM.LocalCommand[1]);
 5908              		.loc 1 930 3 discriminator 2
 5909 14ec 174B     		ldr	r3, .L279+48
 5910 14ee 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 5911 14f0 9BB2     		uxth	r3, r3
 5912 14f2 1946     		mov	r1, r3
 5913 14f4 0820     		movs	r0, #8
 5914 14f6 164B     		ldr	r3, .L279+52
 5915 14f8 9847     		blx	r3
 5916              	.LVL154:
 892:src/translator.c **** 		if ((ChanelChangeDirect[i] == true) && (ChanelDirect[i] == false)) {
 5917              		.loc 1 892 26 discriminator 2
 5918 14fa D7F86431 		ldr	r3, [r7, #356]
 5919 14fe 0133     		adds	r3, r3, #1
 5920 1500 C7F86431 		str	r3, [r7, #356]
 5921              	.L251:
 892:src/translator.c **** 		if ((ChanelChangeDirect[i] == true) && (ChanelDirect[i] == false)) {
 5922              		.loc 1 892 2 discriminator 1
 5923 1504 D7F86431 		ldr	r3, [r7, #356]
 5924 1508 072B     		cmp	r3, #7
 5925 150a 7FF7F1AE 		ble	.L256
 5926              	.LBE50:
 931:src/translator.c **** 	}
 932:src/translator.c **** 
 933:src/translator.c **** }
 5927              		.loc 1 933 1
 5928 150e 00BF     		nop
 5929 1510 00BF     		nop
 5930 1512 07F5E077 		add	r7, r7, #448
 5931              	.LCFI100:
 5932              		.cfi_def_cfa_offset 16
 5933 1516 BD46     		mov	sp, r7
 5934              	.LCFI101:
 5935              		.cfi_def_cfa_register 13
 5936              		@ sp needed
 5937 1518 B0BD     		pop	{r4, r5, r7, pc}
 5938              	.L280:
 5939 151a 00BF     		.align	2
 5940              	.L279:
 5941 151c 00000000 		.word	ChanelChangeDirect
 5942 1520 00000000 		.word	ChanelDirect
 5943 1524 00000000 		.word	itoa1
 5944 1528 00000000 		.word	manualwork
 5945 152c 50010000 		.word	.LC23
 5946 1530 00000000 		.word	strcat
 5947 1534 00000000 		.word	JrnlWrite
 5948 1538 64010000 		.word	.LC24
 5949 153c 00000000 		.word	ChanelChangeRepare
 5950 1540 00000000 		.word	ChanelRepare
 5951 1544 74010000 		.word	.LC25
 5952 1548 88010000 		.word	.LC26
 5953 154c 00000000 		.word	RAM
 5954 1550 00000000 		.word	BKP_WriteBackupRegister
 5955              		.cfi_endproc
 5956              	.LFE44:
 5958              		.text
 5959              	.Letext0:
 5960              		.file 2 "common/rtos/common/utils/typedef.h"
 5961              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 5962              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 5963              		.file 5 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 5964              		.file 6 "src/usermemory.h"
 5965              		.file 7 "common/rtos/common/driver/rtclock.h"
 5966              		.file 8 "./board.h"
 5967              		.file 9 "src/modem.h"
 5968              		.file 10 "./tasks/led.h"
 5969              		.file 11 "<built-in>"
 5970              		.file 12 "common/rtos/common/utils/memman.h"
 5971              		.file 13 "common/rtos/portable/GCC/ARM_CM3/portmacro.h"
 5972              		.file 14 "src/journal.h"
 5973              		.file 15 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
 5974              		.file 16 "common/rtos/common/utils/crc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 translator.c
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:21     .bss.bPowerOn:00000000 bPowerOn
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:22     .bss.bPowerOn:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:28     .bss.ChanelDirect:00000000 ChanelDirect
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:25     .bss.ChanelDirect:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:35     .bss.ChanelRepare:00000000 ChanelRepare
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:32     .bss.ChanelRepare:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:42     .bss.ChanelChangeDirect:00000000 ChanelChangeDirect
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:39     .bss.ChanelChangeDirect:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:49     .bss.ChanelChangeRepare:00000000 ChanelChangeRepare
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:46     .bss.ChanelChangeRepare:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:56     .bss.timer:00000000 timer
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:53     .bss.timer:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:62     .bss.prevLogicFlags:00000000 prevLogicFlags
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:63     .bss.prevLogicFlags:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:69     .bss.testSwitchRele:00000000 testSwitchRele
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:66     .bss.testSwitchRele:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:76     .bss.prevErrDiscretLogic:00000000 prevErrDiscretLogic
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:73     .bss.prevErrDiscretLogic:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:83     .bss.CountReset:00000000 CountReset
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:80     .bss.CountReset:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:90     .bss.manualwork:00000000 manualwork
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:87     .bss.manualwork:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:93     .rodata:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:98     .text.Reset:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:104    .text.Reset:00000000 Reset
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:187    .text.Reset:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:199    .text.GetChannelBitSignal:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:205    .text.GetChannelBitSignal:00000000 GetChannelBitSignal
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:277    .text.GetChannelBitRepare:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:283    .text.GetChannelBitRepare:00000000 GetChannelBitRepare
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:357    .text.GetChannelBitDirect:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:363    .text.GetChannelBitDirect:00000000 GetChannelBitDirect
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:437    .text.GetChannelBitReserv:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:443    .text.GetChannelBitReserv:00000000 GetChannelBitReserv
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:517    .text.SetChannelBitSignal:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:523    .text.SetChannelBitSignal:00000000 SetChannelBitSignal
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:663    .bss.block:00000000 block
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:660    .bss.block:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:666    .text.SetChannelBitRepare:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:672    .text.SetChannelBitRepare:00000000 SetChannelBitRepare
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:821    .text.SetChannelBitRepare:000000c8 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:826    .text.SetChannelBitDirect:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:832    .text.SetChannelBitDirect:00000000 SetChannelBitDirect
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:972    .text.SetChannelBitReserv:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:978    .text.SetChannelBitReserv:00000000 SetChannelBitReserv
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1118   .text.GetDiskretFromRam:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1124   .text.GetDiskretFromRam:00000000 GetDiskretFromRam
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1189   .text.GetDiskretFromRam:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1195   .text.SetRelayToRam:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1201   .text.SetRelayToRam:00000000 SetRelayToRam
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1313   .text.SetRelayToRam:000000a8 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1318   .text.CheckDiscretMask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1324   .text.CheckDiscretMask:00000000 CheckDiscretMask
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1517   .text.CheckDiscretMask:00000128 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1522   .text.CheckDiscretMaskNegative:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1528   .text.CheckDiscretMaskNegative:00000000 CheckDiscretMaskNegative
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1699   .text.CheckDiscretMaskNegative:00000100 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1711   .text.CheckCUSignal:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1717   .text.CheckCUSignal:00000000 CheckCUSignal
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1898   .text.CheckCUSignal:00000118 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1914   .bss.NeedWrite:00000000 NeedWrite
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1915   .bss.NeedWrite:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1921   .bss.message:00000000 message
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1918   .bss.message:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1961   .text.CheckErrors:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:1967   .text.CheckErrors:00000000 CheckErrors
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2038   .text.CheckErrors:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2043   .text.CheckErrors:0000006c $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2163   .text.CheckErrors:0000010c $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2168   .text.CheckErrors:00000120 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2319   .text.CheckErrors:000001e0 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2356   .text.CheckDiscretsErrors:00000000 CheckDiscretsErrors
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2350   .text.CheckDiscretsErrors:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2635   .text.CheckDiscretsErrors:000001b0 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2654   .bss.minbuf:00000000 minbuf
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2651   .bss.minbuf:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2661   .bss.buffer:00000000 buffer
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2658   .bss.buffer:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2680   .text.CheckPowerOn:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2686   .text.CheckPowerOn:00000000 CheckPowerOn
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2903   .text.CheckPowerOn:00000110 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2952   .text.DoProgram:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:2958   .text.DoProgram:00000000 DoProgram
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:3418   .text.DoProgram:000002bc $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:3447   .text.DoProgram:00000328 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:3727   .text.DoProgram:000004f0 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:3744   .text.DoProgram:00000528 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:4208   .text.DoProgram:000008a8 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:4215   .text.DoProgram:000008bc $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:4679   .text.DoProgram:00000c50 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:4683   .text.DoProgram:00000c58 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5087   .text.DoProgram:00000f14 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5098   .text.DoProgram:00000f38 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5452   .text.DoProgram:000011b0 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5460   .text.DoProgram:000011c8 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5614   .text.DoProgram:000012c0 $d
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5628   .text.DoProgram:000012f0 $t
C:\Users\Admin\AppData\Local\Temp\ccAn3j5I.s:5941   .text.DoProgram:0000151c $d

UNDEFINED SYMBOLS
RAM
JrnlWrite
GprsIdleMSec
LedNoModem
LedSIM
CSQ
itoa1
strcat
strlen
vPortEnterCritical
T1
BKP_ReadBackupRegister
JrnlWriteOff
vPortExitCritical
JrnlClear
BKP_WriteBackupRegister
vTaskDelay
I2C_Time_BufferWrite
MemSetWords
atcGetCounter
atcResetCounter
rtcGetDataTime
SetCRC
