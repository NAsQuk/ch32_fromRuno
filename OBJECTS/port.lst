   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ulKernelPriority
  18              		.section	.rodata.ulKernelPriority,"a"
  19              		.align	2
  22              	ulKernelPriority:
  23 0000 FF000000 		.word	255
  24              		.section	.data.uxCriticalNesting,"aw"
  25              		.align	2
  28              	uxCriticalNesting:
  29 0000 AAAAAAAA 		.word	-1431655766
  30              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  31              		.align	1
  32              		.global	pxPortInitialiseStack
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	pxPortInitialiseStack:
  38              	.LFB27:
  39              		.file 1 "common/rtos/portable/GCC/ARM_CM3/port.c"
   1:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
   2:common/rtos/portable/GCC/ARM_CM3/port.c ****     FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:common/rtos/portable/GCC/ARM_CM3/port.c **** 
   4:common/rtos/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
   5:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
   6:common/rtos/portable/GCC/ARM_CM3/port.c ****     * If you are:                                                             *
   7:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
   8:common/rtos/portable/GCC/ARM_CM3/port.c ****     *    + New to FreeRTOS,                                                   *
   9:common/rtos/portable/GCC/ARM_CM3/port.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:common/rtos/portable/GCC/ARM_CM3/port.c ****     *    + Looking for basic training,                                        *
  11:common/rtos/portable/GCC/ARM_CM3/port.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  13:common/rtos/portable/GCC/ARM_CM3/port.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  15:common/rtos/portable/GCC/ARM_CM3/port.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  18:common/rtos/portable/GCC/ARM_CM3/port.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:common/rtos/portable/GCC/ARM_CM3/port.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:common/rtos/portable/GCC/ARM_CM3/port.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:common/rtos/portable/GCC/ARM_CM3/port.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:common/rtos/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  23:common/rtos/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  24:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  25:common/rtos/portable/GCC/ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
  26:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  27:common/rtos/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:common/rtos/portable/GCC/ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:common/rtos/portable/GCC/ARM_CM3/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:common/rtos/portable/GCC/ARM_CM3/port.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:common/rtos/portable/GCC/ARM_CM3/port.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:common/rtos/portable/GCC/ARM_CM3/port.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:common/rtos/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:common/rtos/portable/GCC/ARM_CM3/port.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:common/rtos/portable/GCC/ARM_CM3/port.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:common/rtos/portable/GCC/ARM_CM3/port.c ****     more details. You should have received a copy of the GNU General Public 
  37:common/rtos/portable/GCC/ARM_CM3/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:common/rtos/portable/GCC/ARM_CM3/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:common/rtos/portable/GCC/ARM_CM3/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:common/rtos/portable/GCC/ARM_CM3/port.c ****     FreeRTOS WEB site.
  41:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  42:common/rtos/portable/GCC/ARM_CM3/port.c ****     1 tab == 4 spaces!
  43:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  44:common/rtos/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:common/rtos/portable/GCC/ARM_CM3/port.c ****     contact details.
  46:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  47:common/rtos/portable/GCC/ARM_CM3/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:common/rtos/portable/GCC/ARM_CM3/port.c ****     critical systems.
  49:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  50:common/rtos/portable/GCC/ARM_CM3/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:common/rtos/portable/GCC/ARM_CM3/port.c ****     licensing and training services.
  52:common/rtos/portable/GCC/ARM_CM3/port.c **** */
  53:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  54:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  55:common/rtos/portable/GCC/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  56:common/rtos/portable/GCC/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  57:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  58:common/rtos/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
  59:common/rtos/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  60:common/rtos/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  61:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  62:common/rtos/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:common/rtos/portable/GCC/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  64:common/rtos/portable/GCC/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:common/rtos/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:common/rtos/portable/GCC/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:common/rtos/portable/GCC/ARM_CM3/port.c **** #endif
  68:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  69:common/rtos/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the NVIC. */
  70:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  81:common/rtos/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:common/rtos/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  84:common/rtos/portable/GCC/ARM_CM3/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  85:common/rtos/portable/GCC/ARM_CM3/port.c **** from inline assembler easier. */
  86:common/rtos/portable/GCC/ARM_CM3/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  87:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  88:common/rtos/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  89:common/rtos/portable/GCC/ARM_CM3/port.c **** variable. */
  90:common/rtos/portable/GCC/ARM_CM3/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  91:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  92:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
  93:common/rtos/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.
  94:common/rtos/portable/GCC/ARM_CM3/port.c ****  */
  95:common/rtos/portable/GCC/ARM_CM3/port.c **** static void prvSetupTimerInterrupt( void );
  96:common/rtos/portable/GCC/ARM_CM3/port.c **** 
  97:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
  98:common/rtos/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
  99:common/rtos/portable/GCC/ARM_CM3/port.c ****  */
 100:common/rtos/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 101:common/rtos/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 102:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 103:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 104:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
 105:common/rtos/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 106:common/rtos/portable/GCC/ARM_CM3/port.c ****  */
 107:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 108:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 109:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 110:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 111:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
 112:common/rtos/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 113:common/rtos/portable/GCC/ARM_CM3/port.c ****  */
 114:common/rtos/portable/GCC/ARM_CM3/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 115:common/rtos/portable/GCC/ARM_CM3/port.c **** {
  40              		.loc 1 115 1
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 16
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44              		@ link register save eliminated.
  45 0000 80B4     		push	{r7}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 4
  48              		.cfi_offset 7, -4
  49 0002 85B0     		sub	sp, sp, #20
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 24
  52 0004 00AF     		add	r7, sp, #0
  53              	.LCFI2:
  54              		.cfi_def_cfa_register 7
  55 0006 F860     		str	r0, [r7, #12]
  56 0008 B960     		str	r1, [r7, #8]
  57 000a 7A60     		str	r2, [r7, #4]
 116:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 117:common/rtos/portable/GCC/ARM_CM3/port.c **** 	interrupt. */
 118:common/rtos/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  58              		.loc 1 118 14
  59 000c FB68     		ldr	r3, [r7, #12]
  60 000e 043B     		subs	r3, r3, #4
  61 0010 FB60     		str	r3, [r7, #12]
 119:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  62              		.loc 1 119 16
  63 0012 FB68     		ldr	r3, [r7, #12]
  64 0014 4FF08072 		mov	r2, #16777216
  65 0018 1A60     		str	r2, [r3]
 120:common/rtos/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
  66              		.loc 1 120 14
  67 001a FB68     		ldr	r3, [r7, #12]
  68 001c 043B     		subs	r3, r3, #4
  69 001e FB60     		str	r3, [r7, #12]
 121:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  70              		.loc 1 121 18
  71 0020 BA68     		ldr	r2, [r7, #8]
  72              		.loc 1 121 16
  73 0022 FB68     		ldr	r3, [r7, #12]
  74 0024 1A60     		str	r2, [r3]
 122:common/rtos/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
  75              		.loc 1 122 14
  76 0026 FB68     		ldr	r3, [r7, #12]
  77 0028 043B     		subs	r3, r3, #4
  78 002a FB60     		str	r3, [r7, #12]
 123:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = 0;	/* LR */
  79              		.loc 1 123 16
  80 002c FB68     		ldr	r3, [r7, #12]
  81 002e 0022     		movs	r2, #0
  82 0030 1A60     		str	r2, [r3]
 124:common/rtos/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  83              		.loc 1 124 15
  84 0032 FB68     		ldr	r3, [r7, #12]
  85 0034 143B     		subs	r3, r3, #20
  86 0036 FB60     		str	r3, [r7, #12]
 125:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  87              		.loc 1 125 18
  88 0038 7A68     		ldr	r2, [r7, #4]
  89              		.loc 1 125 16
  90 003a FB68     		ldr	r3, [r7, #12]
  91 003c 1A60     		str	r2, [r3]
 126:common/rtos/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  92              		.loc 1 126 15
  93 003e FB68     		ldr	r3, [r7, #12]
  94 0040 203B     		subs	r3, r3, #32
  95 0042 FB60     		str	r3, [r7, #12]
 127:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 128:common/rtos/portable/GCC/ARM_CM3/port.c **** 	return pxTopOfStack;
  96              		.loc 1 128 9
  97 0044 FB68     		ldr	r3, [r7, #12]
 129:common/rtos/portable/GCC/ARM_CM3/port.c **** }
  98              		.loc 1 129 1
  99 0046 1846     		mov	r0, r3
 100 0048 1437     		adds	r7, r7, #20
 101              	.LCFI3:
 102              		.cfi_def_cfa_offset 4
 103 004a BD46     		mov	sp, r7
 104              	.LCFI4:
 105              		.cfi_def_cfa_register 13
 106              		@ sp needed
 107 004c 80BC     		pop	{r7}
 108              	.LCFI5:
 109              		.cfi_restore 7
 110              		.cfi_def_cfa_offset 0
 111 004e 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE27:
 115              		.section	.text.vPortSVCHandler,"ax",%progbits
 116              		.align	1
 117              		.global	vPortSVCHandler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 122              	vPortSVCHandler:
 123              	.LFB28:
 130:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 131:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 132:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 133:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 124              		.loc 1 133 1
 125              		.cfi_startproc
 126              		@ Naked Function: prologue and epilogue provided by programmer.
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 1, uses_anonymous_args = 0
 134:common/rtos/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
 129              		.loc 1 134 2
 130              		.syntax unified
 131              	@ 134 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 132 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 133 0002 1968     		ldr r1, [r3]					
 134 0004 0868     		ldr r0, [r1]					
 135 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 136 000a 80F30988 		msr psp, r0						
 137 000e 4FF00000 		mov r0, #0 						
 138 0012 80F31188 		msr	basepri, r0					
 139 0016 4EF00D0E 		orr r14, #0xd					
 140 001a 7047     		bx r14							
 141              										
 142              		.align 2						
 143 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 144              	
 145              	@ 0 "" 2
 135:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 136:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 137:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 138:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 139:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 140:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 141:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 142:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 143:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	bx r14							\n"
 144:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"									\n"
 145:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"	.align 2						\n"
 146:common/rtos/portable/GCC/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 147:common/rtos/portable/GCC/ARM_CM3/port.c **** 				);
 148:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 146              		.loc 1 148 1
 147              		.thumb
 148              		.syntax unified
 149 0020 00BF     		nop
 150              		.cfi_endproc
 151              	.LFE28:
 153 0022 00BF     		.section	.text.vPortStartFirstTask,"ax",%progbits
 154              		.align	1
 155              		.global	vPortStartFirstTask
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	vPortStartFirstTask:
 161              	.LFB29:
 149:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 150:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 151:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void )
 152:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 162              		.loc 1 152 1
 163              		.cfi_startproc
 164              		@ Naked Function: prologue and epilogue provided by programmer.
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 153:common/rtos/portable/GCC/ARM_CM3/port.c **** 	__asm volatile(
 167              		.loc 1 153 2
 168              		.syntax unified
 169              	@ 153 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 170 0000 0348     		 ldr r0, =0xE000ED08 	
 171 0002 0068     	 ldr r0, [r0] 			
 172 0004 0068     	 ldr r0, [r0] 			
 173 0006 80F30888 	 msr msp, r0			
 174 000a 00DF     	 svc 0					
 175              	
 176              	@ 0 "" 2
 154:common/rtos/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 155:common/rtos/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 156:common/rtos/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 157:common/rtos/portable/GCC/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 158:common/rtos/portable/GCC/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 159:common/rtos/portable/GCC/ARM_CM3/port.c **** 				);
 160:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 177              		.loc 1 160 1
 178              		.thumb
 179              		.syntax unified
 180 000c 00BF     		nop
 181              		.cfi_endproc
 182              	.LFE29:
 184 000e 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 185              		.align	1
 186              		.global	xPortStartScheduler
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 191              	xPortStartScheduler:
 192              	.LFB30:
 161:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 162:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 163:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
 164:common/rtos/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 165:common/rtos/portable/GCC/ARM_CM3/port.c ****  */
 166:common/rtos/portable/GCC/ARM_CM3/port.c **** portBASE_TYPE xPortStartScheduler( void )
 167:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 193              		.loc 1 167 1
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
 198              	.LCFI6:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 00AF     		add	r7, sp, #0
 203              	.LCFI7:
 204              		.cfi_def_cfa_register 7
 168:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 169:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 205              		.loc 1 169 22
 206 0004 0A4B     		ldr	r3, .L7
 207 0006 1B68     		ldr	r3, [r3]
 208 0008 094A     		ldr	r2, .L7
 209 000a 43F47F03 		orr	r3, r3, #16711680
 210 000e 1360     		str	r3, [r2]
 170:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 211              		.loc 1 170 22
 212 0010 074B     		ldr	r3, .L7
 213 0012 1B68     		ldr	r3, [r3]
 214 0014 064A     		ldr	r2, .L7
 215 0016 43F07F43 		orr	r3, r3, #-16777216
 216 001a 1360     		str	r3, [r2]
 171:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 172:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 173:common/rtos/portable/GCC/ARM_CM3/port.c **** 	here already. */
 174:common/rtos/portable/GCC/ARM_CM3/port.c **** 	prvSetupTimerInterrupt();
 217              		.loc 1 174 2
 218 001c 054B     		ldr	r3, .L7+4
 219 001e 9847     		blx	r3
 220              	.LVL0:
 175:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 176:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 177:common/rtos/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 221              		.loc 1 177 20
 222 0020 054B     		ldr	r3, .L7+8
 223 0022 0022     		movs	r2, #0
 224 0024 1A60     		str	r2, [r3]
 178:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 179:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Start the first task. */
 180:common/rtos/portable/GCC/ARM_CM3/port.c **** 	vPortStartFirstTask();
 225              		.loc 1 180 2
 226 0026 054B     		ldr	r3, .L7+12
 227 0028 9847     		blx	r3
 228              	.LVL1:
 181:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 182:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Should not get here! */
 183:common/rtos/portable/GCC/ARM_CM3/port.c **** 	return 0;
 229              		.loc 1 183 9
 230 002a 0023     		movs	r3, #0
 184:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 231              		.loc 1 184 1
 232 002c 1846     		mov	r0, r3
 233 002e 80BD     		pop	{r7, pc}
 234              	.L8:
 235              		.align	2
 236              	.L7:
 237 0030 20ED00E0 		.word	-536810208
 238 0034 00000000 		.word	prvSetupTimerInterrupt
 239 0038 00000000 		.word	uxCriticalNesting
 240 003c 00000000 		.word	vPortStartFirstTask
 241              		.cfi_endproc
 242              	.LFE30:
 244              		.section	.text.vPortEndScheduler,"ax",%progbits
 245              		.align	1
 246              		.global	vPortEndScheduler
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 251              	vPortEndScheduler:
 252              	.LFB31:
 185:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 186:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 187:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
 188:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 253              		.loc 1 188 1
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258 0000 80B4     		push	{r7}
 259              	.LCFI8:
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 7, -4
 262 0002 00AF     		add	r7, sp, #0
 263              	.LCFI9:
 264              		.cfi_def_cfa_register 7
 189:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* It is unlikely that the CM3 port will require this function as there
 190:common/rtos/portable/GCC/ARM_CM3/port.c **** 	is nothing to return to.  */
 191:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 265              		.loc 1 191 1
 266 0004 00BF     		nop
 267 0006 BD46     		mov	sp, r7
 268              	.LCFI10:
 269              		.cfi_def_cfa_register 13
 270              		@ sp needed
 271 0008 80BC     		pop	{r7}
 272              	.LCFI11:
 273              		.cfi_restore 7
 274              		.cfi_def_cfa_offset 0
 275 000a 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE31:
 279              		.section	.text.vPortYieldFromISR,"ax",%progbits
 280              		.align	1
 281              		.global	vPortYieldFromISR
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 286              	vPortYieldFromISR:
 287              	.LFB32:
 192:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 193:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 194:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortYieldFromISR( void )
 195:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 288              		.loc 1 195 1
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293 0000 80B4     		push	{r7}
 294              	.LCFI12:
 295              		.cfi_def_cfa_offset 4
 296              		.cfi_offset 7, -4
 297 0002 00AF     		add	r7, sp, #0
 298              	.LCFI13:
 299              		.cfi_def_cfa_register 7
 196:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Set a PendSV to request a context switch. */
 197:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 300              		.loc 1 197 2
 301 0004 034B     		ldr	r3, .L11
 302              		.loc 1 197 23
 303 0006 4FF08052 		mov	r2, #268435456
 304 000a 1A60     		str	r2, [r3]
 198:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 305              		.loc 1 198 1
 306 000c 00BF     		nop
 307 000e BD46     		mov	sp, r7
 308              	.LCFI14:
 309              		.cfi_def_cfa_register 13
 310              		@ sp needed
 311 0010 80BC     		pop	{r7}
 312              	.LCFI15:
 313              		.cfi_restore 7
 314              		.cfi_def_cfa_offset 0
 315 0012 7047     		bx	lr
 316              	.L12:
 317              		.align	2
 318              	.L11:
 319 0014 04ED00E0 		.word	-536810236
 320              		.cfi_endproc
 321              	.LFE32:
 323              		.section	.text.vPortEnterCritical,"ax",%progbits
 324              		.align	1
 325              		.global	vPortEnterCritical
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 330              	vPortEnterCritical:
 331              	.LFB33:
 199:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 200:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 201:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 202:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 332              		.loc 1 202 1
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 1, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337 0000 80B4     		push	{r7}
 338              	.LCFI16:
 339              		.cfi_def_cfa_offset 4
 340              		.cfi_offset 7, -4
 341 0002 00AF     		add	r7, sp, #0
 342              	.LCFI17:
 343              		.cfi_def_cfa_register 7
 203:common/rtos/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 344              		.loc 1 203 2
 345              		.syntax unified
 346              	@ 203 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 347 0004 4FF0BF00 			mov r0, #191								
 348 0008 80F31188 		msr basepri, r0							
 349              	
 350              	@ 0 "" 2
 204:common/rtos/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 351              		.loc 1 204 19
 352              		.thumb
 353              		.syntax unified
 354 000c 044B     		ldr	r3, .L14
 355 000e 1B68     		ldr	r3, [r3]
 356 0010 0133     		adds	r3, r3, #1
 357 0012 034A     		ldr	r2, .L14
 358 0014 1360     		str	r3, [r2]
 205:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 359              		.loc 1 205 1
 360 0016 00BF     		nop
 361 0018 BD46     		mov	sp, r7
 362              	.LCFI18:
 363              		.cfi_def_cfa_register 13
 364              		@ sp needed
 365 001a 80BC     		pop	{r7}
 366              	.LCFI19:
 367              		.cfi_restore 7
 368              		.cfi_def_cfa_offset 0
 369 001c 7047     		bx	lr
 370              	.L15:
 371 001e 00BF     		.align	2
 372              	.L14:
 373 0020 00000000 		.word	uxCriticalNesting
 374              		.cfi_endproc
 375              	.LFE33:
 377              		.section	.text.vPortExitCritical,"ax",%progbits
 378              		.align	1
 379              		.global	vPortExitCritical
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 384              	vPortExitCritical:
 385              	.LFB34:
 206:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 207:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 208:common/rtos/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 209:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 386              		.loc 1 209 1
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391 0000 80B4     		push	{r7}
 392              	.LCFI20:
 393              		.cfi_def_cfa_offset 4
 394              		.cfi_offset 7, -4
 395 0002 00AF     		add	r7, sp, #0
 396              	.LCFI21:
 397              		.cfi_def_cfa_register 7
 210:common/rtos/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 398              		.loc 1 210 19
 399 0004 084B     		ldr	r3, .L19
 400 0006 1B68     		ldr	r3, [r3]
 401 0008 013B     		subs	r3, r3, #1
 402 000a 074A     		ldr	r2, .L19
 403 000c 1360     		str	r3, [r2]
 211:common/rtos/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 404              		.loc 1 211 24
 405 000e 064B     		ldr	r3, .L19
 406 0010 1B68     		ldr	r3, [r3]
 407              		.loc 1 211 4
 408 0012 002B     		cmp	r3, #0
 409 0014 03D1     		bne	.L18
 212:common/rtos/portable/GCC/ARM_CM3/port.c **** 	{
 213:common/rtos/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 410              		.loc 1 213 3
 411              		.syntax unified
 412              	@ 213 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 413 0016 4FF00000 			mov r0, #0					
 414 001a 80F31188 		msr basepri, r0				
 415              	
 416              	@ 0 "" 2
 417              		.thumb
 418              		.syntax unified
 419              	.L18:
 214:common/rtos/portable/GCC/ARM_CM3/port.c **** 	}
 215:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 420              		.loc 1 215 1
 421 001e 00BF     		nop
 422 0020 BD46     		mov	sp, r7
 423              	.LCFI22:
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 0022 80BC     		pop	{r7}
 427              	.LCFI23:
 428              		.cfi_restore 7
 429              		.cfi_def_cfa_offset 0
 430 0024 7047     		bx	lr
 431              	.L20:
 432 0026 00BF     		.align	2
 433              	.L19:
 434 0028 00000000 		.word	uxCriticalNesting
 435              		.cfi_endproc
 436              	.LFE34:
 438              		.section	.text.xPortPendSVHandler,"ax",%progbits
 439              		.align	1
 440              		.global	xPortPendSVHandler
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 445              	xPortPendSVHandler:
 446              	.LFB35:
 216:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 217:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 218:common/rtos/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 219:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 447              		.loc 1 219 1
 448              		.cfi_startproc
 449              		@ Naked Function: prologue and epilogue provided by programmer.
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 220:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* This is a naked function. */
 221:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 222:common/rtos/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 452              		.loc 1 222 2
 453              		.syntax unified
 454              	@ 222 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 455 0000 EFF30980 			mrs r0, psp							
 456              											
 457 0004 0C4B     		ldr	r3, pxCurrentTCBConst			
 458 0006 1A68     		ldr	r2, [r3]						
 459              											
 460 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 461 000c 1060     		str r0, [r2]						
 462              											
 463 000e 2DE90840 		stmdb sp!, {r3, r14}				
 464 0012 4FF0BF00 		mov r0, #191							
 465 0016 80F31188 		msr basepri, r0						
 466 001a FFF7FEFF 		bl vTaskSwitchContext				
 467 001e 4FF00000 		mov r0, #0							
 468 0022 80F31188 		msr basepri, r0						
 469 0026 BDE80840 		ldmia sp!, {r3, r14}				
 470              											
 471 002a 1968     		ldr r1, [r3]						
 472 002c 0868     		ldr r0, [r1]						
 473 002e B0E8F00F 		ldmia r0!, {r4-r11}					
 474 0032 80F30988 		msr psp, r0							
 475 0036 7047     		bx r14								
 476              											
 477              		.align 2							
 478 0038 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 479              	
 480              	@ 0 "" 2
 223:common/rtos/portable/GCC/ARM_CM3/port.c **** 	(
 224:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 225:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 226:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 227:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 228:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 229:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 230:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 231:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 232:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 233:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 234:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 235:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 236:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 237:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 238:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 239:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 240:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 241:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 242:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 243:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 244:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	bx r14								\n"
 245:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 246:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"	.align 2							\n"
 247:common/rtos/portable/GCC/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 248:common/rtos/portable/GCC/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 249:common/rtos/portable/GCC/ARM_CM3/port.c **** 	);
 250:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 481              		.loc 1 250 1
 482              		.thumb
 483              		.syntax unified
 484 003c 00BF     		nop
 485              		.cfi_endproc
 486              	.LFE35:
 488 003e 00BF     		.section	.text.xPortSysTickHandler,"ax",%progbits
 489              		.align	1
 490              		.global	xPortSysTickHandler
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 495              	xPortSysTickHandler:
 496              	.LFB36:
 251:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 252:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 253:common/rtos/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 254:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 497              		.loc 1 254 1
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 8
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501 0000 80B5     		push	{r7, lr}
 502              	.LCFI24:
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 506 0002 82B0     		sub	sp, sp, #8
 507              	.LCFI25:
 508              		.cfi_def_cfa_offset 16
 509 0004 00AF     		add	r7, sp, #0
 510              	.LCFI26:
 511              		.cfi_def_cfa_register 7
 255:common/rtos/portable/GCC/ARM_CM3/port.c **** unsigned long ulDummy;
 256:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 257:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* If using preemption, also force a context switch. */
 258:common/rtos/portable/GCC/ARM_CM3/port.c **** 	#if configUSE_PREEMPTION == 1
 259:common/rtos/portable/GCC/ARM_CM3/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 512              		.loc 1 259 3
 513 0006 0A4B     		ldr	r3, .L23
 514              		.loc 1 259 24
 515 0008 4FF08052 		mov	r2, #268435456
 516 000c 1A60     		str	r2, [r3]
 260:common/rtos/portable/GCC/ARM_CM3/port.c **** 	#endif
 261:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 262:common/rtos/portable/GCC/ARM_CM3/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 517              		.loc 1 262 10
 518 000e 0023     		movs	r3, #0
 519 0010 7B60     		str	r3, [r7, #4]
 520              		.loc 1 262 12
 521              		.syntax unified
 522              	@ 262 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 523 0012 4FF0BF00 			mov r0, #191								
 524 0016 80F31188 		msr basepri, r0							
 525              	
 526              	@ 0 "" 2
 263:common/rtos/portable/GCC/ARM_CM3/port.c **** 	{
 264:common/rtos/portable/GCC/ARM_CM3/port.c **** 		vTaskIncrementTick();
 527              		.loc 1 264 3
 528              		.thumb
 529              		.syntax unified
 530 001a 064B     		ldr	r3, .L23+4
 531 001c 9847     		blx	r3
 532              	.LVL2:
 265:common/rtos/portable/GCC/ARM_CM3/port.c **** 	}
 266:common/rtos/portable/GCC/ARM_CM3/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 533              		.loc 1 266 2
 534              		.syntax unified
 535              	@ 266 "common/rtos/portable/GCC/ARM_CM3/port.c" 1
 536 001e 4FF00000 			mov r0, #0					
 537 0022 80F31188 		msr basepri, r0				
 538              	
 539              	@ 0 "" 2
 267:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 540              		.loc 1 267 1
 541              		.thumb
 542              		.syntax unified
 543 0026 00BF     		nop
 544 0028 0837     		adds	r7, r7, #8
 545              	.LCFI27:
 546              		.cfi_def_cfa_offset 8
 547 002a BD46     		mov	sp, r7
 548              	.LCFI28:
 549              		.cfi_def_cfa_register 13
 550              		@ sp needed
 551 002c 80BD     		pop	{r7, pc}
 552              	.L24:
 553 002e 00BF     		.align	2
 554              	.L23:
 555 0030 04ED00E0 		.word	-536810236
 556 0034 00000000 		.word	vTaskIncrementTick
 557              		.cfi_endproc
 558              	.LFE36:
 560              		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
 561              		.align	1
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 566              	prvSetupTimerInterrupt:
 567              	.LFB37:
 268:common/rtos/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 269:common/rtos/portable/GCC/ARM_CM3/port.c **** 
 270:common/rtos/portable/GCC/ARM_CM3/port.c **** /*
 271:common/rtos/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 272:common/rtos/portable/GCC/ARM_CM3/port.c ****  * frequency.
 273:common/rtos/portable/GCC/ARM_CM3/port.c ****  */
 274:common/rtos/portable/GCC/ARM_CM3/port.c **** void prvSetupTimerInterrupt( void )
 275:common/rtos/portable/GCC/ARM_CM3/port.c **** {
 568              		.loc 1 275 1
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 1, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573 0000 80B4     		push	{r7}
 574              	.LCFI29:
 575              		.cfi_def_cfa_offset 4
 576              		.cfi_offset 7, -4
 577 0002 00AF     		add	r7, sp, #0
 578              	.LCFI30:
 579              		.cfi_def_cfa_register 7
 276:common/rtos/portable/GCC/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 277:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 580              		.loc 1 277 2
 581 0004 054B     		ldr	r3, .L26
 582              		.loc 1 277 27
 583 0006 4BF67F32 		movw	r2, #47999
 584 000a 1A60     		str	r2, [r3]
 278:common/rtos/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 585              		.loc 1 278 2
 586 000c 044B     		ldr	r3, .L26+4
 587              		.loc 1 278 27
 588 000e 0722     		movs	r2, #7
 589 0010 1A60     		str	r2, [r3]
 279:common/rtos/portable/GCC/ARM_CM3/port.c **** }
 590              		.loc 1 279 1
 591 0012 00BF     		nop
 592 0014 BD46     		mov	sp, r7
 593              	.LCFI31:
 594              		.cfi_def_cfa_register 13
 595              		@ sp needed
 596 0016 80BC     		pop	{r7}
 597              	.LCFI32:
 598              		.cfi_restore 7
 599              		.cfi_def_cfa_offset 0
 600 0018 7047     		bx	lr
 601              	.L27:
 602 001a 00BF     		.align	2
 603              	.L26:
 604 001c 14E000E0 		.word	-536813548
 605 0020 10E000E0 		.word	-536813552
 606              		.cfi_endproc
 607              	.LFE37:
 609              		.text
 610              	.Letext0:
 611              		.file 2 "common/rtos/include/projdefs.h"
 612              		.file 3 "common/rtos/portable/GCC/ARM_CM3/portmacro.h"
 613              		.file 4 "common/rtos/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:22     .rodata.ulKernelPriority:00000000 ulKernelPriority
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:19     .rodata.ulKernelPriority:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:25     .data.uxCriticalNesting:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:28     .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:31     .text.pxPortInitialiseStack:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:37     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:116    .text.vPortSVCHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:122    .text.vPortSVCHandler:00000000 vPortSVCHandler
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:143    .text.vPortSVCHandler:0000001c pxCurrentTCBConst2
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:143    .text.vPortSVCHandler:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:149    .text.vPortSVCHandler:00000020 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:154    .text.vPortStartFirstTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:160    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:185    .text.xPortStartScheduler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:191    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:237    .text.xPortStartScheduler:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:566    .text.prvSetupTimerInterrupt:00000000 prvSetupTimerInterrupt
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:245    .text.vPortEndScheduler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:251    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:280    .text.vPortYieldFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:286    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:319    .text.vPortYieldFromISR:00000014 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:324    .text.vPortEnterCritical:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:330    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:373    .text.vPortEnterCritical:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:378    .text.vPortExitCritical:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:384    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:434    .text.vPortExitCritical:00000028 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:439    .text.xPortPendSVHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:445    .text.xPortPendSVHandler:00000000 xPortPendSVHandler
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:478    .text.xPortPendSVHandler:00000038 pxCurrentTCBConst
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:478    .text.xPortPendSVHandler:00000038 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:484    .text.xPortPendSVHandler:0000003c $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:489    .text.xPortSysTickHandler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:495    .text.xPortSysTickHandler:00000000 xPortSysTickHandler
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:555    .text.xPortSysTickHandler:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:561    .text.prvSetupTimerInterrupt:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:604    .text.prvSetupTimerInterrupt:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:184    .text.vPortStartFirstTask:0000000e $d
C:\Users\Admin\AppData\Local\Temp\ccXkwgS7.s:1573   .text.vPortStartFirstTask:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
