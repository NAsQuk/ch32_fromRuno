   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"journal.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	jrnlLength
  18              		.section	.bss.jrnlLength,"aw",%nobits
  19              		.align	1
  22              	jrnlLength:
  23 0000 0000     		.space	2
  24              		.section	.text.reverse,"ax",%progbits
  25              		.align	1
  26              		.global	reverse
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	reverse:
  32              	.LFB30:
  33              		.file 1 "src/journal.c"
   1:src/journal.c **** /*
   2:src/journal.c ****  * journal.c
   3:src/journal.c ****  *
   4:src/journal.c ****  *  Created on: June 16, 2010
   5:src/journal.c ****  *      Author: Nick Bokhan
   6:src/journal.c ****  *
   7:src/journal.c ****  */
   8:src/journal.c **** 
   9:src/journal.c **** #include "journal.h"
  10:src/journal.c **** #include "usermemory.h"
  11:src/journal.c **** #include "rtclock.h"
  12:src/journal.c **** #include "typedef.h"
  13:src/journal.c **** #include "snprintf.h"
  14:src/journal.c **** 
  15:src/journal.c **** #define JRNLSIZE 0x17*JSIZE
  16:src/journal.c **** #define JSIZE 250
  17:src/journal.c **** 
  18:src/journal.c **** extern size_t strlen(const char * str);
  19:src/journal.c **** extern char * strcat(char * destination, const char * source);
  20:src/journal.c **** uint16 jrnlLength;
  21:src/journal.c **** 
  22:src/journal.c **** 
  23:src/journal.c **** 
  24:src/journal.c **** void reverse(char *str)
  25:src/journal.c ****     {
  34              		.loc 1 25 5
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 24
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 86B0     		sub	sp, sp, #24
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 32
  46 0004 00AF     		add	r7, sp, #0
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  49 0006 7860     		str	r0, [r7, #4]
  26:src/journal.c ****     char c;
  27:src/journal.c ****     int size=strlen(str)/2;
  50              		.loc 1 27 14
  51 0008 7868     		ldr	r0, [r7, #4]
  52 000a 194B     		ldr	r3, .L4
  53 000c 9847     		blx	r3
  54              	.LVL0:
  55 000e 0346     		mov	r3, r0
  56              		.loc 1 27 25
  57 0010 5B08     		lsrs	r3, r3, #1
  58              		.loc 1 27 9
  59 0012 3B61     		str	r3, [r7, #16]
  60              	.LBB2:
  28:src/journal.c ****     for(int i=0;i<size;i++)
  61              		.loc 1 28 13
  62 0014 0023     		movs	r3, #0
  63 0016 7B61     		str	r3, [r7, #20]
  64              		.loc 1 28 5
  65 0018 20E0     		b	.L2
  66              	.L3:
  29:src/journal.c **** 	{
  30:src/journal.c **** 	c=str[i];
  67              		.loc 1 30 7 discriminator 3
  68 001a 7B69     		ldr	r3, [r7, #20]
  69 001c 7A68     		ldr	r2, [r7, #4]
  70 001e 1344     		add	r3, r3, r2
  71              		.loc 1 30 3 discriminator 3
  72 0020 1B78     		ldrb	r3, [r3]
  73 0022 FB73     		strb	r3, [r7, #15]
  31:src/journal.c **** 	str[i]=str[strlen(str)-i-1];
  74              		.loc 1 31 13 discriminator 3
  75 0024 7868     		ldr	r0, [r7, #4]
  76 0026 124B     		ldr	r3, .L4
  77 0028 9847     		blx	r3
  78              	.LVL1:
  79 002a 0246     		mov	r2, r0
  80              		.loc 1 31 24 discriminator 3
  81 002c 7B69     		ldr	r3, [r7, #20]
  82 002e D31A     		subs	r3, r2, r3
  83              		.loc 1 31 12 discriminator 3
  84 0030 013B     		subs	r3, r3, #1
  85 0032 7A68     		ldr	r2, [r7, #4]
  86 0034 1A44     		add	r2, r2, r3
  87              		.loc 1 31 5 discriminator 3
  88 0036 7B69     		ldr	r3, [r7, #20]
  89 0038 7968     		ldr	r1, [r7, #4]
  90 003a 0B44     		add	r3, r3, r1
  91              		.loc 1 31 12 discriminator 3
  92 003c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  93              		.loc 1 31 8 discriminator 3
  94 003e 1A70     		strb	r2, [r3]
  32:src/journal.c **** 	str[strlen(str)-i-1]=c;
  95              		.loc 1 32 6 discriminator 3
  96 0040 7868     		ldr	r0, [r7, #4]
  97 0042 0B4B     		ldr	r3, .L4
  98 0044 9847     		blx	r3
  99              	.LVL2:
 100 0046 0246     		mov	r2, r0
 101              		.loc 1 32 17 discriminator 3
 102 0048 7B69     		ldr	r3, [r7, #20]
 103 004a D31A     		subs	r3, r2, r3
 104              		.loc 1 32 5 discriminator 3
 105 004c 013B     		subs	r3, r3, #1
 106 004e 7A68     		ldr	r2, [r7, #4]
 107 0050 1344     		add	r3, r3, r2
 108              		.loc 1 32 22 discriminator 3
 109 0052 FA7B     		ldrb	r2, [r7, #15]
 110 0054 1A70     		strb	r2, [r3]
  28:src/journal.c **** 	{
 111              		.loc 1 28 25 discriminator 3
 112 0056 7B69     		ldr	r3, [r7, #20]
 113 0058 0133     		adds	r3, r3, #1
 114 005a 7B61     		str	r3, [r7, #20]
 115              	.L2:
  28:src/journal.c **** 	{
 116              		.loc 1 28 5 discriminator 1
 117 005c 7A69     		ldr	r2, [r7, #20]
 118 005e 3B69     		ldr	r3, [r7, #16]
 119 0060 9A42     		cmp	r2, r3
 120 0062 DADB     		blt	.L3
 121              	.LBE2:
  33:src/journal.c **** 	}
  34:src/journal.c ****     }
 122              		.loc 1 34 5
 123 0064 00BF     		nop
 124 0066 00BF     		nop
 125 0068 1837     		adds	r7, r7, #24
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 8
 128 006a BD46     		mov	sp, r7
 129              	.LCFI4:
 130              		.cfi_def_cfa_register 13
 131              		@ sp needed
 132 006c 80BD     		pop	{r7, pc}
 133              	.L5:
 134 006e 00BF     		.align	2
 135              	.L4:
 136 0070 00000000 		.word	strlen
 137              		.cfi_endproc
 138              	.LFE30:
 140              		.section	.text.itoa1,"ax",%progbits
 141              		.align	1
 142              		.global	itoa1
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 147              	itoa1:
 148              	.LFB31:
  35:src/journal.c **** 
  36:src/journal.c **** /* itoa:  конвертируем n в символы в s */
  37:src/journal.c **** void itoa1(int n, char s[])
  38:src/journal.c ****     {
 149              		.loc 1 38 5
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 16
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153 0000 80B5     		push	{r7, lr}
 154              	.LCFI5:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 84B0     		sub	sp, sp, #16
 159              	.LCFI6:
 160              		.cfi_def_cfa_offset 24
 161 0004 00AF     		add	r7, sp, #0
 162              	.LCFI7:
 163              		.cfi_def_cfa_register 7
 164 0006 7860     		str	r0, [r7, #4]
 165 0008 3960     		str	r1, [r7]
  39:src/journal.c ****     int i=0;
 166              		.loc 1 39 9
 167 000a 0023     		movs	r3, #0
 168 000c FB60     		str	r3, [r7, #12]
  40:src/journal.c ****     int sign = 0;
 169              		.loc 1 40 9
 170 000e 0023     		movs	r3, #0
 171 0010 BB60     		str	r3, [r7, #8]
  41:src/journal.c **** 
  42:src/journal.c ****     if ((sign = n) < 0) /* записываем знак */
 172              		.loc 1 42 15
 173 0012 7B68     		ldr	r3, [r7, #4]
 174 0014 BB60     		str	r3, [r7, #8]
 175              		.loc 1 42 8
 176 0016 BB68     		ldr	r3, [r7, #8]
 177 0018 002B     		cmp	r3, #0
 178 001a 02DA     		bge	.L8
  43:src/journal.c ****     {
  44:src/journal.c ****     	n = -n; /* делаем n положительным числом */
 179              		.loc 1 44 8
 180 001c 7B68     		ldr	r3, [r7, #4]
 181 001e 5B42     		rsbs	r3, r3, #0
 182 0020 7B60     		str	r3, [r7, #4]
 183              	.L8:
  45:src/journal.c ****     }
  46:src/journal.c **** 
  47:src/journal.c ****     do
  48:src/journal.c **** 	{ /* генерируем цифры в обратном порядке */
  49:src/journal.c **** 	s[i++] = n % 10 + '0'; /* берем следующую цифру */
 184              		.loc 1 49 13 discriminator 1
 185 0022 7A68     		ldr	r2, [r7, #4]
 186 0024 1B4B     		ldr	r3, .L10
 187 0026 83FB0213 		smull	r1, r3, r3, r2
 188 002a 9910     		asrs	r1, r3, #2
 189 002c D317     		asrs	r3, r2, #31
 190 002e C91A     		subs	r1, r1, r3
 191 0030 0B46     		mov	r3, r1
 192 0032 9B00     		lsls	r3, r3, #2
 193 0034 0B44     		add	r3, r3, r1
 194 0036 5B00     		lsls	r3, r3, #1
 195 0038 D11A     		subs	r1, r2, r3
 196              		.loc 1 49 18 discriminator 1
 197 003a CAB2     		uxtb	r2, r1
 198              		.loc 1 49 5 discriminator 1
 199 003c FB68     		ldr	r3, [r7, #12]
 200 003e 591C     		adds	r1, r3, #1
 201 0040 F960     		str	r1, [r7, #12]
 202 0042 1946     		mov	r1, r3
 203              		.loc 1 49 3 discriminator 1
 204 0044 3B68     		ldr	r3, [r7]
 205 0046 0B44     		add	r3, r3, r1
 206              		.loc 1 49 18 discriminator 1
 207 0048 3032     		adds	r2, r2, #48
 208 004a D2B2     		uxtb	r2, r2
 209              		.loc 1 49 9 discriminator 1
 210 004c 1A70     		strb	r2, [r3]
  50:src/journal.c **** 	}
  51:src/journal.c ****     while ((n /= 10) > 0); /* удаляем */
 211              		.loc 1 51 15 discriminator 1
 212 004e 7B68     		ldr	r3, [r7, #4]
 213 0050 104A     		ldr	r2, .L10
 214 0052 82FB0312 		smull	r1, r2, r2, r3
 215 0056 9210     		asrs	r2, r2, #2
 216 0058 DB17     		asrs	r3, r3, #31
 217 005a D31A     		subs	r3, r2, r3
 218 005c 7B60     		str	r3, [r7, #4]
 219              		.loc 1 51 5 discriminator 1
 220 005e 7B68     		ldr	r3, [r7, #4]
 221 0060 002B     		cmp	r3, #0
 222 0062 DEDC     		bgt	.L8
  52:src/journal.c ****     if (sign < 0)
 223              		.loc 1 52 8
 224 0064 BB68     		ldr	r3, [r7, #8]
 225 0066 002B     		cmp	r3, #0
 226 0068 07DA     		bge	.L9
  53:src/journal.c **** 	s[i++] = '-';
 227              		.loc 1 53 5
 228 006a FB68     		ldr	r3, [r7, #12]
 229 006c 5A1C     		adds	r2, r3, #1
 230 006e FA60     		str	r2, [r7, #12]
 231 0070 1A46     		mov	r2, r3
 232              		.loc 1 53 3
 233 0072 3B68     		ldr	r3, [r7]
 234 0074 1344     		add	r3, r3, r2
 235              		.loc 1 53 9
 236 0076 2D22     		movs	r2, #45
 237 0078 1A70     		strb	r2, [r3]
 238              	.L9:
  54:src/journal.c ****     s[i] = '\0';
 239              		.loc 1 54 6
 240 007a FB68     		ldr	r3, [r7, #12]
 241 007c 3A68     		ldr	r2, [r7]
 242 007e 1344     		add	r3, r3, r2
 243              		.loc 1 54 10
 244 0080 0022     		movs	r2, #0
 245 0082 1A70     		strb	r2, [r3]
  55:src/journal.c ****     reverse(s);
 246              		.loc 1 55 5
 247 0084 3868     		ldr	r0, [r7]
 248 0086 044B     		ldr	r3, .L10+4
 249 0088 9847     		blx	r3
 250              	.LVL3:
  56:src/journal.c ****     }
 251              		.loc 1 56 5
 252 008a 00BF     		nop
 253 008c 1037     		adds	r7, r7, #16
 254              	.LCFI8:
 255              		.cfi_def_cfa_offset 8
 256 008e BD46     		mov	sp, r7
 257              	.LCFI9:
 258              		.cfi_def_cfa_register 13
 259              		@ sp needed
 260 0090 80BD     		pop	{r7, pc}
 261              	.L11:
 262 0092 00BF     		.align	2
 263              	.L10:
 264 0094 67666666 		.word	1717986919
 265 0098 00000000 		.word	reverse
 266              		.cfi_endproc
 267              	.LFE31:
 269              		.section	.text.itoa_n,"ax",%progbits
 270              		.align	1
 271              		.global	itoa_n
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 276              	itoa_n:
 277              	.LFB32:
  57:src/journal.c **** 
  58:src/journal.c **** /* itoa:  конвертируем n в символы в s */
  59:src/journal.c **** void itoa_n(int n, char s[], int nums)
  60:src/journal.c ****     {
 278              		.loc 1 60 5
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 24
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0000 80B5     		push	{r7, lr}
 283              	.LCFI10:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 86B0     		sub	sp, sp, #24
 288              	.LCFI11:
 289              		.cfi_def_cfa_offset 32
 290 0004 00AF     		add	r7, sp, #0
 291              	.LCFI12:
 292              		.cfi_def_cfa_register 7
 293 0006 F860     		str	r0, [r7, #12]
 294 0008 B960     		str	r1, [r7, #8]
 295 000a 7A60     		str	r2, [r7, #4]
  61:src/journal.c ****     int i, sign;
  62:src/journal.c **** 
  63:src/journal.c ****     if ((sign = n) < 0) /* записываем знак */
 296              		.loc 1 63 15
 297 000c FB68     		ldr	r3, [r7, #12]
 298 000e 3B61     		str	r3, [r7, #16]
 299              		.loc 1 63 8
 300 0010 3B69     		ldr	r3, [r7, #16]
 301 0012 002B     		cmp	r3, #0
 302 0014 02DA     		bge	.L13
  64:src/journal.c **** 	n = -n; /* делаем n положительным числом */
 303              		.loc 1 64 4
 304 0016 FB68     		ldr	r3, [r7, #12]
 305 0018 5B42     		rsbs	r3, r3, #0
 306 001a FB60     		str	r3, [r7, #12]
 307              	.L13:
  65:src/journal.c ****     i = 0;
 308              		.loc 1 65 7
 309 001c 0023     		movs	r3, #0
 310 001e 7B61     		str	r3, [r7, #20]
 311              	.L14:
  66:src/journal.c ****     do
  67:src/journal.c **** 	{ /* генерируем цифры в обратном порядке */
  68:src/journal.c **** 	s[i++] = n % 10 + '0'; /* берем следующую цифру */
 312              		.loc 1 68 13 discriminator 1
 313 0020 FA68     		ldr	r2, [r7, #12]
 314 0022 224B     		ldr	r3, .L18
 315 0024 83FB0213 		smull	r1, r3, r3, r2
 316 0028 9910     		asrs	r1, r3, #2
 317 002a D317     		asrs	r3, r2, #31
 318 002c C91A     		subs	r1, r1, r3
 319 002e 0B46     		mov	r3, r1
 320 0030 9B00     		lsls	r3, r3, #2
 321 0032 0B44     		add	r3, r3, r1
 322 0034 5B00     		lsls	r3, r3, #1
 323 0036 D11A     		subs	r1, r2, r3
 324              		.loc 1 68 18 discriminator 1
 325 0038 CAB2     		uxtb	r2, r1
 326              		.loc 1 68 5 discriminator 1
 327 003a 7B69     		ldr	r3, [r7, #20]
 328 003c 591C     		adds	r1, r3, #1
 329 003e 7961     		str	r1, [r7, #20]
 330 0040 1946     		mov	r1, r3
 331              		.loc 1 68 3 discriminator 1
 332 0042 BB68     		ldr	r3, [r7, #8]
 333 0044 0B44     		add	r3, r3, r1
 334              		.loc 1 68 18 discriminator 1
 335 0046 3032     		adds	r2, r2, #48
 336 0048 D2B2     		uxtb	r2, r2
 337              		.loc 1 68 9 discriminator 1
 338 004a 1A70     		strb	r2, [r3]
  69:src/journal.c **** 	}
  70:src/journal.c ****     while ((n /= 10) > 0); /* удаляем */
 339              		.loc 1 70 15 discriminator 1
 340 004c FB68     		ldr	r3, [r7, #12]
 341 004e 174A     		ldr	r2, .L18
 342 0050 82FB0312 		smull	r1, r2, r2, r3
 343 0054 9210     		asrs	r2, r2, #2
 344 0056 DB17     		asrs	r3, r3, #31
 345 0058 D31A     		subs	r3, r2, r3
 346 005a FB60     		str	r3, [r7, #12]
 347              		.loc 1 70 5 discriminator 1
 348 005c FB68     		ldr	r3, [r7, #12]
 349 005e 002B     		cmp	r3, #0
 350 0060 DEDC     		bgt	.L14
  71:src/journal.c **** 
  72:src/journal.c ****     while(i < nums)
 351              		.loc 1 72 10
 352 0062 07E0     		b	.L15
 353              	.L16:
  73:src/journal.c ****     {
  74:src/journal.c ****     	s[i++] = '0';
 354              		.loc 1 74 9
 355 0064 7B69     		ldr	r3, [r7, #20]
 356 0066 5A1C     		adds	r2, r3, #1
 357 0068 7A61     		str	r2, [r7, #20]
 358 006a 1A46     		mov	r2, r3
 359              		.loc 1 74 7
 360 006c BB68     		ldr	r3, [r7, #8]
 361 006e 1344     		add	r3, r3, r2
 362              		.loc 1 74 13
 363 0070 3022     		movs	r2, #48
 364 0072 1A70     		strb	r2, [r3]
 365              	.L15:
  72:src/journal.c ****     {
 366              		.loc 1 72 10
 367 0074 7A69     		ldr	r2, [r7, #20]
 368 0076 7B68     		ldr	r3, [r7, #4]
 369 0078 9A42     		cmp	r2, r3
 370 007a F3DB     		blt	.L16
  75:src/journal.c ****     }
  76:src/journal.c **** 
  77:src/journal.c ****     if (sign < 0)
 371              		.loc 1 77 8
 372 007c 3B69     		ldr	r3, [r7, #16]
 373 007e 002B     		cmp	r3, #0
 374 0080 07DA     		bge	.L17
  78:src/journal.c **** 	s[i++] = '-';
 375              		.loc 1 78 5
 376 0082 7B69     		ldr	r3, [r7, #20]
 377 0084 5A1C     		adds	r2, r3, #1
 378 0086 7A61     		str	r2, [r7, #20]
 379 0088 1A46     		mov	r2, r3
 380              		.loc 1 78 3
 381 008a BB68     		ldr	r3, [r7, #8]
 382 008c 1344     		add	r3, r3, r2
 383              		.loc 1 78 9
 384 008e 2D22     		movs	r2, #45
 385 0090 1A70     		strb	r2, [r3]
 386              	.L17:
  79:src/journal.c ****     s[i] = '\0';
 387              		.loc 1 79 6
 388 0092 7B69     		ldr	r3, [r7, #20]
 389 0094 BA68     		ldr	r2, [r7, #8]
 390 0096 1344     		add	r3, r3, r2
 391              		.loc 1 79 10
 392 0098 0022     		movs	r2, #0
 393 009a 1A70     		strb	r2, [r3]
  80:src/journal.c ****     reverse(s);
 394              		.loc 1 80 5
 395 009c B868     		ldr	r0, [r7, #8]
 396 009e 044B     		ldr	r3, .L18+4
 397 00a0 9847     		blx	r3
 398              	.LVL4:
  81:src/journal.c ****     }
 399              		.loc 1 81 5
 400 00a2 00BF     		nop
 401 00a4 1837     		adds	r7, r7, #24
 402              	.LCFI13:
 403              		.cfi_def_cfa_offset 8
 404 00a6 BD46     		mov	sp, r7
 405              	.LCFI14:
 406              		.cfi_def_cfa_register 13
 407              		@ sp needed
 408 00a8 80BD     		pop	{r7, pc}
 409              	.L19:
 410 00aa 00BF     		.align	2
 411              	.L18:
 412 00ac 67666666 		.word	1717986919
 413 00b0 00000000 		.word	reverse
 414              		.cfi_endproc
 415              	.LFE32:
 417              		.section	.text.atoi1,"ax",%progbits
 418              		.align	1
 419              		.global	atoi1
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 424              	atoi1:
 425              	.LFB33:
  82:src/journal.c **** 
  83:src/journal.c **** int atoi1(char *c) {
 426              		.loc 1 83 20
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 16
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 431 0000 80B4     		push	{r7}
 432              	.LCFI15:
 433              		.cfi_def_cfa_offset 4
 434              		.cfi_offset 7, -4
 435 0002 85B0     		sub	sp, sp, #20
 436              	.LCFI16:
 437              		.cfi_def_cfa_offset 24
 438 0004 00AF     		add	r7, sp, #0
 439              	.LCFI17:
 440              		.cfi_def_cfa_register 7
 441 0006 7860     		str	r0, [r7, #4]
  84:src/journal.c ****       int res = 0;
 442              		.loc 1 84 11
 443 0008 0023     		movs	r3, #0
 444 000a FB60     		str	r3, [r7, #12]
  85:src/journal.c ****       while (*c >= '0' && *c <= '9')
 445              		.loc 1 85 13
 446 000c 0CE0     		b	.L21
 447              	.L23:
  86:src/journal.c ****       {
  87:src/journal.c ****         res = res * 10 + *c++ - '0';
 448              		.loc 1 87 19
 449 000e FA68     		ldr	r2, [r7, #12]
 450 0010 1346     		mov	r3, r2
 451 0012 9B00     		lsls	r3, r3, #2
 452 0014 1344     		add	r3, r3, r2
 453 0016 5B00     		lsls	r3, r3, #1
 454 0018 1946     		mov	r1, r3
 455              		.loc 1 87 28
 456 001a 7B68     		ldr	r3, [r7, #4]
 457 001c 5A1C     		adds	r2, r3, #1
 458 001e 7A60     		str	r2, [r7, #4]
 459              		.loc 1 87 26
 460 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 461              		.loc 1 87 24
 462 0022 0B44     		add	r3, r3, r1
 463              		.loc 1 87 13
 464 0024 303B     		subs	r3, r3, #48
 465 0026 FB60     		str	r3, [r7, #12]
 466              	.L21:
  85:src/journal.c ****       while (*c >= '0' && *c <= '9')
 467              		.loc 1 85 14
 468 0028 7B68     		ldr	r3, [r7, #4]
 469 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  85:src/journal.c ****       while (*c >= '0' && *c <= '9')
 470              		.loc 1 85 13
 471 002c 2F2B     		cmp	r3, #47
 472 002e 03D9     		bls	.L22
  85:src/journal.c ****       while (*c >= '0' && *c <= '9')
 473              		.loc 1 85 27 discriminator 1
 474 0030 7B68     		ldr	r3, [r7, #4]
 475 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  85:src/journal.c ****       while (*c >= '0' && *c <= '9')
 476              		.loc 1 85 24 discriminator 1
 477 0034 392B     		cmp	r3, #57
 478 0036 EAD9     		bls	.L23
 479              	.L22:
  88:src/journal.c ****       }
  89:src/journal.c ****       return res;
 480              		.loc 1 89 14
 481 0038 FB68     		ldr	r3, [r7, #12]
  90:src/journal.c ****     }
 482              		.loc 1 90 5
 483 003a 1846     		mov	r0, r3
 484 003c 1437     		adds	r7, r7, #20
 485              	.LCFI18:
 486              		.cfi_def_cfa_offset 4
 487 003e BD46     		mov	sp, r7
 488              	.LCFI19:
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 0040 80BC     		pop	{r7}
 492              	.LCFI20:
 493              		.cfi_restore 7
 494              		.cfi_def_cfa_offset 0
 495 0042 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE33:
 499              		.section	.rodata
 500              		.align	2
 501              	.LC0:
 502 0000 3A00     		.ascii	":\000"
 503              		.section	.text.GetTimeString,"ax",%progbits
 504              		.align	1
 505              		.global	GetTimeString
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 510              	GetTimeString:
 511              	.LFB34:
  91:src/journal.c **** 
  92:src/journal.c **** void GetTimeString(char *aBuf)
  93:src/journal.c ****     {
 512              		.loc 1 93 5
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 32
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
 517              	.LCFI21:
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 88B0     		sub	sp, sp, #32
 522              	.LCFI22:
 523              		.cfi_def_cfa_offset 40
 524 0004 00AF     		add	r7, sp, #0
 525              	.LCFI23:
 526              		.cfi_def_cfa_register 7
 527 0006 7860     		str	r0, [r7, #4]
  94:src/journal.c **** 	DATATIME dtl;
  95:src/journal.c **** 
  96:src/journal.c **** 	rtcGetDataTime(&dtl);
 528              		.loc 1 96 2
 529 0008 07F11003 		add	r3, r7, #16
 530 000c 1846     		mov	r0, r3
 531 000e 244B     		ldr	r3, .L26
 532 0010 9847     		blx	r3
 533              	.LVL5:
  97:src/journal.c **** 	char conv_buf[8];
  98:src/journal.c **** 	itoa_n(dtl.Hour,conv_buf,2);
 534              		.loc 1 98 12
 535 0012 3B8B     		ldrh	r3, [r7, #24]
 536              		.loc 1 98 2
 537 0014 1846     		mov	r0, r3
 538 0016 07F10803 		add	r3, r7, #8
 539 001a 0222     		movs	r2, #2
 540 001c 1946     		mov	r1, r3
 541 001e 214B     		ldr	r3, .L26+4
 542 0020 9847     		blx	r3
 543              	.LVL6:
  99:src/journal.c **** 	strcpy(aBuf,conv_buf);
 544              		.loc 1 99 2
 545 0022 07F10803 		add	r3, r7, #8
 546 0026 1946     		mov	r1, r3
 547 0028 7868     		ldr	r0, [r7, #4]
 548 002a 1F4B     		ldr	r3, .L26+8
 549 002c 9847     		blx	r3
 550              	.LVL7:
 100:src/journal.c **** 	strcat(aBuf,":");
 551              		.loc 1 100 2
 552 002e 7868     		ldr	r0, [r7, #4]
 553 0030 1E4B     		ldr	r3, .L26+12
 554 0032 9847     		blx	r3
 555              	.LVL8:
 556 0034 0346     		mov	r3, r0
 557 0036 1A46     		mov	r2, r3
 558 0038 7B68     		ldr	r3, [r7, #4]
 559 003a 1344     		add	r3, r3, r2
 560 003c 1C49     		ldr	r1, .L26+16
 561 003e 1A46     		mov	r2, r3
 562 0040 0B46     		mov	r3, r1
 563 0042 1B88     		ldrh	r3, [r3]	@ unaligned
 564 0044 1380     		strh	r3, [r2]	@ unaligned
 101:src/journal.c **** 	itoa_n(dtl.Min,conv_buf,2);
 565              		.loc 1 101 12
 566 0046 7B8B     		ldrh	r3, [r7, #26]
 567              		.loc 1 101 2
 568 0048 1846     		mov	r0, r3
 569 004a 07F10803 		add	r3, r7, #8
 570 004e 0222     		movs	r2, #2
 571 0050 1946     		mov	r1, r3
 572 0052 144B     		ldr	r3, .L26+4
 573 0054 9847     		blx	r3
 574              	.LVL9:
 102:src/journal.c **** 	strcat(aBuf,conv_buf);
 575              		.loc 1 102 2
 576 0056 07F10803 		add	r3, r7, #8
 577 005a 1946     		mov	r1, r3
 578 005c 7868     		ldr	r0, [r7, #4]
 579 005e 154B     		ldr	r3, .L26+20
 580 0060 9847     		blx	r3
 581              	.LVL10:
 103:src/journal.c **** 	strcat(aBuf,":");
 582              		.loc 1 103 2
 583 0062 7868     		ldr	r0, [r7, #4]
 584 0064 114B     		ldr	r3, .L26+12
 585 0066 9847     		blx	r3
 586              	.LVL11:
 587 0068 0346     		mov	r3, r0
 588 006a 1A46     		mov	r2, r3
 589 006c 7B68     		ldr	r3, [r7, #4]
 590 006e 1344     		add	r3, r3, r2
 591 0070 0F49     		ldr	r1, .L26+16
 592 0072 1A46     		mov	r2, r3
 593 0074 0B46     		mov	r3, r1
 594 0076 1B88     		ldrh	r3, [r3]	@ unaligned
 595 0078 1380     		strh	r3, [r2]	@ unaligned
 104:src/journal.c **** 	itoa_n(dtl.Sec,conv_buf,2);
 596              		.loc 1 104 12
 597 007a BB8B     		ldrh	r3, [r7, #28]
 598              		.loc 1 104 2
 599 007c 1846     		mov	r0, r3
 600 007e 07F10803 		add	r3, r7, #8
 601 0082 0222     		movs	r2, #2
 602 0084 1946     		mov	r1, r3
 603 0086 074B     		ldr	r3, .L26+4
 604 0088 9847     		blx	r3
 605              	.LVL12:
 105:src/journal.c **** 	strcat(aBuf,conv_buf);
 606              		.loc 1 105 2
 607 008a 07F10803 		add	r3, r7, #8
 608 008e 1946     		mov	r1, r3
 609 0090 7868     		ldr	r0, [r7, #4]
 610 0092 084B     		ldr	r3, .L26+20
 611 0094 9847     		blx	r3
 612              	.LVL13:
 106:src/journal.c ****     }
 613              		.loc 1 106 5
 614 0096 00BF     		nop
 615 0098 2037     		adds	r7, r7, #32
 616              	.LCFI24:
 617              		.cfi_def_cfa_offset 8
 618 009a BD46     		mov	sp, r7
 619              	.LCFI25:
 620              		.cfi_def_cfa_register 13
 621              		@ sp needed
 622 009c 80BD     		pop	{r7, pc}
 623              	.L27:
 624 009e 00BF     		.align	2
 625              	.L26:
 626 00a0 00000000 		.word	rtcGetDataTime
 627 00a4 00000000 		.word	itoa_n
 628 00a8 00000000 		.word	strcpy
 629 00ac 00000000 		.word	strlen
 630 00b0 00000000 		.word	.LC0
 631 00b4 00000000 		.word	strcat
 632              		.cfi_endproc
 633              	.LFE34:
 635              		.section	.rodata
 636 0002 0000     		.align	2
 637              	.LC1:
 638 0004 2F00     		.ascii	"/\000"
 639              		.section	.text.GetDateString,"ax",%progbits
 640              		.align	1
 641              		.global	GetDateString
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 646              	GetDateString:
 647              	.LFB35:
 107:src/journal.c **** 
 108:src/journal.c **** void GetDateString(char *aBuf)
 109:src/journal.c ****     {
 648              		.loc 1 109 5
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 32
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652 0000 80B5     		push	{r7, lr}
 653              	.LCFI26:
 654              		.cfi_def_cfa_offset 8
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 88B0     		sub	sp, sp, #32
 658              	.LCFI27:
 659              		.cfi_def_cfa_offset 40
 660 0004 00AF     		add	r7, sp, #0
 661              	.LCFI28:
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
 110:src/journal.c **** 	DATATIME dtl;
 111:src/journal.c **** 	rtcGetDataTime(&dtl);
 664              		.loc 1 111 2
 665 0008 07F11003 		add	r3, r7, #16
 666 000c 1846     		mov	r0, r3
 667 000e 244B     		ldr	r3, .L29
 668 0010 9847     		blx	r3
 669              	.LVL14:
 112:src/journal.c **** 	char conv_buf[8];
 113:src/journal.c **** 	itoa_n(dtl.Data,conv_buf,2);
 670              		.loc 1 113 12
 671 0012 BB8A     		ldrh	r3, [r7, #20]
 672              		.loc 1 113 2
 673 0014 1846     		mov	r0, r3
 674 0016 07F10803 		add	r3, r7, #8
 675 001a 0222     		movs	r2, #2
 676 001c 1946     		mov	r1, r3
 677 001e 214B     		ldr	r3, .L29+4
 678 0020 9847     		blx	r3
 679              	.LVL15:
 114:src/journal.c **** 	strcpy(aBuf,conv_buf);
 680              		.loc 1 114 2
 681 0022 07F10803 		add	r3, r7, #8
 682 0026 1946     		mov	r1, r3
 683 0028 7868     		ldr	r0, [r7, #4]
 684 002a 1F4B     		ldr	r3, .L29+8
 685 002c 9847     		blx	r3
 686              	.LVL16:
 115:src/journal.c **** 	strcat(aBuf,"/");
 687              		.loc 1 115 2
 688 002e 7868     		ldr	r0, [r7, #4]
 689 0030 1E4B     		ldr	r3, .L29+12
 690 0032 9847     		blx	r3
 691              	.LVL17:
 692 0034 0346     		mov	r3, r0
 693 0036 1A46     		mov	r2, r3
 694 0038 7B68     		ldr	r3, [r7, #4]
 695 003a 1344     		add	r3, r3, r2
 696 003c 1C49     		ldr	r1, .L29+16
 697 003e 1A46     		mov	r2, r3
 698 0040 0B46     		mov	r3, r1
 699 0042 1B88     		ldrh	r3, [r3]	@ unaligned
 700 0044 1380     		strh	r3, [r2]	@ unaligned
 116:src/journal.c **** 	itoa_n(dtl.Month,conv_buf,2);
 701              		.loc 1 116 12
 702 0046 7B8A     		ldrh	r3, [r7, #18]
 703              		.loc 1 116 2
 704 0048 1846     		mov	r0, r3
 705 004a 07F10803 		add	r3, r7, #8
 706 004e 0222     		movs	r2, #2
 707 0050 1946     		mov	r1, r3
 708 0052 144B     		ldr	r3, .L29+4
 709 0054 9847     		blx	r3
 710              	.LVL18:
 117:src/journal.c **** 	strcat(aBuf,conv_buf);
 711              		.loc 1 117 2
 712 0056 07F10803 		add	r3, r7, #8
 713 005a 1946     		mov	r1, r3
 714 005c 7868     		ldr	r0, [r7, #4]
 715 005e 154B     		ldr	r3, .L29+20
 716 0060 9847     		blx	r3
 717              	.LVL19:
 118:src/journal.c **** 	strcat(aBuf,"/");
 718              		.loc 1 118 2
 719 0062 7868     		ldr	r0, [r7, #4]
 720 0064 114B     		ldr	r3, .L29+12
 721 0066 9847     		blx	r3
 722              	.LVL20:
 723 0068 0346     		mov	r3, r0
 724 006a 1A46     		mov	r2, r3
 725 006c 7B68     		ldr	r3, [r7, #4]
 726 006e 1344     		add	r3, r3, r2
 727 0070 0F49     		ldr	r1, .L29+16
 728 0072 1A46     		mov	r2, r3
 729 0074 0B46     		mov	r3, r1
 730 0076 1B88     		ldrh	r3, [r3]	@ unaligned
 731 0078 1380     		strh	r3, [r2]	@ unaligned
 119:src/journal.c **** 	itoa1(dtl.Years,conv_buf);
 732              		.loc 1 119 11
 733 007a 3B8A     		ldrh	r3, [r7, #16]
 734              		.loc 1 119 2
 735 007c 1A46     		mov	r2, r3
 736 007e 07F10803 		add	r3, r7, #8
 737 0082 1946     		mov	r1, r3
 738 0084 1046     		mov	r0, r2
 739 0086 0C4B     		ldr	r3, .L29+24
 740 0088 9847     		blx	r3
 741              	.LVL21:
 120:src/journal.c **** 	strcat(aBuf,conv_buf);
 742              		.loc 1 120 2
 743 008a 07F10803 		add	r3, r7, #8
 744 008e 1946     		mov	r1, r3
 745 0090 7868     		ldr	r0, [r7, #4]
 746 0092 084B     		ldr	r3, .L29+20
 747 0094 9847     		blx	r3
 748              	.LVL22:
 121:src/journal.c **** 
 122:src/journal.c ****     }
 749              		.loc 1 122 5
 750 0096 00BF     		nop
 751 0098 2037     		adds	r7, r7, #32
 752              	.LCFI29:
 753              		.cfi_def_cfa_offset 8
 754 009a BD46     		mov	sp, r7
 755              	.LCFI30:
 756              		.cfi_def_cfa_register 13
 757              		@ sp needed
 758 009c 80BD     		pop	{r7, pc}
 759              	.L30:
 760 009e 00BF     		.align	2
 761              	.L29:
 762 00a0 00000000 		.word	rtcGetDataTime
 763 00a4 00000000 		.word	itoa_n
 764 00a8 00000000 		.word	strcpy
 765 00ac 00000000 		.word	strlen
 766 00b0 04000000 		.word	.LC1
 767 00b4 00000000 		.word	strcat
 768 00b8 00000000 		.word	itoa1
 769              		.cfi_endproc
 770              	.LFE35:
 772              		.section	.text.GetTimeStringOff,"ax",%progbits
 773              		.align	1
 774              		.global	GetTimeStringOff
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 779              	GetTimeStringOff:
 780              	.LFB36:
 123:src/journal.c **** 
 124:src/journal.c **** void GetTimeStringOff(char *aBuf)
 125:src/journal.c ****     {
 781              		.loc 1 125 5
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 32
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785 0000 80B5     		push	{r7, lr}
 786              	.LCFI31:
 787              		.cfi_def_cfa_offset 8
 788              		.cfi_offset 7, -8
 789              		.cfi_offset 14, -4
 790 0002 88B0     		sub	sp, sp, #32
 791              	.LCFI32:
 792              		.cfi_def_cfa_offset 40
 793 0004 00AF     		add	r7, sp, #0
 794              	.LCFI33:
 795              		.cfi_def_cfa_register 7
 796 0006 7860     		str	r0, [r7, #4]
 126:src/journal.c **** 	DATATIME dtl;
 127:src/journal.c **** 
 128:src/journal.c **** 	rtcGetDataTimeOff(&dtl);
 797              		.loc 1 128 2
 798 0008 07F11003 		add	r3, r7, #16
 799 000c 1846     		mov	r0, r3
 800 000e 244B     		ldr	r3, .L32
 801 0010 9847     		blx	r3
 802              	.LVL23:
 129:src/journal.c **** 	char conv_buf[8];
 130:src/journal.c **** 	itoa_n(dtl.Hour,conv_buf,2);
 803              		.loc 1 130 12
 804 0012 3B8B     		ldrh	r3, [r7, #24]
 805              		.loc 1 130 2
 806 0014 1846     		mov	r0, r3
 807 0016 07F10803 		add	r3, r7, #8
 808 001a 0222     		movs	r2, #2
 809 001c 1946     		mov	r1, r3
 810 001e 214B     		ldr	r3, .L32+4
 811 0020 9847     		blx	r3
 812              	.LVL24:
 131:src/journal.c **** 	strcpy(aBuf,conv_buf);
 813              		.loc 1 131 2
 814 0022 07F10803 		add	r3, r7, #8
 815 0026 1946     		mov	r1, r3
 816 0028 7868     		ldr	r0, [r7, #4]
 817 002a 1F4B     		ldr	r3, .L32+8
 818 002c 9847     		blx	r3
 819              	.LVL25:
 132:src/journal.c **** 	strcat(aBuf,":");
 820              		.loc 1 132 2
 821 002e 7868     		ldr	r0, [r7, #4]
 822 0030 1E4B     		ldr	r3, .L32+12
 823 0032 9847     		blx	r3
 824              	.LVL26:
 825 0034 0346     		mov	r3, r0
 826 0036 1A46     		mov	r2, r3
 827 0038 7B68     		ldr	r3, [r7, #4]
 828 003a 1344     		add	r3, r3, r2
 829 003c 1C49     		ldr	r1, .L32+16
 830 003e 1A46     		mov	r2, r3
 831 0040 0B46     		mov	r3, r1
 832 0042 1B88     		ldrh	r3, [r3]	@ unaligned
 833 0044 1380     		strh	r3, [r2]	@ unaligned
 133:src/journal.c **** 	itoa_n(dtl.Min,conv_buf,2);
 834              		.loc 1 133 12
 835 0046 7B8B     		ldrh	r3, [r7, #26]
 836              		.loc 1 133 2
 837 0048 1846     		mov	r0, r3
 838 004a 07F10803 		add	r3, r7, #8
 839 004e 0222     		movs	r2, #2
 840 0050 1946     		mov	r1, r3
 841 0052 144B     		ldr	r3, .L32+4
 842 0054 9847     		blx	r3
 843              	.LVL27:
 134:src/journal.c **** 	strcat(aBuf,conv_buf);
 844              		.loc 1 134 2
 845 0056 07F10803 		add	r3, r7, #8
 846 005a 1946     		mov	r1, r3
 847 005c 7868     		ldr	r0, [r7, #4]
 848 005e 154B     		ldr	r3, .L32+20
 849 0060 9847     		blx	r3
 850              	.LVL28:
 135:src/journal.c **** 	strcat(aBuf,":");
 851              		.loc 1 135 2
 852 0062 7868     		ldr	r0, [r7, #4]
 853 0064 114B     		ldr	r3, .L32+12
 854 0066 9847     		blx	r3
 855              	.LVL29:
 856 0068 0346     		mov	r3, r0
 857 006a 1A46     		mov	r2, r3
 858 006c 7B68     		ldr	r3, [r7, #4]
 859 006e 1344     		add	r3, r3, r2
 860 0070 0F49     		ldr	r1, .L32+16
 861 0072 1A46     		mov	r2, r3
 862 0074 0B46     		mov	r3, r1
 863 0076 1B88     		ldrh	r3, [r3]	@ unaligned
 864 0078 1380     		strh	r3, [r2]	@ unaligned
 136:src/journal.c **** 	itoa_n(dtl.Sec,conv_buf,2);
 865              		.loc 1 136 12
 866 007a BB8B     		ldrh	r3, [r7, #28]
 867              		.loc 1 136 2
 868 007c 1846     		mov	r0, r3
 869 007e 07F10803 		add	r3, r7, #8
 870 0082 0222     		movs	r2, #2
 871 0084 1946     		mov	r1, r3
 872 0086 074B     		ldr	r3, .L32+4
 873 0088 9847     		blx	r3
 874              	.LVL30:
 137:src/journal.c **** 	strcat(aBuf,conv_buf);
 875              		.loc 1 137 2
 876 008a 07F10803 		add	r3, r7, #8
 877 008e 1946     		mov	r1, r3
 878 0090 7868     		ldr	r0, [r7, #4]
 879 0092 084B     		ldr	r3, .L32+20
 880 0094 9847     		blx	r3
 881              	.LVL31:
 138:src/journal.c **** 
 139:src/journal.c ****     }
 882              		.loc 1 139 5
 883 0096 00BF     		nop
 884 0098 2037     		adds	r7, r7, #32
 885              	.LCFI34:
 886              		.cfi_def_cfa_offset 8
 887 009a BD46     		mov	sp, r7
 888              	.LCFI35:
 889              		.cfi_def_cfa_register 13
 890              		@ sp needed
 891 009c 80BD     		pop	{r7, pc}
 892              	.L33:
 893 009e 00BF     		.align	2
 894              	.L32:
 895 00a0 00000000 		.word	rtcGetDataTimeOff
 896 00a4 00000000 		.word	itoa_n
 897 00a8 00000000 		.word	strcpy
 898 00ac 00000000 		.word	strlen
 899 00b0 00000000 		.word	.LC0
 900 00b4 00000000 		.word	strcat
 901              		.cfi_endproc
 902              	.LFE36:
 904              		.section	.text.GetDateStringOff,"ax",%progbits
 905              		.align	1
 906              		.global	GetDateStringOff
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 911              	GetDateStringOff:
 912              	.LFB37:
 140:src/journal.c **** 
 141:src/journal.c **** void GetDateStringOff(char *aBuf)
 142:src/journal.c ****     {
 913              		.loc 1 142 5
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 32
 916              		@ frame_needed = 1, uses_anonymous_args = 0
 917 0000 80B5     		push	{r7, lr}
 918              	.LCFI36:
 919              		.cfi_def_cfa_offset 8
 920              		.cfi_offset 7, -8
 921              		.cfi_offset 14, -4
 922 0002 88B0     		sub	sp, sp, #32
 923              	.LCFI37:
 924              		.cfi_def_cfa_offset 40
 925 0004 00AF     		add	r7, sp, #0
 926              	.LCFI38:
 927              		.cfi_def_cfa_register 7
 928 0006 7860     		str	r0, [r7, #4]
 143:src/journal.c **** 	DATATIME dtl;
 144:src/journal.c **** 	rtcGetDataTimeOff(&dtl);
 929              		.loc 1 144 2
 930 0008 07F11003 		add	r3, r7, #16
 931 000c 1846     		mov	r0, r3
 932 000e 244B     		ldr	r3, .L35
 933 0010 9847     		blx	r3
 934              	.LVL32:
 145:src/journal.c **** 	char conv_buf[8];
 146:src/journal.c **** 	itoa_n(dtl.Data,conv_buf,2);
 935              		.loc 1 146 12
 936 0012 BB8A     		ldrh	r3, [r7, #20]
 937              		.loc 1 146 2
 938 0014 1846     		mov	r0, r3
 939 0016 07F10803 		add	r3, r7, #8
 940 001a 0222     		movs	r2, #2
 941 001c 1946     		mov	r1, r3
 942 001e 214B     		ldr	r3, .L35+4
 943 0020 9847     		blx	r3
 944              	.LVL33:
 147:src/journal.c **** 	strcpy(aBuf,conv_buf);
 945              		.loc 1 147 2
 946 0022 07F10803 		add	r3, r7, #8
 947 0026 1946     		mov	r1, r3
 948 0028 7868     		ldr	r0, [r7, #4]
 949 002a 1F4B     		ldr	r3, .L35+8
 950 002c 9847     		blx	r3
 951              	.LVL34:
 148:src/journal.c **** 	strcat(aBuf,"/");
 952              		.loc 1 148 2
 953 002e 7868     		ldr	r0, [r7, #4]
 954 0030 1E4B     		ldr	r3, .L35+12
 955 0032 9847     		blx	r3
 956              	.LVL35:
 957 0034 0346     		mov	r3, r0
 958 0036 1A46     		mov	r2, r3
 959 0038 7B68     		ldr	r3, [r7, #4]
 960 003a 1344     		add	r3, r3, r2
 961 003c 1C49     		ldr	r1, .L35+16
 962 003e 1A46     		mov	r2, r3
 963 0040 0B46     		mov	r3, r1
 964 0042 1B88     		ldrh	r3, [r3]	@ unaligned
 965 0044 1380     		strh	r3, [r2]	@ unaligned
 149:src/journal.c **** 	itoa_n(dtl.Month,conv_buf,2);
 966              		.loc 1 149 12
 967 0046 7B8A     		ldrh	r3, [r7, #18]
 968              		.loc 1 149 2
 969 0048 1846     		mov	r0, r3
 970 004a 07F10803 		add	r3, r7, #8
 971 004e 0222     		movs	r2, #2
 972 0050 1946     		mov	r1, r3
 973 0052 144B     		ldr	r3, .L35+4
 974 0054 9847     		blx	r3
 975              	.LVL36:
 150:src/journal.c **** 	strcat(aBuf,conv_buf);
 976              		.loc 1 150 2
 977 0056 07F10803 		add	r3, r7, #8
 978 005a 1946     		mov	r1, r3
 979 005c 7868     		ldr	r0, [r7, #4]
 980 005e 154B     		ldr	r3, .L35+20
 981 0060 9847     		blx	r3
 982              	.LVL37:
 151:src/journal.c **** 	strcat(aBuf,"/");
 983              		.loc 1 151 2
 984 0062 7868     		ldr	r0, [r7, #4]
 985 0064 114B     		ldr	r3, .L35+12
 986 0066 9847     		blx	r3
 987              	.LVL38:
 988 0068 0346     		mov	r3, r0
 989 006a 1A46     		mov	r2, r3
 990 006c 7B68     		ldr	r3, [r7, #4]
 991 006e 1344     		add	r3, r3, r2
 992 0070 0F49     		ldr	r1, .L35+16
 993 0072 1A46     		mov	r2, r3
 994 0074 0B46     		mov	r3, r1
 995 0076 1B88     		ldrh	r3, [r3]	@ unaligned
 996 0078 1380     		strh	r3, [r2]	@ unaligned
 152:src/journal.c **** 	itoa1(dtl.Years,conv_buf);
 997              		.loc 1 152 11
 998 007a 3B8A     		ldrh	r3, [r7, #16]
 999              		.loc 1 152 2
 1000 007c 1A46     		mov	r2, r3
 1001 007e 07F10803 		add	r3, r7, #8
 1002 0082 1946     		mov	r1, r3
 1003 0084 1046     		mov	r0, r2
 1004 0086 0C4B     		ldr	r3, .L35+24
 1005 0088 9847     		blx	r3
 1006              	.LVL39:
 153:src/journal.c **** 	strcat(aBuf,conv_buf);
 1007              		.loc 1 153 2
 1008 008a 07F10803 		add	r3, r7, #8
 1009 008e 1946     		mov	r1, r3
 1010 0090 7868     		ldr	r0, [r7, #4]
 1011 0092 084B     		ldr	r3, .L35+20
 1012 0094 9847     		blx	r3
 1013              	.LVL40:
 154:src/journal.c ****     }
 1014              		.loc 1 154 5
 1015 0096 00BF     		nop
 1016 0098 2037     		adds	r7, r7, #32
 1017              	.LCFI39:
 1018              		.cfi_def_cfa_offset 8
 1019 009a BD46     		mov	sp, r7
 1020              	.LCFI40:
 1021              		.cfi_def_cfa_register 13
 1022              		@ sp needed
 1023 009c 80BD     		pop	{r7, pc}
 1024              	.L36:
 1025 009e 00BF     		.align	2
 1026              	.L35:
 1027 00a0 00000000 		.word	rtcGetDataTimeOff
 1028 00a4 00000000 		.word	itoa_n
 1029 00a8 00000000 		.word	strcpy
 1030 00ac 00000000 		.word	strlen
 1031 00b0 04000000 		.word	.LC1
 1032 00b4 00000000 		.word	strcat
 1033 00b8 00000000 		.word	itoa1
 1034              		.cfi_endproc
 1035              	.LFE37:
 1037              		.section	.rodata
 1038 0006 0000     		.align	2
 1039              	.LC2:
 1040 0008 D1E1F0EE 		.ascii	"\321\341\360\356\361 \346\363\360\355\340\353\340\000"
 1040      F120E6F3 
 1040      F0EDE0EB 
 1040      E000
 1041              		.section	.text.JrnlClear,"ax",%progbits
 1042              		.align	1
 1043              		.global	JrnlClear
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1048              	JrnlClear:
 1049              	.LFB38:
 155:src/journal.c **** 
 156:src/journal.c **** 
 157:src/journal.c **** 
 158:src/journal.c **** 
 159:src/journal.c **** int JrnlClear()
 160:src/journal.c ****     {
 1050              		.loc 1 160 5
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 1032
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 80B5     		push	{r7, lr}
 1055              	.LCFI41:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 ADF5816D 		sub	sp, sp, #1032
 1060              	.LCFI42:
 1061              		.cfi_def_cfa_offset 1040
 1062 0006 00AF     		add	r7, sp, #0
 1063              	.LCFI43:
 1064              		.cfi_def_cfa_register 7
 161:src/journal.c ****     jrnlLength = 1;
 1065              		.loc 1 161 16
 1066 0008 1F4B     		ldr	r3, .L41
 1067 000a 0122     		movs	r2, #1
 1068 000c 1A80     		strh	r2, [r3]	@ movhi
 162:src/journal.c ****     uint32 buf[0x100]={0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 1069              		.loc 1 162 12
 1070 000e 07F58163 		add	r3, r7, #1032
 1071 0012 A3F20443 		subw	r3, r3, #1028
 1072 0016 1846     		mov	r0, r3
 1073 0018 4FF48063 		mov	r3, #1024
 1074 001c 1A46     		mov	r2, r3
 1075 001e 0021     		movs	r1, #0
 1076 0020 1A4B     		ldr	r3, .L41+4
 1077 0022 9847     		blx	r3
 1078              	.LVL41:
 163:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 164:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 165:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 166:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 167:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 168:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 169:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,
 170:src/journal.c **** 	    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0
 171:src/journal.c ****     };
 172:src/journal.c **** 
 173:src/journal.c ****     portENTER_CRITICAL();
 1079              		.loc 1 173 5
 1080 0024 1A4B     		ldr	r3, .L41+8
 1081 0026 9847     		blx	r3
 1082              	.LVL42:
 1083              	.LBB3:
 174:src/journal.c ****     for(int i=0;i<JSIZE;i++)
 1084              		.loc 1 174 13
 1085 0028 0023     		movs	r3, #0
 1086 002a C7F80434 		str	r3, [r7, #1028]
 1087              		.loc 1 174 5
 1088 002e 16E0     		b	.L38
 1089              	.L39:
 175:src/journal.c **** 	{
 176:src/journal.c **** 
 177:src/journal.c **** 	    MemSetWords((uint16)(0x2001+0x17*i), (uint16*)buf, 0x17);
 1090              		.loc 1 177 6 discriminator 3
 1091 0030 D7F80434 		ldr	r3, [r7, #1028]
 1092 0034 9BB2     		uxth	r3, r3
 1093 0036 1A46     		mov	r2, r3	@ movhi
 1094 0038 5200     		lsls	r2, r2, #1
 1095 003a 1A44     		add	r2, r2, r3
 1096 003c D200     		lsls	r2, r2, #3
 1097 003e D31A     		subs	r3, r2, r3
 1098 0040 9BB2     		uxth	r3, r3
 1099 0042 03F50053 		add	r3, r3, #8192
 1100 0046 0133     		adds	r3, r3, #1
 1101 0048 9BB2     		uxth	r3, r3
 1102 004a 391D     		adds	r1, r7, #4
 1103 004c 1722     		movs	r2, #23
 1104 004e 1846     		mov	r0, r3
 1105 0050 104B     		ldr	r3, .L41+12
 1106 0052 9847     		blx	r3
 1107              	.LVL43:
 174:src/journal.c ****     for(int i=0;i<JSIZE;i++)
 1108              		.loc 1 174 26 discriminator 3
 1109 0054 D7F80434 		ldr	r3, [r7, #1028]
 1110 0058 0133     		adds	r3, r3, #1
 1111 005a C7F80434 		str	r3, [r7, #1028]
 1112              	.L38:
 174:src/journal.c ****     for(int i=0;i<JSIZE;i++)
 1113              		.loc 1 174 5 discriminator 1
 1114 005e D7F80434 		ldr	r3, [r7, #1028]
 1115 0062 F92B     		cmp	r3, #249
 1116 0064 E4DD     		ble	.L39
 1117              	.LBE3:
 178:src/journal.c **** 
 179:src/journal.c **** 	   // vTaskDelay(10);
 180:src/journal.c **** 	}
 181:src/journal.c **** 
 182:src/journal.c ****     MemSetWords(0x2000, &jrnlLength, 1);
 1118              		.loc 1 182 5
 1119 0066 0122     		movs	r2, #1
 1120 0068 0749     		ldr	r1, .L41
 1121 006a 4FF40050 		mov	r0, #8192
 1122 006e 094B     		ldr	r3, .L41+12
 1123 0070 9847     		blx	r3
 1124              	.LVL44:
 183:src/journal.c ****     portEXIT_CRITICAL();
 1125              		.loc 1 183 5
 1126 0072 094B     		ldr	r3, .L41+16
 1127 0074 9847     		blx	r3
 1128              	.LVL45:
 184:src/journal.c ****     JrnlWrite("Сброс журнала");
 1129              		.loc 1 184 5
 1130 0076 0948     		ldr	r0, .L41+20
 1131 0078 094B     		ldr	r3, .L41+24
 1132 007a 9847     		blx	r3
 1133              	.LVL46:
 185:src/journal.c ****     return true;
 1134              		.loc 1 185 12
 1135 007c 0123     		movs	r3, #1
 186:src/journal.c ****     }
 1136              		.loc 1 186 5
 1137 007e 1846     		mov	r0, r3
 1138 0080 07F58167 		add	r7, r7, #1032
 1139              	.LCFI44:
 1140              		.cfi_def_cfa_offset 8
 1141 0084 BD46     		mov	sp, r7
 1142              	.LCFI45:
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
 1145 0086 80BD     		pop	{r7, pc}
 1146              	.L42:
 1147              		.align	2
 1148              	.L41:
 1149 0088 00000000 		.word	jrnlLength
 1150 008c 00000000 		.word	memset
 1151 0090 00000000 		.word	vPortEnterCritical
 1152 0094 00000000 		.word	MemSetWords
 1153 0098 00000000 		.word	vPortExitCritical
 1154 009c 08000000 		.word	.LC2
 1155 00a0 00000000 		.word	JrnlWrite
 1156              		.cfi_endproc
 1157              	.LFE38:
 1159              		.section	.rodata
 1160 0016 0000     		.align	2
 1161              	.LC3:
 1162 0018 3E3C00   		.ascii	"><\000"
 1163 001b 00       		.align	2
 1164              	.LC4:
 1165 001c 2000     		.ascii	" \000"
 1166 001e 0000     		.align	2
 1167              	.LC5:
 1168 0020 3E00     		.ascii	">\000"
 1169              		.section	.text.JrnlWrite,"ax",%progbits
 1170              		.align	1
 1171              		.global	JrnlWrite
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1176              	JrnlWrite:
 1177              	.LFB39:
 187:src/journal.c **** 
 188:src/journal.c **** int JrnlWrite(char *aMsg)
 189:src/journal.c ****     {
 1178              		.loc 1 189 5
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 120
 1181              		@ frame_needed = 1, uses_anonymous_args = 0
 1182 0000 80B5     		push	{r7, lr}
 1183              	.LCFI46:
 1184              		.cfi_def_cfa_offset 8
 1185              		.cfi_offset 7, -8
 1186              		.cfi_offset 14, -4
 1187 0002 9EB0     		sub	sp, sp, #120
 1188              	.LCFI47:
 1189              		.cfi_def_cfa_offset 128
 1190 0004 00AF     		add	r7, sp, #0
 1191              	.LCFI48:
 1192              		.cfi_def_cfa_register 7
 1193 0006 7860     		str	r0, [r7, #4]
 190:src/journal.c ****     uint16 testlen,wrLen;
 191:src/journal.c ****     char buffer[64];
 192:src/journal.c ****     char Date[16];
 193:src/journal.c ****     char Time[16];
 194:src/journal.c ****     BKP_WriteBackupRegister(BKP_DR7, 23);
 1194              		.loc 1 194 5
 1195 0008 1721     		movs	r1, #23
 1196 000a 1C20     		movs	r0, #28
 1197 000c 694B     		ldr	r3, .L51
 1198 000e 9847     		blx	r3
 1199              	.LVL47:
 195:src/journal.c ****     GetDateString(Date);
 1200              		.loc 1 195 5
 1201 0010 07F12003 		add	r3, r7, #32
 1202 0014 1846     		mov	r0, r3
 1203 0016 684B     		ldr	r3, .L51+4
 1204 0018 9847     		blx	r3
 1205              	.LVL48:
 196:src/journal.c ****     GetTimeString(Time);
 1206              		.loc 1 196 5
 1207 001a 07F11003 		add	r3, r7, #16
 1208 001e 1846     		mov	r0, r3
 1209 0020 664B     		ldr	r3, .L51+8
 1210 0022 9847     		blx	r3
 1211              	.LVL49:
 197:src/journal.c **** 
 198:src/journal.c **** 	char conv_buf[8];
 199:src/journal.c **** 	strcpy(buffer,"<");
 1212              		.loc 1 199 2
 1213 0024 07F13003 		add	r3, r7, #48
 1214 0028 3C22     		movs	r2, #60
 1215 002a 1A80     		strh	r2, [r3]	@ movhi
 200:src/journal.c **** 	strcat(buffer,Date);
 1216              		.loc 1 200 2
 1217 002c 07F12002 		add	r2, r7, #32
 1218 0030 07F13003 		add	r3, r7, #48
 1219 0034 1146     		mov	r1, r2
 1220 0036 1846     		mov	r0, r3
 1221 0038 614B     		ldr	r3, .L51+12
 1222 003a 9847     		blx	r3
 1223              	.LVL50:
 201:src/journal.c **** 	strcat(buffer,"><");
 1224              		.loc 1 201 2
 1225 003c 07F13003 		add	r3, r7, #48
 1226 0040 1846     		mov	r0, r3
 1227 0042 604B     		ldr	r3, .L51+16
 1228 0044 9847     		blx	r3
 1229              	.LVL51:
 1230 0046 0346     		mov	r3, r0
 1231 0048 1A46     		mov	r2, r3
 1232 004a 07F13003 		add	r3, r7, #48
 1233 004e 1344     		add	r3, r3, r2
 1234 0050 5D4A     		ldr	r2, .L51+20
 1235 0052 1188     		ldrh	r1, [r2]	@ unaligned
 1236 0054 9278     		ldrb	r2, [r2, #2]
 1237 0056 1980     		strh	r1, [r3]	@ unaligned
 1238 0058 9A70     		strb	r2, [r3, #2]
 202:src/journal.c **** 	strcat(buffer,Time);
 1239              		.loc 1 202 2
 1240 005a 07F11002 		add	r2, r7, #16
 1241 005e 07F13003 		add	r3, r7, #48
 1242 0062 1146     		mov	r1, r2
 1243 0064 1846     		mov	r0, r3
 1244 0066 564B     		ldr	r3, .L51+12
 1245 0068 9847     		blx	r3
 1246              	.LVL52:
 203:src/journal.c **** 	strcat(buffer,"><");
 1247              		.loc 1 203 2
 1248 006a 07F13003 		add	r3, r7, #48
 1249 006e 1846     		mov	r0, r3
 1250 0070 544B     		ldr	r3, .L51+16
 1251 0072 9847     		blx	r3
 1252              	.LVL53:
 1253 0074 0346     		mov	r3, r0
 1254 0076 1A46     		mov	r2, r3
 1255 0078 07F13003 		add	r3, r7, #48
 1256 007c 1344     		add	r3, r3, r2
 1257 007e 524A     		ldr	r2, .L51+20
 1258 0080 1188     		ldrh	r1, [r2]	@ unaligned
 1259 0082 9278     		ldrb	r2, [r2, #2]
 1260 0084 1980     		strh	r1, [r3]	@ unaligned
 1261 0086 9A70     		strb	r2, [r3, #2]
 204:src/journal.c **** 	strcat(buffer,aMsg);
 1262              		.loc 1 204 2
 1263 0088 07F13003 		add	r3, r7, #48
 1264 008c 7968     		ldr	r1, [r7, #4]
 1265 008e 1846     		mov	r0, r3
 1266 0090 4B4B     		ldr	r3, .L51+12
 1267 0092 9847     		blx	r3
 1268              	.LVL54:
 205:src/journal.c **** 	int len = strlen(aMsg);
 1269              		.loc 1 205 12
 1270 0094 7868     		ldr	r0, [r7, #4]
 1271 0096 4B4B     		ldr	r3, .L51+16
 1272 0098 9847     		blx	r3
 1273              	.LVL55:
 1274 009a 0346     		mov	r3, r0
 1275              		.loc 1 205 6
 1276 009c 7B67     		str	r3, [r7, #116]
 206:src/journal.c **** 	while(len++ < 22)
 1277              		.loc 1 206 7
 1278 009e 0EE0     		b	.L44
 1279              	.L45:
 207:src/journal.c **** 	{
 208:src/journal.c **** 		strcat(buffer," ");
 1280              		.loc 1 208 3
 1281 00a0 07F13003 		add	r3, r7, #48
 1282 00a4 1846     		mov	r0, r3
 1283 00a6 474B     		ldr	r3, .L51+16
 1284 00a8 9847     		blx	r3
 1285              	.LVL56:
 1286 00aa 0346     		mov	r3, r0
 1287 00ac 1A46     		mov	r2, r3
 1288 00ae 07F13003 		add	r3, r7, #48
 1289 00b2 1344     		add	r3, r3, r2
 1290 00b4 4549     		ldr	r1, .L51+24
 1291 00b6 1A46     		mov	r2, r3
 1292 00b8 0B46     		mov	r3, r1
 1293 00ba 1B88     		ldrh	r3, [r3]	@ unaligned
 1294 00bc 1380     		strh	r3, [r2]	@ unaligned
 1295              	.L44:
 206:src/journal.c **** 	while(len++ < 22)
 1296              		.loc 1 206 11
 1297 00be 7B6F     		ldr	r3, [r7, #116]
 1298 00c0 5A1C     		adds	r2, r3, #1
 1299 00c2 7A67     		str	r2, [r7, #116]
 206:src/journal.c **** 	while(len++ < 22)
 1300              		.loc 1 206 7
 1301 00c4 152B     		cmp	r3, #21
 1302 00c6 EBDD     		ble	.L45
 209:src/journal.c **** 	}
 210:src/journal.c **** 	strcat(buffer,">");
 1303              		.loc 1 210 2
 1304 00c8 07F13003 		add	r3, r7, #48
 1305 00cc 1846     		mov	r0, r3
 1306 00ce 3D4B     		ldr	r3, .L51+16
 1307 00d0 9847     		blx	r3
 1308              	.LVL57:
 1309 00d2 0346     		mov	r3, r0
 1310 00d4 1A46     		mov	r2, r3
 1311 00d6 07F13003 		add	r3, r7, #48
 1312 00da 1344     		add	r3, r3, r2
 1313 00dc 3C49     		ldr	r1, .L51+28
 1314 00de 1A46     		mov	r2, r3
 1315 00e0 0B46     		mov	r3, r1
 1316 00e2 1B88     		ldrh	r3, [r3]	@ unaligned
 1317 00e4 1380     		strh	r3, [r2]	@ unaligned
 211:src/journal.c **** 
 212:src/journal.c **** 
 213:src/journal.c ****     vTaskDelay(20);
 1318              		.loc 1 213 5
 1319 00e6 1420     		movs	r0, #20
 1320 00e8 3A4B     		ldr	r3, .L51+32
 1321 00ea 9847     		blx	r3
 1322              	.LVL58:
 214:src/journal.c ****     jrnlLength=GetJrnlLength();
 1323              		.loc 1 214 16
 1324 00ec 3A4B     		ldr	r3, .L51+36
 1325 00ee 9847     		blx	r3
 1326              	.LVL59:
 1327 00f0 0346     		mov	r3, r0
 1328 00f2 1A46     		mov	r2, r3
 1329              		.loc 1 214 15
 1330 00f4 394B     		ldr	r3, .L51+40
 1331 00f6 1A80     		strh	r2, [r3]	@ movhi
 215:src/journal.c **** 
 216:src/journal.c ****     testlen =(strlen(buffer));
 1332              		.loc 1 216 15
 1333 00f8 07F13003 		add	r3, r7, #48
 1334 00fc 1846     		mov	r0, r3
 1335 00fe 314B     		ldr	r3, .L51+16
 1336 0100 9847     		blx	r3
 1337              	.LVL60:
 1338 0102 0346     		mov	r3, r0
 1339              		.loc 1 216 13
 1340 0104 A7F87230 		strh	r3, [r7, #114]	@ movhi
 217:src/journal.c **** 
 218:src/journal.c ****     if (jrnlLength > JRNLSIZE)
 1341              		.loc 1 218 20
 1342 0108 344B     		ldr	r3, .L51+40
 1343 010a 1B88     		ldrh	r3, [r3]
 1344              		.loc 1 218 8
 1345 010c 41F27662 		movw	r2, #5750
 1346 0110 9342     		cmp	r3, r2
 1347 0112 03D9     		bls	.L46
 219:src/journal.c **** 	{
 220:src/journal.c **** 	    JrnlClear();
 1348              		.loc 1 220 6
 1349 0114 324B     		ldr	r3, .L51+44
 1350 0116 9847     		blx	r3
 1351              	.LVL61:
 221:src/journal.c **** 	    return false;
 1352              		.loc 1 221 13
 1353 0118 0023     		movs	r3, #0
 1354 011a 46E0     		b	.L50
 1355              	.L46:
 222:src/journal.c **** 	}
 223:src/journal.c ****     vTaskDelay(20);
 1356              		.loc 1 223 5
 1357 011c 1420     		movs	r0, #20
 1358 011e 2D4B     		ldr	r3, .L51+32
 1359 0120 9847     		blx	r3
 1360              	.LVL62:
 224:src/journal.c ****     BKP_WriteBackupRegister(BKP_DR7, 24);
 1361              		.loc 1 224 5
 1362 0122 1821     		movs	r1, #24
 1363 0124 1C20     		movs	r0, #28
 1364 0126 234B     		ldr	r3, .L51
 1365 0128 9847     		blx	r3
 1366              	.LVL63:
 225:src/journal.c ****     portENTER_CRITICAL();
 1367              		.loc 1 225 5
 1368 012a 2E4B     		ldr	r3, .L51+48
 1369 012c 9847     		blx	r3
 1370              	.LVL64:
 226:src/journal.c ****     MemSetWords((uint16)(0x2000 + jrnlLength), (uint16*) (buffer), 0x17);
 1371              		.loc 1 226 5
 1372 012e 2B4B     		ldr	r3, .L51+40
 1373 0130 1B88     		ldrh	r3, [r3]
 1374 0132 03F50053 		add	r3, r3, #8192
 1375 0136 9BB2     		uxth	r3, r3
 1376 0138 07F13001 		add	r1, r7, #48
 1377 013c 1722     		movs	r2, #23
 1378 013e 1846     		mov	r0, r3
 1379 0140 294B     		ldr	r3, .L51+52
 1380 0142 9847     		blx	r3
 1381              	.LVL65:
 227:src/journal.c ****     portEXIT_CRITICAL();
 1382              		.loc 1 227 5
 1383 0144 294B     		ldr	r3, .L51+56
 1384 0146 9847     		blx	r3
 1385              	.LVL66:
 228:src/journal.c ****     vTaskDelay(20);
 1386              		.loc 1 228 5
 1387 0148 1420     		movs	r0, #20
 1388 014a 224B     		ldr	r3, .L51+32
 1389 014c 9847     		blx	r3
 1390              	.LVL67:
 229:src/journal.c **** 
 230:src/journal.c ****     jrnlLength += 0x17;
 1391              		.loc 1 230 16
 1392 014e 234B     		ldr	r3, .L51+40
 1393 0150 1B88     		ldrh	r3, [r3]
 1394 0152 1733     		adds	r3, r3, #23
 1395 0154 9AB2     		uxth	r2, r3
 1396 0156 214B     		ldr	r3, .L51+40
 1397 0158 1A80     		strh	r2, [r3]	@ movhi
 231:src/journal.c ****     vTaskDelay(20);
 1398              		.loc 1 231 5
 1399 015a 1420     		movs	r0, #20
 1400 015c 1D4B     		ldr	r3, .L51+32
 1401 015e 9847     		blx	r3
 1402              	.LVL68:
 232:src/journal.c ****     if (jrnlLength > JRNLSIZE)
 1403              		.loc 1 232 20
 1404 0160 1E4B     		ldr	r3, .L51+40
 1405 0162 1B88     		ldrh	r3, [r3]
 1406              		.loc 1 232 8
 1407 0164 41F27662 		movw	r2, #5750
 1408 0168 9342     		cmp	r3, r2
 1409 016a 02D9     		bls	.L48
 233:src/journal.c ****    	{
 234:src/journal.c **** 	    jrnlLength=1;
 1410              		.loc 1 234 16
 1411 016c 1B4B     		ldr	r3, .L51+40
 1412 016e 0122     		movs	r2, #1
 1413 0170 1A80     		strh	r2, [r3]	@ movhi
 1414              	.L48:
 235:src/journal.c ****    	}
 236:src/journal.c ****     portENTER_CRITICAL();
 1415              		.loc 1 236 5
 1416 0172 1C4B     		ldr	r3, .L51+48
 1417 0174 9847     		blx	r3
 1418              	.LVL69:
 237:src/journal.c ****     BKP_WriteBackupRegister(BKP_DR7, 25);
 1419              		.loc 1 237 5
 1420 0176 1921     		movs	r1, #25
 1421 0178 1C20     		movs	r0, #28
 1422 017a 0E4B     		ldr	r3, .L51
 1423 017c 9847     		blx	r3
 1424              	.LVL70:
 238:src/journal.c ****     bool x = MemSetWords(0x2000, &jrnlLength, 1);
 1425              		.loc 1 238 14
 1426 017e 0122     		movs	r2, #1
 1427 0180 1649     		ldr	r1, .L51+40
 1428 0182 4FF40050 		mov	r0, #8192
 1429 0186 184B     		ldr	r3, .L51+52
 1430 0188 9847     		blx	r3
 1431              	.LVL71:
 1432 018a 0346     		mov	r3, r0
 1433 018c 87F87130 		strb	r3, [r7, #113]
 239:src/journal.c ****     portEXIT_CRITICAL();
 1434              		.loc 1 239 5
 1435 0190 164B     		ldr	r3, .L51+56
 1436 0192 9847     		blx	r3
 1437              	.LVL72:
 240:src/journal.c ****     BKP_WriteBackupRegister(BKP_DR7, 26);
 1438              		.loc 1 240 5
 1439 0194 1A21     		movs	r1, #26
 1440 0196 1C20     		movs	r0, #28
 1441 0198 064B     		ldr	r3, .L51
 1442 019a 9847     		blx	r3
 1443              	.LVL73:
 241:src/journal.c ****     if(x)
 1444              		.loc 1 241 7
 1445 019c 97F87130 		ldrb	r3, [r7, #113]	@ zero_extendqisi2
 1446 01a0 002B     		cmp	r3, #0
 1447 01a2 01D0     		beq	.L49
 242:src/journal.c **** 	{
 243:src/journal.c **** 	return true;
 1448              		.loc 1 243 9
 1449 01a4 0123     		movs	r3, #1
 1450 01a6 00E0     		b	.L50
 1451              	.L49:
 244:src/journal.c **** 	}else
 245:src/journal.c **** 	    {
 246:src/journal.c **** 	    return false;
 1452              		.loc 1 246 13
 1453 01a8 0023     		movs	r3, #0
 1454              	.L50:
 247:src/journal.c **** 	    }
 248:src/journal.c ****     }
 1455              		.loc 1 248 5 discriminator 1
 1456 01aa 1846     		mov	r0, r3
 1457 01ac 7837     		adds	r7, r7, #120
 1458              	.LCFI49:
 1459              		.cfi_def_cfa_offset 8
 1460 01ae BD46     		mov	sp, r7
 1461              	.LCFI50:
 1462              		.cfi_def_cfa_register 13
 1463              		@ sp needed
 1464 01b0 80BD     		pop	{r7, pc}
 1465              	.L52:
 1466 01b2 00BF     		.align	2
 1467              	.L51:
 1468 01b4 00000000 		.word	BKP_WriteBackupRegister
 1469 01b8 00000000 		.word	GetDateString
 1470 01bc 00000000 		.word	GetTimeString
 1471 01c0 00000000 		.word	strcat
 1472 01c4 00000000 		.word	strlen
 1473 01c8 18000000 		.word	.LC3
 1474 01cc 1C000000 		.word	.LC4
 1475 01d0 20000000 		.word	.LC5
 1476 01d4 00000000 		.word	vTaskDelay
 1477 01d8 00000000 		.word	GetJrnlLength
 1478 01dc 00000000 		.word	jrnlLength
 1479 01e0 00000000 		.word	JrnlClear
 1480 01e4 00000000 		.word	vPortEnterCritical
 1481 01e8 00000000 		.word	MemSetWords
 1482 01ec 00000000 		.word	vPortExitCritical
 1483              		.cfi_endproc
 1484              	.LFE39:
 1486              		.section	.text.JrnlWriteOff,"ax",%progbits
 1487              		.align	1
 1488              		.global	JrnlWriteOff
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1493              	JrnlWriteOff:
 1494              	.LFB40:
 249:src/journal.c **** 
 250:src/journal.c **** 
 251:src/journal.c **** int JrnlWriteOff(char *aMsg)
 252:src/journal.c ****     {
 1495              		.loc 1 252 5
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 120
 1498              		@ frame_needed = 1, uses_anonymous_args = 0
 1499 0000 80B5     		push	{r7, lr}
 1500              	.LCFI51:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 7, -8
 1503              		.cfi_offset 14, -4
 1504 0002 9EB0     		sub	sp, sp, #120
 1505              	.LCFI52:
 1506              		.cfi_def_cfa_offset 128
 1507 0004 00AF     		add	r7, sp, #0
 1508              	.LCFI53:
 1509              		.cfi_def_cfa_register 7
 1510 0006 7860     		str	r0, [r7, #4]
 253:src/journal.c ****     uint16 testlen,wrLen;
 254:src/journal.c ****     char buffer[64];
 255:src/journal.c ****     char Date[16];
 256:src/journal.c ****     char Time[16];
 257:src/journal.c **** 
 258:src/journal.c ****     GetDateStringOff(Date);
 1511              		.loc 1 258 5
 1512 0008 07F12003 		add	r3, r7, #32
 1513 000c 1846     		mov	r0, r3
 1514 000e 614B     		ldr	r3, .L61
 1515 0010 9847     		blx	r3
 1516              	.LVL74:
 259:src/journal.c ****     GetTimeStringOff(Time);
 1517              		.loc 1 259 5
 1518 0012 07F11003 		add	r3, r7, #16
 1519 0016 1846     		mov	r0, r3
 1520 0018 5F4B     		ldr	r3, .L61+4
 1521 001a 9847     		blx	r3
 1522              	.LVL75:
 260:src/journal.c **** 
 261:src/journal.c **** 	char conv_buf[8];
 262:src/journal.c **** 	strcpy(buffer,"<");
 1523              		.loc 1 262 2
 1524 001c 07F13003 		add	r3, r7, #48
 1525 0020 3C22     		movs	r2, #60
 1526 0022 1A80     		strh	r2, [r3]	@ movhi
 263:src/journal.c **** 	strcat(buffer,Date);
 1527              		.loc 1 263 2
 1528 0024 07F12002 		add	r2, r7, #32
 1529 0028 07F13003 		add	r3, r7, #48
 1530 002c 1146     		mov	r1, r2
 1531 002e 1846     		mov	r0, r3
 1532 0030 5A4B     		ldr	r3, .L61+8
 1533 0032 9847     		blx	r3
 1534              	.LVL76:
 264:src/journal.c **** 	strcat(buffer,"><");
 1535              		.loc 1 264 2
 1536 0034 07F13003 		add	r3, r7, #48
 1537 0038 1846     		mov	r0, r3
 1538 003a 594B     		ldr	r3, .L61+12
 1539 003c 9847     		blx	r3
 1540              	.LVL77:
 1541 003e 0346     		mov	r3, r0
 1542 0040 1A46     		mov	r2, r3
 1543 0042 07F13003 		add	r3, r7, #48
 1544 0046 1344     		add	r3, r3, r2
 1545 0048 564A     		ldr	r2, .L61+16
 1546 004a 1188     		ldrh	r1, [r2]	@ unaligned
 1547 004c 9278     		ldrb	r2, [r2, #2]
 1548 004e 1980     		strh	r1, [r3]	@ unaligned
 1549 0050 9A70     		strb	r2, [r3, #2]
 265:src/journal.c **** 	strcat(buffer,Time);
 1550              		.loc 1 265 2
 1551 0052 07F11002 		add	r2, r7, #16
 1552 0056 07F13003 		add	r3, r7, #48
 1553 005a 1146     		mov	r1, r2
 1554 005c 1846     		mov	r0, r3
 1555 005e 4F4B     		ldr	r3, .L61+8
 1556 0060 9847     		blx	r3
 1557              	.LVL78:
 266:src/journal.c **** 	strcat(buffer,"><");
 1558              		.loc 1 266 2
 1559 0062 07F13003 		add	r3, r7, #48
 1560 0066 1846     		mov	r0, r3
 1561 0068 4D4B     		ldr	r3, .L61+12
 1562 006a 9847     		blx	r3
 1563              	.LVL79:
 1564 006c 0346     		mov	r3, r0
 1565 006e 1A46     		mov	r2, r3
 1566 0070 07F13003 		add	r3, r7, #48
 1567 0074 1344     		add	r3, r3, r2
 1568 0076 4B4A     		ldr	r2, .L61+16
 1569 0078 1188     		ldrh	r1, [r2]	@ unaligned
 1570 007a 9278     		ldrb	r2, [r2, #2]
 1571 007c 1980     		strh	r1, [r3]	@ unaligned
 1572 007e 9A70     		strb	r2, [r3, #2]
 267:src/journal.c **** 	strcat(buffer,aMsg);
 1573              		.loc 1 267 2
 1574 0080 07F13003 		add	r3, r7, #48
 1575 0084 7968     		ldr	r1, [r7, #4]
 1576 0086 1846     		mov	r0, r3
 1577 0088 444B     		ldr	r3, .L61+8
 1578 008a 9847     		blx	r3
 1579              	.LVL80:
 268:src/journal.c **** 	int len = strlen(aMsg);
 1580              		.loc 1 268 12
 1581 008c 7868     		ldr	r0, [r7, #4]
 1582 008e 444B     		ldr	r3, .L61+12
 1583 0090 9847     		blx	r3
 1584              	.LVL81:
 1585 0092 0346     		mov	r3, r0
 1586              		.loc 1 268 6
 1587 0094 7B67     		str	r3, [r7, #116]
 269:src/journal.c **** 	while(len++ < 22)
 1588              		.loc 1 269 7
 1589 0096 0EE0     		b	.L54
 1590              	.L55:
 270:src/journal.c **** 	{
 271:src/journal.c **** 		strcat(buffer," ");
 1591              		.loc 1 271 3
 1592 0098 07F13003 		add	r3, r7, #48
 1593 009c 1846     		mov	r0, r3
 1594 009e 404B     		ldr	r3, .L61+12
 1595 00a0 9847     		blx	r3
 1596              	.LVL82:
 1597 00a2 0346     		mov	r3, r0
 1598 00a4 1A46     		mov	r2, r3
 1599 00a6 07F13003 		add	r3, r7, #48
 1600 00aa 1344     		add	r3, r3, r2
 1601 00ac 3E49     		ldr	r1, .L61+20
 1602 00ae 1A46     		mov	r2, r3
 1603 00b0 0B46     		mov	r3, r1
 1604 00b2 1B88     		ldrh	r3, [r3]	@ unaligned
 1605 00b4 1380     		strh	r3, [r2]	@ unaligned
 1606              	.L54:
 269:src/journal.c **** 	while(len++ < 22)
 1607              		.loc 1 269 11
 1608 00b6 7B6F     		ldr	r3, [r7, #116]
 1609 00b8 5A1C     		adds	r2, r3, #1
 1610 00ba 7A67     		str	r2, [r7, #116]
 269:src/journal.c **** 	while(len++ < 22)
 1611              		.loc 1 269 7
 1612 00bc 152B     		cmp	r3, #21
 1613 00be EBDD     		ble	.L55
 272:src/journal.c **** 	}
 273:src/journal.c **** 	strcat(buffer,">");
 1614              		.loc 1 273 2
 1615 00c0 07F13003 		add	r3, r7, #48
 1616 00c4 1846     		mov	r0, r3
 1617 00c6 364B     		ldr	r3, .L61+12
 1618 00c8 9847     		blx	r3
 1619              	.LVL83:
 1620 00ca 0346     		mov	r3, r0
 1621 00cc 1A46     		mov	r2, r3
 1622 00ce 07F13003 		add	r3, r7, #48
 1623 00d2 1344     		add	r3, r3, r2
 1624 00d4 3549     		ldr	r1, .L61+24
 1625 00d6 1A46     		mov	r2, r3
 1626 00d8 0B46     		mov	r3, r1
 1627 00da 1B88     		ldrh	r3, [r3]	@ unaligned
 1628 00dc 1380     		strh	r3, [r2]	@ unaligned
 274:src/journal.c **** 
 275:src/journal.c ****     vTaskDelay(20);
 1629              		.loc 1 275 5
 1630 00de 1420     		movs	r0, #20
 1631 00e0 334B     		ldr	r3, .L61+28
 1632 00e2 9847     		blx	r3
 1633              	.LVL84:
 276:src/journal.c ****     jrnlLength=GetJrnlLength();
 1634              		.loc 1 276 16
 1635 00e4 334B     		ldr	r3, .L61+32
 1636 00e6 9847     		blx	r3
 1637              	.LVL85:
 1638 00e8 0346     		mov	r3, r0
 1639 00ea 1A46     		mov	r2, r3
 1640              		.loc 1 276 15
 1641 00ec 324B     		ldr	r3, .L61+36
 1642 00ee 1A80     		strh	r2, [r3]	@ movhi
 277:src/journal.c **** 
 278:src/journal.c ****     testlen =(strlen(buffer));
 1643              		.loc 1 278 15
 1644 00f0 07F13003 		add	r3, r7, #48
 1645 00f4 1846     		mov	r0, r3
 1646 00f6 2A4B     		ldr	r3, .L61+12
 1647 00f8 9847     		blx	r3
 1648              	.LVL86:
 1649 00fa 0346     		mov	r3, r0
 1650              		.loc 1 278 13
 1651 00fc A7F87230 		strh	r3, [r7, #114]	@ movhi
 279:src/journal.c **** 
 280:src/journal.c ****     if (jrnlLength > JRNLSIZE)
 1652              		.loc 1 280 20
 1653 0100 2D4B     		ldr	r3, .L61+36
 1654 0102 1B88     		ldrh	r3, [r3]
 1655              		.loc 1 280 8
 1656 0104 41F27662 		movw	r2, #5750
 1657 0108 9342     		cmp	r3, r2
 1658 010a 03D9     		bls	.L56
 281:src/journal.c **** 	{
 282:src/journal.c **** 	    JrnlClear();
 1659              		.loc 1 282 6
 1660 010c 2B4B     		ldr	r3, .L61+40
 1661 010e 9847     		blx	r3
 1662              	.LVL87:
 283:src/journal.c **** 	    return false;
 1663              		.loc 1 283 13
 1664 0110 0023     		movs	r3, #0
 1665 0112 3AE0     		b	.L60
 1666              	.L56:
 284:src/journal.c **** 	}
 285:src/journal.c ****     vTaskDelay(20);
 1667              		.loc 1 285 5
 1668 0114 1420     		movs	r0, #20
 1669 0116 264B     		ldr	r3, .L61+28
 1670 0118 9847     		blx	r3
 1671              	.LVL88:
 286:src/journal.c ****     portENTER_CRITICAL();
 1672              		.loc 1 286 5
 1673 011a 294B     		ldr	r3, .L61+44
 1674 011c 9847     		blx	r3
 1675              	.LVL89:
 287:src/journal.c ****     MemSetWords((uint16)(0x2000 + jrnlLength), (uint16*) (buffer), 0x17);
 1676              		.loc 1 287 5
 1677 011e 264B     		ldr	r3, .L61+36
 1678 0120 1B88     		ldrh	r3, [r3]
 1679 0122 03F50053 		add	r3, r3, #8192
 1680 0126 9BB2     		uxth	r3, r3
 1681 0128 07F13001 		add	r1, r7, #48
 1682 012c 1722     		movs	r2, #23
 1683 012e 1846     		mov	r0, r3
 1684 0130 244B     		ldr	r3, .L61+48
 1685 0132 9847     		blx	r3
 1686              	.LVL90:
 288:src/journal.c ****     portEXIT_CRITICAL();
 1687              		.loc 1 288 5
 1688 0134 244B     		ldr	r3, .L61+52
 1689 0136 9847     		blx	r3
 1690              	.LVL91:
 289:src/journal.c ****     vTaskDelay(20);
 1691              		.loc 1 289 5
 1692 0138 1420     		movs	r0, #20
 1693 013a 1D4B     		ldr	r3, .L61+28
 1694 013c 9847     		blx	r3
 1695              	.LVL92:
 290:src/journal.c **** 
 291:src/journal.c ****     jrnlLength += 0x17;
 1696              		.loc 1 291 16
 1697 013e 1E4B     		ldr	r3, .L61+36
 1698 0140 1B88     		ldrh	r3, [r3]
 1699 0142 1733     		adds	r3, r3, #23
 1700 0144 9AB2     		uxth	r2, r3
 1701 0146 1C4B     		ldr	r3, .L61+36
 1702 0148 1A80     		strh	r2, [r3]	@ movhi
 292:src/journal.c ****     vTaskDelay(20);
 1703              		.loc 1 292 5
 1704 014a 1420     		movs	r0, #20
 1705 014c 184B     		ldr	r3, .L61+28
 1706 014e 9847     		blx	r3
 1707              	.LVL93:
 293:src/journal.c ****     if (jrnlLength > JRNLSIZE)
 1708              		.loc 1 293 20
 1709 0150 194B     		ldr	r3, .L61+36
 1710 0152 1B88     		ldrh	r3, [r3]
 1711              		.loc 1 293 8
 1712 0154 41F27662 		movw	r2, #5750
 1713 0158 9342     		cmp	r3, r2
 1714 015a 02D9     		bls	.L58
 294:src/journal.c ****    	{
 295:src/journal.c **** 	    jrnlLength=1;
 1715              		.loc 1 295 16
 1716 015c 164B     		ldr	r3, .L61+36
 1717 015e 0122     		movs	r2, #1
 1718 0160 1A80     		strh	r2, [r3]	@ movhi
 1719              	.L58:
 296:src/journal.c ****    	}
 297:src/journal.c ****     portENTER_CRITICAL();
 1720              		.loc 1 297 5
 1721 0162 174B     		ldr	r3, .L61+44
 1722 0164 9847     		blx	r3
 1723              	.LVL94:
 298:src/journal.c ****     bool x = MemSetWords(0x2000, &jrnlLength, 1);
 1724              		.loc 1 298 14
 1725 0166 0122     		movs	r2, #1
 1726 0168 1349     		ldr	r1, .L61+36
 1727 016a 4FF40050 		mov	r0, #8192
 1728 016e 154B     		ldr	r3, .L61+48
 1729 0170 9847     		blx	r3
 1730              	.LVL95:
 1731 0172 0346     		mov	r3, r0
 1732 0174 87F87130 		strb	r3, [r7, #113]
 299:src/journal.c ****     portEXIT_CRITICAL();
 1733              		.loc 1 299 5
 1734 0178 134B     		ldr	r3, .L61+52
 1735 017a 9847     		blx	r3
 1736              	.LVL96:
 300:src/journal.c ****     if(x)
 1737              		.loc 1 300 7
 1738 017c 97F87130 		ldrb	r3, [r7, #113]	@ zero_extendqisi2
 1739 0180 002B     		cmp	r3, #0
 1740 0182 01D0     		beq	.L59
 301:src/journal.c **** 	{
 302:src/journal.c **** 	return true;
 1741              		.loc 1 302 9
 1742 0184 0123     		movs	r3, #1
 1743 0186 00E0     		b	.L60
 1744              	.L59:
 303:src/journal.c **** 	}else
 304:src/journal.c **** 	    {
 305:src/journal.c **** 	    return false;
 1745              		.loc 1 305 13
 1746 0188 0023     		movs	r3, #0
 1747              	.L60:
 306:src/journal.c **** 	    }
 307:src/journal.c ****     }
 1748              		.loc 1 307 5 discriminator 1
 1749 018a 1846     		mov	r0, r3
 1750 018c 7837     		adds	r7, r7, #120
 1751              	.LCFI54:
 1752              		.cfi_def_cfa_offset 8
 1753 018e BD46     		mov	sp, r7
 1754              	.LCFI55:
 1755              		.cfi_def_cfa_register 13
 1756              		@ sp needed
 1757 0190 80BD     		pop	{r7, pc}
 1758              	.L62:
 1759 0192 00BF     		.align	2
 1760              	.L61:
 1761 0194 00000000 		.word	GetDateStringOff
 1762 0198 00000000 		.word	GetTimeStringOff
 1763 019c 00000000 		.word	strcat
 1764 01a0 00000000 		.word	strlen
 1765 01a4 18000000 		.word	.LC3
 1766 01a8 1C000000 		.word	.LC4
 1767 01ac 20000000 		.word	.LC5
 1768 01b0 00000000 		.word	vTaskDelay
 1769 01b4 00000000 		.word	GetJrnlLength
 1770 01b8 00000000 		.word	jrnlLength
 1771 01bc 00000000 		.word	JrnlClear
 1772 01c0 00000000 		.word	vPortEnterCritical
 1773 01c4 00000000 		.word	MemSetWords
 1774 01c8 00000000 		.word	vPortExitCritical
 1775              		.cfi_endproc
 1776              	.LFE40:
 1778              		.section	.text.GetJrnlLength,"ax",%progbits
 1779              		.align	1
 1780              		.global	GetJrnlLength
 1781              		.syntax unified
 1782              		.thumb
 1783              		.thumb_func
 1785              	GetJrnlLength:
 1786              	.LFB41:
 308:src/journal.c **** 
 309:src/journal.c **** 
 310:src/journal.c **** uint16 GetJrnlLength()
 311:src/journal.c ****     {
 1787              		.loc 1 311 5
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 1, uses_anonymous_args = 0
 1791 0000 80B5     		push	{r7, lr}
 1792              	.LCFI56:
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 7, -8
 1795              		.cfi_offset 14, -4
 1796 0002 00AF     		add	r7, sp, #0
 1797              	.LCFI57:
 1798              		.cfi_def_cfa_register 7
 312:src/journal.c **** 
 313:src/journal.c **** 	portENTER_CRITICAL();
 1799              		.loc 1 313 2
 1800 0004 064B     		ldr	r3, .L65
 1801 0006 9847     		blx	r3
 1802              	.LVL97:
 314:src/journal.c **** 	MemGetWords(0x2000, &jrnlLength, 1);
 1803              		.loc 1 314 2
 1804 0008 0122     		movs	r2, #1
 1805 000a 0649     		ldr	r1, .L65+4
 1806 000c 4FF40050 		mov	r0, #8192
 1807 0010 054B     		ldr	r3, .L65+8
 1808 0012 9847     		blx	r3
 1809              	.LVL98:
 315:src/journal.c **** 	portEXIT_CRITICAL();
 1810              		.loc 1 315 2
 1811 0014 054B     		ldr	r3, .L65+12
 1812 0016 9847     		blx	r3
 1813              	.LVL99:
 316:src/journal.c ****     return jrnlLength;
 1814              		.loc 1 316 12
 1815 0018 024B     		ldr	r3, .L65+4
 1816 001a 1B88     		ldrh	r3, [r3]
 317:src/journal.c **** 
 318:src/journal.c ****     }
 1817              		.loc 1 318 5
 1818 001c 1846     		mov	r0, r3
 1819 001e 80BD     		pop	{r7, pc}
 1820              	.L66:
 1821              		.align	2
 1822              	.L65:
 1823 0020 00000000 		.word	vPortEnterCritical
 1824 0024 00000000 		.word	jrnlLength
 1825 0028 00000000 		.word	MemGetWords
 1826 002c 00000000 		.word	vPortExitCritical
 1827              		.cfi_endproc
 1828              	.LFE41:
 1830              		.section	.rodata
 1831 0022 0000     		.align	2
 1832              	.LC6:
 1833 0024 CAEEEDF4 		.ascii	"\312\356\355\364\350\343\363\360\340\366\350\377 \350"
 1833      E8E3F3F0 
 1833      E0F6E8FF 
 1833      20E8
 1834 0032 E7ECE5ED 		.ascii	"\347\354\345\355\345\355\340\000"
 1834      E5EDE000 
 1835 003a 0000     		.align	2
 1836              	.LC7:
 1837 003c C3F0E0F4 		.ascii	"\303\360\340\364\350\352 \356\361\342. \350\347\354"
 1837      E8EA20EE 
 1837      F1E22E20 
 1837      E8E7EC
 1838 004b E5EDE5ED 		.ascii	"\345\355\345\355\000"
 1838      00
 1839              		.align	2
 1840              	.LC8:
 1841 0050 C3F0E0F4 		.ascii	"\303\360\340\364\350\352 \357\356\344\361\342. \350"
 1841      E8EA20EF 
 1841      EEE4F1E2 
 1841      2E20E8
 1842 005f E7ECE5ED 		.ascii	"\347\354\345\355\345\355\000"
 1842      E5ED00
 1843 0066 0000     		.align	2
 1844              	.LC9:
 1845 0068 C3F0E0F4 		.ascii	"\303\360\340\364\350\352 \350\353\353\376\354. \350"
 1845      E8EA20E8 
 1845      EBEBFEEC 
 1845      2E20E8
 1846 0077 E7ECE5ED 		.ascii	"\347\354\345\355\345\355\000"
 1846      E5ED00
 1847 007e 0000     		.align	2
 1848              	.LC10:
 1849 0080 C3F0E0F4 		.ascii	"\303\360\340\364\350\352 \375\355\345\360\343. \350"
 1849      E8EA20FD 
 1849      EDE5F0E3 
 1849      2E20E8
 1850 008f E7ECE5ED 		.ascii	"\347\354\345\355\345\355\000"
 1850      E5ED00
 1851 0096 0000     		.align	2
 1852              	.LC11:
 1853 0098 C3F0E0F4 		.ascii	"\303\360\340\364\350\352 \356\341\356\343\360. \350"
 1853      E8EA20EE 
 1853      E1EEE3F0 
 1853      2E20E8
 1854 00a7 E7ECE5ED 		.ascii	"\347\354\345\355\345\355\000"
 1854      E5ED00
 1855 00ae 0000     		.align	2
 1856              	.LC12:
 1857 00b0 CAEEEDF4 		.ascii	"\312\356\355\364. \354\356\344\345\354\340 \350\347"
 1857      2E20ECEE 
 1857      E4E5ECE0 
 1857      20E8E7
 1858 00bf ECE5EDE5 		.ascii	"\354\345\355\345\355\340\000"
 1858      EDE000
 1859 00c6 0000     		.align	2
 1860              	.LC13:
 1861 00c8 CAEEEDF4 		.ascii	"\312\356\355\364. \361\367\345\362\367\350\352 \350"
 1861      2E20F1F7 
 1861      E5F2F7E8 
 1861      EA20E8
 1862 00d7 E7ECE5ED 		.ascii	"\347\354\345\355\345\355\340\000"
 1862      E5EDE000 
 1863              		.section	.text.JournalConf,"ax",%progbits
 1864              		.align	1
 1865              		.global	JournalConf
 1866              		.syntax unified
 1867              		.thumb
 1868              		.thumb_func
 1870              	JournalConf:
 1871              	.LFB42:
 319:src/journal.c **** 
 320:src/journal.c **** void JournalConf(int confadr)
 321:src/journal.c **** {
 1872              		.loc 1 321 1
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 8
 1875              		@ frame_needed = 1, uses_anonymous_args = 0
 1876 0000 80B5     		push	{r7, lr}
 1877              	.LCFI58:
 1878              		.cfi_def_cfa_offset 8
 1879              		.cfi_offset 7, -8
 1880              		.cfi_offset 14, -4
 1881 0002 82B0     		sub	sp, sp, #8
 1882              	.LCFI59:
 1883              		.cfi_def_cfa_offset 16
 1884 0004 00AF     		add	r7, sp, #0
 1885              	.LCFI60:
 1886              		.cfi_def_cfa_register 7
 1887 0006 7860     		str	r0, [r7, #4]
 322:src/journal.c **** 	if (confadr==0x200)
 1888              		.loc 1 322 5
 1889 0008 7B68     		ldr	r3, [r7, #4]
 1890 000a B3F5007F 		cmp	r3, #512
 1891 000e 03D1     		bne	.L68
 323:src/journal.c **** 	{JrnlWrite("Конфигурация изменена");}
 1892              		.loc 1 323 3
 1893 0010 2048     		ldr	r0, .L77
 1894 0012 214B     		ldr	r3, .L77+4
 1895 0014 9847     		blx	r3
 1896              	.LVL100:
 324:src/journal.c **** 		else if (confadr==0x500)
 325:src/journal.c **** 			{JrnlWrite("График осв. изменен");}
 326:src/journal.c **** 		else if (confadr==0x802)
 327:src/journal.c **** 			{JrnlWrite("График подсв. изменен");}
 328:src/journal.c **** 		else if (confadr==0xb04)
 329:src/journal.c **** 			{JrnlWrite("График иллюм. изменен");}
 330:src/journal.c **** 		else if (confadr==0xe06)
 331:src/journal.c **** 			{JrnlWrite("График энерг. изменен");}
 332:src/journal.c **** 		else if (confadr==0x1108)
 333:src/journal.c **** 			{JrnlWrite("График обогр. изменен");}
 334:src/journal.c **** 		else if (confadr==0x0)
 335:src/journal.c **** 			{JrnlWrite("Конф. модема изменена");}
 336:src/journal.c **** 		else if (confadr==0x90)
 337:src/journal.c **** 			{JrnlWrite("Конф. счетчик изменена");}
 338:src/journal.c **** 	}
 1897              		.loc 1 338 2
 1898 0016 38E0     		b	.L76
 1899              	.L68:
 324:src/journal.c **** 		else if (confadr==0x500)
 1900              		.loc 1 324 11
 1901 0018 7B68     		ldr	r3, [r7, #4]
 1902 001a B3F5A06F 		cmp	r3, #1280
 1903 001e 03D1     		bne	.L70
 325:src/journal.c **** 		else if (confadr==0x802)
 1904              		.loc 1 325 5
 1905 0020 1E48     		ldr	r0, .L77+8
 1906 0022 1D4B     		ldr	r3, .L77+4
 1907 0024 9847     		blx	r3
 1908              	.LVL101:
 1909              		.loc 1 338 2
 1910 0026 30E0     		b	.L76
 1911              	.L70:
 326:src/journal.c **** 			{JrnlWrite("График подсв. изменен");}
 1912              		.loc 1 326 11
 1913 0028 7B68     		ldr	r3, [r7, #4]
 1914 002a 40F60202 		movw	r2, #2050
 1915 002e 9342     		cmp	r3, r2
 1916 0030 03D1     		bne	.L71
 327:src/journal.c **** 		else if (confadr==0xb04)
 1917              		.loc 1 327 5
 1918 0032 1B48     		ldr	r0, .L77+12
 1919 0034 184B     		ldr	r3, .L77+4
 1920 0036 9847     		blx	r3
 1921              	.LVL102:
 1922              		.loc 1 338 2
 1923 0038 27E0     		b	.L76
 1924              	.L71:
 328:src/journal.c **** 			{JrnlWrite("График иллюм. изменен");}
 1925              		.loc 1 328 11
 1926 003a 7B68     		ldr	r3, [r7, #4]
 1927 003c 40F60432 		movw	r2, #2820
 1928 0040 9342     		cmp	r3, r2
 1929 0042 03D1     		bne	.L72
 329:src/journal.c **** 		else if (confadr==0xe06)
 1930              		.loc 1 329 5
 1931 0044 1748     		ldr	r0, .L77+16
 1932 0046 144B     		ldr	r3, .L77+4
 1933 0048 9847     		blx	r3
 1934              	.LVL103:
 1935              		.loc 1 338 2
 1936 004a 1EE0     		b	.L76
 1937              	.L72:
 330:src/journal.c **** 			{JrnlWrite("График энерг. изменен");}
 1938              		.loc 1 330 11
 1939 004c 7B68     		ldr	r3, [r7, #4]
 1940 004e 40F60662 		movw	r2, #3590
 1941 0052 9342     		cmp	r3, r2
 1942 0054 03D1     		bne	.L73
 331:src/journal.c **** 		else if (confadr==0x1108)
 1943              		.loc 1 331 5
 1944 0056 1448     		ldr	r0, .L77+20
 1945 0058 0F4B     		ldr	r3, .L77+4
 1946 005a 9847     		blx	r3
 1947              	.LVL104:
 1948              		.loc 1 338 2
 1949 005c 15E0     		b	.L76
 1950              	.L73:
 332:src/journal.c **** 			{JrnlWrite("График обогр. изменен");}
 1951              		.loc 1 332 11
 1952 005e 7B68     		ldr	r3, [r7, #4]
 1953 0060 41F20812 		movw	r2, #4360
 1954 0064 9342     		cmp	r3, r2
 1955 0066 03D1     		bne	.L74
 333:src/journal.c **** 		else if (confadr==0x0)
 1956              		.loc 1 333 5
 1957 0068 1048     		ldr	r0, .L77+24
 1958 006a 0B4B     		ldr	r3, .L77+4
 1959 006c 9847     		blx	r3
 1960              	.LVL105:
 1961              		.loc 1 338 2
 1962 006e 0CE0     		b	.L76
 1963              	.L74:
 334:src/journal.c **** 			{JrnlWrite("Конф. модема изменена");}
 1964              		.loc 1 334 11
 1965 0070 7B68     		ldr	r3, [r7, #4]
 1966 0072 002B     		cmp	r3, #0
 1967 0074 03D1     		bne	.L75
 335:src/journal.c **** 		else if (confadr==0x90)
 1968              		.loc 1 335 5
 1969 0076 0E48     		ldr	r0, .L77+28
 1970 0078 074B     		ldr	r3, .L77+4
 1971 007a 9847     		blx	r3
 1972              	.LVL106:
 1973              		.loc 1 338 2
 1974 007c 05E0     		b	.L76
 1975              	.L75:
 336:src/journal.c **** 			{JrnlWrite("Конф. счетчик изменена");}
 1976              		.loc 1 336 11
 1977 007e 7B68     		ldr	r3, [r7, #4]
 1978 0080 902B     		cmp	r3, #144
 1979 0082 02D1     		bne	.L76
 337:src/journal.c **** 	}
 1980              		.loc 1 337 5
 1981 0084 0B48     		ldr	r0, .L77+32
 1982 0086 044B     		ldr	r3, .L77+4
 1983 0088 9847     		blx	r3
 1984              	.LVL107:
 1985              	.L76:
 1986              		.loc 1 338 2
 1987 008a 00BF     		nop
 1988 008c 0837     		adds	r7, r7, #8
 1989              	.LCFI61:
 1990              		.cfi_def_cfa_offset 8
 1991 008e BD46     		mov	sp, r7
 1992              	.LCFI62:
 1993              		.cfi_def_cfa_register 13
 1994              		@ sp needed
 1995 0090 80BD     		pop	{r7, pc}
 1996              	.L78:
 1997 0092 00BF     		.align	2
 1998              	.L77:
 1999 0094 24000000 		.word	.LC6
 2000 0098 00000000 		.word	JrnlWrite
 2001 009c 3C000000 		.word	.LC7
 2002 00a0 50000000 		.word	.LC8
 2003 00a4 68000000 		.word	.LC9
 2004 00a8 80000000 		.word	.LC10
 2005 00ac 98000000 		.word	.LC11
 2006 00b0 B0000000 		.word	.LC12
 2007 00b4 C8000000 		.word	.LC13
 2008              		.cfi_endproc
 2009              	.LFE42:
 2011              		.text
 2012              	.Letext0:
 2013              		.file 2 "common/rtos/common/utils/typedef.h"
 2014              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2015              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2016              		.file 5 "common/rtos/common/driver/rtclock.h"
 2017              		.file 6 "<built-in>"
 2018              		.file 7 "common/rtos/portable/GCC/ARM_CM3/portmacro.h"
 2019              		.file 8 "common/rtos/common/utils/memman.h"
 2020              		.file 9 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
DEFINED SYMBOLS
                            *ABS*:00000000 journal.c
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:22     .bss.jrnlLength:00000000 jrnlLength
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:19     .bss.jrnlLength:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:25     .text.reverse:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:31     .text.reverse:00000000 reverse
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:136    .text.reverse:00000070 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:141    .text.itoa1:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:147    .text.itoa1:00000000 itoa1
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:264    .text.itoa1:00000094 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:270    .text.itoa_n:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:276    .text.itoa_n:00000000 itoa_n
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:412    .text.itoa_n:000000ac $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:418    .text.atoi1:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:424    .text.atoi1:00000000 atoi1
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:500    .rodata:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:504    .text.GetTimeString:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:510    .text.GetTimeString:00000000 GetTimeString
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:626    .text.GetTimeString:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:640    .text.GetDateString:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:646    .text.GetDateString:00000000 GetDateString
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:762    .text.GetDateString:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:773    .text.GetTimeStringOff:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:779    .text.GetTimeStringOff:00000000 GetTimeStringOff
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:895    .text.GetTimeStringOff:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:905    .text.GetDateStringOff:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:911    .text.GetDateStringOff:00000000 GetDateStringOff
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1027   .text.GetDateStringOff:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1042   .text.JrnlClear:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1048   .text.JrnlClear:00000000 JrnlClear
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1149   .text.JrnlClear:00000088 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1176   .text.JrnlWrite:00000000 JrnlWrite
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1170   .text.JrnlWrite:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1468   .text.JrnlWrite:000001b4 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1785   .text.GetJrnlLength:00000000 GetJrnlLength
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1487   .text.JrnlWriteOff:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1493   .text.JrnlWriteOff:00000000 JrnlWriteOff
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1761   .text.JrnlWriteOff:00000194 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1779   .text.GetJrnlLength:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1823   .text.GetJrnlLength:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1864   .text.JournalConf:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1870   .text.JournalConf:00000000 JournalConf
C:\Users\Admin\AppData\Local\Temp\ccA9N7ru.s:1999   .text.JournalConf:00000094 $d

UNDEFINED SYMBOLS
strlen
rtcGetDataTime
strcpy
strcat
rtcGetDataTimeOff
memset
vPortEnterCritical
MemSetWords
vPortExitCritical
BKP_WriteBackupRegister
vTaskDelay
MemGetWords
