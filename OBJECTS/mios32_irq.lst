   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mios32_irq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB14:
  25              		.file 1 "common/lib.stm32/CMSIS/Core/CM3/core_cm3.h"
   1:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /******************************************************************************
   2:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @file:    core_cm3.h
   3:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @version: V1.20
   5:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @date:    22. May 2009
   6:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *----------------------------------------------------------------------------
   7:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
   8:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  10:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  11:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  12:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  13:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  14:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  15:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  16:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  17:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  18:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  19:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  20:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
  21:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  22:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  23:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  24:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  25:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  26:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  extern "C" {
  27:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif 
  28:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  29:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  30:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  31:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  32:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  33:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  34:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  35:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
  36:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  Lint configuration \n
  37:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  ----------------------- \n
  38:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  39:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  40:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *  \n
  41:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 10: --- \n
  42:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  43:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Error 10: Expecting ';' \n
  44:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  45:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 530: --- \n
  46:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    return(__regBasePri); \n
  47:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  48:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  49:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 550: --- \n
  50:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  51:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } \n
  52:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  53:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  54:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 754: --- \n
  55:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  56:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  57:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  58:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 750: --- \n
  59:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  60:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  61:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  62:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 528: --- \n
  63:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  64:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  65:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *     \n
  66:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 751: --- \n
  67:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    } InterruptType_Type; \n
  68:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  69:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  70:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * \n
  71:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  72:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
  73:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
  74:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  75:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -save */
  76:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e10  */
  77:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e530 */
  78:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e550 */
  79:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e754 */
  80:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e750 */
  81:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e528 */
  82:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*lint -e751 */
  83:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  84:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  85:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  86:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  87:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  88:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  89:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  90:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  91:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  92:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  93:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  94:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
  95:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  96:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  97:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  98:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
  99:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * IO definitions
 101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 114:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 115:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 116:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 117:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 118:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 119:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 120:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* System Reset */
 121:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 122:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 123:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 124:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 125:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 126:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug */
 127:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 128:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 129:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 130:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 131:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 132:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 133:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 134:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 135:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 136:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 137:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];
 138:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 139:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];
 140:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 141:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];
 142:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 143:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];
 144:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 145:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];
 146:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 147:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];
 148:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 149:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }  NVIC_Type;
 150:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 151:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 152:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for System Control Block */
 153:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 154:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 155:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 156:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 157:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 158:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 159:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 160:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 161:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 162:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 163:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 164:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 165:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 166:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 167:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 168:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 169:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 170:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 171:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 172:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 173:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 174:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SCB_Type;
 175:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 176:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 177:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for SysTick */
 178:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 179:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 180:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 181:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 182:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 183:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 184:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } SysTick_Type;
 185:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 186:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 187:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapping structur for ITM */
 188:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 189:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 190:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  union  
 191:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   {
 192:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 193:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 194:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 195:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 196:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];
 197:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 198:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];
 199:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 200:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];
 201:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 202:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];
 203:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 204:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 205:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 206:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];
 207:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 208:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 209:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];
 210:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 211:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;
 212:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;
 213:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;
 214:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;
 215:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;
 216:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;
 217:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;
 218:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;
 219:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;
 220:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;
 221:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;
 222:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } ITM_Type;
 223:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 224:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 225:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 226:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 227:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 228:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 229:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 230:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 231:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 232:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else
 233:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 234:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 235:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } InterruptType_Type;
 236:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 237:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 238:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory Protection Unit */
 239:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 240:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 241:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 242:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 243:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 244:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 245:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 246:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 247:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 248:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 249:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 250:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 251:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 252:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 253:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } MPU_Type;
 254:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 255:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 256:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 257:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Core Debug Register */
 258:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** typedef struct
 259:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 260:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 261:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 262:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 263:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 264:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 265:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 266:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 267:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 268:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 269:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 270:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 271:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 272:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 273:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 274:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 275:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 276:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 277:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 278:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 279:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 280:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 281:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 282:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 283:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 284:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 285:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 286:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 287:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 288:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 289:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 290:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 291:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 292:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 293:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 294:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 295:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 296:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 297:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 298:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 299:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 300:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 301:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 302:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 303:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 304:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 305:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 306:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 307:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 308:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 309:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 310:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
 311:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 312:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 313:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 314:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 315:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 316:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 317:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 318:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 319:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 320:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 321:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 322:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 323:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 324:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 325:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 326:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 327:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 328:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __REV                             __rev
 329:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 330:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 331:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 332:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 333:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 334:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 335:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 336:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 337:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 338:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 339:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 340:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 341:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 342:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 343:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 344:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 345:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 346:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 347:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 348:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 349:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 350:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 351:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 352:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 353:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 354:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 355:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 356:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 357:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 358:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 359:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 360:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 361:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 362:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 363:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 364:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 365:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 366:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 367:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 368:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 369:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 370:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 371:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 372:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 373:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 374:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 375:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 376:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 377:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 378:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 379:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 380:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 381:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 382:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 383:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 384:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 385:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 386:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 387:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 388:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 389:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 390:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 391:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 392:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 393:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 394:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 395:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 396:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 397:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 398:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 399:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 400:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 401:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 402:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 403:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 404:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 405:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 406:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 407:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 408:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 409:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 410:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 411:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 412:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 413:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 414:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 415:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 416:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 417:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 418:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 419:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 420:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 421:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 422:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 423:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 424:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 425:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 426:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 427:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 428:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 429:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 430:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 431:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 432:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 433:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 434:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 435:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 436:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 437:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 438:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 439:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 440:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 441:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 442:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 443:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 444:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 445:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 446:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 447:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 448:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 449:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 450:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 451:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 452:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 453:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 454:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 455:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 456:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 457:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 458:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 459:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 460:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 461:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 462:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 463:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 464:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 465:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 466:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 467:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 468:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 469:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 470:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 471:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 472:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 473:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 474:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 475:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 476:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 477:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 478:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 479:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 480:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 481:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 482:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 483:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 484:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 485:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 486:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 487:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 488:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 489:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 490:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 491:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 492:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 493:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 494:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 495:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 496:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 497:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 498:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 499:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 500:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 501:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 502:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 503:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 504:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 505:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 506:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 507:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 508:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 509:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 510:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 511:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 512:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 513:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 514:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 515:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 516:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 517:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 518:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 519:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 520:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 521:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 522:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 523:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 524:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 525:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regBasePri);
 526:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 527:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 528:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 529:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 530:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 531:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 532:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 533:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 534:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 535:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 536:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 537:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 538:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 539:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 540:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 541:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 542:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 543:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 544:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 545:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 546:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 547:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 548:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 549:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 550:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 551:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 552:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 553:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 554:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regPriMask);
 555:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 556:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 557:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 558:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 559:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 560:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 561:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 562:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 563:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 564:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 565:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 566:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 567:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 568:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 569:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 570:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 571:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 572:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 573:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 574:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 575:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 576:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 577:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 578:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 579:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 580:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 581:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 582:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regFaultMask);
 583:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 584:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 585:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 586:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 587:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 588:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 589:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 590:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 591:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 592:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 593:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 594:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 595:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 596:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 597:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 598:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 599:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 600:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 601:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
 602:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 603:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 604:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 605:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 606:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 607:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 608:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 609:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 610:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return(__regControl);
 611:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 612:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 613:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 614:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 615:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 616:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 617:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 618:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 619:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 620:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 621:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 622:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
 623:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 624:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   __regControl = control;
 625:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 626:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 627:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 628:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 629:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 630:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 631:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 632:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
 633:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 634:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 635:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 636:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 637:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 638:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 639:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 640:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 641:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 642:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 643:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 644:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 645:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 646:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 647:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 648:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 649:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 650:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 651:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 652:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 653:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 654:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 655:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 656:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 657:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 658:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 659:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 660:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 661:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 662:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 663:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 664:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 665:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 666:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 667:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 668:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 669:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 670:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 671:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 672:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 673:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 674:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 675:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 676:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 677:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 678:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 679:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 680:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 681:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 682:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 683:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 684:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 685:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 686:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 687:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 688:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 689:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 690:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 691:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 692:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 693:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 694:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 695:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 696:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 697:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 698:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 699:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 700:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 701:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 702:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 703:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 704:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 705:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 706:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 707:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 708:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 709:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 710:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 711:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 712:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 713:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 714:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 715:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 716:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 717:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 718:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 719:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 720:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 721:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 722:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 723:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 724:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 725:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 726:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 727:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 728:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 729:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 730:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 731:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 732:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 733:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 734:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 735:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 736:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 737:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 738:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 739:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 740:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 741:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 742:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 743:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 744:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 745:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 746:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 747:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 748:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 749:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 750:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 751:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 752:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 753:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 754:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 755:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
 756:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
 757:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 758:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 759:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 760:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 761:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 762:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 763:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 764:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 765:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 766:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
 767:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
 768:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 769:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 770:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 771:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 772:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 773:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 774:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 775:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 776:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 777:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
 778:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
 779:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 780:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 781:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 782:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 783:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 784:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 785:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 786:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 787:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 788:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
 789:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 790:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 791:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 792:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 793:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 794:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 795:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 796:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 797:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 798:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 799:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 800:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 801:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 802:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 803:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
 804:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 805:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 806:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 807:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 808:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 809:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 810:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 811:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 812:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 813:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 814:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 815:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 816:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 817:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 818:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 819:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 820:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 821:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 822:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 823:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 824:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 825:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 826:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 827:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 828:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 829:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 830:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 831:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 832:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 833:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 834:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 835:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 836:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 837:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 838:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 839:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 840:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 841:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 842:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 843:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 844:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 845:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 846:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 847:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 848:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 849:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 850:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 851:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 852:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 853:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 854:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 855:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 856:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 857:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 858:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 859:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 860:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 861:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 862:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 863:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 864:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 865:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 866:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 867:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 868:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 869:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 870:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 871:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 872:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 873:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 874:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 875:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 876:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * register
 877:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 878:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
 879:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 880:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 881:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 882:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 883:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 884:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 885:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 886:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 887:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 888:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 889:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 890:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 891:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 892:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 893:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 894:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 895:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 896:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 897:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 898:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 899:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 900:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 901:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 902:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 903:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 904:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 905:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 906:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 907:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 908:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 909:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 910:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 911:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 912:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** * 
 913:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @param  none
 914:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** *  @return uint32_t Control value
 915:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 916:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 917:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 918:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 919:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 920:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 921:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 922:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 923:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 924:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
 925:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 926:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 927:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 928:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 929:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 930:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 931:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
 932:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 933:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 934:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 935:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 936:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
 937:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 938:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
 939:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 940:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 941:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 942:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 943:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 944:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 945:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 946:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 947:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 948:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 949:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 950:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
 951:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 952:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 953:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 954:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 955:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 956:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 957:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 958:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 959:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 960:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 961:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 962:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 963:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 964:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 965:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 966:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 967:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 968:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 969:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 970:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 971:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 972:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 973:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 974:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 975:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 976:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 977:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 978:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 979:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 980:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 981:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 982:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 983:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 984:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 985:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 986:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 987:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 988:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 989:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
 990:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
 991:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 992:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 993:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 994:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
 995:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
 996:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 997:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
 998:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 999:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1000:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1001:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1002:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1003:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
1004:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
1005:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1006:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1007:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1008:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1009:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1010:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1011:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1012:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1013:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1014:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
1015:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
1016:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1017:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1018:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1019:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1020:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1021:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1022:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1023:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
1024:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1025:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
1026:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
1027:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
1028:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1029:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
1030:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1031:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1032:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1033:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1034:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1035:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1036:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1037:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /*
1038:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1039:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1040:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1041:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1042:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1043:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** #endif
1044:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1045:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1046:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1047:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1048:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1049:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1050:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1051:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1052:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1053:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t priority_grouping is priority grouping field
1054:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1055:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1056:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1057:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1058:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1059:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1060:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1061:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1062:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1063:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1064:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1065:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1066:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   
1067:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = SCB->AIRCR;                                                    /* read old register 
1068:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value &= ~((0xFFFFU << 16) | (0x0F << 8));                              /* clear bits to chan
1069:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   reg_value  = ((reg_value | NVIC_AIRCR_VECTKEY | (PriorityGroupTmp << 8)));  /* Insert write key a
1070:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   SCB->AIRCR = reg_value;
1071:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1072:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1073:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1074:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1075:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1076:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  none
1077:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t   priority grouping field 
1078:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1079:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1080:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1081:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1082:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1083:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
1084:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR >> 8) & 0x07);                                          /* read priority grou
1085:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
1086:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1087:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1088:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1089:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1090:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn specifies the interrupt number
1091:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none 
1092:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  *
1093:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1094:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1095:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1096:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1097:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  26              		.loc 1 1097 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 0346     		mov	r3, r0
  42 0008 FB71     		strb	r3, [r7, #7]
1098:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              		.loc 1 1098 65
  44 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  45 000c 03F01F03 		and	r3, r3, #31
  46              		.loc 1 1098 44
  47 0010 0122     		movs	r2, #1
  48 0012 02FA03F1 		lsl	r1, r2, r3
  49              		.loc 1 1098 7
  50 0016 054A     		ldr	r2, .L2
  51              		.loc 1 1098 15
  52 0018 97F90730 		ldrsb	r3, [r7, #7]
  53              		.loc 1 1098 32
  54 001c 5B09     		lsrs	r3, r3, #5
  55              		.loc 1 1098 39
  56 001e 42F82310 		str	r1, [r2, r3, lsl #2]
1099:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
  57              		.loc 1 1099 1
  58 0022 00BF     		nop
  59 0024 0C37     		adds	r7, r7, #12
  60              	.LCFI3:
  61              		.cfi_def_cfa_offset 4
  62 0026 BD46     		mov	sp, r7
  63              	.LCFI4:
  64              		.cfi_def_cfa_register 13
  65              		@ sp needed
  66 0028 80BC     		pop	{r7}
  67              	.LCFI5:
  68              		.cfi_restore 7
  69              		.cfi_def_cfa_offset 0
  70 002a 7047     		bx	lr
  71              	.L3:
  72              		.align	2
  73              	.L2:
  74 002c 00E100E0 		.word	-536813312
  75              		.cfi_endproc
  76              	.LFE14:
  78              		.section	.text.NVIC_DisableIRQ,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	NVIC_DisableIRQ:
  85              	.LFB15:
1100:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** 
1101:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** /**
1102:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1103:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1104:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @param  IRQn_Type IRQn is the positive number of the external interrupt
1105:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * @return none
1106:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * 
1107:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1108:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1109:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****  */
1110:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1111:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** {
  86              		.loc 1 1111 1
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              	.LCFI6:
  93              		.cfi_def_cfa_offset 4
  94              		.cfi_offset 7, -4
  95 0002 83B0     		sub	sp, sp, #12
  96              	.LCFI7:
  97              		.cfi_def_cfa_offset 16
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI8:
 100              		.cfi_def_cfa_register 7
 101 0006 0346     		mov	r3, r0
 102 0008 FB71     		strb	r3, [r7, #7]
1112:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 103              		.loc 1 1112 65
 104 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 105 000c 03F01F03 		and	r3, r3, #31
 106              		.loc 1 1112 44
 107 0010 0122     		movs	r2, #1
 108 0012 02FA03F1 		lsl	r1, r2, r3
 109              		.loc 1 1112 7
 110 0016 064A     		ldr	r2, .L5
 111              		.loc 1 1112 15
 112 0018 97F90730 		ldrsb	r3, [r7, #7]
 113              		.loc 1 1112 32
 114 001c 5B09     		lsrs	r3, r3, #5
 115              		.loc 1 1112 39
 116 001e 2033     		adds	r3, r3, #32
 117 0020 42F82310 		str	r1, [r2, r3, lsl #2]
1113:common/lib.stm32/CMSIS/Core/CM3/core_cm3.h **** }
 118              		.loc 1 1113 1
 119 0024 00BF     		nop
 120 0026 0C37     		adds	r7, r7, #12
 121              	.LCFI9:
 122              		.cfi_def_cfa_offset 4
 123 0028 BD46     		mov	sp, r7
 124              	.LCFI10:
 125              		.cfi_def_cfa_register 13
 126              		@ sp needed
 127 002a 80BC     		pop	{r7}
 128              	.LCFI11:
 129              		.cfi_restore 7
 130              		.cfi_def_cfa_offset 0
 131 002c 7047     		bx	lr
 132              	.L6:
 133 002e 00BF     		.align	2
 134              	.L5:
 135 0030 00E100E0 		.word	-536813312
 136              		.cfi_endproc
 137              	.LFE15:
 139              		.section	.bss.nested_ctr,"aw",%nobits
 140              		.align	2
 143              	nested_ctr:
 144 0000 00000000 		.space	4
 145              		.section	.bss.prev_primask,"aw",%nobits
 146              		.align	2
 149              	prev_primask:
 150 0000 00000000 		.space	4
 151              		.section	.text.MIOS32_IRQ_Disable,"ax",%progbits
 152              		.align	1
 153              		.global	MIOS32_IRQ_Disable
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	MIOS32_IRQ_Disable:
 159              	.LFB27:
 160              		.file 2 "src/mios32_irq.c"
   1:src/mios32_irq.c **** // $Id: mios32_irq.c 1179 2011-04-19 23:20:18Z tk $
   2:src/mios32_irq.c **** //! \defgroup MIOS32_IRQ
   3:src/mios32_irq.c **** //!
   4:src/mios32_irq.c **** //! System Specific IRQ Enable/Disable routines
   5:src/mios32_irq.c **** //!
   6:src/mios32_irq.c **** //! \{
   7:src/mios32_irq.c **** /* ==========================================================================
   8:src/mios32_irq.c ****  *
   9:src/mios32_irq.c ****  *  Copyright (C) 2008 Thorsten Klose (tk@midibox.org)
  10:src/mios32_irq.c ****  *  Licensed for personal non-commercial use only.
  11:src/mios32_irq.c ****  *  All other rights reserved.
  12:src/mios32_irq.c ****  *
  13:src/mios32_irq.c ****  * ==========================================================================
  14:src/mios32_irq.c ****  */
  15:src/mios32_irq.c **** 
  16:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  17:src/mios32_irq.c **** // Include files
  18:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  19:src/mios32_irq.c **** 
  20:src/mios32_irq.c **** #include <mios32_irq.h>
  21:src/mios32_irq.c **** 
  22:src/mios32_irq.c **** // this module can be optionally disabled in a local mios32_config.h file (included from mios32.h)
  23:src/mios32_irq.c **** #if !defined(MIOS32_DONT_USE_IRQ)
  24:src/mios32_irq.c **** 
  25:src/mios32_irq.c **** 
  26:src/mios32_irq.c **** // the nesting counter ensures, that interrupts won't be enabled as long as
  27:src/mios32_irq.c **** // nested functions disable them
  28:src/mios32_irq.c **** static u32 nested_ctr;
  29:src/mios32_irq.c **** 
  30:src/mios32_irq.c **** // stored priority level before IRQ has been disabled (important for co-existence with vPortEnterCr
  31:src/mios32_irq.c **** static u32 prev_primask;
  32:src/mios32_irq.c **** 
  33:src/mios32_irq.c **** 
  34:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  35:src/mios32_irq.c **** //! This function disables all interrupts (nested)
  36:src/mios32_irq.c **** //! \return < 0 on errors
  37:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  38:src/mios32_irq.c **** s32 MIOS32_IRQ_Disable(void)
  39:src/mios32_irq.c **** {
 161              		.loc 2 39 1
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 166 0000 80B4     		push	{r7}
 167              	.LCFI12:
 168              		.cfi_def_cfa_offset 4
 169              		.cfi_offset 7, -4
 170 0002 00AF     		add	r7, sp, #0
 171              	.LCFI13:
 172              		.cfi_def_cfa_register 7
  40:src/mios32_irq.c ****   // get current priority if nested level == 0
  41:src/mios32_irq.c ****   if( !nested_ctr ) {
 173              		.loc 2 41 7
 174 0004 0A4B     		ldr	r3, .L10
 175 0006 1B68     		ldr	r3, [r3]
 176              		.loc 2 41 5
 177 0008 002B     		cmp	r3, #0
 178 000a 03D1     		bne	.L8
  42:src/mios32_irq.c ****     __asm volatile (               \
 179              		.loc 2 42 5
 180              		.syntax unified
 181              	@ 42 "src/mios32_irq.c" 1
 182 000c EFF31083 		   mrs r3, primask
 183              	
 184              	@ 0 "" 2
 185              		.thumb
 186              		.syntax unified
 187 0010 084A     		ldr	r2, .L10+4
 188 0012 1360     		str	r3, [r2]
 189              	.L8:
  43:src/mios32_irq.c ****             "   mrs %0, primask\n" \
  44:src/mios32_irq.c ****             : "=r" (prev_primask)  \
  45:src/mios32_irq.c ****             );
  46:src/mios32_irq.c ****   }
  47:src/mios32_irq.c **** 
  48:src/mios32_irq.c ****   // disable interrupts
  49:src/mios32_irq.c ****   __asm volatile ( \
 190              		.loc 2 49 3
 191              		.syntax unified
 192              	@ 49 "src/mios32_irq.c" 1
 193 0014 4FF00100 		 mov r0, #1     
 194 0018 80F31088 	 msr primask, r0
 195              	
 196              	@ 0 "" 2
  50:src/mios32_irq.c ****           " mov r0, #1     \n" \
  51:src/mios32_irq.c ****           " msr primask, r0\n" \
  52:src/mios32_irq.c ****           :::"r0"    \
  53:src/mios32_irq.c ****           );
  54:src/mios32_irq.c **** 
  55:src/mios32_irq.c ****   ++nested_ctr;
 197              		.loc 2 55 3
 198              		.thumb
 199              		.syntax unified
 200 001c 044B     		ldr	r3, .L10
 201 001e 1B68     		ldr	r3, [r3]
 202 0020 0133     		adds	r3, r3, #1
 203 0022 034A     		ldr	r2, .L10
 204 0024 1360     		str	r3, [r2]
  56:src/mios32_irq.c **** 
  57:src/mios32_irq.c ****   return 0; // no error
 205              		.loc 2 57 10
 206 0026 0023     		movs	r3, #0
  58:src/mios32_irq.c **** }
 207              		.loc 2 58 1
 208 0028 1846     		mov	r0, r3
 209 002a BD46     		mov	sp, r7
 210              	.LCFI14:
 211              		.cfi_def_cfa_register 13
 212              		@ sp needed
 213 002c 80BC     		pop	{r7}
 214              	.LCFI15:
 215              		.cfi_restore 7
 216              		.cfi_def_cfa_offset 0
 217 002e 7047     		bx	lr
 218              	.L11:
 219              		.align	2
 220              	.L10:
 221 0030 00000000 		.word	nested_ctr
 222 0034 00000000 		.word	prev_primask
 223              		.cfi_endproc
 224              	.LFE27:
 226              		.section	.text.MIOS32_IRQ_Enable,"ax",%progbits
 227              		.align	1
 228              		.global	MIOS32_IRQ_Enable
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 233              	MIOS32_IRQ_Enable:
 234              	.LFB28:
  59:src/mios32_irq.c **** 
  60:src/mios32_irq.c **** 
  61:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  62:src/mios32_irq.c **** //! This function enables all interrupts (nested)
  63:src/mios32_irq.c **** //! \return < 0 on errors
  64:src/mios32_irq.c **** //! \return -1 on nesting errors (MIOS32_IRQ_Disable() hasn't been called before)
  65:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  66:src/mios32_irq.c **** s32 MIOS32_IRQ_Enable(void)
  67:src/mios32_irq.c **** {
 235              		.loc 2 67 1
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240 0000 80B4     		push	{r7}
 241              	.LCFI16:
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 0002 00AF     		add	r7, sp, #0
 245              	.LCFI17:
 246              		.cfi_def_cfa_register 7
  68:src/mios32_irq.c ****   // check for nesting error
  69:src/mios32_irq.c ****   if( nested_ctr == 0 )
 247              		.loc 2 69 18
 248 0004 0C4B     		ldr	r3, .L16
 249 0006 1B68     		ldr	r3, [r3]
 250              		.loc 2 69 5
 251 0008 002B     		cmp	r3, #0
 252 000a 02D1     		bne	.L13
  70:src/mios32_irq.c ****     return -1; // nesting error
 253              		.loc 2 70 12
 254 000c 4FF0FF33 		mov	r3, #-1
 255 0010 0DE0     		b	.L14
 256              	.L13:
  71:src/mios32_irq.c **** 
  72:src/mios32_irq.c ****   // decrease nesting level
  73:src/mios32_irq.c ****   --nested_ctr;
 257              		.loc 2 73 3
 258 0012 094B     		ldr	r3, .L16
 259 0014 1B68     		ldr	r3, [r3]
 260 0016 013B     		subs	r3, r3, #1
 261 0018 074A     		ldr	r2, .L16
 262 001a 1360     		str	r3, [r2]
  74:src/mios32_irq.c **** 
  75:src/mios32_irq.c ****   // set back previous priority once nested level reached 0 again
  76:src/mios32_irq.c ****   if( nested_ctr == 0 ) {
 263              		.loc 2 76 18
 264 001c 064B     		ldr	r3, .L16
 265 001e 1B68     		ldr	r3, [r3]
 266              		.loc 2 76 5
 267 0020 002B     		cmp	r3, #0
 268 0022 03D1     		bne	.L15
  77:src/mios32_irq.c ****     __asm volatile ( \
 269              		.loc 2 77 5
 270 0024 054B     		ldr	r3, .L16+4
 271 0026 1B68     		ldr	r3, [r3]
 272              		.syntax unified
 273              	@ 77 "src/mios32_irq.c" 1
 274 0028 83F31088 		   msr primask, r3
 275              	
 276              	@ 0 "" 2
 277              		.thumb
 278              		.syntax unified
 279              	.L15:
  78:src/mios32_irq.c ****             "   msr primask, %0\n" \
  79:src/mios32_irq.c ****             :: "r" (prev_primask)  \
  80:src/mios32_irq.c ****             );
  81:src/mios32_irq.c ****   }
  82:src/mios32_irq.c **** 
  83:src/mios32_irq.c ****   return 0; // no error
 280              		.loc 2 83 10
 281 002c 0023     		movs	r3, #0
 282              	.L14:
  84:src/mios32_irq.c **** }
 283              		.loc 2 84 1
 284 002e 1846     		mov	r0, r3
 285 0030 BD46     		mov	sp, r7
 286              	.LCFI18:
 287              		.cfi_def_cfa_register 13
 288              		@ sp needed
 289 0032 80BC     		pop	{r7}
 290              	.LCFI19:
 291              		.cfi_restore 7
 292              		.cfi_def_cfa_offset 0
 293 0034 7047     		bx	lr
 294              	.L17:
 295 0036 00BF     		.align	2
 296              	.L16:
 297 0038 00000000 		.word	nested_ctr
 298 003c 00000000 		.word	prev_primask
 299              		.cfi_endproc
 300              	.LFE28:
 302              		.section	.text.MIOS32_IRQ_Install,"ax",%progbits
 303              		.align	1
 304              		.global	MIOS32_IRQ_Install
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 309              	MIOS32_IRQ_Install:
 310              	.LFB29:
  85:src/mios32_irq.c **** 
  86:src/mios32_irq.c **** 
  87:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  88:src/mios32_irq.c **** //! This function installs an interrupt service.
  89:src/mios32_irq.c **** //! \param[in] IRQn the interrupt number as defined in the CMSIS (e.g. CAN_IRQn)
  90:src/mios32_irq.c **** //! \param[in] priority the priority from 0..15 - than lower the value, than higher the priority.\n
  91:src/mios32_irq.c **** //! Please prefer the usage of MIOS32_IRQ_PRIO_LOW .. MID .. HIGH .. HIGHEST
  92:src/mios32_irq.c **** //! \return < 0 on errors
  93:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
  94:src/mios32_irq.c **** s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
  95:src/mios32_irq.c **** {
 311              		.loc 2 95 1
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 16
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315 0000 80B5     		push	{r7, lr}
 316              	.LCFI20:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 7, -8
 319              		.cfi_offset 14, -4
 320 0002 84B0     		sub	sp, sp, #16
 321              	.LCFI21:
 322              		.cfi_def_cfa_offset 24
 323 0004 00AF     		add	r7, sp, #0
 324              	.LCFI22:
 325              		.cfi_def_cfa_register 7
 326 0006 0346     		mov	r3, r0
 327 0008 0A46     		mov	r2, r1
 328 000a FB71     		strb	r3, [r7, #7]
 329 000c 1346     		mov	r3, r2
 330 000e BB71     		strb	r3, [r7, #6]
  96:src/mios32_irq.c ****   // no check for IRQn as it's device dependent
  97:src/mios32_irq.c **** 
  98:src/mios32_irq.c ****   if( priority >= 16 )
 331              		.loc 2 98 5
 332 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 333 0012 0F2B     		cmp	r3, #15
 334 0014 02D9     		bls	.L19
  99:src/mios32_irq.c ****     return -1; // invalid priority
 335              		.loc 2 99 12
 336 0016 4FF0FF33 		mov	r3, #-1
 337 001a 20E0     		b	.L20
 338              	.L19:
 100:src/mios32_irq.c **** 
 101:src/mios32_irq.c ****   u32 tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 8;
 339              		.loc 2 101 35
 340 001c 124B     		ldr	r3, .L21
 341 001e DB68     		ldr	r3, [r3, #12]
 342              		.loc 2 101 28
 343 0020 DB43     		mvns	r3, r3
 344              		.loc 2 101 64
 345 0022 1B0A     		lsrs	r3, r3, #8
 346              		.loc 2 101 7
 347 0024 03F00703 		and	r3, r3, #7
 348 0028 FB60     		str	r3, [r7, #12]
 102:src/mios32_irq.c ****   u32 tmppre = (4 - tmppriority);
 349              		.loc 2 102 7
 350 002a FB68     		ldr	r3, [r7, #12]
 351 002c C3F10403 		rsb	r3, r3, #4
 352 0030 BB60     		str	r3, [r7, #8]
 103:src/mios32_irq.c ****   tmppriority = priority << tmppre;
 353              		.loc 2 103 26
 354 0032 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 355 0034 BB68     		ldr	r3, [r7, #8]
 356 0036 02FA03F3 		lsl	r3, r2, r3
 357              		.loc 2 103 15
 358 003a FB60     		str	r3, [r7, #12]
 104:src/mios32_irq.c ****   tmppriority = tmppriority << 4;
 359              		.loc 2 104 15
 360 003c FB68     		ldr	r3, [r7, #12]
 361 003e 1B01     		lsls	r3, r3, #4
 362 0040 FB60     		str	r3, [r7, #12]
 105:src/mios32_irq.c ****   NVIC->IP[IRQn] = tmppriority;
 363              		.loc 2 105 7
 364 0042 0A4A     		ldr	r2, .L21+4
 365              		.loc 2 105 11
 366 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 367              		.loc 2 105 18
 368 0046 F968     		ldr	r1, [r7, #12]
 369 0048 C9B2     		uxtb	r1, r1
 370 004a 1344     		add	r3, r3, r2
 371 004c 0A46     		mov	r2, r1
 372 004e 83F80023 		strb	r2, [r3, #768]
 106:src/mios32_irq.c **** 
 107:src/mios32_irq.c ****   NVIC_EnableIRQ(IRQn);
 373              		.loc 2 107 3
 374 0052 97F90730 		ldrsb	r3, [r7, #7]
 375 0056 1846     		mov	r0, r3
 376 0058 054B     		ldr	r3, .L21+8
 377 005a 9847     		blx	r3
 378              	.LVL0:
 108:src/mios32_irq.c **** 
 109:src/mios32_irq.c ****   return 0; // no error
 379              		.loc 2 109 10
 380 005c 0023     		movs	r3, #0
 381              	.L20:
 110:src/mios32_irq.c **** }
 382              		.loc 2 110 1
 383 005e 1846     		mov	r0, r3
 384 0060 1037     		adds	r7, r7, #16
 385              	.LCFI23:
 386              		.cfi_def_cfa_offset 8
 387 0062 BD46     		mov	sp, r7
 388              	.LCFI24:
 389              		.cfi_def_cfa_register 13
 390              		@ sp needed
 391 0064 80BD     		pop	{r7, pc}
 392              	.L22:
 393 0066 00BF     		.align	2
 394              	.L21:
 395 0068 00ED00E0 		.word	-536810240
 396 006c 00E100E0 		.word	-536813312
 397 0070 00000000 		.word	NVIC_EnableIRQ
 398              		.cfi_endproc
 399              	.LFE29:
 401              		.section	.text.MIOS32_IRQ_DeInstall,"ax",%progbits
 402              		.align	1
 403              		.global	MIOS32_IRQ_DeInstall
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 408              	MIOS32_IRQ_DeInstall:
 409              	.LFB30:
 111:src/mios32_irq.c **** 
 112:src/mios32_irq.c **** 
 113:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
 114:src/mios32_irq.c **** //! This function deinstalls an interrupt service.
 115:src/mios32_irq.c **** //! \param[in] IRQn the interrupt number as defined in the CMSIS (e.g. CAN_IRQn)
 116:src/mios32_irq.c **** //! \return < 0 on errors
 117:src/mios32_irq.c **** /////////////////////////////////////////////////////////////////////////////
 118:src/mios32_irq.c **** s32 MIOS32_IRQ_DeInstall(u8 IRQn)
 119:src/mios32_irq.c **** {
 410              		.loc 2 119 1
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 8
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414 0000 80B5     		push	{r7, lr}
 415              	.LCFI25:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 7, -8
 418              		.cfi_offset 14, -4
 419 0002 82B0     		sub	sp, sp, #8
 420              	.LCFI26:
 421              		.cfi_def_cfa_offset 16
 422 0004 00AF     		add	r7, sp, #0
 423              	.LCFI27:
 424              		.cfi_def_cfa_register 7
 425 0006 0346     		mov	r3, r0
 426 0008 FB71     		strb	r3, [r7, #7]
 120:src/mios32_irq.c ****   NVIC_DisableIRQ(IRQn);
 427              		.loc 2 120 3
 428 000a 97F90730 		ldrsb	r3, [r7, #7]
 429 000e 1846     		mov	r0, r3
 430 0010 034B     		ldr	r3, .L25
 431 0012 9847     		blx	r3
 432              	.LVL1:
 121:src/mios32_irq.c **** 
 122:src/mios32_irq.c ****   return 0; // no error
 433              		.loc 2 122 10
 434 0014 0023     		movs	r3, #0
 123:src/mios32_irq.c **** }
 435              		.loc 2 123 1
 436 0016 1846     		mov	r0, r3
 437 0018 0837     		adds	r7, r7, #8
 438              	.LCFI28:
 439              		.cfi_def_cfa_offset 8
 440 001a BD46     		mov	sp, r7
 441              	.LCFI29:
 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 001c 80BD     		pop	{r7, pc}
 445              	.L26:
 446 001e 00BF     		.align	2
 447              	.L25:
 448 0020 00000000 		.word	NVIC_DisableIRQ
 449              		.cfi_endproc
 450              	.LFE30:
 452              		.text
 453              	.Letext0:
 454              		.file 3 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 455              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 456              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
DEFINED SYMBOLS
                            *ABS*:00000000 mios32_irq.c
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:74     .text.NVIC_EnableIRQ:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:79     .text.NVIC_DisableIRQ:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:84     .text.NVIC_DisableIRQ:00000000 NVIC_DisableIRQ
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:135    .text.NVIC_DisableIRQ:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:140    .bss.nested_ctr:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:143    .bss.nested_ctr:00000000 nested_ctr
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:146    .bss.prev_primask:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:149    .bss.prev_primask:00000000 prev_primask
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:152    .text.MIOS32_IRQ_Disable:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:158    .text.MIOS32_IRQ_Disable:00000000 MIOS32_IRQ_Disable
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:221    .text.MIOS32_IRQ_Disable:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:227    .text.MIOS32_IRQ_Enable:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:233    .text.MIOS32_IRQ_Enable:00000000 MIOS32_IRQ_Enable
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:297    .text.MIOS32_IRQ_Enable:00000038 $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:303    .text.MIOS32_IRQ_Install:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:309    .text.MIOS32_IRQ_Install:00000000 MIOS32_IRQ_Install
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:395    .text.MIOS32_IRQ_Install:00000068 $d
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:402    .text.MIOS32_IRQ_DeInstall:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:408    .text.MIOS32_IRQ_DeInstall:00000000 MIOS32_IRQ_DeInstall
C:\Users\Admin\AppData\Local\Temp\ccxpcQrh.s:448    .text.MIOS32_IRQ_DeInstall:00000020 $d

NO UNDEFINED SYMBOLS
