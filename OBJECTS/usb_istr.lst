   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"usb_istr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	wIstr
  18              		.section	.bss.wIstr,"aw",%nobits
  19              		.align	1
  22              	wIstr:
  23 0000 0000     		.space	2
  24              		.global	bIntPackSOF
  25              		.section	.bss.bIntPackSOF,"aw",%nobits
  28              	bIntPackSOF:
  29 0000 00       		.space	1
  30              		.global	pEpInt_IN
  31              		.section	.data.pEpInt_IN,"aw"
  32              		.align	2
  35              	pEpInt_IN:
  36 0000 00000000 		.word	EP1_IN_Callback
  37 0004 00000000 		.word	NOP_Process
  38 0008 00000000 		.word	NOP_Process
  39 000c 00000000 		.word	NOP_Process
  40 0010 00000000 		.word	NOP_Process
  41 0014 00000000 		.word	NOP_Process
  42 0018 00000000 		.word	NOP_Process
  43              		.global	pEpInt_OUT
  44              		.section	.data.pEpInt_OUT,"aw"
  45              		.align	2
  48              	pEpInt_OUT:
  49 0000 00000000 		.word	NOP_Process
  50 0004 00000000 		.word	NOP_Process
  51 0008 00000000 		.word	EP3_OUT_Callback
  52 000c 00000000 		.word	NOP_Process
  53 0010 00000000 		.word	NOP_Process
  54 0014 00000000 		.word	NOP_Process
  55 0018 00000000 		.word	NOP_Process
  56              		.section	.text.USB_Istr,"ax",%progbits
  57              		.align	1
  58              		.global	USB_Istr
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	USB_Istr:
  64              	.LFB27:
  65              		.file 1 "usb/usb_istr.c"
   1:usb/usb_istr.c **** /******************** (C) COPYRIGHT 2010 STMicroelectronics ********************
   2:usb/usb_istr.c **** * File Name          : usb_istr.c
   3:usb/usb_istr.c **** * Author             : MCD Application Team
   4:usb/usb_istr.c **** * Version            : V3.2.1
   5:usb/usb_istr.c **** * Date               : 07/05/2010
   6:usb/usb_istr.c **** * Description        : ISTR events interrupt service routines
   7:usb/usb_istr.c **** ********************************************************************************
   8:usb/usb_istr.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:usb/usb_istr.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:usb/usb_istr.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:usb/usb_istr.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:usb/usb_istr.c **** * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:usb/usb_istr.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:usb/usb_istr.c **** *******************************************************************************/
  15:usb/usb_istr.c **** 
  16:usb/usb_istr.c **** /* Includes ------------------------------------------------------------------*/
  17:usb/usb_istr.c **** #include "usb_lib.h"
  18:usb/usb_istr.c **** #include "usb_prop.h"
  19:usb/usb_istr.c **** #include "usb_pwr.h"
  20:usb/usb_istr.c **** #include "usb_istr.h"
  21:usb/usb_istr.c **** 
  22:usb/usb_istr.c **** /* Private typedef -----------------------------------------------------------*/
  23:usb/usb_istr.c **** /* Private define ------------------------------------------------------------*/
  24:usb/usb_istr.c **** /* Private macro -------------------------------------------------------------*/
  25:usb/usb_istr.c **** /* Private variables ---------------------------------------------------------*/
  26:usb/usb_istr.c **** __IO uint16_t wIstr;  /* ISTR register last read value */
  27:usb/usb_istr.c **** __IO uint8_t bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
  28:usb/usb_istr.c **** 
  29:usb/usb_istr.c **** /* Extern variables ----------------------------------------------------------*/
  30:usb/usb_istr.c **** /* Private function prototypes -----------------------------------------------*/
  31:usb/usb_istr.c **** /* Private functions ---------------------------------------------------------*/
  32:usb/usb_istr.c **** /* function pointers to non-control endpoints service routines */
  33:usb/usb_istr.c **** void (*pEpInt_IN[7])(void) =
  34:usb/usb_istr.c ****   {
  35:usb/usb_istr.c ****     EP1_IN_Callback,
  36:usb/usb_istr.c ****     EP2_IN_Callback,
  37:usb/usb_istr.c ****     EP3_IN_Callback,
  38:usb/usb_istr.c ****     EP4_IN_Callback,
  39:usb/usb_istr.c ****     EP5_IN_Callback,
  40:usb/usb_istr.c ****     EP6_IN_Callback,
  41:usb/usb_istr.c ****     EP7_IN_Callback,
  42:usb/usb_istr.c ****   };
  43:usb/usb_istr.c **** 
  44:usb/usb_istr.c **** void (*pEpInt_OUT[7])(void) =
  45:usb/usb_istr.c ****   {
  46:usb/usb_istr.c ****     EP1_OUT_Callback,
  47:usb/usb_istr.c ****     EP2_OUT_Callback,
  48:usb/usb_istr.c ****     EP3_OUT_Callback,
  49:usb/usb_istr.c ****     EP4_OUT_Callback,
  50:usb/usb_istr.c ****     EP5_OUT_Callback,
  51:usb/usb_istr.c ****     EP6_OUT_Callback,
  52:usb/usb_istr.c ****     EP7_OUT_Callback,
  53:usb/usb_istr.c ****   };
  54:usb/usb_istr.c **** 
  55:usb/usb_istr.c **** #ifndef STM32F10X_CL
  56:usb/usb_istr.c **** 
  57:usb/usb_istr.c **** /*******************************************************************************
  58:usb/usb_istr.c **** * Function Name  : USB_Istr
  59:usb/usb_istr.c **** * Description    : STR events interrupt service routine
  60:usb/usb_istr.c **** * Input          :
  61:usb/usb_istr.c **** * Output         :
  62:usb/usb_istr.c **** * Return         :
  63:usb/usb_istr.c **** *******************************************************************************/
  64:usb/usb_istr.c **** void USB_Istr(void)
  65:usb/usb_istr.c **** {
  66              		.loc 1 65 1
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 80B5     		push	{r7, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 7, -8
  74              		.cfi_offset 14, -4
  75 0002 00AF     		add	r7, sp, #0
  76              	.LCFI1:
  77              		.cfi_def_cfa_register 7
  66:usb/usb_istr.c **** 
  67:usb/usb_istr.c ****   wIstr = _GetISTR();
  78              		.loc 1 67 11
  79 0004 1D4B     		ldr	r3, .L6
  80 0006 1B68     		ldr	r3, [r3]
  81 0008 9AB2     		uxth	r2, r3
  82              		.loc 1 67 9
  83 000a 1D4B     		ldr	r3, .L6+4
  84 000c 1A80     		strh	r2, [r3]	@ movhi
  68:usb/usb_istr.c **** 
  69:usb/usb_istr.c **** #if (IMR_MSK & ISTR_SOF)
  70:usb/usb_istr.c ****   if (wIstr & ISTR_SOF & wInterrupt_Mask)
  85              		.loc 1 70 13
  86 000e 1C4B     		ldr	r3, .L6+4
  87 0010 1B88     		ldrh	r3, [r3]	@ movhi
  88 0012 9BB2     		uxth	r3, r3
  89 0014 03F40073 		and	r3, r3, #512
  90              		.loc 1 70 24
  91 0018 1A4A     		ldr	r2, .L6+8
  92 001a 1288     		ldrh	r2, [r2]
  93 001c 1340     		ands	r3, r3, r2
  94              		.loc 1 70 6
  95 001e 002B     		cmp	r3, #0
  96 0020 0CD0     		beq	.L2
  71:usb/usb_istr.c ****   {
  72:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_SOF);
  97              		.loc 1 72 5
  98 0022 164B     		ldr	r3, .L6
  99 0024 4FF6FF52 		movw	r2, #65023
 100 0028 1A60     		str	r2, [r3]
  73:usb/usb_istr.c ****     bIntPackSOF++;
 101              		.loc 1 73 16
 102 002a 174B     		ldr	r3, .L6+12
 103 002c 1B78     		ldrb	r3, [r3]
 104 002e DBB2     		uxtb	r3, r3
 105 0030 0133     		adds	r3, r3, #1
 106 0032 DAB2     		uxtb	r2, r3
 107 0034 144B     		ldr	r3, .L6+12
 108 0036 1A70     		strb	r2, [r3]
  74:usb/usb_istr.c **** 
  75:usb/usb_istr.c **** #ifdef SOF_CALLBACK
  76:usb/usb_istr.c ****     SOF_Callback();
 109              		.loc 1 76 5
 110 0038 144B     		ldr	r3, .L6+16
 111 003a 9847     		blx	r3
 112              	.LVL0:
 113              	.L2:
  77:usb/usb_istr.c **** #endif
  78:usb/usb_istr.c ****   }
  79:usb/usb_istr.c **** #endif
  80:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  81:usb/usb_istr.c ****   
  82:usb/usb_istr.c **** #if (IMR_MSK & ISTR_CTR)
  83:usb/usb_istr.c ****   if (wIstr & ISTR_CTR & wInterrupt_Mask)
 114              		.loc 1 83 13
 115 003c 104B     		ldr	r3, .L6+4
 116 003e 1B88     		ldrh	r3, [r3]	@ movhi
 117 0040 9BB2     		uxth	r3, r3
 118 0042 03F40043 		and	r3, r3, #32768
 119              		.loc 1 83 24
 120 0046 0F4A     		ldr	r2, .L6+8
 121 0048 1288     		ldrh	r2, [r2]
 122 004a 1340     		ands	r3, r3, r2
 123              		.loc 1 83 6
 124 004c 002B     		cmp	r3, #0
 125 004e 01D0     		beq	.L3
  84:usb/usb_istr.c ****   {
  85:usb/usb_istr.c ****     /* servicing of the endpoint correct transfer interrupt */
  86:usb/usb_istr.c ****     /* clear of the CTR flag into the sub */
  87:usb/usb_istr.c ****     CTR_LP();
 126              		.loc 1 87 5
 127 0050 0F4B     		ldr	r3, .L6+20
 128 0052 9847     		blx	r3
 129              	.LVL1:
 130              	.L3:
  88:usb/usb_istr.c **** #ifdef CTR_CALLBACK
  89:usb/usb_istr.c ****     CTR_Callback();
  90:usb/usb_istr.c **** #endif
  91:usb/usb_istr.c ****   }
  92:usb/usb_istr.c **** #endif
  93:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  94:usb/usb_istr.c **** #if (IMR_MSK & ISTR_RESET)
  95:usb/usb_istr.c ****   if (wIstr & ISTR_RESET & wInterrupt_Mask)
 131              		.loc 1 95 13
 132 0054 0A4B     		ldr	r3, .L6+4
 133 0056 1B88     		ldrh	r3, [r3]	@ movhi
 134 0058 9BB2     		uxth	r3, r3
 135 005a 03F48063 		and	r3, r3, #1024
 136              		.loc 1 95 26
 137 005e 094A     		ldr	r2, .L6+8
 138 0060 1288     		ldrh	r2, [r2]
 139 0062 1340     		ands	r3, r3, r2
 140              		.loc 1 95 6
 141 0064 002B     		cmp	r3, #0
 142 0066 06D0     		beq	.L5
  96:usb/usb_istr.c ****   {
  97:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_RESET);
 143              		.loc 1 97 5
 144 0068 044B     		ldr	r3, .L6
 145 006a 4FF6FF32 		movw	r2, #64511
 146 006e 1A60     		str	r2, [r3]
  98:usb/usb_istr.c ****     Device_Property.Reset();
 147              		.loc 1 98 20
 148 0070 084B     		ldr	r3, .L6+24
 149 0072 5B68     		ldr	r3, [r3, #4]
 150              		.loc 1 98 5
 151 0074 9847     		blx	r3
 152              	.LVL2:
 153              	.L5:
  99:usb/usb_istr.c **** #ifdef RESET_CALLBACK
 100:usb/usb_istr.c ****     RESET_Callback();
 101:usb/usb_istr.c **** #endif
 102:usb/usb_istr.c ****   }
 103:usb/usb_istr.c **** #endif
 104:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 105:usb/usb_istr.c **** #if (IMR_MSK & ISTR_DOVR)
 106:usb/usb_istr.c ****   if (wIstr & ISTR_DOVR & wInterrupt_Mask)
 107:usb/usb_istr.c ****   {
 108:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_DOVR);
 109:usb/usb_istr.c **** #ifdef DOVR_CALLBACK
 110:usb/usb_istr.c ****     DOVR_Callback();
 111:usb/usb_istr.c **** #endif
 112:usb/usb_istr.c ****   }
 113:usb/usb_istr.c **** #endif
 114:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 115:usb/usb_istr.c **** #if (IMR_MSK & ISTR_ERR)
 116:usb/usb_istr.c ****   if (wIstr & ISTR_ERR & wInterrupt_Mask)
 117:usb/usb_istr.c ****   {
 118:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_ERR);
 119:usb/usb_istr.c **** #ifdef ERR_CALLBACK
 120:usb/usb_istr.c ****     ERR_Callback();
 121:usb/usb_istr.c **** #endif
 122:usb/usb_istr.c ****   }
 123:usb/usb_istr.c **** #endif
 124:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 125:usb/usb_istr.c **** #if (IMR_MSK & ISTR_WKUP)
 126:usb/usb_istr.c ****   if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 127:usb/usb_istr.c ****   {
 128:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_WKUP);
 129:usb/usb_istr.c ****     Resume(RESUME_EXTERNAL);
 130:usb/usb_istr.c **** #ifdef WKUP_CALLBACK
 131:usb/usb_istr.c ****     WKUP_Callback();
 132:usb/usb_istr.c **** #endif
 133:usb/usb_istr.c ****   }
 134:usb/usb_istr.c **** #endif
 135:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 136:usb/usb_istr.c **** #if (IMR_MSK & ISTR_SUSP)
 137:usb/usb_istr.c ****   if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 138:usb/usb_istr.c ****   {
 139:usb/usb_istr.c **** 
 140:usb/usb_istr.c ****     /* check if SUSPEND is possible */
 141:usb/usb_istr.c ****     if (fSuspendEnabled)
 142:usb/usb_istr.c ****     {
 143:usb/usb_istr.c ****       Suspend();
 144:usb/usb_istr.c ****     }
 145:usb/usb_istr.c ****     else
 146:usb/usb_istr.c ****     {
 147:usb/usb_istr.c ****       /* if not possible then resume after xx ms */
 148:usb/usb_istr.c ****       Resume(RESUME_LATER);
 149:usb/usb_istr.c ****     }
 150:usb/usb_istr.c ****     /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
 151:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_SUSP);
 152:usb/usb_istr.c **** #ifdef SUSP_CALLBACK
 153:usb/usb_istr.c ****     SUSP_Callback();
 154:usb/usb_istr.c **** #endif
 155:usb/usb_istr.c ****   }
 156:usb/usb_istr.c **** #endif
 157:usb/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 158:usb/usb_istr.c **** 
 159:usb/usb_istr.c **** #if (IMR_MSK & ISTR_ESOF)
 160:usb/usb_istr.c ****   if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 161:usb/usb_istr.c ****   {
 162:usb/usb_istr.c ****     _SetISTR((uint16_t)CLR_ESOF);
 163:usb/usb_istr.c ****     /* resume handling timing is made with ESOFs */
 164:usb/usb_istr.c ****     Resume(RESUME_ESOF); /* request without change of the machine state */
 165:usb/usb_istr.c **** 
 166:usb/usb_istr.c **** #ifdef ESOF_CALLBACK
 167:usb/usb_istr.c ****     ESOF_Callback();
 168:usb/usb_istr.c **** #endif
 169:usb/usb_istr.c ****   }
 170:usb/usb_istr.c **** #endif
 171:usb/usb_istr.c **** } /* USB_Istr */
 154              		.loc 1 171 1
 155 0076 00BF     		nop
 156 0078 80BD     		pop	{r7, pc}
 157              	.L7:
 158 007a 00BF     		.align	2
 159              	.L6:
 160 007c 445C0040 		.word	1073765444
 161 0080 00000000 		.word	wIstr
 162 0084 00000000 		.word	wInterrupt_Mask
 163 0088 00000000 		.word	bIntPackSOF
 164 008c 00000000 		.word	SOF_Callback
 165 0090 00000000 		.word	CTR_LP
 166 0094 00000000 		.word	Device_Property
 167              		.cfi_endproc
 168              	.LFE27:
 170              		.text
 171              	.Letext0:
 172              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 173              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 174              		.file 4 "common/lib.stm32/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 175              		.file 5 "common/lib.stm32/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 176              		.file 6 "common/lib.stm32/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 177              		.file 7 "usb/usb_istr.h"
 178              		.file 8 "common/lib.stm32/STM32_USB-FS-Device_Driver/inc/usb_int.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_istr.c
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:22     .bss.wIstr:00000000 wIstr
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:19     .bss.wIstr:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:28     .bss.bIntPackSOF:00000000 bIntPackSOF
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:29     .bss.bIntPackSOF:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:35     .data.pEpInt_IN:00000000 pEpInt_IN
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:32     .data.pEpInt_IN:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:48     .data.pEpInt_OUT:00000000 pEpInt_OUT
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:45     .data.pEpInt_OUT:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:57     .text.USB_Istr:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:63     .text.USB_Istr:00000000 USB_Istr
C:\Users\Admin\AppData\Local\Temp\ccbewn5M.s:160    .text.USB_Istr:0000007c $d

UNDEFINED SYMBOLS
EP1_IN_Callback
NOP_Process
EP3_OUT_Callback
wInterrupt_Mask
SOF_Callback
CTR_LP
Device_Property
