   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"modem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	GprsIdleMSec
  18              		.section	.bss.GprsIdleMSec,"aw",%nobits
  19              		.align	2
  22              	GprsIdleMSec:
  23 0000 00000000 		.space	4
  24              		.global	sio_buf
  25              		.section	.bss.sio_buf,"aw",%nobits
  26              		.align	2
  29              	sio_buf:
  30 0000 00000000 		.space	1024
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.global	sio_buf2
  32              		.section	.bss.sio_buf2,"aw",%nobits
  33              		.align	2
  36              	sio_buf2:
  37 0000 00000000 		.space	1024
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.global	sio_buf3
  39              		.section	.bss.sio_buf3,"aw",%nobits
  40              		.align	2
  43              	sio_buf3:
  44 0000 00000000 		.space	1024
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.global	sio_buf4
  46              		.section	.bss.sio_buf4,"aw",%nobits
  47              		.align	2
  50              	sio_buf4:
  51 0000 00000000 		.space	1024
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	sio_fifo
  53              		.section	.bss.sio_fifo,"aw",%nobits
  54              		.align	2
  57              	sio_fifo:
  58 0000 00000000 		.space	1024
  58      00000000 
  58      00000000 
  58      00000000 
  58      00000000 
  59              		.global	bufpoint
  60              		.section	.bss.bufpoint,"aw",%nobits
  61              		.align	2
  64              	bufpoint:
  65 0000 00000000 		.space	4
  66              		.global	bufsize
  67              		.section	.bss.bufsize,"aw",%nobits
  68              		.align	1
  71              	bufsize:
  72 0000 0000     		.space	2
  73              		.global	bufsize2
  74              		.section	.bss.bufsize2,"aw",%nobits
  75              		.align	1
  78              	bufsize2:
  79 0000 0000     		.space	2
  80              		.global	bufsize3
  81              		.section	.bss.bufsize3,"aw",%nobits
  82              		.align	1
  85              	bufsize3:
  86 0000 0000     		.space	2
  87              		.global	bufsize4
  88              		.section	.bss.bufsize4,"aw",%nobits
  89              		.align	1
  92              	bufsize4:
  93 0000 0000     		.space	2
  94              		.global	numRD
  95              		.section	.bss.numRD,"aw",%nobits
  96              		.align	2
  99              	numRD:
 100 0000 00000000 		.space	4
 101              		.global	i_OPEN
 102              		.section	.bss.i_OPEN,"aw",%nobits
 103              		.align	2
 106              	i_OPEN:
 107 0000 00000000 		.space	4
 108              		.global	i_Select
 109              		.section	.bss.i_Select,"aw",%nobits
 110              		.align	2
 113              	i_Select:
 114 0000 00000000 		.space	4
 115              		.global	LedNoModem_Journal
 116              		.section	.bss.LedNoModem_Journal,"aw",%nobits
 119              	LedNoModem_Journal:
 120 0000 00       		.space	1
 121              		.global	LedSIM_Journal
 122              		.section	.bss.LedSIM_Journal,"aw",%nobits
 125              	LedSIM_Journal:
 126 0000 00       		.space	1
 127              		.global	LedAPN_Journal
 128              		.section	.bss.LedAPN_Journal,"aw",%nobits
 131              	LedAPN_Journal:
 132 0000 00       		.space	1
 133              		.global	flag_first
 134              		.section	.bss.flag_first,"aw",%nobits
 135              		.align	2
 138              	flag_first:
 139 0000 00000000 		.space	4
 140              		.global	strbuf
 141              		.section	.bss.strbuf,"aw",%nobits
 142              		.align	2
 145              	strbuf:
 146 0000 00000000 		.space	256
 146      00000000 
 146      00000000 
 146      00000000 
 146      00000000 
 147              		.global	atset
 148              		.section	.rodata
 149              		.align	2
 150              	.LC0:
 151 0000 2B504252 		.ascii	"+PBREADY\000"
 151      45414459 
 151      00
 152 0009 000000   		.align	2
 153              	.LC1:
 154 000c 4F4B00   		.ascii	"OK\000"
 155 000f 00       		.align	2
 156              	.LC2:
 157 0010 53455256 		.ascii	"SERVER OK\000"
 157      4552204F 
 157      4B00
 158 001a 0000     		.align	2
 159              	.LC3:
 160 001c 4E4F524D 		.ascii	"NORMAL POWER DOWN\000"
 160      414C2050 
 160      4F574552 
 160      20444F57 
 160      4E00
 161 002e 0000     		.align	2
 162              	.LC4:
 163 0030 53544154 		.ascii	"STATE: IP STATUS\000"
 163      453A2049 
 163      50205354 
 163      41545553 
 163      00
 164 0041 000000   		.align	2
 165              	.LC5:
 166 0044 53544154 		.ascii	"STATE: IP CLOSE\000"
 166      453A2049 
 166      5020434C 
 166      4F534500 
 167              		.align	2
 168              	.LC6:
 169 0054 53544154 		.ascii	"STATE: IP INITIAL\000"
 169      453A2049 
 169      5020494E 
 169      49544941 
 169      4C00
 170 0066 0000     		.align	2
 171              	.LC7:
 172 0068 53544154 		.ascii	"STATE: IP GPRSACT\000"
 172      453A2049 
 172      50204750 
 172      52534143 
 172      5400
 173 007a 0000     		.align	2
 174              	.LC8:
 175 007c 53544154 		.ascii	"STATE: PDP DEACT\000"
 175      453A2050 
 175      44502044 
 175      45414354 
 175      00
 176 008d 000000   		.align	2
 177              	.LC9:
 178 0090 3E2000   		.ascii	"> \000"
 179 0093 00       		.align	2
 180              	.LC10:
 181 0094 434F4E4E 		.ascii	"CONNECT\000"
 181      45435400 
 182              		.align	2
 183              	.LC11:
 184 009c 4E4F2043 		.ascii	"NO CARRIER\000"
 184      41525249 
 184      455200
 185              		.section	.rodata.atset,"a"
 186              		.align	2
 189              	atset:
 190 0000 00000000 		.word	.LC0
 191 0004 01       		.byte	1
 192 0005 000000   		.space	3
 193 0008 0C000000 		.word	.LC1
 194 000c 02       		.byte	2
 195 000d 000000   		.space	3
 196 0010 10000000 		.word	.LC2
 197 0014 03       		.byte	3
 198 0015 000000   		.space	3
 199 0018 1C000000 		.word	.LC3
 200 001c 04       		.byte	4
 201 001d 000000   		.space	3
 202 0020 30000000 		.word	.LC4
 203 0024 05       		.byte	5
 204 0025 000000   		.space	3
 205 0028 44000000 		.word	.LC5
 206 002c 06       		.byte	6
 207 002d 000000   		.space	3
 208 0030 54000000 		.word	.LC6
 209 0034 07       		.byte	7
 210 0035 000000   		.space	3
 211 0038 68000000 		.word	.LC7
 212 003c 08       		.byte	8
 213 003d 000000   		.space	3
 214 0040 7C000000 		.word	.LC8
 215 0044 09       		.byte	9
 216 0045 000000   		.space	3
 217 0048 90000000 		.word	.LC9
 218 004c 0A       		.byte	10
 219 004d 000000   		.space	3
 220 0050 94000000 		.word	.LC10
 221 0054 0B       		.byte	11
 222 0055 000000   		.space	3
 223 0058 9C000000 		.word	.LC11
 224 005c 0C       		.byte	12
 225 005d 000000   		.space	3
 226              		.section	.text.IsLiteral,"ax",%progbits
 227              		.align	1
 228              		.global	IsLiteral
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 233              	IsLiteral:
 234              	.LFB30:
 235              		.file 1 "src/modem.c"
   1:src/modem.c   **** /*
   2:src/modem.c   ****  * modem.c
   3:src/modem.c   ****  *
   4:src/modem.c   ****  *  Created on: Jan 18, 2010
   5:src/modem.c   ****  *      Author: albert
   6:src/modem.c   ****  */
   7:src/modem.c   **** #include <stdlib.h>
   8:src/modem.c   **** #include <stdio.h>
   9:src/modem.c   **** #include <stdarg.h>
  10:src/modem.c   **** #include <string.h>
  11:src/modem.c   **** 
  12:src/modem.c   **** #include "board.h"
  13:src/modem.c   **** #include "FreeRTOS.h"
  14:src/modem.c   **** #include "task.h"
  15:src/modem.c   **** #include "modem.h"
  16:src/modem.c   **** #include "usart2.h"
  17:src/modem.c   **** #include "typedef.h"
  18:src/modem.c   **** #include "usermemory.h"
  19:src/modem.c   **** #include "led.h"
  20:src/modem.c   **** #include "rtclock.h"
  21:src/modem.c   **** #include "journal.h"
  22:src/modem.c   **** 
  23:src/modem.c   **** #define MODEM_SIO_BUFF_SIZE 1024
  24:src/modem.c   **** #define MODEM_DISABLE { GPIO_SetBits(GPIOB, GPIO_Pin_0);}  //инверсия SW ON
  25:src/modem.c   **** #define  MODEM_ENABLE {GPIO_ResetBits(GPIOB, GPIO_Pin_0); }
  26:src/modem.c   **** 
  27:src/modem.c   **** //#define MODEM_DISABLE { GPIO_ResetBits(GPIOB, GPIO_Pin_0);}  //для старого корпуса (вер 4.49.0)
  28:src/modem.c   **** //#define  MODEM_ENABLE {GPIO_SetBits(GPIOB, GPIO_Pin_0); }
  29:src/modem.c   **** 
  30:src/modem.c   **** #define GPRS_IDLE_TIMEOUT_MS      ( 60*4*1000) // 4 min idle and restart
  31:src/modem.c   **** 
  32:src/modem.c   **** uint32 GprsIdleMSec;
  33:src/modem.c   **** 
  34:src/modem.c   **** //#define CTS_ENABLE { GPIO_SetBits(GPIOB, GPIO_Pin_13);}
  35:src/modem.c   **** //#define CTS_DISABLE { GPIO_ResetBits(GPIOB, GPIO_Pin_13);}
  36:src/modem.c   **** 
  37:src/modem.c   **** uint8 sio_buf[MODEM_SIO_BUFF_SIZE];
  38:src/modem.c   **** uint8 sio_buf2[MODEM_SIO_BUFF_SIZE];
  39:src/modem.c   **** uint8 sio_buf3[MODEM_SIO_BUFF_SIZE];
  40:src/modem.c   **** uint8 sio_buf4[MODEM_SIO_BUFF_SIZE];
  41:src/modem.c   **** 
  42:src/modem.c   **** #define SIOFIFOSIZE 1024
  43:src/modem.c   **** uint8 sio_fifo[SIOFIFOSIZE];
  44:src/modem.c   **** //uint8 sio_buf[64];
  45:src/modem.c   **** volatile int bufpoint; //, bufsize;
  46:src/modem.c   **** volatile uint16_t bufsize;
  47:src/modem.c   **** volatile uint16_t bufsize2, bufsize3, bufsize4;
  48:src/modem.c   **** 
  49:src/modem.c   **** extern bool FlagGSMtime;
  50:src/modem.c   **** extern bool FlagGPStime;
  51:src/modem.c   **** 
  52:src/modem.c   **** int numRD; //IDсервера
  53:src/modem.c   **** int i_OPEN;
  54:src/modem.c   **** int i_Select;
  55:src/modem.c   **** 
  56:src/modem.c   **** bool LedNoModem_Journal = 0;
  57:src/modem.c   **** bool LedSIM_Journal = 0;
  58:src/modem.c   **** bool LedAPN_Journal = 0;
  59:src/modem.c   **** int flag_first = 0;
  60:src/modem.c   **** #define STRBUFLEN 256
  61:src/modem.c   **** 
  62:src/modem.c   **** char strbuf[STRBUFLEN];
  63:src/modem.c   **** #define MODEM_PORT (&COM0)
  64:src/modem.c   **** 
  65:src/modem.c   **** const AT_COMMAND atset[AT_AMOUNT] = { "+PBREADY", MA_CALLREADY, "OK", MA_OK,
  66:src/modem.c   **** 		"SERVER OK", MA_SERVEROK, "NORMAL POWER DOWN", MA_NORMALPOWERDOWN,
  67:src/modem.c   **** 		"STATE: IP STATUS", MA_STATEIPSTATUS, "STATE: IP CLOSE",
  68:src/modem.c   **** 		MA_STATEIPCLOSE, "STATE: IP INITIAL", MA_STATEIPINITIAL,
  69:src/modem.c   **** 		"STATE: IP GPRSACT", MA_STATEIPGPRSACT, "STATE: PDP DEACT",
  70:src/modem.c   **** 		MA_STATEPDPDEACT, "> ", MA_CIPSENDREADY, "CONNECT", MA_CONNECT,
  71:src/modem.c   **** 		"NO CARRIER", MA_NOCARRIER, "ERROR", MA_ERROR, "READY", MA_READY };
  72:src/modem.c   **** 
  73:src/modem.c   **** bool IsLiteral(char ch) {
 236              		.loc 1 73 25
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 8
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 0000 80B4     		push	{r7}
 242              	.LCFI0:
 243              		.cfi_def_cfa_offset 4
 244              		.cfi_offset 7, -4
 245 0002 83B0     		sub	sp, sp, #12
 246              	.LCFI1:
 247              		.cfi_def_cfa_offset 16
 248 0004 00AF     		add	r7, sp, #0
 249              	.LCFI2:
 250              		.cfi_def_cfa_register 7
 251 0006 0346     		mov	r3, r0
 252 0008 FB71     		strb	r3, [r7, #7]
  74:src/modem.c   **** 	if ((ch >= ' ') && (ch <= '~')) {
 253              		.loc 1 74 5
 254 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 255 000c 1F2B     		cmp	r3, #31
 256 000e 04D9     		bls	.L2
 257              		.loc 1 74 18 discriminator 1
 258 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 259 0012 7E2B     		cmp	r3, #126
 260 0014 01D8     		bhi	.L2
  75:src/modem.c   **** 		return true;
 261              		.loc 1 75 10
 262 0016 0123     		movs	r3, #1
 263 0018 00E0     		b	.L3
 264              	.L2:
  76:src/modem.c   **** 	}
  77:src/modem.c   **** 	return false;
 265              		.loc 1 77 9
 266 001a 0023     		movs	r3, #0
 267              	.L3:
  78:src/modem.c   **** }
 268              		.loc 1 78 1
 269 001c 1846     		mov	r0, r3
 270 001e 0C37     		adds	r7, r7, #12
 271              	.LCFI3:
 272              		.cfi_def_cfa_offset 4
 273 0020 BD46     		mov	sp, r7
 274              	.LCFI4:
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 0022 80BC     		pop	{r7}
 278              	.LCFI5:
 279              		.cfi_restore 7
 280              		.cfi_def_cfa_offset 0
 281 0024 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE30:
 285              		.section	.text.InitSioBuf,"ax",%progbits
 286              		.align	1
 287              		.global	InitSioBuf
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 292              	InitSioBuf:
 293              	.LFB31:
  79:src/modem.c   **** 
  80:src/modem.c   **** void InitSioBuf() {
 294              		.loc 1 80 19
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299 0000 80B4     		push	{r7}
 300              	.LCFI6:
 301              		.cfi_def_cfa_offset 4
 302              		.cfi_offset 7, -4
 303 0002 00AF     		add	r7, sp, #0
 304              	.LCFI7:
 305              		.cfi_def_cfa_register 7
  81:src/modem.c   **** 	bufpoint = 0;
 306              		.loc 1 81 11
 307 0004 044B     		ldr	r3, .L5
 308 0006 0022     		movs	r2, #0
 309 0008 1A60     		str	r2, [r3]
  82:src/modem.c   **** 	bufsize = 0;
 310              		.loc 1 82 10
 311 000a 044B     		ldr	r3, .L5+4
 312 000c 0022     		movs	r2, #0
 313 000e 1A80     		strh	r2, [r3]	@ movhi
  83:src/modem.c   **** }
 314              		.loc 1 83 1
 315 0010 00BF     		nop
 316 0012 BD46     		mov	sp, r7
 317              	.LCFI8:
 318              		.cfi_def_cfa_register 13
 319              		@ sp needed
 320 0014 80BC     		pop	{r7}
 321              	.LCFI9:
 322              		.cfi_restore 7
 323              		.cfi_def_cfa_offset 0
 324 0016 7047     		bx	lr
 325              	.L6:
 326              		.align	2
 327              	.L5:
 328 0018 00000000 		.word	bufpoint
 329 001c 00000000 		.word	bufsize
 330              		.cfi_endproc
 331              	.LFE31:
 333              		.section	.text.PopFromBuf,"ax",%progbits
 334              		.align	1
 335              		.global	PopFromBuf
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 340              	PopFromBuf:
 341              	.LFB32:
  84:src/modem.c   **** 
  85:src/modem.c   **** bool PopFromBuf(char *ch) {
 342              		.loc 1 85 27
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 8
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347 0000 80B4     		push	{r7}
 348              	.LCFI10:
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 0002 83B0     		sub	sp, sp, #12
 352              	.LCFI11:
 353              		.cfi_def_cfa_offset 16
 354 0004 00AF     		add	r7, sp, #0
 355              	.LCFI12:
 356              		.cfi_def_cfa_register 7
 357 0006 7860     		str	r0, [r7, #4]
  86:src/modem.c   **** 	if (bufpoint >= bufsize) {
 358              		.loc 1 86 15
 359 0008 0D4B     		ldr	r3, .L10
 360 000a 1B88     		ldrh	r3, [r3]	@ movhi
 361 000c 9BB2     		uxth	r3, r3
 362 000e 1A46     		mov	r2, r3
 363 0010 0C4B     		ldr	r3, .L10+4
 364 0012 1B68     		ldr	r3, [r3]
 365              		.loc 1 86 5
 366 0014 9A42     		cmp	r2, r3
 367 0016 01DC     		bgt	.L8
  87:src/modem.c   **** 		return false;
 368              		.loc 1 87 10
 369 0018 0023     		movs	r3, #0
 370 001a 0BE0     		b	.L9
 371              	.L8:
  88:src/modem.c   **** 	}
  89:src/modem.c   **** 	*ch = sio_buf[bufpoint];
 372              		.loc 1 89 15
 373 001c 094B     		ldr	r3, .L10+4
 374 001e 1B68     		ldr	r3, [r3]
 375 0020 094A     		ldr	r2, .L10+8
 376 0022 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 377              		.loc 1 89 6
 378 0024 7B68     		ldr	r3, [r7, #4]
 379 0026 1A70     		strb	r2, [r3]
  90:src/modem.c   **** 	bufpoint++;
 380              		.loc 1 90 10
 381 0028 064B     		ldr	r3, .L10+4
 382 002a 1B68     		ldr	r3, [r3]
 383 002c 0133     		adds	r3, r3, #1
 384 002e 054A     		ldr	r2, .L10+4
 385 0030 1360     		str	r3, [r2]
  91:src/modem.c   **** 	return true;
 386              		.loc 1 91 9
 387 0032 0123     		movs	r3, #1
 388              	.L9:
  92:src/modem.c   **** }
 389              		.loc 1 92 1
 390 0034 1846     		mov	r0, r3
 391 0036 0C37     		adds	r7, r7, #12
 392              	.LCFI13:
 393              		.cfi_def_cfa_offset 4
 394 0038 BD46     		mov	sp, r7
 395              	.LCFI14:
 396              		.cfi_def_cfa_register 13
 397              		@ sp needed
 398 003a 80BC     		pop	{r7}
 399              	.LCFI15:
 400              		.cfi_restore 7
 401              		.cfi_def_cfa_offset 0
 402 003c 7047     		bx	lr
 403              	.L11:
 404 003e 00BF     		.align	2
 405              	.L10:
 406 0040 00000000 		.word	bufsize
 407 0044 00000000 		.word	bufpoint
 408 0048 00000000 		.word	sio_buf
 409              		.cfi_endproc
 410              	.LFE32:
 412              		.section	.text.FillBufEx,"ax",%progbits
 413              		.align	1
 414              		.global	FillBufEx
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 419              	FillBufEx:
 420              	.LFB33:
  93:src/modem.c   **** 
  94:src/modem.c   **** void FillBufEx(char *abuf, int16_t *aSize) {
 421              		.loc 1 94 44
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 24
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425 0000 80B5     		push	{r7, lr}
 426              	.LCFI16:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 86B0     		sub	sp, sp, #24
 431              	.LCFI17:
 432              		.cfi_def_cfa_offset 32
 433 0004 00AF     		add	r7, sp, #0
 434              	.LCFI18:
 435              		.cfi_def_cfa_register 7
 436 0006 7860     		str	r0, [r7, #4]
 437 0008 3960     		str	r1, [r7]
  95:src/modem.c   **** 	InitSioBuf();
 438              		.loc 1 95 2
 439 000a 224B     		ldr	r3, .L20
 440 000c 9847     		blx	r3
 441              	.LVL0:
  96:src/modem.c   **** 	uint16_t time = 4000;
 442              		.loc 1 96 11
 443 000e 4FF47A63 		mov	r3, #4000
 444 0012 FB81     		strh	r3, [r7, #14]	@ movhi
  97:src/modem.c   **** 	uint16_t counter = 0;
 445              		.loc 1 97 11
 446 0014 0023     		movs	r3, #0
 447 0016 FB82     		strh	r3, [r7, #22]	@ movhi
  98:src/modem.c   **** 
  99:src/modem.c   **** 	while (ReceivedMsg.flag == false && counter < time) {
 448              		.loc 1 99 8
 449 0018 05E0     		b	.L13
 450              	.L15:
 100:src/modem.c   **** 		counter++;
 451              		.loc 1 100 10
 452 001a FB8A     		ldrh	r3, [r7, #22]
 453 001c 0133     		adds	r3, r3, #1
 454 001e FB82     		strh	r3, [r7, #22]	@ movhi
 101:src/modem.c   **** 		vTaskDelay(1);
 455              		.loc 1 101 3
 456 0020 0120     		movs	r0, #1
 457 0022 1D4B     		ldr	r3, .L20+4
 458 0024 9847     		blx	r3
 459              	.LVL1:
 460              	.L13:
  99:src/modem.c   **** 		counter++;
 461              		.loc 1 99 20
 462 0026 1D4B     		ldr	r3, .L20+8
 463 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  99:src/modem.c   **** 		counter++;
 464              		.loc 1 99 26
 465 002a 83F00103 		eor	r3, r3, #1
 466 002e DBB2     		uxtb	r3, r3
  99:src/modem.c   **** 		counter++;
 467              		.loc 1 99 8
 468 0030 002B     		cmp	r3, #0
 469 0032 03D0     		beq	.L14
  99:src/modem.c   **** 		counter++;
 470              		.loc 1 99 35 discriminator 1
 471 0034 FA8A     		ldrh	r2, [r7, #22]
 472 0036 FB89     		ldrh	r3, [r7, #14]
 473 0038 9A42     		cmp	r2, r3
 474 003a EED3     		bcc	.L15
 475              	.L14:
 102:src/modem.c   **** 	}
 103:src/modem.c   **** 
 104:src/modem.c   **** 	if (ReceivedMsg.flag == true) {
 476              		.loc 1 104 17
 477 003c 174B     		ldr	r3, .L20+8
 478 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 479              		.loc 1 104 5
 480 0040 002B     		cmp	r3, #0
 481 0042 22D0     		beq	.L19
 482              	.LBB2:
 105:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 483              		.loc 1 105 12
 484 0044 0023     		movs	r3, #0
 485 0046 3B61     		str	r3, [r7, #16]
 486              		.loc 1 105 3
 487 0048 0BE0     		b	.L17
 488              	.L18:
 106:src/modem.c   **** 			abuf[i] = ReceivedMsg.buffer[i];
 489              		.loc 1 106 8 discriminator 3
 490 004a 3B69     		ldr	r3, [r7, #16]
 491 004c 7A68     		ldr	r2, [r7, #4]
 492 004e 1344     		add	r3, r3, r2
 493              		.loc 1 106 32 discriminator 3
 494 0050 1249     		ldr	r1, .L20+8
 495 0052 3A69     		ldr	r2, [r7, #16]
 496 0054 0A44     		add	r2, r2, r1
 497 0056 0232     		adds	r2, r2, #2
 498 0058 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 499              		.loc 1 106 12 discriminator 3
 500 005a 1A70     		strb	r2, [r3]
 105:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 501              		.loc 1 105 42 discriminator 3
 502 005c 3B69     		ldr	r3, [r7, #16]
 503 005e 0133     		adds	r3, r3, #1
 504 0060 3B61     		str	r3, [r7, #16]
 505              	.L17:
 105:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 506              		.loc 1 105 34 discriminator 1
 507 0062 0E4B     		ldr	r3, .L20+8
 508 0064 B3F80232 		ldrh	r3, [r3, #514]
 509 0068 1A46     		mov	r2, r3
 105:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 510              		.loc 1 105 3 discriminator 1
 511 006a 3B69     		ldr	r3, [r7, #16]
 512 006c 9342     		cmp	r3, r2
 513 006e ECDB     		blt	.L18
 514              	.LBE2:
 107:src/modem.c   **** 		}
 108:src/modem.c   **** 		*aSize = ReceivedMsg.size;
 515              		.loc 1 108 23
 516 0070 0A4B     		ldr	r3, .L20+8
 517 0072 B3F80232 		ldrh	r3, [r3, #514]
 518 0076 1AB2     		sxth	r2, r3
 519              		.loc 1 108 10
 520 0078 3B68     		ldr	r3, [r7]
 521 007a 1A80     		strh	r2, [r3]	@ movhi
 109:src/modem.c   **** 		ReceivedMsg.flag = false;
 522              		.loc 1 109 20
 523 007c 074B     		ldr	r3, .L20+8
 524 007e 0022     		movs	r2, #0
 525 0080 1A70     		strb	r2, [r3]
 110:src/modem.c   **** 		ReceivedMsg.size = 0;
 526              		.loc 1 110 20
 527 0082 064B     		ldr	r3, .L20+8
 528 0084 0022     		movs	r2, #0
 529 0086 A3F80222 		strh	r2, [r3, #514]	@ movhi
 530              	.L19:
 111:src/modem.c   **** 		//TIM_Cmd(TIM5, ENABLE);
 112:src/modem.c   **** 	}
 113:src/modem.c   **** 	//vTaskDelay(1000);
 114:src/modem.c   **** 	//bufsize = uart2Read(sio_buf,256);
 115:src/modem.c   **** 
 116:src/modem.c   **** }
 531              		.loc 1 116 1
 532 008a 00BF     		nop
 533 008c 1837     		adds	r7, r7, #24
 534              	.LCFI19:
 535              		.cfi_def_cfa_offset 8
 536 008e BD46     		mov	sp, r7
 537              	.LCFI20:
 538              		.cfi_def_cfa_register 13
 539              		@ sp needed
 540 0090 80BD     		pop	{r7, pc}
 541              	.L21:
 542 0092 00BF     		.align	2
 543              	.L20:
 544 0094 00000000 		.word	InitSioBuf
 545 0098 00000000 		.word	vTaskDelay
 546 009c 00000000 		.word	ReceivedMsg
 547              		.cfi_endproc
 548              	.LFE33:
 550              		.section	.text.FillBuf,"ax",%progbits
 551              		.align	1
 552              		.global	FillBuf
 553              		.syntax unified
 554              		.thumb
 555              		.thumb_func
 557              	FillBuf:
 558              	.LFB34:
 117:src/modem.c   **** 
 118:src/modem.c   **** void FillBuf() {
 559              		.loc 1 118 16
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 16
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0000 80B5     		push	{r7, lr}
 564              	.LCFI21:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 568 0002 84B0     		sub	sp, sp, #16
 569              	.LCFI22:
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              	.LCFI23:
 573              		.cfi_def_cfa_register 7
 119:src/modem.c   **** 	InitSioBuf();
 574              		.loc 1 119 2
 575 0006 224B     		ldr	r3, .L30
 576 0008 9847     		blx	r3
 577              	.LVL2:
 120:src/modem.c   **** 	uint16_t time = 1500;
 578              		.loc 1 120 11
 579 000a 40F2DC53 		movw	r3, #1500
 580 000e FB80     		strh	r3, [r7, #6]	@ movhi
 121:src/modem.c   **** 	uint16_t counter = 0;
 581              		.loc 1 121 11
 582 0010 0023     		movs	r3, #0
 583 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 122:src/modem.c   **** 
 123:src/modem.c   **** 	while (ReceivedMsg.flag == false && counter < time) {
 584              		.loc 1 123 8
 585 0014 05E0     		b	.L23
 586              	.L25:
 124:src/modem.c   **** 		counter++;
 587              		.loc 1 124 10
 588 0016 FB89     		ldrh	r3, [r7, #14]
 589 0018 0133     		adds	r3, r3, #1
 590 001a FB81     		strh	r3, [r7, #14]	@ movhi
 125:src/modem.c   **** 		vTaskDelay(1);
 591              		.loc 1 125 3
 592 001c 0120     		movs	r0, #1
 593 001e 1D4B     		ldr	r3, .L30+4
 594 0020 9847     		blx	r3
 595              	.LVL3:
 596              	.L23:
 123:src/modem.c   **** 		counter++;
 597              		.loc 1 123 20
 598 0022 1D4B     		ldr	r3, .L30+8
 599 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 123:src/modem.c   **** 		counter++;
 600              		.loc 1 123 26
 601 0026 83F00103 		eor	r3, r3, #1
 602 002a DBB2     		uxtb	r3, r3
 123:src/modem.c   **** 		counter++;
 603              		.loc 1 123 8
 604 002c 002B     		cmp	r3, #0
 605 002e 03D0     		beq	.L24
 123:src/modem.c   **** 		counter++;
 606              		.loc 1 123 35 discriminator 1
 607 0030 FA89     		ldrh	r2, [r7, #14]
 608 0032 FB88     		ldrh	r3, [r7, #6]
 609 0034 9A42     		cmp	r2, r3
 610 0036 EED3     		bcc	.L25
 611              	.L24:
 126:src/modem.c   **** 	}
 127:src/modem.c   **** 
 128:src/modem.c   **** 	if (ReceivedMsg.flag == true) {
 612              		.loc 1 128 17
 613 0038 174B     		ldr	r3, .L30+8
 614 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 615              		.loc 1 128 5
 616 003c 002B     		cmp	r3, #0
 617 003e 22D0     		beq	.L29
 618              	.LBB3:
 129:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 619              		.loc 1 129 12
 620 0040 0023     		movs	r3, #0
 621 0042 BB60     		str	r3, [r7, #8]
 622              		.loc 1 129 3
 623 0044 0CE0     		b	.L27
 624              	.L28:
 130:src/modem.c   **** 			sio_buf[i] = ReceivedMsg.buffer[i];
 625              		.loc 1 130 35 discriminator 3
 626 0046 144A     		ldr	r2, .L30+8
 627 0048 BB68     		ldr	r3, [r7, #8]
 628 004a 1344     		add	r3, r3, r2
 629 004c 0233     		adds	r3, r3, #2
 630 004e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 631              		.loc 1 130 15 discriminator 3
 632 0050 124A     		ldr	r2, .L30+12
 633 0052 BB68     		ldr	r3, [r7, #8]
 634 0054 1344     		add	r3, r3, r2
 635 0056 0A46     		mov	r2, r1
 636 0058 1A70     		strb	r2, [r3]
 129:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 637              		.loc 1 129 42 discriminator 3
 638 005a BB68     		ldr	r3, [r7, #8]
 639 005c 0133     		adds	r3, r3, #1
 640 005e BB60     		str	r3, [r7, #8]
 641              	.L27:
 129:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 642              		.loc 1 129 34 discriminator 1
 643 0060 0D4B     		ldr	r3, .L30+8
 644 0062 B3F80232 		ldrh	r3, [r3, #514]
 645 0066 1A46     		mov	r2, r3
 129:src/modem.c   **** 		for (int i = 0; i < ReceivedMsg.size; i++) {
 646              		.loc 1 129 3 discriminator 1
 647 0068 BB68     		ldr	r3, [r7, #8]
 648 006a 9342     		cmp	r3, r2
 649 006c EBDB     		blt	.L28
 650              	.LBE3:
 131:src/modem.c   **** 		}
 132:src/modem.c   **** 		bufsize = ReceivedMsg.size;
 651              		.loc 1 132 24
 652 006e 0A4B     		ldr	r3, .L30+8
 653 0070 B3F80222 		ldrh	r2, [r3, #514]
 654              		.loc 1 132 11
 655 0074 0A4B     		ldr	r3, .L30+16
 656 0076 1A80     		strh	r2, [r3]	@ movhi
 133:src/modem.c   **** 		ReceivedMsg.size = 0;
 657              		.loc 1 133 20
 658 0078 074B     		ldr	r3, .L30+8
 659 007a 0022     		movs	r2, #0
 660 007c A3F80222 		strh	r2, [r3, #514]	@ movhi
 134:src/modem.c   **** 		ReceivedMsg.flag = false;
 661              		.loc 1 134 20
 662 0080 054B     		ldr	r3, .L30+8
 663 0082 0022     		movs	r2, #0
 664 0084 1A70     		strb	r2, [r3]
 665              	.L29:
 135:src/modem.c   **** 		//TIM_Cmd(TIM5, ENABLE);
 136:src/modem.c   **** 	}
 137:src/modem.c   **** 	//vTaskDelay(1000);
 138:src/modem.c   **** 	//bufsize = uart2Read(sio_buf,256);
 139:src/modem.c   **** 
 140:src/modem.c   **** }
 666              		.loc 1 140 1
 667 0086 00BF     		nop
 668 0088 1037     		adds	r7, r7, #16
 669              	.LCFI24:
 670              		.cfi_def_cfa_offset 8
 671 008a BD46     		mov	sp, r7
 672              	.LCFI25:
 673              		.cfi_def_cfa_register 13
 674              		@ sp needed
 675 008c 80BD     		pop	{r7, pc}
 676              	.L31:
 677 008e 00BF     		.align	2
 678              	.L30:
 679 0090 00000000 		.word	InitSioBuf
 680 0094 00000000 		.word	vTaskDelay
 681 0098 00000000 		.word	ReceivedMsg
 682 009c 00000000 		.word	sio_buf
 683 00a0 00000000 		.word	bufsize
 684              		.cfi_endproc
 685              	.LFE34:
 687              		.section	.text.ReadString,"ax",%progbits
 688              		.align	1
 689              		.global	ReadString
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 694              	ReadString:
 695              	.LFB35:
 141:src/modem.c   **** 
 142:src/modem.c   **** bool ReadString(char *str, int size) {
 696              		.loc 1 142 38
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 16
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700 0000 80B5     		push	{r7, lr}
 701              	.LCFI26:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0002 84B0     		sub	sp, sp, #16
 706              	.LCFI27:
 707              		.cfi_def_cfa_offset 24
 708 0004 00AF     		add	r7, sp, #0
 709              	.LCFI28:
 710              		.cfi_def_cfa_register 7
 711 0006 7860     		str	r0, [r7, #4]
 712 0008 3960     		str	r1, [r7]
 143:src/modem.c   **** 	char ch;
 144:src/modem.c   **** 	if (bufpoint >= bufsize) {
 713              		.loc 1 144 15
 714 000a 204B     		ldr	r3, .L42
 715 000c 1B88     		ldrh	r3, [r3]	@ movhi
 716 000e 9BB2     		uxth	r3, r3
 717 0010 1A46     		mov	r2, r3
 718 0012 1F4B     		ldr	r3, .L42+4
 719 0014 1B68     		ldr	r3, [r3]
 720              		.loc 1 144 5
 721 0016 9A42     		cmp	r2, r3
 722 0018 01DC     		bgt	.L36
 145:src/modem.c   **** 		FillBuf();
 723              		.loc 1 145 3
 724 001a 1E4B     		ldr	r3, .L42+8
 725 001c 9847     		blx	r3
 726              	.LVL4:
 727              	.L36:
 146:src/modem.c   **** 	}
 147:src/modem.c   **** 	do // remove non symbolic data
 148:src/modem.c   **** 	{
 149:src/modem.c   **** 		if (PopFromBuf(&ch) == false) {
 728              		.loc 1 149 7
 729 001e 07F10F03 		add	r3, r7, #15
 730 0022 1846     		mov	r0, r3
 731 0024 1C4B     		ldr	r3, .L42+12
 732 0026 9847     		blx	r3
 733              	.LVL5:
 734 0028 0346     		mov	r3, r0
 735              		.loc 1 149 23
 736 002a 83F00103 		eor	r3, r3, #1
 737 002e DBB2     		uxtb	r3, r3
 738              		.loc 1 149 6
 739 0030 002B     		cmp	r3, #0
 740 0032 01D0     		beq	.L34
 150:src/modem.c   **** 			return false;
 741              		.loc 1 150 11
 742 0034 0023     		movs	r3, #0
 743 0036 25E0     		b	.L40
 744              	.L34:
 151:src/modem.c   **** 		}
 152:src/modem.c   **** 	} while (!IsLiteral(ch));
 745              		.loc 1 152 12
 746 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 747 003a 1846     		mov	r0, r3
 748 003c 174B     		ldr	r3, .L42+16
 749 003e 9847     		blx	r3
 750              	.LVL6:
 751 0040 0346     		mov	r3, r0
 752              		.loc 1 152 11
 753 0042 83F00103 		eor	r3, r3, #1
 754 0046 DBB2     		uxtb	r3, r3
 755              		.loc 1 152 2
 756 0048 002B     		cmp	r3, #0
 757 004a E8D1     		bne	.L36
 758              	.L39:
 153:src/modem.c   **** 	do {
 154:src/modem.c   **** 		if (IsLiteral(ch)) {
 759              		.loc 1 154 7
 760 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 761 004e 1846     		mov	r0, r3
 762 0050 124B     		ldr	r3, .L42+16
 763 0052 9847     		blx	r3
 764              	.LVL7:
 765 0054 0346     		mov	r3, r0
 766              		.loc 1 154 6
 767 0056 002B     		cmp	r3, #0
 768 0058 06D0     		beq	.L37
 155:src/modem.c   **** 			*str = ch;
 769              		.loc 1 155 9
 770 005a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 771 005c 7B68     		ldr	r3, [r7, #4]
 772 005e 1A70     		strb	r2, [r3]
 156:src/modem.c   **** 			str++;
 773              		.loc 1 156 7
 774 0060 7B68     		ldr	r3, [r7, #4]
 775 0062 0133     		adds	r3, r3, #1
 776 0064 7B60     		str	r3, [r7, #4]
 777 0066 04E0     		b	.L41
 778              	.L37:
 157:src/modem.c   **** 		} else // packet end
 158:src/modem.c   **** 		{
 159:src/modem.c   **** 			*str = 0; //  add end of string
 779              		.loc 1 159 9
 780 0068 7B68     		ldr	r3, [r7, #4]
 781 006a 0022     		movs	r2, #0
 782 006c 1A70     		strb	r2, [r3]
 160:src/modem.c   **** 			return true;
 783              		.loc 1 160 11
 784 006e 0123     		movs	r3, #1
 785 0070 08E0     		b	.L40
 786              	.L41:
 161:src/modem.c   **** 		}
 162:src/modem.c   **** 	} while (PopFromBuf(&ch) == true);
 787              		.loc 1 162 11
 788 0072 07F10F03 		add	r3, r7, #15
 789 0076 1846     		mov	r0, r3
 790 0078 074B     		ldr	r3, .L42+12
 791 007a 9847     		blx	r3
 792              	.LVL8:
 793 007c 0346     		mov	r3, r0
 794              		.loc 1 162 2
 795 007e 002B     		cmp	r3, #0
 796 0080 E4D1     		bne	.L39
 163:src/modem.c   **** 	return false;
 797              		.loc 1 163 9
 798 0082 0023     		movs	r3, #0
 799              	.L40:
 164:src/modem.c   **** }
 800              		.loc 1 164 1 discriminator 1
 801 0084 1846     		mov	r0, r3
 802 0086 1037     		adds	r7, r7, #16
 803              	.LCFI29:
 804              		.cfi_def_cfa_offset 8
 805 0088 BD46     		mov	sp, r7
 806              	.LCFI30:
 807              		.cfi_def_cfa_register 13
 808              		@ sp needed
 809 008a 80BD     		pop	{r7, pc}
 810              	.L43:
 811              		.align	2
 812              	.L42:
 813 008c 00000000 		.word	bufsize
 814 0090 00000000 		.word	bufpoint
 815 0094 00000000 		.word	FillBuf
 816 0098 00000000 		.word	PopFromBuf
 817 009c 00000000 		.word	IsLiteral
 818              		.cfi_endproc
 819              	.LFE35:
 821              		.section	.text.GetModemAnswer,"ax",%progbits
 822              		.align	1
 823              		.global	GetModemAnswer
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 828              	GetModemAnswer:
 829              	.LFB36:
 165:src/modem.c   **** 
 166:src/modem.c   **** MDEM_ANSWER GetModemAnswer(char *s) {
 830              		.loc 1 166 37
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 16
 833              		@ frame_needed = 1, uses_anonymous_args = 0
 834 0000 80B5     		push	{r7, lr}
 835              	.LCFI31:
 836              		.cfi_def_cfa_offset 8
 837              		.cfi_offset 7, -8
 838              		.cfi_offset 14, -4
 839 0002 84B0     		sub	sp, sp, #16
 840              	.LCFI32:
 841              		.cfi_def_cfa_offset 24
 842 0004 00AF     		add	r7, sp, #0
 843              	.LCFI33:
 844              		.cfi_def_cfa_register 7
 845 0006 7860     		str	r0, [r7, #4]
 167:src/modem.c   **** 	int i;
 168:src/modem.c   **** 	if (*s == 0) {
 846              		.loc 1 168 6
 847 0008 7B68     		ldr	r3, [r7, #4]
 848 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 849              		.loc 1 168 5
 850 000c 002B     		cmp	r3, #0
 851 000e 01D1     		bne	.L45
 169:src/modem.c   **** 		return MA_UNKNOWN;
 852              		.loc 1 169 10
 853 0010 0023     		movs	r3, #0
 854 0012 1AE0     		b	.L46
 855              	.L45:
 170:src/modem.c   **** 	}
 171:src/modem.c   **** 	for (i = 0; i < AT_AMOUNT; i++) {
 856              		.loc 1 171 9
 857 0014 0023     		movs	r3, #0
 858 0016 FB60     		str	r3, [r7, #12]
 859              		.loc 1 171 2
 860 0018 13E0     		b	.L47
 861              	.L49:
 172:src/modem.c   **** 		if (strcmp(atset[i].str, s) == 0) {
 862              		.loc 1 172 22
 863 001a 0E4A     		ldr	r2, .L50
 864 001c FB68     		ldr	r3, [r7, #12]
 865 001e 52F83330 		ldr	r3, [r2, r3, lsl #3]
 866              		.loc 1 172 7
 867 0022 7968     		ldr	r1, [r7, #4]
 868 0024 1846     		mov	r0, r3
 869 0026 0C4B     		ldr	r3, .L50+4
 870 0028 9847     		blx	r3
 871              	.LVL9:
 872 002a 0346     		mov	r3, r0
 873              		.loc 1 172 6
 874 002c 002B     		cmp	r3, #0
 875 002e 05D1     		bne	.L48
 173:src/modem.c   **** 			return (atset[i].ma);
 876              		.loc 1 173 20
 877 0030 084A     		ldr	r2, .L50
 878 0032 FB68     		ldr	r3, [r7, #12]
 879 0034 DB00     		lsls	r3, r3, #3
 880 0036 1344     		add	r3, r3, r2
 881 0038 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 882 003a 06E0     		b	.L46
 883              	.L48:
 171:src/modem.c   **** 		if (strcmp(atset[i].str, s) == 0) {
 884              		.loc 1 171 30 discriminator 2
 885 003c FB68     		ldr	r3, [r7, #12]
 886 003e 0133     		adds	r3, r3, #1
 887 0040 FB60     		str	r3, [r7, #12]
 888              	.L47:
 171:src/modem.c   **** 		if (strcmp(atset[i].str, s) == 0) {
 889              		.loc 1 171 2 discriminator 1
 890 0042 FB68     		ldr	r3, [r7, #12]
 891 0044 0B2B     		cmp	r3, #11
 892 0046 E8DD     		ble	.L49
 174:src/modem.c   **** 		}
 175:src/modem.c   **** 	}
 176:src/modem.c   **** 	return MA_UNKNOWN;
 893              		.loc 1 176 9
 894 0048 0023     		movs	r3, #0
 895              	.L46:
 177:src/modem.c   **** }
 896              		.loc 1 177 1
 897 004a 1846     		mov	r0, r3
 898 004c 1037     		adds	r7, r7, #16
 899              	.LCFI34:
 900              		.cfi_def_cfa_offset 8
 901 004e BD46     		mov	sp, r7
 902              	.LCFI35:
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 0050 80BD     		pop	{r7, pc}
 906              	.L51:
 907 0052 00BF     		.align	2
 908              	.L50:
 909 0054 00000000 		.word	atset
 910 0058 00000000 		.word	strcmp
 911              		.cfi_endproc
 912              	.LFE36:
 914              		.section	.text.ReadModem,"ax",%progbits
 915              		.align	1
 916              		.global	ReadModem
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 921              	ReadModem:
 922              	.LFB37:
 178:src/modem.c   **** 
 179:src/modem.c   **** MDEM_ANSWER ReadModem() {
 923              		.loc 1 179 25
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 1, uses_anonymous_args = 0
 927 0000 80B5     		push	{r7, lr}
 928              	.LCFI36:
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 7, -8
 931              		.cfi_offset 14, -4
 932 0002 00AF     		add	r7, sp, #0
 933              	.LCFI37:
 934              		.cfi_def_cfa_register 7
 180:src/modem.c   **** 	if (ReadString(strbuf, STRBUFLEN) == false) {
 935              		.loc 1 180 6
 936 0004 4FF48071 		mov	r1, #256
 937 0008 0848     		ldr	r0, .L55
 938 000a 094B     		ldr	r3, .L55+4
 939 000c 9847     		blx	r3
 940              	.LVL10:
 941 000e 0346     		mov	r3, r0
 942              		.loc 1 180 36
 943 0010 83F00103 		eor	r3, r3, #1
 944 0014 DBB2     		uxtb	r3, r3
 945              		.loc 1 180 5
 946 0016 002B     		cmp	r3, #0
 947 0018 01D0     		beq	.L53
 181:src/modem.c   **** 		return MA_UNKNOWN;
 948              		.loc 1 181 10
 949 001a 0023     		movs	r3, #0
 950 001c 03E0     		b	.L54
 951              	.L53:
 182:src/modem.c   **** 	}
 183:src/modem.c   **** 	return GetModemAnswer((char*) strbuf);
 952              		.loc 1 183 9
 953 001e 0348     		ldr	r0, .L55
 954 0020 044B     		ldr	r3, .L55+8
 955 0022 9847     		blx	r3
 956              	.LVL11:
 957 0024 0346     		mov	r3, r0
 958              	.L54:
 184:src/modem.c   **** }
 959              		.loc 1 184 1
 960 0026 1846     		mov	r0, r3
 961 0028 80BD     		pop	{r7, pc}
 962              	.L56:
 963 002a 00BF     		.align	2
 964              	.L55:
 965 002c 00000000 		.word	strbuf
 966 0030 00000000 		.word	ReadString
 967 0034 00000000 		.word	GetModemAnswer
 968              		.cfi_endproc
 969              	.LFE37:
 971              		.section	.text.ModemWrite,"ax",%progbits
 972              		.align	1
 973              		.global	ModemWrite
 974              		.syntax unified
 975              		.thumb
 976              		.thumb_func
 978              	ModemWrite:
 979              	.LFB38:
 185:src/modem.c   **** /* ----------------------- Start implementation -----------------------------*/
 186:src/modem.c   **** void ModemWrite(char *str) {
 980              		.loc 1 186 28
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 16
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984 0000 80B5     		push	{r7, lr}
 985              	.LCFI38:
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 84B0     		sub	sp, sp, #16
 990              	.LCFI39:
 991              		.cfi_def_cfa_offset 24
 992 0004 00AF     		add	r7, sp, #0
 993              	.LCFI40:
 994              		.cfi_def_cfa_register 7
 995 0006 7860     		str	r0, [r7, #4]
 187:src/modem.c   **** 
 188:src/modem.c   **** 	uint32 i = 0;
 996              		.loc 1 188 9
 997 0008 0023     		movs	r3, #0
 998 000a FB60     		str	r3, [r7, #12]
 189:src/modem.c   **** 	char *tmpstr = str;
 999              		.loc 1 189 8
 1000 000c 7B68     		ldr	r3, [r7, #4]
 1001 000e BB60     		str	r3, [r7, #8]
 190:src/modem.c   **** 	while (*str) {
 1002              		.loc 1 190 8
 1003 0010 08E0     		b	.L58
 1004              	.L60:
 191:src/modem.c   **** 		str++;
 1005              		.loc 1 191 6
 1006 0012 7B68     		ldr	r3, [r7, #4]
 1007 0014 0133     		adds	r3, r3, #1
 1008 0016 7B60     		str	r3, [r7, #4]
 192:src/modem.c   **** 		i++;
 1009              		.loc 1 192 4
 1010 0018 FB68     		ldr	r3, [r7, #12]
 1011 001a 0133     		adds	r3, r3, #1
 1012 001c FB60     		str	r3, [r7, #12]
 193:src/modem.c   **** 		if (i == 62)
 1013              		.loc 1 193 6
 1014 001e FB68     		ldr	r3, [r7, #12]
 1015 0020 3E2B     		cmp	r3, #62
 1016 0022 04D0     		beq	.L61
 1017              	.L58:
 190:src/modem.c   **** 		str++;
 1018              		.loc 1 190 9
 1019 0024 7B68     		ldr	r3, [r7, #4]
 1020 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 190:src/modem.c   **** 		str++;
 1021              		.loc 1 190 8
 1022 0028 002B     		cmp	r3, #0
 1023 002a F2D1     		bne	.L60
 1024 002c 00E0     		b	.L59
 1025              	.L61:
 194:src/modem.c   **** 			break;
 1026              		.loc 1 194 4
 1027 002e 00BF     		nop
 1028              	.L59:
 195:src/modem.c   **** 	}
 196:src/modem.c   **** 	//AT91F_USART_SEND(MODEM_PORT, (uint8*) tmpstr, i);
 197:src/modem.c   **** 	uart2Write((uint8*) tmpstr, i);
 1029              		.loc 1 197 2
 1030 0030 F968     		ldr	r1, [r7, #12]
 1031 0032 B868     		ldr	r0, [r7, #8]
 1032 0034 024B     		ldr	r3, .L62
 1033 0036 9847     		blx	r3
 1034              	.LVL12:
 198:src/modem.c   **** }
 1035              		.loc 1 198 1
 1036 0038 00BF     		nop
 1037 003a 1037     		adds	r7, r7, #16
 1038              	.LCFI41:
 1039              		.cfi_def_cfa_offset 8
 1040 003c BD46     		mov	sp, r7
 1041              	.LCFI42:
 1042              		.cfi_def_cfa_register 13
 1043              		@ sp needed
 1044 003e 80BD     		pop	{r7, pc}
 1045              	.L63:
 1046              		.align	2
 1047              	.L62:
 1048 0040 00000000 		.word	uart2Write
 1049              		.cfi_endproc
 1050              	.LFE38:
 1052              		.section	.text.WaitAnsver,"ax",%progbits
 1053              		.align	1
 1054              		.global	WaitAnsver
 1055              		.syntax unified
 1056              		.thumb
 1057              		.thumb_func
 1059              	WaitAnsver:
 1060              	.LFB39:
 199:src/modem.c   **** bool WaitAnsver(MDEM_ANSWER ma, int i) {
 1061              		.loc 1 199 40
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 8
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065 0000 80B5     		push	{r7, lr}
 1066              	.LCFI43:
 1067              		.cfi_def_cfa_offset 8
 1068              		.cfi_offset 7, -8
 1069              		.cfi_offset 14, -4
 1070 0002 82B0     		sub	sp, sp, #8
 1071              	.LCFI44:
 1072              		.cfi_def_cfa_offset 16
 1073 0004 00AF     		add	r7, sp, #0
 1074              	.LCFI45:
 1075              		.cfi_def_cfa_register 7
 1076 0006 0346     		mov	r3, r0
 1077 0008 3960     		str	r1, [r7]
 1078 000a FB71     		strb	r3, [r7, #7]
 200:src/modem.c   **** 	//int i = 10;
 201:src/modem.c   **** 
 202:src/modem.c   **** 	while (ReadModem() != ma) {
 1079              		.loc 1 202 8
 1080 000c 07E0     		b	.L65
 1081              	.L68:
 203:src/modem.c   **** 		if (i == 0) {
 1082              		.loc 1 203 6
 1083 000e 3B68     		ldr	r3, [r7]
 1084 0010 002B     		cmp	r3, #0
 1085 0012 01D1     		bne	.L66
 204:src/modem.c   **** 			return false;
 1086              		.loc 1 204 11
 1087 0014 0023     		movs	r3, #0
 1088 0016 0AE0     		b	.L67
 1089              	.L66:
 205:src/modem.c   **** 		}
 206:src/modem.c   **** 		i--;
 1090              		.loc 1 206 4
 1091 0018 3B68     		ldr	r3, [r7]
 1092 001a 013B     		subs	r3, r3, #1
 1093 001c 3B60     		str	r3, [r7]
 1094              	.L65:
 202:src/modem.c   **** 		if (i == 0) {
 1095              		.loc 1 202 9
 1096 001e 064B     		ldr	r3, .L69
 1097 0020 9847     		blx	r3
 1098              	.LVL13:
 1099 0022 0346     		mov	r3, r0
 1100 0024 1A46     		mov	r2, r3
 202:src/modem.c   **** 		if (i == 0) {
 1101              		.loc 1 202 8
 1102 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1103 0028 9342     		cmp	r3, r2
 1104 002a F0D1     		bne	.L68
 207:src/modem.c   **** 	}
 208:src/modem.c   **** 	//	dbgmessage("Ok\n");
 209:src/modem.c   **** 	return true;
 1105              		.loc 1 209 9
 1106 002c 0123     		movs	r3, #1
 1107              	.L67:
 210:src/modem.c   **** }
 1108              		.loc 1 210 1
 1109 002e 1846     		mov	r0, r3
 1110 0030 0837     		adds	r7, r7, #8
 1111              	.LCFI46:
 1112              		.cfi_def_cfa_offset 8
 1113 0032 BD46     		mov	sp, r7
 1114              	.LCFI47:
 1115              		.cfi_def_cfa_register 13
 1116              		@ sp needed
 1117 0034 80BD     		pop	{r7, pc}
 1118              	.L70:
 1119 0036 00BF     		.align	2
 1120              	.L69:
 1121 0038 00000000 		.word	ReadModem
 1122              		.cfi_endproc
 1123              	.LFE39:
 1125              		.section	.rodata
 1126 00a7 00       		.align	2
 1127              	.LC12:
 1128 00a8 57616974 		.ascii	"Waiting for modem.\000"
 1128      696E6720 
 1128      666F7220 
 1128      6D6F6465 
 1128      6D2E00
 1129              		.section	.text.WaitCallReady,"ax",%progbits
 1130              		.align	1
 1131              		.global	WaitCallReady
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1136              	WaitCallReady:
 1137              	.LFB40:
 211:src/modem.c   **** 
 212:src/modem.c   **** bool WaitCallReady() {
 1138              		.loc 1 212 22
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 8
 1141              		@ frame_needed = 1, uses_anonymous_args = 0
 1142 0000 80B5     		push	{r7, lr}
 1143              	.LCFI48:
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 7, -8
 1146              		.cfi_offset 14, -4
 1147 0002 82B0     		sub	sp, sp, #8
 1148              	.LCFI49:
 1149              		.cfi_def_cfa_offset 16
 1150 0004 00AF     		add	r7, sp, #0
 1151              	.LCFI50:
 1152              		.cfi_def_cfa_register 7
 213:src/modem.c   **** 	int i = 0;
 1153              		.loc 1 213 6
 1154 0006 0023     		movs	r3, #0
 1155 0008 7B60     		str	r3, [r7, #4]
 214:src/modem.c   **** 	dbgmessage("Waiting for modem.");
 1156              		.loc 1 214 2
 1157 000a 0C48     		ldr	r0, .L76
 1158 000c 0C4B     		ldr	r3, .L76+4
 1159 000e 9847     		blx	r3
 1160              	.LVL14:
 215:src/modem.c   **** 	while (ReadModem() != MA_CALLREADY) {
 1161              		.loc 1 215 8
 1162 0010 0AE0     		b	.L72
 1163              	.L75:
 216:src/modem.c   **** 		vTaskDelay(200);
 1164              		.loc 1 216 3
 1165 0012 C820     		movs	r0, #200
 1166 0014 0B4B     		ldr	r3, .L76+8
 1167 0016 9847     		blx	r3
 1168              	.LVL15:
 217:src/modem.c   **** 		if (i > 7) {
 1169              		.loc 1 217 6
 1170 0018 7B68     		ldr	r3, [r7, #4]
 1171 001a 072B     		cmp	r3, #7
 1172 001c 01DD     		ble	.L73
 218:src/modem.c   **** 			return false;
 1173              		.loc 1 218 11
 1174 001e 0023     		movs	r3, #0
 1175 0020 08E0     		b	.L74
 1176              	.L73:
 219:src/modem.c   **** 		}
 220:src/modem.c   **** 		i++;
 1177              		.loc 1 220 4
 1178 0022 7B68     		ldr	r3, [r7, #4]
 1179 0024 0133     		adds	r3, r3, #1
 1180 0026 7B60     		str	r3, [r7, #4]
 1181              	.L72:
 215:src/modem.c   **** 		vTaskDelay(200);
 1182              		.loc 1 215 9
 1183 0028 074B     		ldr	r3, .L76+12
 1184 002a 9847     		blx	r3
 1185              	.LVL16:
 1186 002c 0346     		mov	r3, r0
 215:src/modem.c   **** 		vTaskDelay(200);
 1187              		.loc 1 215 8
 1188 002e 012B     		cmp	r3, #1
 1189 0030 EFD1     		bne	.L75
 221:src/modem.c   **** 	};
 222:src/modem.c   **** 	return true;
 1190              		.loc 1 222 9
 1191 0032 0123     		movs	r3, #1
 1192              	.L74:
 223:src/modem.c   **** }
 1193              		.loc 1 223 1
 1194 0034 1846     		mov	r0, r3
 1195 0036 0837     		adds	r7, r7, #8
 1196              	.LCFI51:
 1197              		.cfi_def_cfa_offset 8
 1198 0038 BD46     		mov	sp, r7
 1199              	.LCFI52:
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 003a 80BD     		pop	{r7, pc}
 1203              	.L77:
 1204              		.align	2
 1205              	.L76:
 1206 003c A8000000 		.word	.LC12
 1207 0040 00000000 		.word	dbgmessage
 1208 0044 00000000 		.word	vTaskDelay
 1209 0048 00000000 		.word	ReadModem
 1210              		.cfi_endproc
 1211              	.LFE40:
 1213              		.section	.rodata
 1214 00bb 00       		.align	2
 1215              	.LC13:
 1216 00bc 41540D0A 		.ascii	"AT\015\012\000"
 1216      00
 1217              		.section	.text.WaitOk,"ax",%progbits
 1218              		.align	1
 1219              		.global	WaitOk
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
 1224              	WaitOk:
 1225              	.LFB41:
 224:src/modem.c   **** bool WaitOk() {
 1226              		.loc 1 224 15
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230 0000 80B5     		push	{r7, lr}
 1231              	.LCFI53:
 1232              		.cfi_def_cfa_offset 8
 1233              		.cfi_offset 7, -8
 1234              		.cfi_offset 14, -4
 1235 0002 00AF     		add	r7, sp, #0
 1236              	.LCFI54:
 1237              		.cfi_def_cfa_register 7
 225:src/modem.c   **** 	vTaskDelay(100);
 1238              		.loc 1 225 2
 1239 0004 6420     		movs	r0, #100
 1240 0006 064B     		ldr	r3, .L80
 1241 0008 9847     		blx	r3
 1242              	.LVL17:
 226:src/modem.c   **** 	ModemWrite("AT\r\n");
 1243              		.loc 1 226 2
 1244 000a 0648     		ldr	r0, .L80+4
 1245 000c 064B     		ldr	r3, .L80+8
 1246 000e 9847     		blx	r3
 1247              	.LVL18:
 227:src/modem.c   **** 	return WaitAnsver(MA_OK, 30);
 1248              		.loc 1 227 9
 1249 0010 1E21     		movs	r1, #30
 1250 0012 0220     		movs	r0, #2
 1251 0014 054B     		ldr	r3, .L80+12
 1252 0016 9847     		blx	r3
 1253              	.LVL19:
 1254 0018 0346     		mov	r3, r0
 228:src/modem.c   **** }
 1255              		.loc 1 228 1
 1256 001a 1846     		mov	r0, r3
 1257 001c 80BD     		pop	{r7, pc}
 1258              	.L81:
 1259 001e 00BF     		.align	2
 1260              	.L80:
 1261 0020 00000000 		.word	vTaskDelay
 1262 0024 BC000000 		.word	.LC13
 1263 0028 00000000 		.word	ModemWrite
 1264 002c 00000000 		.word	WaitAnsver
 1265              		.cfi_endproc
 1266              	.LFE41:
 1268              		.section	.rodata
 1269 00c1 000000   		.align	2
 1270              	.LC14:
 1271 00c4 41542644 		.ascii	"AT&D0\015\012\000"
 1271      300D0A00 
 1272              		.section	.text.WaitAtd,"ax",%progbits
 1273              		.align	1
 1274              		.global	WaitAtd
 1275              		.syntax unified
 1276              		.thumb
 1277              		.thumb_func
 1279              	WaitAtd:
 1280              	.LFB42:
 229:src/modem.c   **** 
 230:src/modem.c   **** bool WaitAtd() {
 1281              		.loc 1 230 16
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285 0000 80B5     		push	{r7, lr}
 1286              	.LCFI55:
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 7, -8
 1289              		.cfi_offset 14, -4
 1290 0002 00AF     		add	r7, sp, #0
 1291              	.LCFI56:
 1292              		.cfi_def_cfa_register 7
 231:src/modem.c   **** 	vTaskDelay(100);
 1293              		.loc 1 231 2
 1294 0004 6420     		movs	r0, #100
 1295 0006 064B     		ldr	r3, .L84
 1296 0008 9847     		blx	r3
 1297              	.LVL20:
 232:src/modem.c   **** 	//ModemWrite("ATZ\r\n");
 233:src/modem.c   **** 	ModemWrite("AT&D0\r\n");  //заменить на установку скорости 115200?
 1298              		.loc 1 233 2
 1299 000a 0648     		ldr	r0, .L84+4
 1300 000c 064B     		ldr	r3, .L84+8
 1301 000e 9847     		blx	r3
 1302              	.LVL21:
 234:src/modem.c   **** 	return WaitAnsver(MA_CALLREADY, 10);
 1303              		.loc 1 234 9
 1304 0010 0A21     		movs	r1, #10
 1305 0012 0120     		movs	r0, #1
 1306 0014 054B     		ldr	r3, .L84+12
 1307 0016 9847     		blx	r3
 1308              	.LVL22:
 1309 0018 0346     		mov	r3, r0
 235:src/modem.c   **** 	//return WaitAnsver(MA_OK, 30);
 236:src/modem.c   **** }
 1310              		.loc 1 236 1
 1311 001a 1846     		mov	r0, r3
 1312 001c 80BD     		pop	{r7, pc}
 1313              	.L85:
 1314 001e 00BF     		.align	2
 1315              	.L84:
 1316 0020 00000000 		.word	vTaskDelay
 1317 0024 C4000000 		.word	.LC14
 1318 0028 00000000 		.word	ModemWrite
 1319 002c 00000000 		.word	WaitAnsver
 1320              		.cfi_endproc
 1321              	.LFE42:
 1323              		.section	.text.WaitAtd1,"ax",%progbits
 1324              		.align	1
 1325              		.global	WaitAtd1
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1330              	WaitAtd1:
 1331              	.LFB43:
 237:src/modem.c   **** bool WaitAtd1() {
 1332              		.loc 1 237 17
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336 0000 80B5     		push	{r7, lr}
 1337              	.LCFI57:
 1338              		.cfi_def_cfa_offset 8
 1339              		.cfi_offset 7, -8
 1340              		.cfi_offset 14, -4
 1341 0002 00AF     		add	r7, sp, #0
 1342              	.LCFI58:
 1343              		.cfi_def_cfa_register 7
 238:src/modem.c   **** 	vTaskDelay(100);
 1344              		.loc 1 238 2
 1345 0004 6420     		movs	r0, #100
 1346 0006 064B     		ldr	r3, .L88
 1347 0008 9847     		blx	r3
 1348              	.LVL23:
 239:src/modem.c   **** 	//ModemWrite("ATZ\r\n");
 240:src/modem.c   **** 	ModemWrite("AT&D0\r\n");  //заменить на установку скорости 115200?
 1349              		.loc 1 240 2
 1350 000a 0648     		ldr	r0, .L88+4
 1351 000c 064B     		ldr	r3, .L88+8
 1352 000e 9847     		blx	r3
 1353              	.LVL24:
 241:src/modem.c   **** 	return WaitAnsver(MA_OK, 10);
 1354              		.loc 1 241 9
 1355 0010 0A21     		movs	r1, #10
 1356 0012 0220     		movs	r0, #2
 1357 0014 054B     		ldr	r3, .L88+12
 1358 0016 9847     		blx	r3
 1359              	.LVL25:
 1360 0018 0346     		mov	r3, r0
 242:src/modem.c   **** 	//return WaitAnsver(MA_OK, 30);
 243:src/modem.c   **** }
 1361              		.loc 1 243 1
 1362 001a 1846     		mov	r0, r3
 1363 001c 80BD     		pop	{r7, pc}
 1364              	.L89:
 1365 001e 00BF     		.align	2
 1366              	.L88:
 1367 0020 00000000 		.word	vTaskDelay
 1368 0024 C4000000 		.word	.LC14
 1369 0028 00000000 		.word	ModemWrite
 1370 002c 00000000 		.word	WaitAnsver
 1371              		.cfi_endproc
 1372              	.LFE43:
 1374              		.section	.rodata
 1375              		.align	2
 1376              	.LC15:
 1377 00cc 41542B53 		.ascii	"AT+SIGNAL?\015\012\000"
 1377      49474E41 
 1377      4C3F0D0A 
 1377      00
 1378              		.section	.text.WaitAte,"ax",%progbits
 1379              		.align	1
 1380              		.global	WaitAte
 1381              		.syntax unified
 1382              		.thumb
 1383              		.thumb_func
 1385              	WaitAte:
 1386              	.LFB44:
 244:src/modem.c   **** 
 245:src/modem.c   **** bool WaitAte() {
 1387              		.loc 1 245 16
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 80B5     		push	{r7, lr}
 1392              	.LCFI59:
 1393              		.cfi_def_cfa_offset 8
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 00AF     		add	r7, sp, #0
 1397              	.LCFI60:
 1398              		.cfi_def_cfa_register 7
 246:src/modem.c   **** 	vTaskDelay(100);
 1399              		.loc 1 246 2
 1400 0004 6420     		movs	r0, #100
 1401 0006 064B     		ldr	r3, .L92
 1402 0008 9847     		blx	r3
 1403              	.LVL26:
 247:src/modem.c   **** 	ModemWrite("AT+SIGNAL?\r\n"); //0v1
 1404              		.loc 1 247 2
 1405 000a 0648     		ldr	r0, .L92+4
 1406 000c 064B     		ldr	r3, .L92+8
 1407 000e 9847     		blx	r3
 1408              	.LVL27:
 248:src/modem.c   **** 	return WaitAnsver(MA_OK, 30);
 1409              		.loc 1 248 9
 1410 0010 1E21     		movs	r1, #30
 1411 0012 0220     		movs	r0, #2
 1412 0014 054B     		ldr	r3, .L92+12
 1413 0016 9847     		blx	r3
 1414              	.LVL28:
 1415 0018 0346     		mov	r3, r0
 249:src/modem.c   **** 
 250:src/modem.c   **** }
 1416              		.loc 1 250 1
 1417 001a 1846     		mov	r0, r3
 1418 001c 80BD     		pop	{r7, pc}
 1419              	.L93:
 1420 001e 00BF     		.align	2
 1421              	.L92:
 1422 0020 00000000 		.word	vTaskDelay
 1423 0024 CC000000 		.word	.LC15
 1424 0028 00000000 		.word	ModemWrite
 1425 002c 00000000 		.word	WaitAnsver
 1426              		.cfi_endproc
 1427              	.LFE44:
 1429              		.section	.rodata
 1430 00d9 000000   		.align	2
 1431              	.LC16:
 1432 00dc 41542B43 		.ascii	"AT+CSQ\015\012\000"
 1432      53510D0A 
 1432      00
 1433              		.section	.text.CSQ,"ax",%progbits
 1434              		.align	1
 1435              		.global	CSQ
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1440              	CSQ:
 1441              	.LFB45:
 251:src/modem.c   **** // уровень сигнала
 252:src/modem.c   **** bool CSQ() {
 1442              		.loc 1 252 12
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 16
 1445              		@ frame_needed = 1, uses_anonymous_args = 0
 1446 0000 80B5     		push	{r7, lr}
 1447              	.LCFI61:
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 7, -8
 1450              		.cfi_offset 14, -4
 1451 0002 84B0     		sub	sp, sp, #16
 1452              	.LCFI62:
 1453              		.cfi_def_cfa_offset 24
 1454 0004 00AF     		add	r7, sp, #0
 1455              	.LCFI63:
 1456              		.cfi_def_cfa_register 7
 253:src/modem.c   **** 	ModemWrite("AT+CSQ\r\n");
 1457              		.loc 1 253 2
 1458 0006 3248     		ldr	r0, .L102
 1459 0008 324B     		ldr	r3, .L102+4
 1460 000a 9847     		blx	r3
 1461              	.LVL29:
 254:src/modem.c   **** 	//ModemWrite("AT+IPR?\r\n");// узнать скорость
 255:src/modem.c   **** 	vTaskDelay(100);
 1462              		.loc 1 255 2
 1463 000c 6420     		movs	r0, #100
 1464 000e 324B     		ldr	r3, .L102+8
 1465 0010 9847     		blx	r3
 1466              	.LVL30:
 256:src/modem.c   **** 	bufsize2 = uart2Read(sio_buf2, 256);
 1467              		.loc 1 256 13
 1468 0012 4FF48071 		mov	r1, #256
 1469 0016 3148     		ldr	r0, .L102+12
 1470 0018 314B     		ldr	r3, .L102+16
 1471 001a 9847     		blx	r3
 1472              	.LVL31:
 1473 001c 0346     		mov	r3, r0
 1474              		.loc 1 256 11
 1475 001e 9AB2     		uxth	r2, r3
 1476 0020 304B     		ldr	r3, .L102+20
 1477 0022 1A80     		strh	r2, [r3]	@ movhi
 257:src/modem.c   **** 	uint16 CSQ = 0, i1 = 0, i2 = 0;
 1478              		.loc 1 257 9
 1479 0024 0023     		movs	r3, #0
 1480 0026 7B81     		strh	r3, [r7, #10]	@ movhi
 1481              		.loc 1 257 18
 1482 0028 0023     		movs	r3, #0
 1483 002a 3B81     		strh	r3, [r7, #8]	@ movhi
 1484              		.loc 1 257 26
 1485 002c 0023     		movs	r3, #0
 1486 002e FB80     		strh	r3, [r7, #6]	@ movhi
 258:src/modem.c   **** 	if (bufsize2 != 0) {
 1487              		.loc 1 258 15
 1488 0030 2C4B     		ldr	r3, .L102+20
 1489 0032 1B88     		ldrh	r3, [r3]	@ movhi
 1490 0034 9BB2     		uxth	r3, r3
 1491              		.loc 1 258 5
 1492 0036 002B     		cmp	r3, #0
 1493 0038 46D0     		beq	.L95
 1494              	.LBB4:
 259:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 1495              		.loc 1 259 12
 1496 003a 0023     		movs	r3, #0
 1497 003c FB60     		str	r3, [r7, #12]
 1498              		.loc 1 259 3
 1499 003e 3CE0     		b	.L96
 1500              	.L101:
 260:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1501              		.loc 1 260 17
 1502 0040 264A     		ldr	r2, .L102+12
 1503 0042 FB68     		ldr	r3, [r7, #12]
 1504 0044 1344     		add	r3, r3, r2
 1505 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1506              		.loc 1 260 7
 1507 0048 2B2B     		cmp	r3, #43
 1508 004a 33D1     		bne	.L97
 1509              		.loc 1 260 44 discriminator 1
 1510 004c FB68     		ldr	r3, [r7, #12]
 1511 004e 0133     		adds	r3, r3, #1
 1512              		.loc 1 260 41 discriminator 1
 1513 0050 224A     		ldr	r2, .L102+12
 1514 0052 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1515              		.loc 1 260 29 discriminator 1
 1516 0054 432B     		cmp	r3, #67
 1517 0056 2DD1     		bne	.L97
 261:src/modem.c   **** 					&& (sio_buf2[i + 2] == 'S') && (sio_buf2[i + 3] == 'Q')
 1518              		.loc 1 261 21
 1519 0058 FB68     		ldr	r3, [r7, #12]
 1520 005a 0233     		adds	r3, r3, #2
 1521              		.loc 1 261 18
 1522 005c 1F4A     		ldr	r2, .L102+12
 1523 005e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1524              		.loc 1 261 6
 1525 0060 532B     		cmp	r3, #83
 1526 0062 27D1     		bne	.L97
 1527              		.loc 1 261 49 discriminator 1
 1528 0064 FB68     		ldr	r3, [r7, #12]
 1529 0066 0333     		adds	r3, r3, #3
 1530              		.loc 1 261 46 discriminator 1
 1531 0068 1C4A     		ldr	r2, .L102+12
 1532 006a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1533              		.loc 1 261 34 discriminator 1
 1534 006c 512B     		cmp	r3, #81
 1535 006e 21D1     		bne	.L97
 262:src/modem.c   **** 					&& (sio_buf2[i + 4] == ':')) {
 1536              		.loc 1 262 21
 1537 0070 FB68     		ldr	r3, [r7, #12]
 1538 0072 0433     		adds	r3, r3, #4
 1539              		.loc 1 262 18
 1540 0074 194A     		ldr	r2, .L102+12
 1541 0076 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1542              		.loc 1 262 6
 1543 0078 3A2B     		cmp	r3, #58
 1544 007a 1BD1     		bne	.L97
 1545              	.LBB5:
 263:src/modem.c   **** 				char c1, c2;
 264:src/modem.c   **** 				c1 = sio_buf2[i + 7];
 1546              		.loc 1 264 21
 1547 007c FB68     		ldr	r3, [r7, #12]
 1548 007e 0733     		adds	r3, r3, #7
 1549              		.loc 1 264 8
 1550 0080 164A     		ldr	r2, .L102+12
 1551 0082 D35C     		ldrb	r3, [r2, r3]
 1552 0084 7B71     		strb	r3, [r7, #5]
 265:src/modem.c   **** 				c2 = sio_buf2[i + 6];
 1553              		.loc 1 265 21
 1554 0086 FB68     		ldr	r3, [r7, #12]
 1555 0088 0633     		adds	r3, r3, #6
 1556              		.loc 1 265 18
 1557 008a 144A     		ldr	r2, .L102+12
 1558 008c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1559              		.loc 1 265 8
 1560 008e 3B71     		strb	r3, [r7, #4]
 266:src/modem.c   **** 				CSQ = atoi1(&c2);
 1561              		.loc 1 266 11
 1562 0090 3B1D     		adds	r3, r7, #4
 1563 0092 1846     		mov	r0, r3
 1564 0094 144B     		ldr	r3, .L102+24
 1565 0096 9847     		blx	r3
 1566              	.LVL32:
 1567 0098 0346     		mov	r3, r0
 1568              		.loc 1 266 9
 1569 009a 7B81     		strh	r3, [r7, #10]	@ movhi
 267:src/modem.c   **** 				RAM.CSQ = CSQ;
 1570              		.loc 1 267 13
 1571 009c 134B     		ldr	r3, .L102+28
 1572 009e 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1573 00a0 DA87     		strh	r2, [r3, #62]	@ unaligned
 268:src/modem.c   **** 				if (RAM.CSQ == 99) {
 1574              		.loc 1 268 12
 1575 00a2 124B     		ldr	r3, .L102+28
 1576 00a4 DB8F     		ldrh	r3, [r3, #62]	@ unaligned
 1577 00a6 9BB2     		uxth	r3, r3
 1578              		.loc 1 268 8
 1579 00a8 632B     		cmp	r3, #99
 1580 00aa 01D1     		bne	.L98
 269:src/modem.c   **** 					/*	char buffer[256];
 270:src/modem.c   **** 					 char minbuf[32];
 271:src/modem.c   **** 					 itoa(RAM.CSQ, minbuf);
 272:src/modem.c   **** 					 strcpy(buffer, "GSM нет сигнала = ");
 273:src/modem.c   **** 					 strcat(buffer, minbuf);
 274:src/modem.c   **** 					 JrnlWrite(buffer);*/
 275:src/modem.c   **** 					return false;
 1581              		.loc 1 275 13
 1582 00ac 0023     		movs	r3, #0
 1583 00ae 0BE0     		b	.L94
 1584              	.L98:
 276:src/modem.c   **** 				}
 277:src/modem.c   **** 				return true;
 1585              		.loc 1 277 12
 1586 00b0 0123     		movs	r3, #1
 1587 00b2 09E0     		b	.L94
 1588              	.L97:
 1589              	.LBE5:
 259:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1590              		.loc 1 259 34 discriminator 2
 1591 00b4 FB68     		ldr	r3, [r7, #12]
 1592 00b6 0133     		adds	r3, r3, #1
 1593 00b8 FB60     		str	r3, [r7, #12]
 1594              	.L96:
 259:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1595              		.loc 1 259 21 discriminator 1
 1596 00ba 0A4B     		ldr	r3, .L102+20
 1597 00bc 1B88     		ldrh	r3, [r3]	@ movhi
 1598 00be 9BB2     		uxth	r3, r3
 1599 00c0 1A46     		mov	r2, r3
 259:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1600              		.loc 1 259 3 discriminator 1
 1601 00c2 FB68     		ldr	r3, [r7, #12]
 1602 00c4 9342     		cmp	r3, r2
 1603 00c6 BBDB     		blt	.L101
 1604              	.L95:
 1605              	.L94:
 1606              	.LBE4:
 278:src/modem.c   **** 			}
 279:src/modem.c   **** 		}
 280:src/modem.c   **** 
 281:src/modem.c   **** 	}
 282:src/modem.c   **** }
 1607              		.loc 1 282 1
 1608 00c8 1846     		mov	r0, r3
 1609 00ca 1037     		adds	r7, r7, #16
 1610              	.LCFI64:
 1611              		.cfi_def_cfa_offset 8
 1612 00cc BD46     		mov	sp, r7
 1613              	.LCFI65:
 1614              		.cfi_def_cfa_register 13
 1615              		@ sp needed
 1616 00ce 80BD     		pop	{r7, pc}
 1617              	.L103:
 1618              		.align	2
 1619              	.L102:
 1620 00d0 DC000000 		.word	.LC16
 1621 00d4 00000000 		.word	ModemWrite
 1622 00d8 00000000 		.word	vTaskDelay
 1623 00dc 00000000 		.word	sio_buf2
 1624 00e0 00000000 		.word	uart2Read
 1625 00e4 00000000 		.word	bufsize2
 1626 00e8 00000000 		.word	atoi1
 1627 00ec 00000000 		.word	RAM
 1628              		.cfi_endproc
 1629              	.LFE45:
 1631              		.section	.rodata
 1632 00e5 000000   		.align	2
 1633              	.LC17:
 1634 00e8 41542B43 		.ascii	"AT+CCLK?\015\012\000"
 1634      434C4B3F 
 1634      0D0A00
 1635              		.section	.text.GSM_clock,"ax",%progbits
 1636              		.align	1
 1637              		.global	GSM_clock
 1638              		.syntax unified
 1639              		.thumb
 1640              		.thumb_func
 1642              	GSM_clock:
 1643              	.LFB46:
 283:src/modem.c   **** 
 284:src/modem.c   **** bool GSM_clock() {
 1644              		.loc 1 284 18
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 32
 1647              		@ frame_needed = 1, uses_anonymous_args = 0
 1648 0000 80B5     		push	{r7, lr}
 1649              	.LCFI66:
 1650              		.cfi_def_cfa_offset 8
 1651              		.cfi_offset 7, -8
 1652              		.cfi_offset 14, -4
 1653 0002 88B0     		sub	sp, sp, #32
 1654              	.LCFI67:
 1655              		.cfi_def_cfa_offset 40
 1656 0004 00AF     		add	r7, sp, #0
 1657              	.LCFI68:
 1658              		.cfi_def_cfa_register 7
 285:src/modem.c   **** 	char buffer[3];
 286:src/modem.c   **** 	buffer[2] = 0;
 1659              		.loc 1 286 12
 1660 0006 0023     		movs	r3, #0
 1661 0008 BB74     		strb	r3, [r7, #18]
 287:src/modem.c   **** 	DATATIME dtC;
 288:src/modem.c   **** 	int temp_zone;
 289:src/modem.c   **** 	int count = 0;
 1662              		.loc 1 289 6
 1663 000a 0023     		movs	r3, #0
 1664 000c FB61     		str	r3, [r7, #28]
 290:src/modem.c   **** 
 291:src/modem.c   **** 	vTaskDelay(300);
 1665              		.loc 1 291 2
 1666 000e 4FF49670 		mov	r0, #300
 1667 0012 7E4B     		ldr	r3, .L116
 1668 0014 9847     		blx	r3
 1669              	.LVL33:
 292:src/modem.c   **** 	while (count < 50) {
 1670              		.loc 1 292 8
 1671 0016 19E0     		b	.L105
 1672              	.L108:
 293:src/modem.c   **** 		ModemWrite("AT+CCLK?\r\n");
 1673              		.loc 1 293 3
 1674 0018 7D48     		ldr	r0, .L116+4
 1675 001a 7E4B     		ldr	r3, .L116+8
 1676 001c 9847     		blx	r3
 1677              	.LVL34:
 294:src/modem.c   **** 		vTaskDelay(100);
 1678              		.loc 1 294 3
 1679 001e 6420     		movs	r0, #100
 1680 0020 7A4B     		ldr	r3, .L116
 1681 0022 9847     		blx	r3
 1682              	.LVL35:
 295:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 1683              		.loc 1 295 14
 1684 0024 4FF48071 		mov	r1, #256
 1685 0028 7B48     		ldr	r0, .L116+12
 1686 002a 7C4B     		ldr	r3, .L116+16
 1687 002c 9847     		blx	r3
 1688              	.LVL36:
 1689 002e 0346     		mov	r3, r0
 1690              		.loc 1 295 12
 1691 0030 9AB2     		uxth	r2, r3
 1692 0032 7B4B     		ldr	r3, .L116+20
 1693 0034 1A80     		strh	r2, [r3]	@ movhi
 296:src/modem.c   **** 		if (bufsize2 > 24)
 1694              		.loc 1 296 16
 1695 0036 7A4B     		ldr	r3, .L116+20
 1696 0038 1B88     		ldrh	r3, [r3]	@ movhi
 1697 003a 9BB2     		uxth	r3, r3
 1698              		.loc 1 296 6
 1699 003c 182B     		cmp	r3, #24
 1700 003e 09D8     		bhi	.L115
 297:src/modem.c   **** 			break;
 298:src/modem.c   **** 		count++;
 1701              		.loc 1 298 8
 1702 0040 FB69     		ldr	r3, [r7, #28]
 1703 0042 0133     		adds	r3, r3, #1
 1704 0044 FB61     		str	r3, [r7, #28]
 299:src/modem.c   **** 		vTaskDelay(100);
 1705              		.loc 1 299 3
 1706 0046 6420     		movs	r0, #100
 1707 0048 704B     		ldr	r3, .L116
 1708 004a 9847     		blx	r3
 1709              	.LVL37:
 1710              	.L105:
 292:src/modem.c   **** 		ModemWrite("AT+CCLK?\r\n");
 1711              		.loc 1 292 8
 1712 004c FB69     		ldr	r3, [r7, #28]
 1713 004e 312B     		cmp	r3, #49
 1714 0050 E2DD     		ble	.L108
 1715 0052 00E0     		b	.L107
 1716              	.L115:
 297:src/modem.c   **** 			break;
 1717              		.loc 1 297 4
 1718 0054 00BF     		nop
 1719              	.L107:
 300:src/modem.c   **** 	}
 301:src/modem.c   **** 	if (bufsize2 != 0) {
 1720              		.loc 1 301 15
 1721 0056 724B     		ldr	r3, .L116+20
 1722 0058 1B88     		ldrh	r3, [r3]	@ movhi
 1723 005a 9BB2     		uxth	r3, r3
 1724              		.loc 1 301 5
 1725 005c 002B     		cmp	r3, #0
 1726 005e 00F0D180 		beq	.L109
 1727              	.LBB6:
 302:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 1728              		.loc 1 302 12
 1729 0062 0023     		movs	r3, #0
 1730 0064 BB61     		str	r3, [r7, #24]
 1731              		.loc 1 302 3
 1732 0066 B7E0     		b	.L110
 1733              	.L113:
 303:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1734              		.loc 1 303 17
 1735 0068 6B4A     		ldr	r2, .L116+12
 1736 006a BB69     		ldr	r3, [r7, #24]
 1737 006c 1344     		add	r3, r3, r2
 1738 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1739              		.loc 1 303 7
 1740 0070 2B2B     		cmp	r3, #43
 1741 0072 40F0AE80 		bne	.L111
 1742              		.loc 1 303 44 discriminator 1
 1743 0076 BB69     		ldr	r3, [r7, #24]
 1744 0078 0133     		adds	r3, r3, #1
 1745              		.loc 1 303 41 discriminator 1
 1746 007a 674A     		ldr	r2, .L116+12
 1747 007c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1748              		.loc 1 303 29 discriminator 1
 1749 007e 432B     		cmp	r3, #67
 1750 0080 40F0A780 		bne	.L111
 304:src/modem.c   **** 					&& (sio_buf2[i + 2] == 'C') && (sio_buf2[i + 3] == 'L')
 1751              		.loc 1 304 21
 1752 0084 BB69     		ldr	r3, [r7, #24]
 1753 0086 0233     		adds	r3, r3, #2
 1754              		.loc 1 304 18
 1755 0088 634A     		ldr	r2, .L116+12
 1756 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1757              		.loc 1 304 6
 1758 008c 432B     		cmp	r3, #67
 1759 008e 40F0A080 		bne	.L111
 1760              		.loc 1 304 49 discriminator 1
 1761 0092 BB69     		ldr	r3, [r7, #24]
 1762 0094 0333     		adds	r3, r3, #3
 1763              		.loc 1 304 46 discriminator 1
 1764 0096 604A     		ldr	r2, .L116+12
 1765 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1766              		.loc 1 304 34 discriminator 1
 1767 009a 4C2B     		cmp	r3, #76
 1768 009c 40F09980 		bne	.L111
 305:src/modem.c   **** 					&& (sio_buf2[i + 4] == 'K') && (sio_buf2[i + 5] == ':')) {
 1769              		.loc 1 305 21
 1770 00a0 BB69     		ldr	r3, [r7, #24]
 1771 00a2 0433     		adds	r3, r3, #4
 1772              		.loc 1 305 18
 1773 00a4 5C4A     		ldr	r2, .L116+12
 1774 00a6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1775              		.loc 1 305 6
 1776 00a8 4B2B     		cmp	r3, #75
 1777 00aa 40F09280 		bne	.L111
 1778              		.loc 1 305 49 discriminator 1
 1779 00ae BB69     		ldr	r3, [r7, #24]
 1780 00b0 0533     		adds	r3, r3, #5
 1781              		.loc 1 305 46 discriminator 1
 1782 00b2 594A     		ldr	r2, .L116+12
 1783 00b4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1784              		.loc 1 305 34 discriminator 1
 1785 00b6 3A2B     		cmp	r3, #58
 1786 00b8 40F08B80 		bne	.L111
 306:src/modem.c   **** 				buffer[0] = sio_buf2[i + 8];
 1787              		.loc 1 306 28
 1788 00bc BB69     		ldr	r3, [r7, #24]
 1789 00be 0833     		adds	r3, r3, #8
 1790              		.loc 1 306 25
 1791 00c0 554A     		ldr	r2, .L116+12
 1792 00c2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1793              		.loc 1 306 15
 1794 00c4 3B74     		strb	r3, [r7, #16]
 307:src/modem.c   **** 				buffer[1] = sio_buf2[i + 9];
 1795              		.loc 1 307 28
 1796 00c6 BB69     		ldr	r3, [r7, #24]
 1797 00c8 0933     		adds	r3, r3, #9
 1798              		.loc 1 307 25
 1799 00ca 534A     		ldr	r2, .L116+12
 1800 00cc D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1801              		.loc 1 307 15
 1802 00ce 7B74     		strb	r3, [r7, #17]
 308:src/modem.c   **** 				dtC.Years = atoi1(buffer);
 1803              		.loc 1 308 17
 1804 00d0 07F11003 		add	r3, r7, #16
 1805 00d4 1846     		mov	r0, r3
 1806 00d6 534B     		ldr	r3, .L116+24
 1807 00d8 9847     		blx	r3
 1808              	.LVL38:
 1809 00da 0346     		mov	r3, r0
 1810              		.loc 1 308 15
 1811 00dc 9BB2     		uxth	r3, r3
 1812 00de 3B80     		strh	r3, [r7]	@ movhi
 309:src/modem.c   **** 
 310:src/modem.c   **** 				buffer[0] = sio_buf2[i + 11];
 1813              		.loc 1 310 28
 1814 00e0 BB69     		ldr	r3, [r7, #24]
 1815 00e2 0B33     		adds	r3, r3, #11
 1816              		.loc 1 310 25
 1817 00e4 4C4A     		ldr	r2, .L116+12
 1818 00e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1819              		.loc 1 310 15
 1820 00e8 3B74     		strb	r3, [r7, #16]
 311:src/modem.c   **** 				buffer[1] = sio_buf2[i + 12];
 1821              		.loc 1 311 28
 1822 00ea BB69     		ldr	r3, [r7, #24]
 1823 00ec 0C33     		adds	r3, r3, #12
 1824              		.loc 1 311 25
 1825 00ee 4A4A     		ldr	r2, .L116+12
 1826 00f0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1827              		.loc 1 311 15
 1828 00f2 7B74     		strb	r3, [r7, #17]
 312:src/modem.c   **** 				dtC.Month = atoi1(buffer);
 1829              		.loc 1 312 17
 1830 00f4 07F11003 		add	r3, r7, #16
 1831 00f8 1846     		mov	r0, r3
 1832 00fa 4A4B     		ldr	r3, .L116+24
 1833 00fc 9847     		blx	r3
 1834              	.LVL39:
 1835 00fe 0346     		mov	r3, r0
 1836              		.loc 1 312 15
 1837 0100 9BB2     		uxth	r3, r3
 1838 0102 7B80     		strh	r3, [r7, #2]	@ movhi
 313:src/modem.c   **** 
 314:src/modem.c   **** 				buffer[0] = sio_buf2[i + 14];
 1839              		.loc 1 314 28
 1840 0104 BB69     		ldr	r3, [r7, #24]
 1841 0106 0E33     		adds	r3, r3, #14
 1842              		.loc 1 314 25
 1843 0108 434A     		ldr	r2, .L116+12
 1844 010a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1845              		.loc 1 314 15
 1846 010c 3B74     		strb	r3, [r7, #16]
 315:src/modem.c   **** 				buffer[1] = sio_buf2[i + 15];
 1847              		.loc 1 315 28
 1848 010e BB69     		ldr	r3, [r7, #24]
 1849 0110 0F33     		adds	r3, r3, #15
 1850              		.loc 1 315 25
 1851 0112 414A     		ldr	r2, .L116+12
 1852 0114 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1853              		.loc 1 315 15
 1854 0116 7B74     		strb	r3, [r7, #17]
 316:src/modem.c   **** 				dtC.Data = atoi1(buffer);
 1855              		.loc 1 316 16
 1856 0118 07F11003 		add	r3, r7, #16
 1857 011c 1846     		mov	r0, r3
 1858 011e 414B     		ldr	r3, .L116+24
 1859 0120 9847     		blx	r3
 1860              	.LVL40:
 1861 0122 0346     		mov	r3, r0
 1862              		.loc 1 316 14
 1863 0124 9BB2     		uxth	r3, r3
 1864 0126 BB80     		strh	r3, [r7, #4]	@ movhi
 317:src/modem.c   **** 
 318:src/modem.c   **** 				buffer[0] = sio_buf2[i + 17];
 1865              		.loc 1 318 28
 1866 0128 BB69     		ldr	r3, [r7, #24]
 1867 012a 1133     		adds	r3, r3, #17
 1868              		.loc 1 318 25
 1869 012c 3A4A     		ldr	r2, .L116+12
 1870 012e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1871              		.loc 1 318 15
 1872 0130 3B74     		strb	r3, [r7, #16]
 319:src/modem.c   **** 				buffer[1] = sio_buf2[i + 18];
 1873              		.loc 1 319 28
 1874 0132 BB69     		ldr	r3, [r7, #24]
 1875 0134 1233     		adds	r3, r3, #18
 1876              		.loc 1 319 25
 1877 0136 384A     		ldr	r2, .L116+12
 1878 0138 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1879              		.loc 1 319 15
 1880 013a 7B74     		strb	r3, [r7, #17]
 320:src/modem.c   **** 				dtC.Hour = atoi1(buffer);
 1881              		.loc 1 320 16
 1882 013c 07F11003 		add	r3, r7, #16
 1883 0140 1846     		mov	r0, r3
 1884 0142 384B     		ldr	r3, .L116+24
 1885 0144 9847     		blx	r3
 1886              	.LVL41:
 1887 0146 0346     		mov	r3, r0
 1888              		.loc 1 320 14
 1889 0148 9BB2     		uxth	r3, r3
 1890 014a 3B81     		strh	r3, [r7, #8]	@ movhi
 321:src/modem.c   **** 
 322:src/modem.c   **** 				buffer[0] = sio_buf2[i + 20];
 1891              		.loc 1 322 28
 1892 014c BB69     		ldr	r3, [r7, #24]
 1893 014e 1433     		adds	r3, r3, #20
 1894              		.loc 1 322 25
 1895 0150 314A     		ldr	r2, .L116+12
 1896 0152 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1897              		.loc 1 322 15
 1898 0154 3B74     		strb	r3, [r7, #16]
 323:src/modem.c   **** 				buffer[1] = sio_buf2[i + 21];
 1899              		.loc 1 323 28
 1900 0156 BB69     		ldr	r3, [r7, #24]
 1901 0158 1533     		adds	r3, r3, #21
 1902              		.loc 1 323 25
 1903 015a 2F4A     		ldr	r2, .L116+12
 1904 015c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1905              		.loc 1 323 15
 1906 015e 7B74     		strb	r3, [r7, #17]
 324:src/modem.c   **** 				dtC.Min = atoi1(buffer);
 1907              		.loc 1 324 15
 1908 0160 07F11003 		add	r3, r7, #16
 1909 0164 1846     		mov	r0, r3
 1910 0166 2F4B     		ldr	r3, .L116+24
 1911 0168 9847     		blx	r3
 1912              	.LVL42:
 1913 016a 0346     		mov	r3, r0
 1914              		.loc 1 324 13
 1915 016c 9BB2     		uxth	r3, r3
 1916 016e 7B81     		strh	r3, [r7, #10]	@ movhi
 325:src/modem.c   **** 
 326:src/modem.c   **** 				buffer[0] = sio_buf2[i + 23];
 1917              		.loc 1 326 28
 1918 0170 BB69     		ldr	r3, [r7, #24]
 1919 0172 1733     		adds	r3, r3, #23
 1920              		.loc 1 326 25
 1921 0174 284A     		ldr	r2, .L116+12
 1922 0176 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1923              		.loc 1 326 15
 1924 0178 3B74     		strb	r3, [r7, #16]
 327:src/modem.c   **** 				buffer[1] = sio_buf2[i + 24];
 1925              		.loc 1 327 28
 1926 017a BB69     		ldr	r3, [r7, #24]
 1927 017c 1833     		adds	r3, r3, #24
 1928              		.loc 1 327 25
 1929 017e 264A     		ldr	r2, .L116+12
 1930 0180 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1931              		.loc 1 327 15
 1932 0182 7B74     		strb	r3, [r7, #17]
 328:src/modem.c   **** 				dtC.Sec = atoi1(buffer);
 1933              		.loc 1 328 15
 1934 0184 07F11003 		add	r3, r7, #16
 1935 0188 1846     		mov	r0, r3
 1936 018a 264B     		ldr	r3, .L116+24
 1937 018c 9847     		blx	r3
 1938              	.LVL43:
 1939 018e 0346     		mov	r3, r0
 1940              		.loc 1 328 13
 1941 0190 9BB2     		uxth	r3, r3
 1942 0192 BB81     		strh	r3, [r7, #12]	@ movhi
 329:src/modem.c   **** 
 330:src/modem.c   **** 				if ((DeviceID == 3) || (DeviceID == 1)) {
 1943              		.loc 1 330 19
 1944 0194 244B     		ldr	r3, .L116+28
 1945 0196 1B68     		ldr	r3, [r3]
 1946              		.loc 1 330 8
 1947 0198 032B     		cmp	r3, #3
 1948 019a 03D0     		beq	.L112
 1949              		.loc 1 330 38 discriminator 1
 1950 019c 224B     		ldr	r3, .L116+28
 1951 019e 1B68     		ldr	r3, [r3]
 1952              		.loc 1 330 25 discriminator 1
 1953 01a0 012B     		cmp	r3, #1
 1954 01a2 16D1     		bne	.L111
 1955              	.L112:
 331:src/modem.c   **** 					buffer[0] = sio_buf2[i + 26];
 1956              		.loc 1 331 29
 1957 01a4 BB69     		ldr	r3, [r7, #24]
 1958 01a6 1A33     		adds	r3, r3, #26
 1959              		.loc 1 331 26
 1960 01a8 1B4A     		ldr	r2, .L116+12
 1961 01aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1962              		.loc 1 331 16
 1963 01ac 3B74     		strb	r3, [r7, #16]
 332:src/modem.c   **** 					buffer[1] = sio_buf2[i + 27];
 1964              		.loc 1 332 29
 1965 01ae BB69     		ldr	r3, [r7, #24]
 1966 01b0 1B33     		adds	r3, r3, #27
 1967              		.loc 1 332 26
 1968 01b2 194A     		ldr	r2, .L116+12
 1969 01b4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1970              		.loc 1 332 16
 1971 01b6 7B74     		strb	r3, [r7, #17]
 333:src/modem.c   **** 					temp_zone = atoi1(buffer);
 1972              		.loc 1 333 18
 1973 01b8 07F11003 		add	r3, r7, #16
 1974 01bc 1846     		mov	r0, r3
 1975 01be 194B     		ldr	r3, .L116+24
 1976 01c0 9847     		blx	r3
 1977              	.LVL44:
 1978 01c2 7861     		str	r0, [r7, #20]
 334:src/modem.c   **** 
 335:src/modem.c   **** 					if (temp_zone == 12) {
 1979              		.loc 1 335 9
 1980 01c4 7B69     		ldr	r3, [r7, #20]
 1981 01c6 0C2B     		cmp	r3, #12
 1982 01c8 03D1     		bne	.L111
 336:src/modem.c   **** 						dtC.Hour = dtC.Hour + 3;
 1983              		.loc 1 336 21
 1984 01ca 3B89     		ldrh	r3, [r7, #8]
 1985              		.loc 1 336 27
 1986 01cc 0333     		adds	r3, r3, #3
 1987 01ce 9BB2     		uxth	r3, r3
 1988              		.loc 1 336 16
 1989 01d0 3B81     		strh	r3, [r7, #8]	@ movhi
 1990              	.L111:
 302:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1991              		.loc 1 302 34 discriminator 2
 1992 01d2 BB69     		ldr	r3, [r7, #24]
 1993 01d4 0133     		adds	r3, r3, #1
 1994 01d6 BB61     		str	r3, [r7, #24]
 1995              	.L110:
 302:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 1996              		.loc 1 302 21 discriminator 1
 1997 01d8 114B     		ldr	r3, .L116+20
 1998 01da 1B88     		ldrh	r3, [r3]	@ movhi
 1999 01dc 9BB2     		uxth	r3, r3
 2000 01de 1A46     		mov	r2, r3
 302:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2001              		.loc 1 302 3 discriminator 1
 2002 01e0 BB69     		ldr	r3, [r7, #24]
 2003 01e2 9342     		cmp	r3, r2
 2004 01e4 FFF640AF 		blt	.L113
 2005              	.LBE6:
 337:src/modem.c   **** 					}
 338:src/modem.c   **** 				}
 339:src/modem.c   **** 			}
 340:src/modem.c   **** 		}
 341:src/modem.c   **** 		dtC.Years += 2000;
 2006              		.loc 1 341 13
 2007 01e8 3B88     		ldrh	r3, [r7]
 2008 01ea 03F5FA63 		add	r3, r3, #2000
 2009 01ee 9BB2     		uxth	r3, r3
 2010 01f0 3B80     		strh	r3, [r7]	@ movhi
 342:src/modem.c   **** 
 343:src/modem.c   **** 		rtcSetDataTime(&dtC);
 2011              		.loc 1 343 3
 2012 01f2 3B46     		mov	r3, r7
 2013 01f4 1846     		mov	r0, r3
 2014 01f6 0D4B     		ldr	r3, .L116+32
 2015 01f8 9847     		blx	r3
 2016              	.LVL45:
 344:src/modem.c   **** 
 345:src/modem.c   **** 		FlagGSMtime = 1;
 2017              		.loc 1 345 15
 2018 01fa 0D4B     		ldr	r3, .L116+36
 2019 01fc 0122     		movs	r2, #1
 2020 01fe 1A70     		strb	r2, [r3]
 346:src/modem.c   **** 		return true;
 2021              		.loc 1 346 10
 2022 0200 0123     		movs	r3, #1
 2023 0202 FFE7     		b	.L104
 2024              	.L109:
 2025              	.L104:
 347:src/modem.c   **** 
 348:src/modem.c   **** 	}
 349:src/modem.c   **** 
 350:src/modem.c   **** }
 2026              		.loc 1 350 1
 2027 0204 1846     		mov	r0, r3
 2028 0206 2037     		adds	r7, r7, #32
 2029              	.LCFI69:
 2030              		.cfi_def_cfa_offset 8
 2031 0208 BD46     		mov	sp, r7
 2032              	.LCFI70:
 2033              		.cfi_def_cfa_register 13
 2034              		@ sp needed
 2035 020a 80BD     		pop	{r7, pc}
 2036              	.L117:
 2037              		.align	2
 2038              	.L116:
 2039 020c 00000000 		.word	vTaskDelay
 2040 0210 E8000000 		.word	.LC17
 2041 0214 00000000 		.word	ModemWrite
 2042 0218 00000000 		.word	sio_buf2
 2043 021c 00000000 		.word	uart2Read
 2044 0220 00000000 		.word	bufsize2
 2045 0224 00000000 		.word	atoi1
 2046 0228 00000000 		.word	DeviceID
 2047 022c 00000000 		.word	rtcSetDataTime
 2048 0230 00000000 		.word	FlagGSMtime
 2049              		.cfi_endproc
 2050              	.LFE46:
 2052              		.section	.rodata
 2053 00f3 00       		.align	2
 2054              	.LC18:
 2055 00f4 61742B71 		.ascii	"at+qistat\015\012\000"
 2055      69737461 
 2055      740D0A00 
 2056              		.section	.text.ATSTAT,"ax",%progbits
 2057              		.align	1
 2058              		.global	ATSTAT
 2059              		.syntax unified
 2060              		.thumb
 2061              		.thumb_func
 2063              	ATSTAT:
 2064              	.LFB47:
 351:src/modem.c   **** 
 352:src/modem.c   **** void ATSTAT() {
 2065              		.loc 1 352 15
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 8
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069 0000 80B5     		push	{r7, lr}
 2070              	.LCFI71:
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 7, -8
 2073              		.cfi_offset 14, -4
 2074 0002 82B0     		sub	sp, sp, #8
 2075              	.LCFI72:
 2076              		.cfi_def_cfa_offset 16
 2077 0004 00AF     		add	r7, sp, #0
 2078              	.LCFI73:
 2079              		.cfi_def_cfa_register 7
 353:src/modem.c   **** 	if ((DeviceID == 2)) {
 2080              		.loc 1 353 16
 2081 0006 264B     		ldr	r3, .L124
 2082 0008 1B68     		ldr	r3, [r3]
 2083              		.loc 1 353 5
 2084 000a 022B     		cmp	r3, #2
 2085 000c 43D1     		bne	.L123
 354:src/modem.c   **** 		ModemWrite("at+qistat\r\n");
 2086              		.loc 1 354 3
 2087 000e 2548     		ldr	r0, .L124+4
 2088 0010 254B     		ldr	r3, .L124+8
 2089 0012 9847     		blx	r3
 2090              	.LVL46:
 355:src/modem.c   **** 		vTaskDelay(10);
 2091              		.loc 1 355 3
 2092 0014 0A20     		movs	r0, #10
 2093 0016 254B     		ldr	r3, .L124+12
 2094 0018 9847     		blx	r3
 2095              	.LVL47:
 356:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 2096              		.loc 1 356 14
 2097 001a 4FF48071 		mov	r1, #256
 2098 001e 2448     		ldr	r0, .L124+16
 2099 0020 244B     		ldr	r3, .L124+20
 2100 0022 9847     		blx	r3
 2101              	.LVL48:
 2102 0024 0346     		mov	r3, r0
 2103              		.loc 1 356 12
 2104 0026 9AB2     		uxth	r2, r3
 2105 0028 234B     		ldr	r3, .L124+24
 2106 002a 1A80     		strh	r2, [r3]	@ movhi
 357:src/modem.c   **** 		if (bufsize2 != 0) {
 2107              		.loc 1 357 16
 2108 002c 224B     		ldr	r3, .L124+24
 2109 002e 1B88     		ldrh	r3, [r3]	@ movhi
 2110 0030 9BB2     		uxth	r3, r3
 2111              		.loc 1 357 6
 2112 0032 002B     		cmp	r3, #0
 2113 0034 2FD0     		beq	.L123
 2114              	.LBB7:
 358:src/modem.c   **** 			for (int i = 0; i < bufsize2; i++) {
 2115              		.loc 1 358 13
 2116 0036 0023     		movs	r3, #0
 2117 0038 7B60     		str	r3, [r7, #4]
 2118              		.loc 1 358 4
 2119 003a 25E0     		b	.L120
 2120              	.L122:
 359:src/modem.c   **** 				if ((sio_buf2[i] == 'I') && (sio_buf2[i + 1] == 'N')
 2121              		.loc 1 359 18
 2122 003c 1C4A     		ldr	r2, .L124+16
 2123 003e 7B68     		ldr	r3, [r7, #4]
 2124 0040 1344     		add	r3, r3, r2
 2125 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2126              		.loc 1 359 8
 2127 0044 492B     		cmp	r3, #73
 2128 0046 1CD1     		bne	.L121
 2129              		.loc 1 359 45 discriminator 1
 2130 0048 7B68     		ldr	r3, [r7, #4]
 2131 004a 0133     		adds	r3, r3, #1
 2132              		.loc 1 359 42 discriminator 1
 2133 004c 184A     		ldr	r2, .L124+16
 2134 004e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2135              		.loc 1 359 30 discriminator 1
 2136 0050 4E2B     		cmp	r3, #78
 2137 0052 16D1     		bne	.L121
 360:src/modem.c   **** 						&& (sio_buf2[i + 2] == 'I') && (sio_buf2[i + 3] == 'T')
 2138              		.loc 1 360 22
 2139 0054 7B68     		ldr	r3, [r7, #4]
 2140 0056 0233     		adds	r3, r3, #2
 2141              		.loc 1 360 19
 2142 0058 154A     		ldr	r2, .L124+16
 2143 005a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2144              		.loc 1 360 7
 2145 005c 492B     		cmp	r3, #73
 2146 005e 10D1     		bne	.L121
 2147              		.loc 1 360 50 discriminator 1
 2148 0060 7B68     		ldr	r3, [r7, #4]
 2149 0062 0333     		adds	r3, r3, #3
 2150              		.loc 1 360 47 discriminator 1
 2151 0064 124A     		ldr	r2, .L124+16
 2152 0066 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2153              		.loc 1 360 35 discriminator 1
 2154 0068 542B     		cmp	r3, #84
 2155 006a 0AD1     		bne	.L121
 361:src/modem.c   **** 						&& (sio_buf2[i + 4] == 'I') && (sio_buf2[i + 5] == 'A')
 2156              		.loc 1 361 22
 2157 006c 7B68     		ldr	r3, [r7, #4]
 2158 006e 0433     		adds	r3, r3, #4
 2159              		.loc 1 361 19
 2160 0070 0F4A     		ldr	r2, .L124+16
 2161 0072 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2162              		.loc 1 361 7
 2163 0074 492B     		cmp	r3, #73
 2164 0076 04D1     		bne	.L121
 2165              		.loc 1 361 50 discriminator 1
 2166 0078 7B68     		ldr	r3, [r7, #4]
 2167 007a 0533     		adds	r3, r3, #5
 2168              		.loc 1 361 47 discriminator 1
 2169 007c 0C4A     		ldr	r2, .L124+16
 2170 007e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2171              		.loc 1 361 35 discriminator 1
 2172 0080 412B     		cmp	r3, #65
 2173              	.L121:
 358:src/modem.c   **** 				if ((sio_buf2[i] == 'I') && (sio_buf2[i + 1] == 'N')
 2174              		.loc 1 358 35 discriminator 2
 2175 0082 7B68     		ldr	r3, [r7, #4]
 2176 0084 0133     		adds	r3, r3, #1
 2177 0086 7B60     		str	r3, [r7, #4]
 2178              	.L120:
 358:src/modem.c   **** 				if ((sio_buf2[i] == 'I') && (sio_buf2[i + 1] == 'N')
 2179              		.loc 1 358 22 discriminator 1
 2180 0088 0B4B     		ldr	r3, .L124+24
 2181 008a 1B88     		ldrh	r3, [r3]	@ movhi
 2182 008c 9BB2     		uxth	r3, r3
 2183 008e 1A46     		mov	r2, r3
 358:src/modem.c   **** 				if ((sio_buf2[i] == 'I') && (sio_buf2[i + 1] == 'N')
 2184              		.loc 1 358 4 discriminator 1
 2185 0090 7B68     		ldr	r3, [r7, #4]
 2186 0092 9342     		cmp	r3, r2
 2187 0094 D2DB     		blt	.L122
 2188              	.L123:
 2189              	.LBE7:
 362:src/modem.c   **** 						&& (sio_buf2[i + 6] == 'L')) {
 363:src/modem.c   **** 					/*char buffer[256];
 364:src/modem.c   **** 					 char minbuf[32];
 365:src/modem.c   **** 					 itoa(RAM.CSQ, minbuf);
 366:src/modem.c   **** 					 strcpy(buffer, "GSM обрыв = ");
 367:src/modem.c   **** 					 strcat(buffer, minbuf);
 368:src/modem.c   **** 					 JrnlWrite(buffer);*/
 369:src/modem.c   **** 				}
 370:src/modem.c   **** 
 371:src/modem.c   **** 			}
 372:src/modem.c   **** 		}
 373:src/modem.c   **** 	}
 374:src/modem.c   **** 
 375:src/modem.c   **** }
 2190              		.loc 1 375 1
 2191 0096 00BF     		nop
 2192 0098 0837     		adds	r7, r7, #8
 2193              	.LCFI74:
 2194              		.cfi_def_cfa_offset 8
 2195 009a BD46     		mov	sp, r7
 2196              	.LCFI75:
 2197              		.cfi_def_cfa_register 13
 2198              		@ sp needed
 2199 009c 80BD     		pop	{r7, pc}
 2200              	.L125:
 2201 009e 00BF     		.align	2
 2202              	.L124:
 2203 00a0 00000000 		.word	DeviceID
 2204 00a4 F4000000 		.word	.LC18
 2205 00a8 00000000 		.word	ModemWrite
 2206 00ac 00000000 		.word	vTaskDelay
 2207 00b0 00000000 		.word	sio_buf2
 2208 00b4 00000000 		.word	uart2Read
 2209 00b8 00000000 		.word	bufsize2
 2210              		.cfi_endproc
 2211              	.LFE47:
 2213              		.section	.rodata
 2214              		.align	2
 2215              	.LC19:
 2216 0100 41542B43 		.ascii	"AT+CPIN?\015\012\000"
 2216      50494E3F 
 2216      0D0A00
 2217 010b 00       		.align	2
 2218              	.LC20:
 2219 010c 47534D3A 		.ascii	"GSM:\361\350\354-\352\340\360\362\340 \316\312\000"
 2219      F1E8EC2D 
 2219      EAE0F0F2 
 2219      E020CECA 
 2219      00
 2220              		.section	.text.ATCPIN,"ax",%progbits
 2221              		.align	1
 2222              		.global	ATCPIN
 2223              		.syntax unified
 2224              		.thumb
 2225              		.thumb_func
 2227              	ATCPIN:
 2228              	.LFB48:
 376:src/modem.c   **** 
 377:src/modem.c   **** bool ATCPIN() {
 2229              		.loc 1 377 15
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 8
 2232              		@ frame_needed = 1, uses_anonymous_args = 0
 2233 0000 80B5     		push	{r7, lr}
 2234              	.LCFI76:
 2235              		.cfi_def_cfa_offset 8
 2236              		.cfi_offset 7, -8
 2237              		.cfi_offset 14, -4
 2238 0002 82B0     		sub	sp, sp, #8
 2239              	.LCFI77:
 2240              		.cfi_def_cfa_offset 16
 2241 0004 00AF     		add	r7, sp, #0
 2242              	.LCFI78:
 2243              		.cfi_def_cfa_register 7
 378:src/modem.c   **** 	vTaskDelay(200);
 2244              		.loc 1 378 2
 2245 0006 C820     		movs	r0, #200
 2246 0008 3F4B     		ldr	r3, .L133
 2247 000a 9847     		blx	r3
 2248              	.LVL49:
 379:src/modem.c   **** 	ModemWrite("AT+CPIN?\r\n");
 2249              		.loc 1 379 2
 2250 000c 3F48     		ldr	r0, .L133+4
 2251 000e 404B     		ldr	r3, .L133+8
 2252 0010 9847     		blx	r3
 2253              	.LVL50:
 380:src/modem.c   **** 	vTaskDelay(200);
 2254              		.loc 1 380 2
 2255 0012 C820     		movs	r0, #200
 2256 0014 3C4B     		ldr	r3, .L133
 2257 0016 9847     		blx	r3
 2258              	.LVL51:
 381:src/modem.c   **** 	bufsize2 = uart2Read(sio_buf2, 256);
 2259              		.loc 1 381 13
 2260 0018 4FF48071 		mov	r1, #256
 2261 001c 3D48     		ldr	r0, .L133+12
 2262 001e 3E4B     		ldr	r3, .L133+16
 2263 0020 9847     		blx	r3
 2264              	.LVL52:
 2265 0022 0346     		mov	r3, r0
 2266              		.loc 1 381 11
 2267 0024 9AB2     		uxth	r2, r3
 2268 0026 3D4B     		ldr	r3, .L133+20
 2269 0028 1A80     		strh	r2, [r3]	@ movhi
 382:src/modem.c   **** 	if (bufsize2 != 0) {
 2270              		.loc 1 382 15
 2271 002a 3C4B     		ldr	r3, .L133+20
 2272 002c 1B88     		ldrh	r3, [r3]	@ movhi
 2273 002e 9BB2     		uxth	r3, r3
 2274              		.loc 1 382 5
 2275 0030 002B     		cmp	r3, #0
 2276 0032 63D0     		beq	.L127
 2277              	.LBB8:
 383:src/modem.c   **** 		for (int i = 2; i < bufsize2; i++) {
 2278              		.loc 1 383 12
 2279 0034 0223     		movs	r3, #2
 2280 0036 7B60     		str	r3, [r7, #4]
 2281              		.loc 1 383 3
 2282 0038 59E0     		b	.L128
 2283              	.L132:
 384:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2284              		.loc 1 384 17
 2285 003a 364A     		ldr	r2, .L133+12
 2286 003c 7B68     		ldr	r3, [r7, #4]
 2287 003e 1344     		add	r3, r3, r2
 2288 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2289              		.loc 1 384 7
 2290 0042 2B2B     		cmp	r3, #43
 2291 0044 50D1     		bne	.L129
 2292              		.loc 1 384 44 discriminator 1
 2293 0046 7B68     		ldr	r3, [r7, #4]
 2294 0048 0133     		adds	r3, r3, #1
 2295              		.loc 1 384 41 discriminator 1
 2296 004a 324A     		ldr	r2, .L133+12
 2297 004c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2298              		.loc 1 384 29 discriminator 1
 2299 004e 432B     		cmp	r3, #67
 2300 0050 4AD1     		bne	.L129
 385:src/modem.c   **** 					&& (sio_buf2[i + 2] == 'P') && (sio_buf2[i + 3] == 'I')
 2301              		.loc 1 385 21
 2302 0052 7B68     		ldr	r3, [r7, #4]
 2303 0054 0233     		adds	r3, r3, #2
 2304              		.loc 1 385 18
 2305 0056 2F4A     		ldr	r2, .L133+12
 2306 0058 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2307              		.loc 1 385 6
 2308 005a 502B     		cmp	r3, #80
 2309 005c 44D1     		bne	.L129
 2310              		.loc 1 385 49 discriminator 1
 2311 005e 7B68     		ldr	r3, [r7, #4]
 2312 0060 0333     		adds	r3, r3, #3
 2313              		.loc 1 385 46 discriminator 1
 2314 0062 2C4A     		ldr	r2, .L133+12
 2315 0064 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2316              		.loc 1 385 34 discriminator 1
 2317 0066 492B     		cmp	r3, #73
 2318 0068 3ED1     		bne	.L129
 386:src/modem.c   **** 					&& (sio_buf2[i + 4] == 'N') && (sio_buf2[i + 5] == ':')
 2319              		.loc 1 386 21
 2320 006a 7B68     		ldr	r3, [r7, #4]
 2321 006c 0433     		adds	r3, r3, #4
 2322              		.loc 1 386 18
 2323 006e 294A     		ldr	r2, .L133+12
 2324 0070 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2325              		.loc 1 386 6
 2326 0072 4E2B     		cmp	r3, #78
 2327 0074 38D1     		bne	.L129
 2328              		.loc 1 386 49 discriminator 1
 2329 0076 7B68     		ldr	r3, [r7, #4]
 2330 0078 0533     		adds	r3, r3, #5
 2331              		.loc 1 386 46 discriminator 1
 2332 007a 264A     		ldr	r2, .L133+12
 2333 007c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2334              		.loc 1 386 34 discriminator 1
 2335 007e 3A2B     		cmp	r3, #58
 2336 0080 32D1     		bne	.L129
 387:src/modem.c   **** 					&& (sio_buf2[i + 6] == ' ') && (sio_buf2[i + 7] == 'R')
 2337              		.loc 1 387 21
 2338 0082 7B68     		ldr	r3, [r7, #4]
 2339 0084 0633     		adds	r3, r3, #6
 2340              		.loc 1 387 18
 2341 0086 234A     		ldr	r2, .L133+12
 2342 0088 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2343              		.loc 1 387 6
 2344 008a 202B     		cmp	r3, #32
 2345 008c 2CD1     		bne	.L129
 2346              		.loc 1 387 49 discriminator 1
 2347 008e 7B68     		ldr	r3, [r7, #4]
 2348 0090 0733     		adds	r3, r3, #7
 2349              		.loc 1 387 46 discriminator 1
 2350 0092 204A     		ldr	r2, .L133+12
 2351 0094 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2352              		.loc 1 387 34 discriminator 1
 2353 0096 522B     		cmp	r3, #82
 2354 0098 26D1     		bne	.L129
 388:src/modem.c   **** 					&& (sio_buf2[i + 8] == 'E') && (sio_buf2[i + 9] == 'A')
 2355              		.loc 1 388 21
 2356 009a 7B68     		ldr	r3, [r7, #4]
 2357 009c 0833     		adds	r3, r3, #8
 2358              		.loc 1 388 18
 2359 009e 1D4A     		ldr	r2, .L133+12
 2360 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2361              		.loc 1 388 6
 2362 00a2 452B     		cmp	r3, #69
 2363 00a4 20D1     		bne	.L129
 2364              		.loc 1 388 49 discriminator 1
 2365 00a6 7B68     		ldr	r3, [r7, #4]
 2366 00a8 0933     		adds	r3, r3, #9
 2367              		.loc 1 388 46 discriminator 1
 2368 00aa 1A4A     		ldr	r2, .L133+12
 2369 00ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2370              		.loc 1 388 34 discriminator 1
 2371 00ae 412B     		cmp	r3, #65
 2372 00b0 1AD1     		bne	.L129
 389:src/modem.c   **** 					&& (sio_buf2[i + 10] == 'D') && (sio_buf2[i + 11] == 'Y')) {
 2373              		.loc 1 389 21
 2374 00b2 7B68     		ldr	r3, [r7, #4]
 2375 00b4 0A33     		adds	r3, r3, #10
 2376              		.loc 1 389 18
 2377 00b6 174A     		ldr	r2, .L133+12
 2378 00b8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2379              		.loc 1 389 6
 2380 00ba 442B     		cmp	r3, #68
 2381 00bc 14D1     		bne	.L129
 2382              		.loc 1 389 50 discriminator 1
 2383 00be 7B68     		ldr	r3, [r7, #4]
 2384 00c0 0B33     		adds	r3, r3, #11
 2385              		.loc 1 389 47 discriminator 1
 2386 00c2 144A     		ldr	r2, .L133+12
 2387 00c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2388              		.loc 1 389 35 discriminator 1
 2389 00c6 592B     		cmp	r3, #89
 2390 00c8 0ED1     		bne	.L129
 390:src/modem.c   **** 				if (LedSIM_Journal) {
 2391              		.loc 1 390 9
 2392 00ca 154B     		ldr	r3, .L133+24
 2393 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2394              		.loc 1 390 8
 2395 00ce 002B     		cmp	r3, #0
 2396 00d0 05D0     		beq	.L130
 391:src/modem.c   **** 					LedSIM_Journal = 0;
 2397              		.loc 1 391 21
 2398 00d2 134B     		ldr	r3, .L133+24
 2399 00d4 0022     		movs	r2, #0
 2400 00d6 1A70     		strb	r2, [r3]
 392:src/modem.c   **** 					JrnlWrite("GSM:сим-карта ОК");
 2401              		.loc 1 392 6
 2402 00d8 1248     		ldr	r0, .L133+28
 2403 00da 134B     		ldr	r3, .L133+32
 2404 00dc 9847     		blx	r3
 2405              	.LVL53:
 2406              	.L130:
 393:src/modem.c   **** 				}
 394:src/modem.c   **** 
 395:src/modem.c   **** 				LedSIM = 0;
 2407              		.loc 1 395 12
 2408 00de 134B     		ldr	r3, .L133+36
 2409 00e0 0022     		movs	r2, #0
 2410 00e2 1A70     		strb	r2, [r3]
 396:src/modem.c   **** 				return true;
 2411              		.loc 1 396 12
 2412 00e4 0123     		movs	r3, #1
 2413 00e6 0AE0     		b	.L131
 2414              	.L129:
 383:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2415              		.loc 1 383 34 discriminator 2
 2416 00e8 7B68     		ldr	r3, [r7, #4]
 2417 00ea 0133     		adds	r3, r3, #1
 2418 00ec 7B60     		str	r3, [r7, #4]
 2419              	.L128:
 383:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2420              		.loc 1 383 21 discriminator 1
 2421 00ee 0B4B     		ldr	r3, .L133+20
 2422 00f0 1B88     		ldrh	r3, [r3]	@ movhi
 2423 00f2 9BB2     		uxth	r3, r3
 2424 00f4 1A46     		mov	r2, r3
 383:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2425              		.loc 1 383 3 discriminator 1
 2426 00f6 7B68     		ldr	r3, [r7, #4]
 2427 00f8 9342     		cmp	r3, r2
 2428 00fa 9EDB     		blt	.L132
 2429              	.L127:
 2430              	.LBE8:
 397:src/modem.c   **** 
 398:src/modem.c   **** 			}
 399:src/modem.c   **** 		}
 400:src/modem.c   **** 	}
 401:src/modem.c   **** 
 402:src/modem.c   **** 	return false;
 2431              		.loc 1 402 9
 2432 00fc 0023     		movs	r3, #0
 2433              	.L131:
 403:src/modem.c   **** 
 404:src/modem.c   **** }
 2434              		.loc 1 404 1
 2435 00fe 1846     		mov	r0, r3
 2436 0100 0837     		adds	r7, r7, #8
 2437              	.LCFI79:
 2438              		.cfi_def_cfa_offset 8
 2439 0102 BD46     		mov	sp, r7
 2440              	.LCFI80:
 2441              		.cfi_def_cfa_register 13
 2442              		@ sp needed
 2443 0104 80BD     		pop	{r7, pc}
 2444              	.L134:
 2445 0106 00BF     		.align	2
 2446              	.L133:
 2447 0108 00000000 		.word	vTaskDelay
 2448 010c 00010000 		.word	.LC19
 2449 0110 00000000 		.word	ModemWrite
 2450 0114 00000000 		.word	sio_buf2
 2451 0118 00000000 		.word	uart2Read
 2452 011c 00000000 		.word	bufsize2
 2453 0120 00000000 		.word	LedSIM_Journal
 2454 0124 0C010000 		.word	.LC20
 2455 0128 00000000 		.word	JrnlWrite
 2456 012c 00000000 		.word	LedSIM
 2457              		.cfi_endproc
 2458              	.LFE48:
 2460              		.section	.rodata
 2461 011d 000000   		.align	2
 2462              	.LC21:
 2463 0120 41542B43 		.ascii	"AT+CREG?\015\012\000"
 2463      5245473F 
 2463      0D0A00
 2464              		.section	.text.ATCREG,"ax",%progbits
 2465              		.align	1
 2466              		.global	ATCREG
 2467              		.syntax unified
 2468              		.thumb
 2469              		.thumb_func
 2471              	ATCREG:
 2472              	.LFB49:
 405:src/modem.c   **** 
 406:src/modem.c   **** bool ATCREG() {
 2473              		.loc 1 406 15
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 8
 2476              		@ frame_needed = 1, uses_anonymous_args = 0
 2477 0000 80B5     		push	{r7, lr}
 2478              	.LCFI81:
 2479              		.cfi_def_cfa_offset 8
 2480              		.cfi_offset 7, -8
 2481              		.cfi_offset 14, -4
 2482 0002 82B0     		sub	sp, sp, #8
 2483              	.LCFI82:
 2484              		.cfi_def_cfa_offset 16
 2485 0004 00AF     		add	r7, sp, #0
 2486              	.LCFI83:
 2487              		.cfi_def_cfa_register 7
 407:src/modem.c   **** 	vTaskDelay(100);
 2488              		.loc 1 407 2
 2489 0006 6420     		movs	r0, #100
 2490 0008 324B     		ldr	r3, .L141
 2491 000a 9847     		blx	r3
 2492              	.LVL54:
 408:src/modem.c   **** 	ModemWrite("AT+CREG?\r\n");
 2493              		.loc 1 408 2
 2494 000c 3248     		ldr	r0, .L141+4
 2495 000e 334B     		ldr	r3, .L141+8
 2496 0010 9847     		blx	r3
 2497              	.LVL55:
 409:src/modem.c   **** 	vTaskDelay(100);
 2498              		.loc 1 409 2
 2499 0012 6420     		movs	r0, #100
 2500 0014 2F4B     		ldr	r3, .L141
 2501 0016 9847     		blx	r3
 2502              	.LVL56:
 410:src/modem.c   **** 	bufsize2 = uart2Read(sio_buf2, 256);
 2503              		.loc 1 410 13
 2504 0018 4FF48071 		mov	r1, #256
 2505 001c 3048     		ldr	r0, .L141+12
 2506 001e 314B     		ldr	r3, .L141+16
 2507 0020 9847     		blx	r3
 2508              	.LVL57:
 2509 0022 0346     		mov	r3, r0
 2510              		.loc 1 410 11
 2511 0024 9AB2     		uxth	r2, r3
 2512 0026 304B     		ldr	r3, .L141+20
 2513 0028 1A80     		strh	r2, [r3]	@ movhi
 411:src/modem.c   **** 	if (bufsize2 != 0) {
 2514              		.loc 1 411 15
 2515 002a 2F4B     		ldr	r3, .L141+20
 2516 002c 1B88     		ldrh	r3, [r3]	@ movhi
 2517 002e 9BB2     		uxth	r3, r3
 2518              		.loc 1 411 5
 2519 0030 002B     		cmp	r3, #0
 2520 0032 4AD0     		beq	.L136
 2521              	.LBB9:
 412:src/modem.c   **** 		for (int i = 2; i < bufsize2; i++) {
 2522              		.loc 1 412 12
 2523 0034 0223     		movs	r3, #2
 2524 0036 7B60     		str	r3, [r7, #4]
 2525              		.loc 1 412 3
 2526 0038 40E0     		b	.L137
 2527              	.L140:
 413:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2528              		.loc 1 413 17
 2529 003a 294A     		ldr	r2, .L141+12
 2530 003c 7B68     		ldr	r3, [r7, #4]
 2531 003e 1344     		add	r3, r3, r2
 2532 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2533              		.loc 1 413 7
 2534 0042 2B2B     		cmp	r3, #43
 2535 0044 37D1     		bne	.L138
 2536              		.loc 1 413 44 discriminator 1
 2537 0046 7B68     		ldr	r3, [r7, #4]
 2538 0048 0133     		adds	r3, r3, #1
 2539              		.loc 1 413 41 discriminator 1
 2540 004a 254A     		ldr	r2, .L141+12
 2541 004c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2542              		.loc 1 413 29 discriminator 1
 2543 004e 432B     		cmp	r3, #67
 2544 0050 31D1     		bne	.L138
 414:src/modem.c   **** 					&& (sio_buf2[i + 2] == 'R') && (sio_buf2[i + 3] == 'E')
 2545              		.loc 1 414 21
 2546 0052 7B68     		ldr	r3, [r7, #4]
 2547 0054 0233     		adds	r3, r3, #2
 2548              		.loc 1 414 18
 2549 0056 224A     		ldr	r2, .L141+12
 2550 0058 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2551              		.loc 1 414 6
 2552 005a 522B     		cmp	r3, #82
 2553 005c 2BD1     		bne	.L138
 2554              		.loc 1 414 49 discriminator 1
 2555 005e 7B68     		ldr	r3, [r7, #4]
 2556 0060 0333     		adds	r3, r3, #3
 2557              		.loc 1 414 46 discriminator 1
 2558 0062 1F4A     		ldr	r2, .L141+12
 2559 0064 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2560              		.loc 1 414 34 discriminator 1
 2561 0066 452B     		cmp	r3, #69
 2562 0068 25D1     		bne	.L138
 415:src/modem.c   **** 					&& (sio_buf2[i + 4] == 'G') && (sio_buf2[i + 5] == ':')
 2563              		.loc 1 415 21
 2564 006a 7B68     		ldr	r3, [r7, #4]
 2565 006c 0433     		adds	r3, r3, #4
 2566              		.loc 1 415 18
 2567 006e 1C4A     		ldr	r2, .L141+12
 2568 0070 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2569              		.loc 1 415 6
 2570 0072 472B     		cmp	r3, #71
 2571 0074 1FD1     		bne	.L138
 2572              		.loc 1 415 49 discriminator 1
 2573 0076 7B68     		ldr	r3, [r7, #4]
 2574 0078 0533     		adds	r3, r3, #5
 2575              		.loc 1 415 46 discriminator 1
 2576 007a 194A     		ldr	r2, .L141+12
 2577 007c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2578              		.loc 1 415 34 discriminator 1
 2579 007e 3A2B     		cmp	r3, #58
 2580 0080 19D1     		bne	.L138
 416:src/modem.c   **** 					&& (sio_buf2[i + 6] == ' ') && (sio_buf2[i + 7] == '0')
 2581              		.loc 1 416 21
 2582 0082 7B68     		ldr	r3, [r7, #4]
 2583 0084 0633     		adds	r3, r3, #6
 2584              		.loc 1 416 18
 2585 0086 164A     		ldr	r2, .L141+12
 2586 0088 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2587              		.loc 1 416 6
 2588 008a 202B     		cmp	r3, #32
 2589 008c 13D1     		bne	.L138
 2590              		.loc 1 416 49 discriminator 1
 2591 008e 7B68     		ldr	r3, [r7, #4]
 2592 0090 0733     		adds	r3, r3, #7
 2593              		.loc 1 416 46 discriminator 1
 2594 0092 134A     		ldr	r2, .L141+12
 2595 0094 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2596              		.loc 1 416 34 discriminator 1
 2597 0096 302B     		cmp	r3, #48
 2598 0098 0DD1     		bne	.L138
 417:src/modem.c   **** 					&& (sio_buf2[i + 8] == ',') && (sio_buf2[i + 9] == '1')) {
 2599              		.loc 1 417 21
 2600 009a 7B68     		ldr	r3, [r7, #4]
 2601 009c 0833     		adds	r3, r3, #8
 2602              		.loc 1 417 18
 2603 009e 104A     		ldr	r2, .L141+12
 2604 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2605              		.loc 1 417 6
 2606 00a2 2C2B     		cmp	r3, #44
 2607 00a4 07D1     		bne	.L138
 2608              		.loc 1 417 49 discriminator 1
 2609 00a6 7B68     		ldr	r3, [r7, #4]
 2610 00a8 0933     		adds	r3, r3, #9
 2611              		.loc 1 417 46 discriminator 1
 2612 00aa 0D4A     		ldr	r2, .L141+12
 2613 00ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2614              		.loc 1 417 34 discriminator 1
 2615 00ae 312B     		cmp	r3, #49
 2616 00b0 01D1     		bne	.L138
 418:src/modem.c   **** 				return true;
 2617              		.loc 1 418 12
 2618 00b2 0123     		movs	r3, #1
 2619 00b4 0AE0     		b	.L139
 2620              	.L138:
 412:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2621              		.loc 1 412 34 discriminator 2
 2622 00b6 7B68     		ldr	r3, [r7, #4]
 2623 00b8 0133     		adds	r3, r3, #1
 2624 00ba 7B60     		str	r3, [r7, #4]
 2625              	.L137:
 412:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2626              		.loc 1 412 21 discriminator 1
 2627 00bc 0A4B     		ldr	r3, .L141+20
 2628 00be 1B88     		ldrh	r3, [r3]	@ movhi
 2629 00c0 9BB2     		uxth	r3, r3
 2630 00c2 1A46     		mov	r2, r3
 412:src/modem.c   **** 			if ((sio_buf2[i] == '+') && (sio_buf2[i + 1] == 'C')
 2631              		.loc 1 412 3 discriminator 1
 2632 00c4 7B68     		ldr	r3, [r7, #4]
 2633 00c6 9342     		cmp	r3, r2
 2634 00c8 B7DB     		blt	.L140
 2635              	.L136:
 2636              	.LBE9:
 419:src/modem.c   **** 			}
 420:src/modem.c   **** 		}
 421:src/modem.c   **** 	}
 422:src/modem.c   **** 
 423:src/modem.c   **** 	return false;
 2637              		.loc 1 423 9
 2638 00ca 0023     		movs	r3, #0
 2639              	.L139:
 424:src/modem.c   **** 
 425:src/modem.c   **** }
 2640              		.loc 1 425 1
 2641 00cc 1846     		mov	r0, r3
 2642 00ce 0837     		adds	r7, r7, #8
 2643              	.LCFI84:
 2644              		.cfi_def_cfa_offset 8
 2645 00d0 BD46     		mov	sp, r7
 2646              	.LCFI85:
 2647              		.cfi_def_cfa_register 13
 2648              		@ sp needed
 2649 00d2 80BD     		pop	{r7, pc}
 2650              	.L142:
 2651              		.align	2
 2652              	.L141:
 2653 00d4 00000000 		.word	vTaskDelay
 2654 00d8 20010000 		.word	.LC21
 2655 00dc 00000000 		.word	ModemWrite
 2656 00e0 00000000 		.word	sio_buf2
 2657 00e4 00000000 		.word	uart2Read
 2658 00e8 00000000 		.word	bufsize2
 2659              		.cfi_endproc
 2660              	.LFE49:
 2662              		.section	.rodata
 2663 012b 00       		.align	2
 2664              	.LC22:
 2665 012c 41542B51 		.ascii	"AT+QIOPEN=1,1,\"TCP LISTENER\",\"127.0.0.1\",0,4444"
 2665      494F5045 
 2665      4E3D312C 
 2665      312C2254 
 2665      4350204C 
 2666 015b 2C300D0A 		.ascii	",0\015\012\000"
 2666      00
 2667              		.section	.text.ATOPEN,"ax",%progbits
 2668              		.align	1
 2669              		.global	ATOPEN
 2670              		.syntax unified
 2671              		.thumb
 2672              		.thumb_func
 2674              	ATOPEN:
 2675              	.LFB50:
 426:src/modem.c   **** 
 427:src/modem.c   **** bool ATOPEN() {
 2676              		.loc 1 427 15
 2677              		.cfi_startproc
 2678              		@ args = 0, pretend = 0, frame = 8
 2679              		@ frame_needed = 1, uses_anonymous_args = 0
 2680 0000 80B5     		push	{r7, lr}
 2681              	.LCFI86:
 2682              		.cfi_def_cfa_offset 8
 2683              		.cfi_offset 7, -8
 2684              		.cfi_offset 14, -4
 2685 0002 82B0     		sub	sp, sp, #8
 2686              	.LCFI87:
 2687              		.cfi_def_cfa_offset 16
 2688 0004 00AF     		add	r7, sp, #0
 2689              	.LCFI88:
 2690              		.cfi_def_cfa_register 7
 428:src/modem.c   **** 	vTaskDelay(100);
 2691              		.loc 1 428 2
 2692 0006 6420     		movs	r0, #100
 2693 0008 7A4B     		ldr	r3, .L152
 2694 000a 9847     		blx	r3
 2695              	.LVL58:
 429:src/modem.c   **** 	ModemWrite("AT+QIOPEN=1,1,\"TCP LISTENER\",\"127.0.0.1\",0,4444,0\r\n");
 2696              		.loc 1 429 2
 2697 000c 7A48     		ldr	r0, .L152+4
 2698 000e 7B4B     		ldr	r3, .L152+8
 2699 0010 9847     		blx	r3
 2700              	.LVL59:
 430:src/modem.c   **** 	vTaskDelay(100);
 2701              		.loc 1 430 2
 2702 0012 6420     		movs	r0, #100
 2703 0014 774B     		ldr	r3, .L152
 2704 0016 9847     		blx	r3
 2705              	.LVL60:
 431:src/modem.c   **** 	bufsize2 = uart2Read(sio_buf2, 256);
 2706              		.loc 1 431 13
 2707 0018 4FF48071 		mov	r1, #256
 2708 001c 7848     		ldr	r0, .L152+12
 2709 001e 794B     		ldr	r3, .L152+16
 2710 0020 9847     		blx	r3
 2711              	.LVL61:
 2712 0022 0346     		mov	r3, r0
 2713              		.loc 1 431 11
 2714 0024 9AB2     		uxth	r2, r3
 2715 0026 784B     		ldr	r3, .L152+20
 2716 0028 1A80     		strh	r2, [r3]	@ movhi
 432:src/modem.c   **** 	if (bufsize2 != 0) {
 2717              		.loc 1 432 15
 2718 002a 774B     		ldr	r3, .L152+20
 2719 002c 1B88     		ldrh	r3, [r3]	@ movhi
 2720 002e 9BB2     		uxth	r3, r3
 2721              		.loc 1 432 5
 2722 0030 002B     		cmp	r3, #0
 2723 0032 00F0D580 		beq	.L144
 2724              	.LBB10:
 433:src/modem.c   **** 		for (int i = 2; i < bufsize2; i++) {
 2725              		.loc 1 433 12
 2726 0036 0223     		movs	r3, #2
 2727 0038 7B60     		str	r3, [r7, #4]
 2728              		.loc 1 433 3
 2729 003a C9E0     		b	.L145
 2730              	.L150:
 434:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')
 2731              		.loc 1 434 17
 2732 003c 704A     		ldr	r2, .L152+12
 2733 003e 7B68     		ldr	r3, [r7, #4]
 2734 0040 1344     		add	r3, r3, r2
 2735 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2736              		.loc 1 434 7
 2737 0044 4F2B     		cmp	r3, #79
 2738 0046 52D1     		bne	.L146
 2739              		.loc 1 434 44 discriminator 1
 2740 0048 7B68     		ldr	r3, [r7, #4]
 2741 004a 0133     		adds	r3, r3, #1
 2742              		.loc 1 434 41 discriminator 1
 2743 004c 6C4A     		ldr	r2, .L152+12
 2744 004e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2745              		.loc 1 434 29 discriminator 1
 2746 0050 4B2B     		cmp	r3, #75
 2747 0052 4CD1     		bne	.L146
 435:src/modem.c   **** 					&& (sio_buf2[i + 6] == '+') && (sio_buf2[i + 7] == 'Q')
 2748              		.loc 1 435 21
 2749 0054 7B68     		ldr	r3, [r7, #4]
 2750 0056 0633     		adds	r3, r3, #6
 2751              		.loc 1 435 18
 2752 0058 694A     		ldr	r2, .L152+12
 2753 005a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2754              		.loc 1 435 6
 2755 005c 2B2B     		cmp	r3, #43
 2756 005e 46D1     		bne	.L146
 2757              		.loc 1 435 49 discriminator 1
 2758 0060 7B68     		ldr	r3, [r7, #4]
 2759 0062 0733     		adds	r3, r3, #7
 2760              		.loc 1 435 46 discriminator 1
 2761 0064 664A     		ldr	r2, .L152+12
 2762 0066 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2763              		.loc 1 435 34 discriminator 1
 2764 0068 512B     		cmp	r3, #81
 2765 006a 40D1     		bne	.L146
 436:src/modem.c   **** 					&& (sio_buf2[i + 8] == 'I') && (sio_buf2[i + 9] == 'O')
 2766              		.loc 1 436 21
 2767 006c 7B68     		ldr	r3, [r7, #4]
 2768 006e 0833     		adds	r3, r3, #8
 2769              		.loc 1 436 18
 2770 0070 634A     		ldr	r2, .L152+12
 2771 0072 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2772              		.loc 1 436 6
 2773 0074 492B     		cmp	r3, #73
 2774 0076 3AD1     		bne	.L146
 2775              		.loc 1 436 49 discriminator 1
 2776 0078 7B68     		ldr	r3, [r7, #4]
 2777 007a 0933     		adds	r3, r3, #9
 2778              		.loc 1 436 46 discriminator 1
 2779 007c 604A     		ldr	r2, .L152+12
 2780 007e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2781              		.loc 1 436 34 discriminator 1
 2782 0080 4F2B     		cmp	r3, #79
 2783 0082 34D1     		bne	.L146
 437:src/modem.c   **** 					&& (sio_buf2[i + 10] == 'P') && (sio_buf2[i + 11] == 'E')
 2784              		.loc 1 437 21
 2785 0084 7B68     		ldr	r3, [r7, #4]
 2786 0086 0A33     		adds	r3, r3, #10
 2787              		.loc 1 437 18
 2788 0088 5D4A     		ldr	r2, .L152+12
 2789 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2790              		.loc 1 437 6
 2791 008c 502B     		cmp	r3, #80
 2792 008e 2ED1     		bne	.L146
 2793              		.loc 1 437 50 discriminator 1
 2794 0090 7B68     		ldr	r3, [r7, #4]
 2795 0092 0B33     		adds	r3, r3, #11
 2796              		.loc 1 437 47 discriminator 1
 2797 0094 5A4A     		ldr	r2, .L152+12
 2798 0096 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2799              		.loc 1 437 35 discriminator 1
 2800 0098 452B     		cmp	r3, #69
 2801 009a 28D1     		bne	.L146
 438:src/modem.c   **** 					&& (sio_buf2[i + 12] == 'N') && (sio_buf2[i + 13] == ':')
 2802              		.loc 1 438 21
 2803 009c 7B68     		ldr	r3, [r7, #4]
 2804 009e 0C33     		adds	r3, r3, #12
 2805              		.loc 1 438 18
 2806 00a0 574A     		ldr	r2, .L152+12
 2807 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2808              		.loc 1 438 6
 2809 00a4 4E2B     		cmp	r3, #78
 2810 00a6 22D1     		bne	.L146
 2811              		.loc 1 438 50 discriminator 1
 2812 00a8 7B68     		ldr	r3, [r7, #4]
 2813 00aa 0D33     		adds	r3, r3, #13
 2814              		.loc 1 438 47 discriminator 1
 2815 00ac 544A     		ldr	r2, .L152+12
 2816 00ae D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2817              		.loc 1 438 35 discriminator 1
 2818 00b0 3A2B     		cmp	r3, #58
 2819 00b2 1CD1     		bne	.L146
 439:src/modem.c   **** 					&& (sio_buf2[i + 14] == ' ') && (sio_buf2[i + 15] == '1')
 2820              		.loc 1 439 21
 2821 00b4 7B68     		ldr	r3, [r7, #4]
 2822 00b6 0E33     		adds	r3, r3, #14
 2823              		.loc 1 439 18
 2824 00b8 514A     		ldr	r2, .L152+12
 2825 00ba D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2826              		.loc 1 439 6
 2827 00bc 202B     		cmp	r3, #32
 2828 00be 16D1     		bne	.L146
 2829              		.loc 1 439 50 discriminator 1
 2830 00c0 7B68     		ldr	r3, [r7, #4]
 2831 00c2 0F33     		adds	r3, r3, #15
 2832              		.loc 1 439 47 discriminator 1
 2833 00c4 4E4A     		ldr	r2, .L152+12
 2834 00c6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2835              		.loc 1 439 35 discriminator 1
 2836 00c8 312B     		cmp	r3, #49
 2837 00ca 10D1     		bne	.L146
 440:src/modem.c   **** 					&& (sio_buf2[i + 16] == ',') && (sio_buf2[i + 17] == '0'))
 2838              		.loc 1 440 21
 2839 00cc 7B68     		ldr	r3, [r7, #4]
 2840 00ce 1033     		adds	r3, r3, #16
 2841              		.loc 1 440 18
 2842 00d0 4B4A     		ldr	r2, .L152+12
 2843 00d2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2844              		.loc 1 440 6
 2845 00d4 2C2B     		cmp	r3, #44
 2846 00d6 0AD1     		bne	.L146
 2847              		.loc 1 440 50 discriminator 1
 2848 00d8 7B68     		ldr	r3, [r7, #4]
 2849 00da 1133     		adds	r3, r3, #17
 2850              		.loc 1 440 47 discriminator 1
 2851 00dc 484A     		ldr	r2, .L152+12
 2852 00de D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2853              		.loc 1 440 35 discriminator 1
 2854 00e0 302B     		cmp	r3, #48
 2855 00e2 04D1     		bne	.L146
 441:src/modem.c   **** 
 442:src/modem.c   **** 					{
 443:src/modem.c   **** 				i_OPEN = 0;
 2856              		.loc 1 443 12
 2857 00e4 494B     		ldr	r3, .L152+24
 2858 00e6 0022     		movs	r2, #0
 2859 00e8 1A60     		str	r2, [r3]
 444:src/modem.c   **** 				return true;
 2860              		.loc 1 444 12
 2861 00ea 0123     		movs	r3, #1
 2862 00ec 7DE0     		b	.L147
 2863              	.L146:
 445:src/modem.c   **** 			}
 446:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')
 2864              		.loc 1 446 17
 2865 00ee 444A     		ldr	r2, .L152+12
 2866 00f0 7B68     		ldr	r3, [r7, #4]
 2867 00f2 1344     		add	r3, r3, r2
 2868 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2869              		.loc 1 446 7
 2870 00f6 4F2B     		cmp	r3, #79
 2871 00f8 67D1     		bne	.L148
 2872              		.loc 1 446 44 discriminator 1
 2873 00fa 7B68     		ldr	r3, [r7, #4]
 2874 00fc 0133     		adds	r3, r3, #1
 2875              		.loc 1 446 41 discriminator 1
 2876 00fe 404A     		ldr	r2, .L152+12
 2877 0100 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2878              		.loc 1 446 29 discriminator 1
 2879 0102 4B2B     		cmp	r3, #75
 2880 0104 61D1     		bne	.L148
 447:src/modem.c   **** 					&& (sio_buf2[i + 6] == '+') && (sio_buf2[i + 7] == 'Q')
 2881              		.loc 1 447 21
 2882 0106 7B68     		ldr	r3, [r7, #4]
 2883 0108 0633     		adds	r3, r3, #6
 2884              		.loc 1 447 18
 2885 010a 3D4A     		ldr	r2, .L152+12
 2886 010c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2887              		.loc 1 447 6
 2888 010e 2B2B     		cmp	r3, #43
 2889 0110 5BD1     		bne	.L148
 2890              		.loc 1 447 49 discriminator 1
 2891 0112 7B68     		ldr	r3, [r7, #4]
 2892 0114 0733     		adds	r3, r3, #7
 2893              		.loc 1 447 46 discriminator 1
 2894 0116 3A4A     		ldr	r2, .L152+12
 2895 0118 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2896              		.loc 1 447 34 discriminator 1
 2897 011a 512B     		cmp	r3, #81
 2898 011c 55D1     		bne	.L148
 448:src/modem.c   **** 					&& (sio_buf2[i + 8] == 'I') && (sio_buf2[i + 9] == 'O')
 2899              		.loc 1 448 21
 2900 011e 7B68     		ldr	r3, [r7, #4]
 2901 0120 0833     		adds	r3, r3, #8
 2902              		.loc 1 448 18
 2903 0122 374A     		ldr	r2, .L152+12
 2904 0124 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2905              		.loc 1 448 6
 2906 0126 492B     		cmp	r3, #73
 2907 0128 4FD1     		bne	.L148
 2908              		.loc 1 448 49 discriminator 1
 2909 012a 7B68     		ldr	r3, [r7, #4]
 2910 012c 0933     		adds	r3, r3, #9
 2911              		.loc 1 448 46 discriminator 1
 2912 012e 344A     		ldr	r2, .L152+12
 2913 0130 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2914              		.loc 1 448 34 discriminator 1
 2915 0132 4F2B     		cmp	r3, #79
 2916 0134 49D1     		bne	.L148
 449:src/modem.c   **** 					&& (sio_buf2[i + 10] == 'P') && (sio_buf2[i + 11] == 'E')
 2917              		.loc 1 449 21
 2918 0136 7B68     		ldr	r3, [r7, #4]
 2919 0138 0A33     		adds	r3, r3, #10
 2920              		.loc 1 449 18
 2921 013a 314A     		ldr	r2, .L152+12
 2922 013c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2923              		.loc 1 449 6
 2924 013e 502B     		cmp	r3, #80
 2925 0140 43D1     		bne	.L148
 2926              		.loc 1 449 50 discriminator 1
 2927 0142 7B68     		ldr	r3, [r7, #4]
 2928 0144 0B33     		adds	r3, r3, #11
 2929              		.loc 1 449 47 discriminator 1
 2930 0146 2E4A     		ldr	r2, .L152+12
 2931 0148 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2932              		.loc 1 449 35 discriminator 1
 2933 014a 452B     		cmp	r3, #69
 2934 014c 3DD1     		bne	.L148
 450:src/modem.c   **** 					&& (sio_buf2[i + 12] == 'N') && (sio_buf2[i + 13] == ':')
 2935              		.loc 1 450 21
 2936 014e 7B68     		ldr	r3, [r7, #4]
 2937 0150 0C33     		adds	r3, r3, #12
 2938              		.loc 1 450 18
 2939 0152 2B4A     		ldr	r2, .L152+12
 2940 0154 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2941              		.loc 1 450 6
 2942 0156 4E2B     		cmp	r3, #78
 2943 0158 37D1     		bne	.L148
 2944              		.loc 1 450 50 discriminator 1
 2945 015a 7B68     		ldr	r3, [r7, #4]
 2946 015c 0D33     		adds	r3, r3, #13
 2947              		.loc 1 450 47 discriminator 1
 2948 015e 284A     		ldr	r2, .L152+12
 2949 0160 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2950              		.loc 1 450 35 discriminator 1
 2951 0162 3A2B     		cmp	r3, #58
 2952 0164 31D1     		bne	.L148
 451:src/modem.c   **** 					&& (sio_buf2[i + 14] == ' ') && (sio_buf2[i + 15] == '1')
 2953              		.loc 1 451 21
 2954 0166 7B68     		ldr	r3, [r7, #4]
 2955 0168 0E33     		adds	r3, r3, #14
 2956              		.loc 1 451 18
 2957 016a 254A     		ldr	r2, .L152+12
 2958 016c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2959              		.loc 1 451 6
 2960 016e 202B     		cmp	r3, #32
 2961 0170 2BD1     		bne	.L148
 2962              		.loc 1 451 50 discriminator 1
 2963 0172 7B68     		ldr	r3, [r7, #4]
 2964 0174 0F33     		adds	r3, r3, #15
 2965              		.loc 1 451 47 discriminator 1
 2966 0176 224A     		ldr	r2, .L152+12
 2967 0178 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2968              		.loc 1 451 35 discriminator 1
 2969 017a 312B     		cmp	r3, #49
 2970 017c 25D1     		bne	.L148
 452:src/modem.c   **** 					&& (sio_buf2[i + 16] == ',') && (sio_buf2[i + 17] == '5')
 2971              		.loc 1 452 21
 2972 017e 7B68     		ldr	r3, [r7, #4]
 2973 0180 1033     		adds	r3, r3, #16
 2974              		.loc 1 452 18
 2975 0182 1F4A     		ldr	r2, .L152+12
 2976 0184 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2977              		.loc 1 452 6
 2978 0186 2C2B     		cmp	r3, #44
 2979 0188 1FD1     		bne	.L148
 2980              		.loc 1 452 50 discriminator 1
 2981 018a 7B68     		ldr	r3, [r7, #4]
 2982 018c 1133     		adds	r3, r3, #17
 2983              		.loc 1 452 47 discriminator 1
 2984 018e 1C4A     		ldr	r2, .L152+12
 2985 0190 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2986              		.loc 1 452 35 discriminator 1
 2987 0192 352B     		cmp	r3, #53
 2988 0194 19D1     		bne	.L148
 453:src/modem.c   **** 					&& (sio_buf2[i + 18] == '6') && (sio_buf2[i + 19] == '3'))
 2989              		.loc 1 453 21
 2990 0196 7B68     		ldr	r3, [r7, #4]
 2991 0198 1233     		adds	r3, r3, #18
 2992              		.loc 1 453 18
 2993 019a 194A     		ldr	r2, .L152+12
 2994 019c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2995              		.loc 1 453 6
 2996 019e 362B     		cmp	r3, #54
 2997 01a0 13D1     		bne	.L148
 2998              		.loc 1 453 50 discriminator 1
 2999 01a2 7B68     		ldr	r3, [r7, #4]
 3000 01a4 1333     		adds	r3, r3, #19
 3001              		.loc 1 453 47 discriminator 1
 3002 01a6 164A     		ldr	r2, .L152+12
 3003 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3004              		.loc 1 453 35 discriminator 1
 3005 01aa 332B     		cmp	r3, #51
 3006 01ac 0DD1     		bne	.L148
 454:src/modem.c   **** 
 455:src/modem.c   **** 					{
 456:src/modem.c   **** 				if (!WaitCloseServer()) //если ответ 1,563 то закрыть tcp
 3007              		.loc 1 456 10
 3008 01ae 184B     		ldr	r3, .L152+28
 3009 01b0 9847     		blx	r3
 3010              	.LVL62:
 3011 01b2 0346     		mov	r3, r0
 3012              		.loc 1 456 9
 3013 01b4 83F00103 		eor	r3, r3, #1
 3014 01b8 DBB2     		uxtb	r3, r3
 3015              		.loc 1 456 8
 3016 01ba 002B     		cmp	r3, #0
 3017 01bc 04D1     		bne	.L151
 457:src/modem.c   **** 					continue;
 458:src/modem.c   **** 				i_OPEN = 5;
 3018              		.loc 1 458 12
 3019 01be 134B     		ldr	r3, .L152+24
 3020 01c0 0522     		movs	r2, #5
 3021 01c2 1A60     		str	r2, [r3]
 459:src/modem.c   **** 				return false;
 3022              		.loc 1 459 12
 3023 01c4 0023     		movs	r3, #0
 3024 01c6 10E0     		b	.L147
 3025              	.L151:
 457:src/modem.c   **** 					continue;
 3026              		.loc 1 457 6
 3027 01c8 00BF     		nop
 3028              	.L148:
 433:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')
 3029              		.loc 1 433 34 discriminator 2
 3030 01ca 7B68     		ldr	r3, [r7, #4]
 3031 01cc 0133     		adds	r3, r3, #1
 3032 01ce 7B60     		str	r3, [r7, #4]
 3033              	.L145:
 433:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')
 3034              		.loc 1 433 21 discriminator 1
 3035 01d0 0D4B     		ldr	r3, .L152+20
 3036 01d2 1B88     		ldrh	r3, [r3]	@ movhi
 3037 01d4 9BB2     		uxth	r3, r3
 3038 01d6 1A46     		mov	r2, r3
 433:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')
 3039              		.loc 1 433 3 discriminator 1
 3040 01d8 7B68     		ldr	r3, [r7, #4]
 3041 01da 9342     		cmp	r3, r2
 3042 01dc FFF62EAF 		blt	.L150
 3043              	.L144:
 3044              	.LBE10:
 460:src/modem.c   **** 			}
 461:src/modem.c   **** 
 462:src/modem.c   **** 		}
 463:src/modem.c   **** 
 464:src/modem.c   **** 	}
 465:src/modem.c   **** 	vTaskDelay(5000);
 3045              		.loc 1 465 2
 3046 01e0 41F28830 		movw	r0, #5000
 3047 01e4 034B     		ldr	r3, .L152
 3048 01e6 9847     		blx	r3
 3049              	.LVL63:
 466:src/modem.c   **** 	return false;
 3050              		.loc 1 466 9
 3051 01e8 0023     		movs	r3, #0
 3052              	.L147:
 467:src/modem.c   **** }
 3053              		.loc 1 467 1
 3054 01ea 1846     		mov	r0, r3
 3055 01ec 0837     		adds	r7, r7, #8
 3056              	.LCFI89:
 3057              		.cfi_def_cfa_offset 8
 3058 01ee BD46     		mov	sp, r7
 3059              	.LCFI90:
 3060              		.cfi_def_cfa_register 13
 3061              		@ sp needed
 3062 01f0 80BD     		pop	{r7, pc}
 3063              	.L153:
 3064 01f2 00BF     		.align	2
 3065              	.L152:
 3066 01f4 00000000 		.word	vTaskDelay
 3067 01f8 2C010000 		.word	.LC22
 3068 01fc 00000000 		.word	ModemWrite
 3069 0200 00000000 		.word	sio_buf2
 3070 0204 00000000 		.word	uart2Read
 3071 0208 00000000 		.word	bufsize2
 3072 020c 00000000 		.word	i_OPEN
 3073 0210 00000000 		.word	WaitCloseServer
 3074              		.cfi_endproc
 3075              	.LFE50:
 3077              		.section	.rodata
 3078              		.align	2
 3079              	.LC23:
 3080 0160 41542B51 		.ascii	"AT+QICLOSE=\000"
 3080      49434C4F 
 3080      53453D00 
 3081              		.align	2
 3082              	.LC24:
 3083 016c 0D0A00   		.ascii	"\015\012\000"
 3084              		.section	.text.WaitClose,"ax",%progbits
 3085              		.align	1
 3086              		.global	WaitClose
 3087              		.syntax unified
 3088              		.thumb
 3089              		.thumb_func
 3091              	WaitClose:
 3092              	.LFB51:
 468:src/modem.c   **** 
 469:src/modem.c   **** bool WaitClose(int IDs) {
 3093              		.loc 1 469 25
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 296
 3096              		@ frame_needed = 1, uses_anonymous_args = 0
 3097 0000 80B5     		push	{r7, lr}
 3098              	.LCFI91:
 3099              		.cfi_def_cfa_offset 8
 3100              		.cfi_offset 7, -8
 3101              		.cfi_offset 14, -4
 3102 0002 CAB0     		sub	sp, sp, #296
 3103              	.LCFI92:
 3104              		.cfi_def_cfa_offset 304
 3105 0004 00AF     		add	r7, sp, #0
 3106              	.LCFI93:
 3107              		.cfi_def_cfa_register 7
 3108 0006 07F59473 		add	r3, r7, #296
 3109 000a A3F59273 		sub	r3, r3, #292
 3110 000e 1860     		str	r0, [r3]
 470:src/modem.c   **** 
 471:src/modem.c   **** 	char buffer[256];
 472:src/modem.c   **** 	char minbuf[32];
 473:src/modem.c   **** 
 474:src/modem.c   **** 	itoa1(IDs, minbuf);
 3111              		.loc 1 474 2
 3112 0010 07F10802 		add	r2, r7, #8
 3113 0014 07F59473 		add	r3, r7, #296
 3114 0018 A3F59273 		sub	r3, r3, #292
 3115 001c 1146     		mov	r1, r2
 3116 001e 1868     		ldr	r0, [r3]
 3117 0020 184B     		ldr	r3, .L156
 3118 0022 9847     		blx	r3
 3119              	.LVL64:
 475:src/modem.c   **** 	strcpy(buffer, "AT+QICLOSE="); // закрыть TCPсоединение
 3120              		.loc 1 475 2
 3121 0024 07F12803 		add	r3, r7, #40
 3122 0028 174A     		ldr	r2, .L156+4
 3123 002a 07CA     		ldm	r2, {r0, r1, r2}
 3124 002c 83E80700 		stm	r3, {r0, r1, r2}
 476:src/modem.c   **** 	strcat(buffer, minbuf);
 3125              		.loc 1 476 2
 3126 0030 07F10802 		add	r2, r7, #8
 3127 0034 07F12803 		add	r3, r7, #40
 3128 0038 1146     		mov	r1, r2
 3129 003a 1846     		mov	r0, r3
 3130 003c 134B     		ldr	r3, .L156+8
 3131 003e 9847     		blx	r3
 3132              	.LVL65:
 477:src/modem.c   **** 	strcat(buffer, "\r\n");
 3133              		.loc 1 477 2
 3134 0040 07F12803 		add	r3, r7, #40
 3135 0044 1846     		mov	r0, r3
 3136 0046 124B     		ldr	r3, .L156+12
 3137 0048 9847     		blx	r3
 3138              	.LVL66:
 3139 004a 0346     		mov	r3, r0
 3140 004c 1A46     		mov	r2, r3
 3141 004e 07F12803 		add	r3, r7, #40
 3142 0052 1344     		add	r3, r3, r2
 3143 0054 0F4A     		ldr	r2, .L156+16
 3144 0056 1188     		ldrh	r1, [r2]	@ unaligned
 3145 0058 9278     		ldrb	r2, [r2, #2]
 3146 005a 1980     		strh	r1, [r3]	@ unaligned
 3147 005c 9A70     		strb	r2, [r3, #2]
 478:src/modem.c   **** 	ModemWrite(buffer);
 3148              		.loc 1 478 2
 3149 005e 07F12803 		add	r3, r7, #40
 3150 0062 1846     		mov	r0, r3
 3151 0064 0C4B     		ldr	r3, .L156+20
 3152 0066 9847     		blx	r3
 3153              	.LVL67:
 479:src/modem.c   **** 	vTaskDelay(100);
 3154              		.loc 1 479 2
 3155 0068 6420     		movs	r0, #100
 3156 006a 0C4B     		ldr	r3, .L156+24
 3157 006c 9847     		blx	r3
 3158              	.LVL68:
 480:src/modem.c   **** 	return WaitAnsver(MA_OK, 1000);
 3159              		.loc 1 480 9
 3160 006e 4FF47A71 		mov	r1, #1000
 3161 0072 0220     		movs	r0, #2
 3162 0074 0A4B     		ldr	r3, .L156+28
 3163 0076 9847     		blx	r3
 3164              	.LVL69:
 3165 0078 0346     		mov	r3, r0
 481:src/modem.c   **** 
 482:src/modem.c   **** }
 3166              		.loc 1 482 1
 3167 007a 1846     		mov	r0, r3
 3168 007c 07F59477 		add	r7, r7, #296
 3169              	.LCFI94:
 3170              		.cfi_def_cfa_offset 8
 3171 0080 BD46     		mov	sp, r7
 3172              	.LCFI95:
 3173              		.cfi_def_cfa_register 13
 3174              		@ sp needed
 3175 0082 80BD     		pop	{r7, pc}
 3176              	.L157:
 3177              		.align	2
 3178              	.L156:
 3179 0084 00000000 		.word	itoa1
 3180 0088 60010000 		.word	.LC23
 3181 008c 00000000 		.word	strcat
 3182 0090 00000000 		.word	strlen
 3183 0094 6C010000 		.word	.LC24
 3184 0098 00000000 		.word	ModemWrite
 3185 009c 00000000 		.word	vTaskDelay
 3186 00a0 00000000 		.word	WaitAnsver
 3187              		.cfi_endproc
 3188              	.LFE51:
 3190              		.section	.rodata
 3191 016f 00       		.align	2
 3192              	.LC25:
 3193 0170 41542B51 		.ascii	"AT+QICLOSE=1\015\012\000"
 3193      49434C4F 
 3193      53453D31 
 3193      0D0A00
 3194              		.section	.text.WaitCloseServer,"ax",%progbits
 3195              		.align	1
 3196              		.global	WaitCloseServer
 3197              		.syntax unified
 3198              		.thumb
 3199              		.thumb_func
 3201              	WaitCloseServer:
 3202              	.LFB52:
 483:src/modem.c   **** 
 484:src/modem.c   **** bool WaitCloseServer() {
 3203              		.loc 1 484 24
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 0
 3206              		@ frame_needed = 1, uses_anonymous_args = 0
 3207 0000 80B5     		push	{r7, lr}
 3208              	.LCFI96:
 3209              		.cfi_def_cfa_offset 8
 3210              		.cfi_offset 7, -8
 3211              		.cfi_offset 14, -4
 3212 0002 00AF     		add	r7, sp, #0
 3213              	.LCFI97:
 3214              		.cfi_def_cfa_register 7
 485:src/modem.c   **** 	ModemWrite("AT+QICLOSE=1\r\n"); // закрыть TCPсервер
 3215              		.loc 1 485 2
 3216 0004 0648     		ldr	r0, .L160
 3217 0006 074B     		ldr	r3, .L160+4
 3218 0008 9847     		blx	r3
 3219              	.LVL70:
 486:src/modem.c   **** 	vTaskDelay(100);
 3220              		.loc 1 486 2
 3221 000a 6420     		movs	r0, #100
 3222 000c 064B     		ldr	r3, .L160+8
 3223 000e 9847     		blx	r3
 3224              	.LVL71:
 487:src/modem.c   **** 	return WaitAnsver(MA_OK, 1000);
 3225              		.loc 1 487 9
 3226 0010 4FF47A71 		mov	r1, #1000
 3227 0014 0220     		movs	r0, #2
 3228 0016 054B     		ldr	r3, .L160+12
 3229 0018 9847     		blx	r3
 3230              	.LVL72:
 3231 001a 0346     		mov	r3, r0
 488:src/modem.c   **** }
 3232              		.loc 1 488 1
 3233 001c 1846     		mov	r0, r3
 3234 001e 80BD     		pop	{r7, pc}
 3235              	.L161:
 3236              		.align	2
 3237              	.L160:
 3238 0020 70010000 		.word	.LC25
 3239 0024 00000000 		.word	ModemWrite
 3240 0028 00000000 		.word	vTaskDelay
 3241 002c 00000000 		.word	WaitAnsver
 3242              		.cfi_endproc
 3243              	.LFE52:
 3245              		.section	.rodata
 3246 017f 00       		.align	2
 3247              	.LC26:
 3248 0180 41542B43 		.ascii	"AT+CTZR=2\015\012\000"
 3248      545A523D 
 3248      320D0A00 
 3249              		.align	2
 3250              	.LC27:
 3251 018c 41542B43 		.ascii	"AT+CTZU=1\015\012\000"
 3251      545A553D 
 3251      310D0A00 
 3252              		.align	2
 3253              	.LC28:
 3254 0198 41542B43 		.ascii	"AT+CTZU=3\015\012\000"
 3254      545A553D 
 3254      330D0A00 
 3255              		.align	2
 3256              	.LC29:
 3257 01a4 41542B51 		.ascii	"AT+QNITZ=1\015\012\000"
 3257      4E49545A 
 3257      3D310D0A 
 3257      00
 3258              		.section	.text.WaitGprsTime,"ax",%progbits
 3259              		.align	1
 3260              		.global	WaitGprsTime
 3261              		.syntax unified
 3262              		.thumb
 3263              		.thumb_func
 3265              	WaitGprsTime:
 3266              	.LFB53:
 489:src/modem.c   **** 
 490:src/modem.c   **** bool WaitGprsTime() {
 3267              		.loc 1 490 21
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 1, uses_anonymous_args = 0
 3271 0000 80B5     		push	{r7, lr}
 3272              	.LCFI98:
 3273              		.cfi_def_cfa_offset 8
 3274              		.cfi_offset 7, -8
 3275              		.cfi_offset 14, -4
 3276 0002 00AF     		add	r7, sp, #0
 3277              	.LCFI99:
 3278              		.cfi_def_cfa_register 7
 491:src/modem.c   **** 	if (flag_first == 0) {
 3279              		.loc 1 491 17
 3280 0004 324B     		ldr	r3, .L171
 3281 0006 1B68     		ldr	r3, [r3]
 3282              		.loc 1 491 5
 3283 0008 002B     		cmp	r3, #0
 3284 000a 5FD1     		bne	.L163
 492:src/modem.c   **** 		if ((DeviceID == 1) || (DeviceID == 3)) {
 3285              		.loc 1 492 17
 3286 000c 314B     		ldr	r3, .L171+4
 3287 000e 1B68     		ldr	r3, [r3]
 3288              		.loc 1 492 6
 3289 0010 012B     		cmp	r3, #1
 3290 0012 03D0     		beq	.L164
 3291              		.loc 1 492 36 discriminator 1
 3292 0014 2F4B     		ldr	r3, .L171+4
 3293 0016 1B68     		ldr	r3, [r3]
 3294              		.loc 1 492 23 discriminator 1
 3295 0018 032B     		cmp	r3, #3
 3296 001a 2BD1     		bne	.L165
 3297              	.L164:
 493:src/modem.c   **** 			vTaskDelay(100);
 3298              		.loc 1 493 4
 3299 001c 6420     		movs	r0, #100
 3300 001e 2E4B     		ldr	r3, .L171+8
 3301 0020 9847     		blx	r3
 3302              	.LVL73:
 494:src/modem.c   **** 			ModemWrite("AT+CTZR=2\r\n");
 3303              		.loc 1 494 4
 3304 0022 2E48     		ldr	r0, .L171+12
 3305 0024 2E4B     		ldr	r3, .L171+16
 3306 0026 9847     		blx	r3
 3307              	.LVL74:
 495:src/modem.c   **** 			if (WaitAnsver(MA_OK, 50) == false)
 3308              		.loc 1 495 8
 3309 0028 3221     		movs	r1, #50
 3310 002a 0220     		movs	r0, #2
 3311 002c 2D4B     		ldr	r3, .L171+20
 3312 002e 9847     		blx	r3
 3313              	.LVL75:
 3314 0030 0346     		mov	r3, r0
 3315              		.loc 1 495 30
 3316 0032 83F00103 		eor	r3, r3, #1
 3317 0036 DBB2     		uxtb	r3, r3
 3318              		.loc 1 495 7
 3319 0038 002B     		cmp	r3, #0
 3320 003a 01D0     		beq	.L166
 496:src/modem.c   **** 				return false;
 3321              		.loc 1 496 12
 3322 003c 0023     		movs	r3, #0
 3323 003e 45E0     		b	.L162
 3324              	.L166:
 497:src/modem.c   **** 
 498:src/modem.c   **** 			vTaskDelay(100);
 3325              		.loc 1 498 4
 3326 0040 6420     		movs	r0, #100
 3327 0042 254B     		ldr	r3, .L171+8
 3328 0044 9847     		blx	r3
 3329              	.LVL76:
 499:src/modem.c   **** 			ModemWrite("AT+CTZU=1\r\n");
 3330              		.loc 1 499 4
 3331 0046 2848     		ldr	r0, .L171+24
 3332 0048 254B     		ldr	r3, .L171+16
 3333 004a 9847     		blx	r3
 3334              	.LVL77:
 500:src/modem.c   **** 			if (WaitAnsver(MA_OK, 50) == false)
 3335              		.loc 1 500 8
 3336 004c 3221     		movs	r1, #50
 3337 004e 0220     		movs	r0, #2
 3338 0050 244B     		ldr	r3, .L171+20
 3339 0052 9847     		blx	r3
 3340              	.LVL78:
 3341 0054 0346     		mov	r3, r0
 3342              		.loc 1 500 30
 3343 0056 83F00103 		eor	r3, r3, #1
 3344 005a DBB2     		uxtb	r3, r3
 3345              		.loc 1 500 7
 3346 005c 002B     		cmp	r3, #0
 3347 005e 01D0     		beq	.L168
 501:src/modem.c   **** 				return false;
 3348              		.loc 1 501 12
 3349 0060 0023     		movs	r3, #0
 3350 0062 33E0     		b	.L162
 3351              	.L168:
 502:src/modem.c   **** 
 503:src/modem.c   **** 			flag_first = 2;
 3352              		.loc 1 503 15
 3353 0064 1A4B     		ldr	r3, .L171
 3354 0066 0222     		movs	r2, #2
 3355 0068 1A60     		str	r2, [r3]
 504:src/modem.c   **** 			LedNoModem = 0;
 3356              		.loc 1 504 15
 3357 006a 204B     		ldr	r3, .L171+28
 3358 006c 0022     		movs	r2, #0
 3359 006e 1A70     		strb	r2, [r3]
 505:src/modem.c   **** 			return true;
 3360              		.loc 1 505 11
 3361 0070 0123     		movs	r3, #1
 3362 0072 2BE0     		b	.L162
 3363              	.L165:
 506:src/modem.c   **** 		} else {
 507:src/modem.c   **** 			vTaskDelay(100);
 3364              		.loc 1 507 4
 3365 0074 6420     		movs	r0, #100
 3366 0076 184B     		ldr	r3, .L171+8
 3367 0078 9847     		blx	r3
 3368              	.LVL79:
 508:src/modem.c   **** 			ModemWrite("AT+CTZU=3\r\n");
 3369              		.loc 1 508 4
 3370 007a 1D48     		ldr	r0, .L171+32
 3371 007c 184B     		ldr	r3, .L171+16
 3372 007e 9847     		blx	r3
 3373              	.LVL80:
 509:src/modem.c   **** 			if (WaitAnsver(MA_OK, 30) == false)
 3374              		.loc 1 509 8
 3375 0080 1E21     		movs	r1, #30
 3376 0082 0220     		movs	r0, #2
 3377 0084 174B     		ldr	r3, .L171+20
 3378 0086 9847     		blx	r3
 3379              	.LVL81:
 3380 0088 0346     		mov	r3, r0
 3381              		.loc 1 509 30
 3382 008a 83F00103 		eor	r3, r3, #1
 3383 008e DBB2     		uxtb	r3, r3
 3384              		.loc 1 509 7
 3385 0090 002B     		cmp	r3, #0
 3386 0092 01D0     		beq	.L169
 510:src/modem.c   **** 				return false;
 3387              		.loc 1 510 12
 3388 0094 0023     		movs	r3, #0
 3389 0096 19E0     		b	.L162
 3390              	.L169:
 511:src/modem.c   **** 
 512:src/modem.c   **** 			vTaskDelay(100);
 3391              		.loc 1 512 4
 3392 0098 6420     		movs	r0, #100
 3393 009a 0F4B     		ldr	r3, .L171+8
 3394 009c 9847     		blx	r3
 3395              	.LVL82:
 513:src/modem.c   **** 			ModemWrite("AT+QNITZ=1\r\n");
 3396              		.loc 1 513 4
 3397 009e 1548     		ldr	r0, .L171+36
 3398 00a0 0F4B     		ldr	r3, .L171+16
 3399 00a2 9847     		blx	r3
 3400              	.LVL83:
 514:src/modem.c   **** 			if (WaitAnsver(MA_OK, 30) == false)
 3401              		.loc 1 514 8
 3402 00a4 1E21     		movs	r1, #30
 3403 00a6 0220     		movs	r0, #2
 3404 00a8 0E4B     		ldr	r3, .L171+20
 3405 00aa 9847     		blx	r3
 3406              	.LVL84:
 3407 00ac 0346     		mov	r3, r0
 3408              		.loc 1 514 30
 3409 00ae 83F00103 		eor	r3, r3, #1
 3410 00b2 DBB2     		uxtb	r3, r3
 3411              		.loc 1 514 7
 3412 00b4 002B     		cmp	r3, #0
 3413 00b6 01D0     		beq	.L170
 515:src/modem.c   **** 				return false;
 3414              		.loc 1 515 12
 3415 00b8 0023     		movs	r3, #0
 3416 00ba 07E0     		b	.L162
 3417              	.L170:
 516:src/modem.c   **** 
 517:src/modem.c   **** 			flag_first = 2;
 3418              		.loc 1 517 15
 3419 00bc 044B     		ldr	r3, .L171
 3420 00be 0222     		movs	r2, #2
 3421 00c0 1A60     		str	r2, [r3]
 518:src/modem.c   **** 			LedNoModem = 0;
 3422              		.loc 1 518 15
 3423 00c2 0A4B     		ldr	r3, .L171+28
 3424 00c4 0022     		movs	r2, #0
 3425 00c6 1A70     		strb	r2, [r3]
 519:src/modem.c   **** 			return true;
 3426              		.loc 1 519 11
 3427 00c8 0123     		movs	r3, #1
 3428 00ca FFE7     		b	.L162
 3429              	.L163:
 3430              	.L162:
 520:src/modem.c   **** 
 521:src/modem.c   **** 		}
 522:src/modem.c   **** 
 523:src/modem.c   **** 	}
 524:src/modem.c   **** 
 525:src/modem.c   **** }
 3431              		.loc 1 525 1
 3432 00cc 1846     		mov	r0, r3
 3433 00ce 80BD     		pop	{r7, pc}
 3434              	.L172:
 3435              		.align	2
 3436              	.L171:
 3437 00d0 00000000 		.word	flag_first
 3438 00d4 00000000 		.word	DeviceID
 3439 00d8 00000000 		.word	vTaskDelay
 3440 00dc 80010000 		.word	.LC26
 3441 00e0 00000000 		.word	ModemWrite
 3442 00e4 00000000 		.word	WaitAnsver
 3443 00e8 8C010000 		.word	.LC27
 3444 00ec 00000000 		.word	LedNoModem
 3445 00f0 98010000 		.word	.LC28
 3446 00f4 A4010000 		.word	.LC29
 3447              		.cfi_endproc
 3448              	.LFE53:
 3450              		.section	.rodata
 3451 01b1 000000   		.align	2
 3452              	.LC30:
 3453 01b4 41542B51 		.ascii	"AT+QIDEACT=1\015\012\000"
 3453      49444541 
 3453      43543D31 
 3453      0D0A00
 3454 01c3 00       		.align	2
 3455              	.LC31:
 3456 01c4 41542B51 		.ascii	"AT+QICSGP=1,1,\"\000"
 3456      49435347 
 3456      503D312C 
 3456      312C2200 
 3457              		.align	2
 3458              	.LC32:
 3459 01d4 222C2200 		.ascii	"\",\"\000"
 3460              		.align	2
 3461              	.LC33:
 3462 01d8 222C310D 		.ascii	"\",1\015\012\000"
 3462      0A00
 3463 01de 0000     		.align	2
 3464              	.LC34:
 3465 01e0 47534D3A 		.ascii	"GSM:\356\370\350\341\352\340 \350\355\350\366\350\340"
 3465      EEF8E8E1 
 3465      EAE020E8 
 3465      EDE8F6E8 
 3465      E0
 3466 01f1 EB2E00   		.ascii	"\353.\000"
 3467              		.align	2
 3468              	.LC35:
 3469 01f4 41542B43 		.ascii	"AT+CMGF=1\015\012\000"
 3469      4D47463D 
 3469      310D0A00 
 3470              		.align	2
 3471              	.LC36:
 3472 0200 41542B43 		.ascii	"AT+CNMI=2,2,0,0,0\015\012\000"
 3472      4E4D493D 
 3472      322C322C 
 3472      302C302C 
 3472      300D0A00 
 3473              		.align	2
 3474              	.LC37:
 3475 0214 41542B51 		.ascii	"AT+QIACT=1\015\012\000"
 3475      49414354 
 3475      3D310D0A 
 3475      00
 3476 0221 000000   		.align	2
 3477              	.LC38:
 3478 0224 41542B51 		.ascii	"AT+QILOCIP\015\012\000"
 3478      494C4F43 
 3478      49500D0A 
 3478      00
 3479              		.section	.text.WaitGprsConnectUC20,"ax",%progbits
 3480              		.align	1
 3481              		.global	WaitGprsConnectUC20
 3482              		.syntax unified
 3483              		.thumb
 3484              		.thumb_func
 3486              	WaitGprsConnectUC20:
 3487              	.LFB54:
 526:src/modem.c   **** 
 527:src/modem.c   **** //======================================================
 528:src/modem.c   **** bool WaitGprsConnectUC20() {
 3488              		.loc 1 528 28
 3489              		.cfi_startproc
 3490              		@ args = 0, pretend = 0, frame = 344
 3491              		@ frame_needed = 1, uses_anonymous_args = 0
 3492 0000 90B5     		push	{r4, r7, lr}
 3493              	.LCFI100:
 3494              		.cfi_def_cfa_offset 12
 3495              		.cfi_offset 4, -12
 3496              		.cfi_offset 7, -8
 3497              		.cfi_offset 14, -4
 3498 0002 D7B0     		sub	sp, sp, #348
 3499              	.LCFI101:
 3500              		.cfi_def_cfa_offset 360
 3501 0004 00AF     		add	r7, sp, #0
 3502              	.LCFI102:
 3503              		.cfi_def_cfa_register 7
 529:src/modem.c   **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 3504              		.loc 1 529 12
 3505 0006 754B     		ldr	r3, .L187
 3506 0008 C7F85431 		str	r3, [r7, #340]
 530:src/modem.c   **** 	char myIp[17];
 531:src/modem.c   **** 	char strsipstart[256];
 532:src/modem.c   **** 	char buf[64];
 533:src/modem.c   **** 	//char header[] = "IPD";
 534:src/modem.c   **** 	int packSize;
 535:src/modem.c   **** 	int headerSize;
 536:src/modem.c   **** 	//FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 537:src/modem.c   **** 	int i;
 538:src/modem.c   **** 
 539:src/modem.c   **** 	vTaskDelay(100);
 3507              		.loc 1 539 2
 3508 000c 6420     		movs	r0, #100
 3509 000e 744B     		ldr	r3, .L187+4
 3510 0010 9847     		blx	r3
 3511              	.LVL85:
 540:src/modem.c   **** 	ModemWrite("AT+QIDEACT=1\r\n");    // деактивация
 3512              		.loc 1 540 2
 3513 0012 7448     		ldr	r0, .L187+8
 3514 0014 744B     		ldr	r3, .L187+12
 3515 0016 9847     		blx	r3
 3516              	.LVL86:
 541:src/modem.c   **** 	/*if (WaitAnsver(MA_OK,10) == false)
 542:src/modem.c   **** 	 return false;*/
 543:src/modem.c   **** 	vTaskDelay(4000); //40c
 3517              		.loc 1 543 2
 3518 0018 4FF47A60 		mov	r0, #4000
 3519 001c 704B     		ldr	r3, .L187+4
 3520 001e 9847     		blx	r3
 3521              	.LVL87:
 544:src/modem.c   **** 
 545:src/modem.c   **** 	//vTaskDelay(1000);
 546:src/modem.c   **** //	ModemWrite("AT+QIMODE=0\r\n");  //режим
 547:src/modem.c   **** //	if (WaitAnsver(MA_OK,10) == false)
 548:src/modem.c   **** //				return false;
 549:src/modem.c   **** 
 550:src/modem.c   **** 	vTaskDelay(100);
 3522              		.loc 1 550 2
 3523 0020 6420     		movs	r0, #100
 3524 0022 6F4B     		ldr	r3, .L187+4
 3525 0024 9847     		blx	r3
 3526              	.LVL88:
 551:src/modem.c   **** 	BKP_WriteBackupRegister(BKP_DR7, 27);
 3527              		.loc 1 551 2
 3528 0026 1B21     		movs	r1, #27
 3529 0028 1C20     		movs	r0, #28
 3530 002a 704B     		ldr	r3, .L187+16
 3531 002c 9847     		blx	r3
 3532              	.LVL89:
 552:src/modem.c   **** 
 553:src/modem.c   **** 	//LedAPN = 1;
 554:src/modem.c   **** //	if (strlen(pxConfig->devcfg.gprs.login) > 16
 555:src/modem.c   **** //			|| strlen(pxConfig->devcfg.gprs.password) > 16
 556:src/modem.c   **** //			|| strlen(pxConfig->devcfg.gprs.adparam) > 32) {
 557:src/modem.c   **** //		strcpy(buf, "AT+QICSGP=1,1,\""); //AT+QICSGP=1,1,"vmi.velcom.by"," "," ",1
 558:src/modem.c   **** //		strcat(buf, PPP_ADPARAM);
 559:src/modem.c   **** //		strcat(buf, "\",\"");
 560:src/modem.c   **** //		strcat(buf, PPP_USER);
 561:src/modem.c   **** //		strcat(buf, "\",\"");
 562:src/modem.c   **** //		strcat(buf, PPP_PASS);
 563:src/modem.c   **** //		strcat(buf, "\"\,1\r\n");
 564:src/modem.c   **** //	} else {
 565:src/modem.c   **** 	strcpy(buf, "AT+QICSGP=1,1,\"");
 3533              		.loc 1 565 2
 3534 002e 3B46     		mov	r3, r7
 3535 0030 6F4A     		ldr	r2, .L187+20
 3536 0032 1C46     		mov	r4, r3
 3537 0034 1346     		mov	r3, r2
 3538 0036 0FCB     		ldm	r3, {r0, r1, r2, r3}
 3539 0038 84E80F00 		stm	r4, {r0, r1, r2, r3}
 566:src/modem.c   **** 	strcat(buf, pxConfig->devcfg.gprs.adparam);
 3540              		.loc 1 566 35
 3541 003c D7F85421 		ldr	r2, [r7, #340]
 3542              		.loc 1 566 2
 3543 0040 3B46     		mov	r3, r7
 3544 0042 1146     		mov	r1, r2
 3545 0044 1846     		mov	r0, r3
 3546 0046 6B4B     		ldr	r3, .L187+24
 3547 0048 9847     		blx	r3
 3548              	.LVL90:
 567:src/modem.c   **** 	strcat(buf, "\",\"");
 3549              		.loc 1 567 2
 3550 004a 3B46     		mov	r3, r7
 3551 004c 1846     		mov	r0, r3
 3552 004e 6A4B     		ldr	r3, .L187+28
 3553 0050 9847     		blx	r3
 3554              	.LVL91:
 3555 0052 0346     		mov	r3, r0
 3556 0054 1A46     		mov	r2, r3
 3557 0056 3B46     		mov	r3, r7
 3558 0058 1344     		add	r3, r3, r2
 3559 005a 684A     		ldr	r2, .L187+32
 3560 005c 1068     		ldr	r0, [r2]
 3561 005e 1860     		str	r0, [r3]	@ unaligned
 568:src/modem.c   **** 	strcat(buf, pxConfig->devcfg.gprs.login);
 3562              		.loc 1 568 35
 3563 0060 D7F85431 		ldr	r3, [r7, #340]
 3564 0064 03F18002 		add	r2, r3, #128
 3565              		.loc 1 568 2
 3566 0068 3B46     		mov	r3, r7
 3567 006a 1146     		mov	r1, r2
 3568 006c 1846     		mov	r0, r3
 3569 006e 614B     		ldr	r3, .L187+24
 3570 0070 9847     		blx	r3
 3571              	.LVL92:
 569:src/modem.c   **** 	strcat(buf, "\",\"");
 3572              		.loc 1 569 2
 3573 0072 3B46     		mov	r3, r7
 3574 0074 1846     		mov	r0, r3
 3575 0076 604B     		ldr	r3, .L187+28
 3576 0078 9847     		blx	r3
 3577              	.LVL93:
 3578 007a 0346     		mov	r3, r0
 3579 007c 1A46     		mov	r2, r3
 3580 007e 3B46     		mov	r3, r7
 3581 0080 1344     		add	r3, r3, r2
 3582 0082 5E4A     		ldr	r2, .L187+32
 3583 0084 1068     		ldr	r0, [r2]
 3584 0086 1860     		str	r0, [r3]	@ unaligned
 570:src/modem.c   **** 	strcat(buf, pxConfig->devcfg.gprs.password);
 3585              		.loc 1 570 35
 3586 0088 D7F85431 		ldr	r3, [r7, #340]
 3587 008c 03F1C002 		add	r2, r3, #192
 3588              		.loc 1 570 2
 3589 0090 3B46     		mov	r3, r7
 3590 0092 1146     		mov	r1, r2
 3591 0094 1846     		mov	r0, r3
 3592 0096 574B     		ldr	r3, .L187+24
 3593 0098 9847     		blx	r3
 3594              	.LVL94:
 571:src/modem.c   **** 	strcat(buf, "\"\,1\r\n");
 3595              		.loc 1 571 2
 3596 009a 3B46     		mov	r3, r7
 3597 009c 1846     		mov	r0, r3
 3598 009e 564B     		ldr	r3, .L187+28
 3599 00a0 9847     		blx	r3
 3600              	.LVL95:
 3601 00a2 0346     		mov	r3, r0
 3602 00a4 1A46     		mov	r2, r3
 3603 00a6 3B46     		mov	r3, r7
 3604 00a8 1344     		add	r3, r3, r2
 3605 00aa 554A     		ldr	r2, .L187+36
 3606 00ac 1068     		ldr	r0, [r2]
 3607 00ae 1860     		str	r0, [r3]	@ unaligned
 3608 00b0 9288     		ldrh	r2, [r2, #4]	@ unaligned
 3609 00b2 9A80     		strh	r2, [r3, #4]	@ unaligned
 572:src/modem.c   **** 	//}
 573:src/modem.c   **** 	vTaskDelay(100);
 3610              		.loc 1 573 2
 3611 00b4 6420     		movs	r0, #100
 3612 00b6 4A4B     		ldr	r3, .L187+4
 3613 00b8 9847     		blx	r3
 3614              	.LVL96:
 574:src/modem.c   **** 	ModemWrite(buf);
 3615              		.loc 1 574 2
 3616 00ba 3B46     		mov	r3, r7
 3617 00bc 1846     		mov	r0, r3
 3618 00be 4A4B     		ldr	r3, .L187+12
 3619 00c0 9847     		blx	r3
 3620              	.LVL97:
 575:src/modem.c   **** 	if (WaitAnsver(MA_OK, 10) == false) {
 3621              		.loc 1 575 6
 3622 00c2 0A21     		movs	r1, #10
 3623 00c4 0220     		movs	r0, #2
 3624 00c6 4F4B     		ldr	r3, .L187+40
 3625 00c8 9847     		blx	r3
 3626              	.LVL98:
 3627 00ca 0346     		mov	r3, r0
 3628              		.loc 1 575 28
 3629 00cc 83F00103 		eor	r3, r3, #1
 3630 00d0 DBB2     		uxtb	r3, r3
 3631              		.loc 1 575 5
 3632 00d2 002B     		cmp	r3, #0
 3633 00d4 0ED0     		beq	.L174
 576:src/modem.c   **** 		if (!LedAPN_Journal) {
 3634              		.loc 1 576 7
 3635 00d6 4C4B     		ldr	r3, .L187+44
 3636 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3637 00da 83F00103 		eor	r3, r3, #1
 3638 00de DBB2     		uxtb	r3, r3
 3639              		.loc 1 576 6
 3640 00e0 002B     		cmp	r3, #0
 3641 00e2 05D0     		beq	.L175
 577:src/modem.c   **** 			JrnlWrite("GSM:ошибка инициал.");
 3642              		.loc 1 577 4
 3643 00e4 4948     		ldr	r0, .L187+48
 3644 00e6 4A4B     		ldr	r3, .L187+52
 3645 00e8 9847     		blx	r3
 3646              	.LVL99:
 578:src/modem.c   **** 			LedAPN_Journal = 1;
 3647              		.loc 1 578 19
 3648 00ea 474B     		ldr	r3, .L187+44
 3649 00ec 0122     		movs	r2, #1
 3650 00ee 1A70     		strb	r2, [r3]
 3651              	.L175:
 579:src/modem.c   **** 		}
 580:src/modem.c   **** 		return false;
 3652              		.loc 1 580 10
 3653 00f0 0023     		movs	r3, #0
 3654 00f2 6DE0     		b	.L185
 3655              	.L174:
 581:src/modem.c   **** 	}
 582:src/modem.c   **** 	LedAPN = 0;
 3656              		.loc 1 582 9
 3657 00f4 474B     		ldr	r3, .L187+56
 3658 00f6 0022     		movs	r2, #0
 3659 00f8 1A70     		strb	r2, [r3]
 583:src/modem.c   **** 	vTaskDelay(100);
 3660              		.loc 1 583 2
 3661 00fa 6420     		movs	r0, #100
 3662 00fc 384B     		ldr	r3, .L187+4
 3663 00fe 9847     		blx	r3
 3664              	.LVL100:
 584:src/modem.c   **** 	ModemWrite("AT+CMGF=1\r\n");
 3665              		.loc 1 584 2
 3666 0100 4548     		ldr	r0, .L187+60
 3667 0102 394B     		ldr	r3, .L187+12
 3668 0104 9847     		blx	r3
 3669              	.LVL101:
 585:src/modem.c   **** 	if (WaitAnsver(MA_OK, 10) == false)
 3670              		.loc 1 585 6
 3671 0106 0A21     		movs	r1, #10
 3672 0108 0220     		movs	r0, #2
 3673 010a 3E4B     		ldr	r3, .L187+40
 3674 010c 9847     		blx	r3
 3675              	.LVL102:
 3676 010e 0346     		mov	r3, r0
 3677              		.loc 1 585 28
 3678 0110 83F00103 		eor	r3, r3, #1
 3679 0114 DBB2     		uxtb	r3, r3
 3680              		.loc 1 585 5
 3681 0116 002B     		cmp	r3, #0
 3682 0118 01D0     		beq	.L177
 586:src/modem.c   **** 		return false;
 3683              		.loc 1 586 10
 3684 011a 0023     		movs	r3, #0
 3685 011c 58E0     		b	.L185
 3686              	.L177:
 587:src/modem.c   **** 	vTaskDelay(100);
 3687              		.loc 1 587 2
 3688 011e 6420     		movs	r0, #100
 3689 0120 2F4B     		ldr	r3, .L187+4
 3690 0122 9847     		blx	r3
 3691              	.LVL103:
 588:src/modem.c   **** 	ModemWrite("AT+CNMI=2,2,0,0,0\r\n");
 3692              		.loc 1 588 2
 3693 0124 3D48     		ldr	r0, .L187+64
 3694 0126 304B     		ldr	r3, .L187+12
 3695 0128 9847     		blx	r3
 3696              	.LVL104:
 589:src/modem.c   **** 	if (WaitAnsver(MA_OK, 10) == false)
 3697              		.loc 1 589 6
 3698 012a 0A21     		movs	r1, #10
 3699 012c 0220     		movs	r0, #2
 3700 012e 354B     		ldr	r3, .L187+40
 3701 0130 9847     		blx	r3
 3702              	.LVL105:
 3703 0132 0346     		mov	r3, r0
 3704              		.loc 1 589 28
 3705 0134 83F00103 		eor	r3, r3, #1
 3706 0138 DBB2     		uxtb	r3, r3
 3707              		.loc 1 589 5
 3708 013a 002B     		cmp	r3, #0
 3709 013c 01D0     		beq	.L178
 590:src/modem.c   **** 		return false;
 3710              		.loc 1 590 10
 3711 013e 0023     		movs	r3, #0
 3712 0140 46E0     		b	.L185
 3713              	.L178:
 591:src/modem.c   **** 	vTaskDelay(100);
 3714              		.loc 1 591 2
 3715 0142 6420     		movs	r0, #100
 3716 0144 264B     		ldr	r3, .L187+4
 3717 0146 9847     		blx	r3
 3718              	.LVL106:
 592:src/modem.c   **** 
 593:src/modem.c   **** 	ModemWrite("AT+QIACT=1\r\n"); // активация
 3719              		.loc 1 593 2
 3720 0148 3548     		ldr	r0, .L187+68
 3721 014a 274B     		ldr	r3, .L187+12
 3722 014c 9847     		blx	r3
 3723              	.LVL107:
 594:src/modem.c   **** 	//vTaskDelay(100);
 595:src/modem.c   **** 	if (WaitAnsver(MA_OK, 4000) == false)
 3724              		.loc 1 595 6
 3725 014e 4FF47A61 		mov	r1, #4000
 3726 0152 0220     		movs	r0, #2
 3727 0154 2B4B     		ldr	r3, .L187+40
 3728 0156 9847     		blx	r3
 3729              	.LVL108:
 3730 0158 0346     		mov	r3, r0
 3731              		.loc 1 595 30
 3732 015a 83F00103 		eor	r3, r3, #1
 3733 015e DBB2     		uxtb	r3, r3
 3734              		.loc 1 595 5
 3735 0160 002B     		cmp	r3, #0
 3736 0162 01D0     		beq	.L179
 596:src/modem.c   **** 		return false;
 3737              		.loc 1 596 10
 3738 0164 0023     		movs	r3, #0
 3739 0166 33E0     		b	.L185
 3740              	.L179:
 597:src/modem.c   **** 	vTaskDelay(100);
 3741              		.loc 1 597 2
 3742 0168 6420     		movs	r0, #100
 3743 016a 1D4B     		ldr	r3, .L187+4
 3744 016c 9847     		blx	r3
 3745              	.LVL109:
 598:src/modem.c   **** 
 599:src/modem.c   **** 	i_OPEN = 5;
 3746              		.loc 1 599 9
 3747 016e 2D4B     		ldr	r3, .L187+72
 3748 0170 0522     		movs	r2, #5
 3749 0172 1A60     		str	r2, [r3]
 600:src/modem.c   **** 
 601:src/modem.c   **** 	while (!ATOPEN()) // открытие и старт TCPсервера
 3750              		.loc 1 601 8
 3751 0174 08E0     		b	.L180
 3752              	.L183:
 602:src/modem.c   **** 	{
 603:src/modem.c   **** 		if (i_OPEN == 0) {
 3753              		.loc 1 603 14
 3754 0176 2B4B     		ldr	r3, .L187+72
 3755 0178 1B68     		ldr	r3, [r3]
 3756              		.loc 1 603 6
 3757 017a 002B     		cmp	r3, #0
 3758 017c 0DD0     		beq	.L186
 604:src/modem.c   **** 			break;
 605:src/modem.c   **** 		}
 606:src/modem.c   **** 		i_OPEN--;
 3759              		.loc 1 606 9
 3760 017e 294B     		ldr	r3, .L187+72
 3761 0180 1B68     		ldr	r3, [r3]
 3762 0182 013B     		subs	r3, r3, #1
 3763 0184 274A     		ldr	r2, .L187+72
 3764 0186 1360     		str	r3, [r2]
 3765              	.L180:
 601:src/modem.c   **** 	{
 3766              		.loc 1 601 10
 3767 0188 274B     		ldr	r3, .L187+76
 3768 018a 9847     		blx	r3
 3769              	.LVL110:
 3770 018c 0346     		mov	r3, r0
 601:src/modem.c   **** 	{
 3771              		.loc 1 601 9
 3772 018e 83F00103 		eor	r3, r3, #1
 3773 0192 DBB2     		uxtb	r3, r3
 601:src/modem.c   **** 	{
 3774              		.loc 1 601 8
 3775 0194 002B     		cmp	r3, #0
 3776 0196 EED1     		bne	.L183
 3777 0198 00E0     		b	.L182
 3778              	.L186:
 604:src/modem.c   **** 			break;
 3779              		.loc 1 604 4
 3780 019a 00BF     		nop
 3781              	.L182:
 607:src/modem.c   **** 	}
 608:src/modem.c   **** 
 609:src/modem.c   **** 	i_OPEN = 0;
 3782              		.loc 1 609 9
 3783 019c 214B     		ldr	r3, .L187+72
 3784 019e 0022     		movs	r2, #0
 3785 01a0 1A60     		str	r2, [r3]
 610:src/modem.c   **** 
 611:src/modem.c   **** 	ModemWrite("AT+QILOCIP\r\n"); //локальный IP
 3786              		.loc 1 611 2
 3787 01a2 2248     		ldr	r0, .L187+80
 3788 01a4 104B     		ldr	r3, .L187+12
 3789 01a6 9847     		blx	r3
 3790              	.LVL111:
 612:src/modem.c   **** 	WaitAnsver(MA_UNKNOWN, 10);
 3791              		.loc 1 612 2
 3792 01a8 0A21     		movs	r1, #10
 3793 01aa 0020     		movs	r0, #0
 3794 01ac 154B     		ldr	r3, .L187+40
 3795 01ae 9847     		blx	r3
 3796              	.LVL112:
 613:src/modem.c   **** 	vTaskDelay(100);
 3797              		.loc 1 613 2
 3798 01b0 6420     		movs	r0, #100
 3799 01b2 0B4B     		ldr	r3, .L187+4
 3800 01b4 9847     		blx	r3
 3801              	.LVL113:
 614:src/modem.c   **** 
 615:src/modem.c   **** 	/*ModemWrite("AT+QISERVER=0\r\n"); // сервер  (=0 - это TCP сервер)
 616:src/modem.c   **** 	 vTaskDelay(100);
 617:src/modem.c   **** 	 if (WaitAnsver(MA_OK,50) == false)
 618:src/modem.c   **** 	 return false;
 619:src/modem.c   **** 	 vTaskDelay(100);
 620:src/modem.c   **** 
 621:src/modem.c   **** 
 622:src/modem.c   **** 	 ModemWrite("AT+QISRVC=2\r\n"); //роль соединения
 623:src/modem.c   **** 	 if (WaitAnsver(MA_OK,10) == false)
 624:src/modem.c   **** 	 return false;*/
 625:src/modem.c   **** 
 626:src/modem.c   **** 	//vTaskDelay(200);
 627:src/modem.c   **** 	if (pxConfig->devcfg.GSMtime == 1)  //если включена синхронизация времени
 3802              		.loc 1 627 22
 3803 01b6 D7F85431 		ldr	r3, [r7, #340]
 3804 01ba B3F80031 		ldrh	r3, [r3, #256]	@ unaligned
 3805 01be 9BB2     		uxth	r3, r3
 3806              		.loc 1 627 5
 3807 01c0 012B     		cmp	r3, #1
 3808 01c2 04D1     		bne	.L184
 628:src/modem.c   **** 			{
 629:src/modem.c   **** 
 630:src/modem.c   **** 		GSM_clock();
 3809              		.loc 1 630 3
 3810 01c4 1A4B     		ldr	r3, .L187+84
 3811 01c6 9847     		blx	r3
 3812              	.LVL114:
 631:src/modem.c   **** 		FlagGSMtime = 0;
 3813              		.loc 1 631 15
 3814 01c8 1A4B     		ldr	r3, .L187+88
 3815 01ca 0022     		movs	r2, #0
 3816 01cc 1A70     		strb	r2, [r3]
 3817              	.L184:
 632:src/modem.c   **** 
 633:src/modem.c   **** 	}
 634:src/modem.c   **** 
 635:src/modem.c   **** 	return true;
 3818              		.loc 1 635 9
 3819 01ce 0123     		movs	r3, #1
 3820              	.L185:
 636:src/modem.c   **** }
 3821              		.loc 1 636 1 discriminator 1
 3822 01d0 1846     		mov	r0, r3
 3823 01d2 07F5AE77 		add	r7, r7, #348
 3824              	.LCFI103:
 3825              		.cfi_def_cfa_offset 12
 3826 01d6 BD46     		mov	sp, r7
 3827              	.LCFI104:
 3828              		.cfi_def_cfa_register 13
 3829              		@ sp needed
 3830 01d8 90BD     		pop	{r4, r7, pc}
 3831              	.L188:
 3832 01da 00BF     		.align	2
 3833              	.L187:
 3834 01dc 00B00208 		.word	134393856
 3835 01e0 00000000 		.word	vTaskDelay
 3836 01e4 B4010000 		.word	.LC30
 3837 01e8 00000000 		.word	ModemWrite
 3838 01ec 00000000 		.word	BKP_WriteBackupRegister
 3839 01f0 C4010000 		.word	.LC31
 3840 01f4 00000000 		.word	strcat
 3841 01f8 00000000 		.word	strlen
 3842 01fc D4010000 		.word	.LC32
 3843 0200 D8010000 		.word	.LC33
 3844 0204 00000000 		.word	WaitAnsver
 3845 0208 00000000 		.word	LedAPN_Journal
 3846 020c E0010000 		.word	.LC34
 3847 0210 00000000 		.word	JrnlWrite
 3848 0214 00000000 		.word	LedAPN
 3849 0218 F4010000 		.word	.LC35
 3850 021c 00020000 		.word	.LC36
 3851 0220 14020000 		.word	.LC37
 3852 0224 00000000 		.word	i_OPEN
 3853 0228 00000000 		.word	ATOPEN
 3854 022c 24020000 		.word	.LC38
 3855 0230 00000000 		.word	GSM_clock
 3856 0234 00000000 		.word	FlagGSMtime
 3857              		.cfi_endproc
 3858              	.LFE54:
 3860              		.section	.rodata
 3861 0231 000000   		.align	2
 3862              	.LC39:
 3863 0234 6D696E67 		.ascii	"mingorsvet.velcom.by\000"
 3863      6F727376 
 3863      65742E76 
 3863      656C636F 
 3863      6D2E6279 
 3864 0249 000000   		.align	2
 3865              	.LC40:
 3866 024c 2000     		.ascii	" \000"
 3867              		.section	.text.WaitGprsConnectUC15,"ax",%progbits
 3868              		.align	1
 3869              		.global	WaitGprsConnectUC15
 3870              		.syntax unified
 3871              		.thumb
 3872              		.thumb_func
 3874              	WaitGprsConnectUC15:
 3875              	.LFB55:
 637:src/modem.c   **** //======================================================
 638:src/modem.c   **** bool WaitGprsConnectUC15() {
 3876              		.loc 1 638 28
 3877              		.cfi_startproc
 3878              		@ args = 0, pretend = 0, frame = 344
 3879              		@ frame_needed = 1, uses_anonymous_args = 0
 3880 0000 B0B5     		push	{r4, r5, r7, lr}
 3881              	.LCFI105:
 3882              		.cfi_def_cfa_offset 16
 3883              		.cfi_offset 4, -16
 3884              		.cfi_offset 5, -12
 3885              		.cfi_offset 7, -8
 3886              		.cfi_offset 14, -4
 3887 0002 D6B0     		sub	sp, sp, #344
 3888              	.LCFI106:
 3889              		.cfi_def_cfa_offset 360
 3890 0004 00AF     		add	r7, sp, #0
 3891              	.LCFI107:
 3892              		.cfi_def_cfa_register 7
 639:src/modem.c   **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 3893              		.loc 1 639 12
 3894 0006 A04B     		ldr	r3, .L206
 3895 0008 C7F85431 		str	r3, [r7, #340]
 640:src/modem.c   **** 	char myIp[17];
 641:src/modem.c   **** 	char strsipstart[256];
 642:src/modem.c   **** 	char buf[64];
 643:src/modem.c   **** 	//char header[] = "IPD";
 644:src/modem.c   **** 	int packSize;
 645:src/modem.c   **** 	int headerSize;
 646:src/modem.c   **** 	//FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 647:src/modem.c   **** 	int i;
 648:src/modem.c   **** 
 649:src/modem.c   **** 	vTaskDelay(100);
 3896              		.loc 1 649 2
 3897 000c 6420     		movs	r0, #100
 3898 000e 9F4B     		ldr	r3, .L206+4
 3899 0010 9847     		blx	r3
 3900              	.LVL115:
 650:src/modem.c   **** 	ModemWrite("AT+QIDEACT=1\r\n");    // деактивация
 3901              		.loc 1 650 2
 3902 0012 9F48     		ldr	r0, .L206+8
 3903 0014 9F4B     		ldr	r3, .L206+12
 3904 0016 9847     		blx	r3
 3905              	.LVL116:
 651:src/modem.c   **** 	/*if (WaitAnsver(MA_OK,10) == false)
 652:src/modem.c   **** 	 return false;*/
 653:src/modem.c   **** 	vTaskDelay(4000); //40c
 3906              		.loc 1 653 2
 3907 0018 4FF47A60 		mov	r0, #4000
 3908 001c 9B4B     		ldr	r3, .L206+4
 3909 001e 9847     		blx	r3
 3910              	.LVL117:
 654:src/modem.c   **** 
 655:src/modem.c   **** 	//vTaskDelay(1000);
 656:src/modem.c   **** //		ModemWrite("AT+QIMODE=0\r\n");  //режим
 657:src/modem.c   **** //		if (WaitAnsver(MA_OK,10) == false)
 658:src/modem.c   **** //					return false;
 659:src/modem.c   **** 
 660:src/modem.c   **** 	vTaskDelay(100);
 3911              		.loc 1 660 2
 3912 0020 6420     		movs	r0, #100
 3913 0022 9A4B     		ldr	r3, .L206+4
 3914 0024 9847     		blx	r3
 3915              	.LVL118:
 661:src/modem.c   **** 	BKP_WriteBackupRegister(BKP_DR7, 27);
 3916              		.loc 1 661 2
 3917 0026 1B21     		movs	r1, #27
 3918 0028 1C20     		movs	r0, #28
 3919 002a 9B4B     		ldr	r3, .L206+16
 3920 002c 9847     		blx	r3
 3921              	.LVL119:
 662:src/modem.c   **** 
 663:src/modem.c   **** 	//LedAPN = 1;
 664:src/modem.c   **** 	if (strlen(pxConfig->devcfg.gprs.login) > 16
 3922              		.loc 1 664 34
 3923 002e D7F85431 		ldr	r3, [r7, #340]
 3924 0032 8033     		adds	r3, r3, #128
 3925              		.loc 1 664 6
 3926 0034 1846     		mov	r0, r3
 3927 0036 994B     		ldr	r3, .L206+20
 3928 0038 9847     		blx	r3
 3929              	.LVL120:
 3930 003a 0346     		mov	r3, r0
 3931              		.loc 1 664 5
 3932 003c 102B     		cmp	r3, #16
 3933 003e 10D8     		bhi	.L190
 665:src/modem.c   **** 			|| strlen(pxConfig->devcfg.gprs.password) > 16
 3934              		.loc 1 665 35
 3935 0040 D7F85431 		ldr	r3, [r7, #340]
 3936 0044 C033     		adds	r3, r3, #192
 3937              		.loc 1 665 7
 3938 0046 1846     		mov	r0, r3
 3939 0048 944B     		ldr	r3, .L206+20
 3940 004a 9847     		blx	r3
 3941              	.LVL121:
 3942 004c 0346     		mov	r3, r0
 3943              		.loc 1 665 4
 3944 004e 102B     		cmp	r3, #16
 3945 0050 07D8     		bhi	.L190
 666:src/modem.c   **** 			|| strlen(pxConfig->devcfg.gprs.adparam) > 32) {
 3946              		.loc 1 666 35
 3947 0052 D7F85431 		ldr	r3, [r7, #340]
 3948              		.loc 1 666 7
 3949 0056 1846     		mov	r0, r3
 3950 0058 904B     		ldr	r3, .L206+20
 3951 005a 9847     		blx	r3
 3952              	.LVL122:
 3953 005c 0346     		mov	r3, r0
 3954              		.loc 1 666 4
 3955 005e 202B     		cmp	r3, #32
 3956 0060 58D9     		bls	.L191
 3957              	.L190:
 667:src/modem.c   **** 		strcpy(buf, "AT+QICSGP=1,1,\""); //AT+QICSGP=1,1,"vmi.velcom.by"," "," ",1
 3958              		.loc 1 667 3
 3959 0062 3B46     		mov	r3, r7
 3960 0064 8E4A     		ldr	r2, .L206+24
 3961 0066 1C46     		mov	r4, r3
 3962 0068 1346     		mov	r3, r2
 3963 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 3964 006c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 668:src/modem.c   **** 		strcat(buf, PPP_ADPARAM);
 3965              		.loc 1 668 3
 3966 0070 3B46     		mov	r3, r7
 3967 0072 1846     		mov	r0, r3
 3968 0074 894B     		ldr	r3, .L206+20
 3969 0076 9847     		blx	r3
 3970              	.LVL123:
 3971 0078 0346     		mov	r3, r0
 3972 007a 1A46     		mov	r2, r3
 3973 007c 3B46     		mov	r3, r7
 3974 007e 1344     		add	r3, r3, r2
 3975 0080 884A     		ldr	r2, .L206+28
 3976 0082 1D46     		mov	r5, r3
 3977 0084 1446     		mov	r4, r2
 3978 0086 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 3979 0088 2860     		str	r0, [r5]	@ unaligned
 3980 008a 6960     		str	r1, [r5, #4]	@ unaligned
 3981 008c AA60     		str	r2, [r5, #8]	@ unaligned
 3982 008e EB60     		str	r3, [r5, #12]	@ unaligned
 3983 0090 2068     		ldr	r0, [r4]
 3984 0092 2861     		str	r0, [r5, #16]	@ unaligned
 3985 0094 2379     		ldrb	r3, [r4, #4]
 3986 0096 2B75     		strb	r3, [r5, #20]
 669:src/modem.c   **** 		strcat(buf, "\",\"");
 3987              		.loc 1 669 3
 3988 0098 3B46     		mov	r3, r7
 3989 009a 1846     		mov	r0, r3
 3990 009c 7F4B     		ldr	r3, .L206+20
 3991 009e 9847     		blx	r3
 3992              	.LVL124:
 3993 00a0 0346     		mov	r3, r0
 3994 00a2 1A46     		mov	r2, r3
 3995 00a4 3B46     		mov	r3, r7
 3996 00a6 1344     		add	r3, r3, r2
 3997 00a8 7F4A     		ldr	r2, .L206+32
 3998 00aa 1068     		ldr	r0, [r2]
 3999 00ac 1860     		str	r0, [r3]	@ unaligned
 670:src/modem.c   **** 		strcat(buf, PPP_USER);
 4000              		.loc 1 670 3
 4001 00ae 3B46     		mov	r3, r7
 4002 00b0 1846     		mov	r0, r3
 4003 00b2 7A4B     		ldr	r3, .L206+20
 4004 00b4 9847     		blx	r3
 4005              	.LVL125:
 4006 00b6 0346     		mov	r3, r0
 4007 00b8 1A46     		mov	r2, r3
 4008 00ba 3B46     		mov	r3, r7
 4009 00bc 1344     		add	r3, r3, r2
 4010 00be 7B49     		ldr	r1, .L206+36
 4011 00c0 1A46     		mov	r2, r3
 4012 00c2 0B46     		mov	r3, r1
 4013 00c4 1B88     		ldrh	r3, [r3]	@ unaligned
 4014 00c6 1380     		strh	r3, [r2]	@ unaligned
 671:src/modem.c   **** 		strcat(buf, "\",\"");
 4015              		.loc 1 671 3
 4016 00c8 3B46     		mov	r3, r7
 4017 00ca 1846     		mov	r0, r3
 4018 00cc 734B     		ldr	r3, .L206+20
 4019 00ce 9847     		blx	r3
 4020              	.LVL126:
 4021 00d0 0346     		mov	r3, r0
 4022 00d2 1A46     		mov	r2, r3
 4023 00d4 3B46     		mov	r3, r7
 4024 00d6 1344     		add	r3, r3, r2
 4025 00d8 734A     		ldr	r2, .L206+32
 4026 00da 1068     		ldr	r0, [r2]
 4027 00dc 1860     		str	r0, [r3]	@ unaligned
 672:src/modem.c   **** 		strcat(buf, PPP_PASS);
 4028              		.loc 1 672 3
 4029 00de 3B46     		mov	r3, r7
 4030 00e0 1846     		mov	r0, r3
 4031 00e2 6E4B     		ldr	r3, .L206+20
 4032 00e4 9847     		blx	r3
 4033              	.LVL127:
 4034 00e6 0346     		mov	r3, r0
 4035 00e8 1A46     		mov	r2, r3
 4036 00ea 3B46     		mov	r3, r7
 4037 00ec 1344     		add	r3, r3, r2
 4038 00ee 6F49     		ldr	r1, .L206+36
 4039 00f0 1A46     		mov	r2, r3
 4040 00f2 0B46     		mov	r3, r1
 4041 00f4 1B88     		ldrh	r3, [r3]	@ unaligned
 4042 00f6 1380     		strh	r3, [r2]	@ unaligned
 673:src/modem.c   **** 		strcat(buf, "\"\,1\r\n");
 4043              		.loc 1 673 3
 4044 00f8 3B46     		mov	r3, r7
 4045 00fa 1846     		mov	r0, r3
 4046 00fc 674B     		ldr	r3, .L206+20
 4047 00fe 9847     		blx	r3
 4048              	.LVL128:
 4049 0100 0346     		mov	r3, r0
 4050 0102 1A46     		mov	r2, r3
 4051 0104 3B46     		mov	r3, r7
 4052 0106 1344     		add	r3, r3, r2
 4053 0108 694A     		ldr	r2, .L206+40
 4054 010a 1068     		ldr	r0, [r2]
 4055 010c 1860     		str	r0, [r3]	@ unaligned
 4056 010e 9288     		ldrh	r2, [r2, #4]	@ unaligned
 4057 0110 9A80     		strh	r2, [r3, #4]	@ unaligned
 4058 0112 42E0     		b	.L192
 4059              	.L191:
 674:src/modem.c   **** 	} else {
 675:src/modem.c   **** 		strcpy(buf, "AT+QICSGP=1,1,\"");
 4060              		.loc 1 675 3
 4061 0114 3B46     		mov	r3, r7
 4062 0116 624A     		ldr	r2, .L206+24
 4063 0118 1C46     		mov	r4, r3
 4064 011a 1346     		mov	r3, r2
 4065 011c 0FCB     		ldm	r3, {r0, r1, r2, r3}
 4066 011e 84E80F00 		stm	r4, {r0, r1, r2, r3}
 676:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.adparam);
 4067              		.loc 1 676 36
 4068 0122 D7F85421 		ldr	r2, [r7, #340]
 4069              		.loc 1 676 3
 4070 0126 3B46     		mov	r3, r7
 4071 0128 1146     		mov	r1, r2
 4072 012a 1846     		mov	r0, r3
 4073 012c 614B     		ldr	r3, .L206+44
 4074 012e 9847     		blx	r3
 4075              	.LVL129:
 677:src/modem.c   **** 		strcat(buf, "\",\"");
 4076              		.loc 1 677 3
 4077 0130 3B46     		mov	r3, r7
 4078 0132 1846     		mov	r0, r3
 4079 0134 594B     		ldr	r3, .L206+20
 4080 0136 9847     		blx	r3
 4081              	.LVL130:
 4082 0138 0346     		mov	r3, r0
 4083 013a 1A46     		mov	r2, r3
 4084 013c 3B46     		mov	r3, r7
 4085 013e 1344     		add	r3, r3, r2
 4086 0140 594A     		ldr	r2, .L206+32
 4087 0142 1068     		ldr	r0, [r2]
 4088 0144 1860     		str	r0, [r3]	@ unaligned
 678:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.login);
 4089              		.loc 1 678 36
 4090 0146 D7F85431 		ldr	r3, [r7, #340]
 4091 014a 03F18002 		add	r2, r3, #128
 4092              		.loc 1 678 3
 4093 014e 3B46     		mov	r3, r7
 4094 0150 1146     		mov	r1, r2
 4095 0152 1846     		mov	r0, r3
 4096 0154 574B     		ldr	r3, .L206+44
 4097 0156 9847     		blx	r3
 4098              	.LVL131:
 679:src/modem.c   **** 		strcat(buf, "\",\"");
 4099              		.loc 1 679 3
 4100 0158 3B46     		mov	r3, r7
 4101 015a 1846     		mov	r0, r3
 4102 015c 4F4B     		ldr	r3, .L206+20
 4103 015e 9847     		blx	r3
 4104              	.LVL132:
 4105 0160 0346     		mov	r3, r0
 4106 0162 1A46     		mov	r2, r3
 4107 0164 3B46     		mov	r3, r7
 4108 0166 1344     		add	r3, r3, r2
 4109 0168 4F4A     		ldr	r2, .L206+32
 4110 016a 1068     		ldr	r0, [r2]
 4111 016c 1860     		str	r0, [r3]	@ unaligned
 680:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.password);
 4112              		.loc 1 680 36
 4113 016e D7F85431 		ldr	r3, [r7, #340]
 4114 0172 03F1C002 		add	r2, r3, #192
 4115              		.loc 1 680 3
 4116 0176 3B46     		mov	r3, r7
 4117 0178 1146     		mov	r1, r2
 4118 017a 1846     		mov	r0, r3
 4119 017c 4D4B     		ldr	r3, .L206+44
 4120 017e 9847     		blx	r3
 4121              	.LVL133:
 681:src/modem.c   **** 		strcat(buf, "\"\,1\r\n");
 4122              		.loc 1 681 3
 4123 0180 3B46     		mov	r3, r7
 4124 0182 1846     		mov	r0, r3
 4125 0184 454B     		ldr	r3, .L206+20
 4126 0186 9847     		blx	r3
 4127              	.LVL134:
 4128 0188 0346     		mov	r3, r0
 4129 018a 1A46     		mov	r2, r3
 4130 018c 3B46     		mov	r3, r7
 4131 018e 1344     		add	r3, r3, r2
 4132 0190 474A     		ldr	r2, .L206+40
 4133 0192 1068     		ldr	r0, [r2]
 4134 0194 1860     		str	r0, [r3]	@ unaligned
 4135 0196 9288     		ldrh	r2, [r2, #4]	@ unaligned
 4136 0198 9A80     		strh	r2, [r3, #4]	@ unaligned
 4137              	.L192:
 682:src/modem.c   **** 	}
 683:src/modem.c   **** 	vTaskDelay(100);
 4138              		.loc 1 683 2
 4139 019a 6420     		movs	r0, #100
 4140 019c 3B4B     		ldr	r3, .L206+4
 4141 019e 9847     		blx	r3
 4142              	.LVL135:
 684:src/modem.c   **** 	ModemWrite(buf);
 4143              		.loc 1 684 2
 4144 01a0 3B46     		mov	r3, r7
 4145 01a2 1846     		mov	r0, r3
 4146 01a4 3B4B     		ldr	r3, .L206+12
 4147 01a6 9847     		blx	r3
 4148              	.LVL136:
 685:src/modem.c   **** 	if (WaitAnsver(MA_OK, 10) == false) {
 4149              		.loc 1 685 6
 4150 01a8 0A21     		movs	r1, #10
 4151 01aa 0220     		movs	r0, #2
 4152 01ac 424B     		ldr	r3, .L206+48
 4153 01ae 9847     		blx	r3
 4154              	.LVL137:
 4155 01b0 0346     		mov	r3, r0
 4156              		.loc 1 685 28
 4157 01b2 83F00103 		eor	r3, r3, #1
 4158 01b6 DBB2     		uxtb	r3, r3
 4159              		.loc 1 685 5
 4160 01b8 002B     		cmp	r3, #0
 4161 01ba 0ED0     		beq	.L193
 686:src/modem.c   **** 		if (!LedAPN_Journal) {
 4162              		.loc 1 686 7
 4163 01bc 3F4B     		ldr	r3, .L206+52
 4164 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4165 01c0 83F00103 		eor	r3, r3, #1
 4166 01c4 DBB2     		uxtb	r3, r3
 4167              		.loc 1 686 6
 4168 01c6 002B     		cmp	r3, #0
 4169 01c8 05D0     		beq	.L194
 687:src/modem.c   **** 			JrnlWrite("GSM:ошибка инициал.");
 4170              		.loc 1 687 4
 4171 01ca 3D48     		ldr	r0, .L206+56
 4172 01cc 3D4B     		ldr	r3, .L206+60
 4173 01ce 9847     		blx	r3
 4174              	.LVL138:
 688:src/modem.c   **** 			LedAPN_Journal = 1;
 4175              		.loc 1 688 19
 4176 01d0 3A4B     		ldr	r3, .L206+52
 4177 01d2 0122     		movs	r2, #1
 4178 01d4 1A70     		strb	r2, [r3]
 4179              	.L194:
 689:src/modem.c   **** 		}
 690:src/modem.c   **** 		return false;
 4180              		.loc 1 690 10
 4181 01d6 0023     		movs	r3, #0
 4182 01d8 9DE0     		b	.L204
 4183              	.L193:
 691:src/modem.c   **** 	}
 692:src/modem.c   **** 	LedAPN = 0;
 4184              		.loc 1 692 9
 4185 01da 3B4B     		ldr	r3, .L206+64
 4186 01dc 0022     		movs	r2, #0
 4187 01de 1A70     		strb	r2, [r3]
 693:src/modem.c   **** 	vTaskDelay(100);
 4188              		.loc 1 693 2
 4189 01e0 6420     		movs	r0, #100
 4190 01e2 2A4B     		ldr	r3, .L206+4
 4191 01e4 9847     		blx	r3
 4192              	.LVL139:
 694:src/modem.c   **** 	ModemWrite("AT+CMGF=1\r\n");
 4193              		.loc 1 694 2
 4194 01e6 3948     		ldr	r0, .L206+68
 4195 01e8 2A4B     		ldr	r3, .L206+12
 4196 01ea 9847     		blx	r3
 4197              	.LVL140:
 695:src/modem.c   **** 	if (WaitAnsver(MA_OK, 10) == false)
 4198              		.loc 1 695 6
 4199 01ec 0A21     		movs	r1, #10
 4200 01ee 0220     		movs	r0, #2
 4201 01f0 314B     		ldr	r3, .L206+48
 4202 01f2 9847     		blx	r3
 4203              	.LVL141:
 4204 01f4 0346     		mov	r3, r0
 4205              		.loc 1 695 28
 4206 01f6 83F00103 		eor	r3, r3, #1
 4207 01fa DBB2     		uxtb	r3, r3
 4208              		.loc 1 695 5
 4209 01fc 002B     		cmp	r3, #0
 4210 01fe 01D0     		beq	.L196
 696:src/modem.c   **** 		return false;
 4211              		.loc 1 696 10
 4212 0200 0023     		movs	r3, #0
 4213 0202 88E0     		b	.L204
 4214              	.L196:
 697:src/modem.c   **** 	vTaskDelay(100);
 4215              		.loc 1 697 2
 4216 0204 6420     		movs	r0, #100
 4217 0206 214B     		ldr	r3, .L206+4
 4218 0208 9847     		blx	r3
 4219              	.LVL142:
 698:src/modem.c   **** 	ModemWrite("AT+CNMI=2,2,0,0,0\r\n");
 4220              		.loc 1 698 2
 4221 020a 3148     		ldr	r0, .L206+72
 4222 020c 214B     		ldr	r3, .L206+12
 4223 020e 9847     		blx	r3
 4224              	.LVL143:
 699:src/modem.c   **** 	if (WaitAnsver(MA_OK, 10) == false)
 4225              		.loc 1 699 6
 4226 0210 0A21     		movs	r1, #10
 4227 0212 0220     		movs	r0, #2
 4228 0214 284B     		ldr	r3, .L206+48
 4229 0216 9847     		blx	r3
 4230              	.LVL144:
 4231 0218 0346     		mov	r3, r0
 4232              		.loc 1 699 28
 4233 021a 83F00103 		eor	r3, r3, #1
 4234 021e DBB2     		uxtb	r3, r3
 4235              		.loc 1 699 5
 4236 0220 002B     		cmp	r3, #0
 4237 0222 01D0     		beq	.L197
 700:src/modem.c   **** 		return false;
 4238              		.loc 1 700 10
 4239 0224 0023     		movs	r3, #0
 4240 0226 76E0     		b	.L204
 4241              	.L197:
 701:src/modem.c   **** 	vTaskDelay(100);
 4242              		.loc 1 701 2
 4243 0228 6420     		movs	r0, #100
 4244 022a 184B     		ldr	r3, .L206+4
 4245 022c 9847     		blx	r3
 4246              	.LVL145:
 702:src/modem.c   **** 
 703:src/modem.c   **** 	ModemWrite("AT+QIACT=1\r\n"); // активация
 4247              		.loc 1 703 2
 4248 022e 2948     		ldr	r0, .L206+76
 4249 0230 184B     		ldr	r3, .L206+12
 4250 0232 9847     		blx	r3
 4251              	.LVL146:
 704:src/modem.c   **** 	vTaskDelay(100);
 4252              		.loc 1 704 2
 4253 0234 6420     		movs	r0, #100
 4254 0236 154B     		ldr	r3, .L206+4
 4255 0238 9847     		blx	r3
 4256              	.LVL147:
 705:src/modem.c   **** 	if (WaitAnsver(MA_OK, 4000) == false)
 4257              		.loc 1 705 6
 4258 023a 4FF47A61 		mov	r1, #4000
 4259 023e 0220     		movs	r0, #2
 4260 0240 1D4B     		ldr	r3, .L206+48
 4261 0242 9847     		blx	r3
 4262              	.LVL148:
 4263 0244 0346     		mov	r3, r0
 4264              		.loc 1 705 30
 4265 0246 83F00103 		eor	r3, r3, #1
 4266 024a DBB2     		uxtb	r3, r3
 4267              		.loc 1 705 5
 4268 024c 002B     		cmp	r3, #0
 4269 024e 01D0     		beq	.L198
 706:src/modem.c   **** 		return false;
 4270              		.loc 1 706 10
 4271 0250 0023     		movs	r3, #0
 4272 0252 60E0     		b	.L204
 4273              	.L198:
 707:src/modem.c   **** 	vTaskDelay(100);
 4274              		.loc 1 707 2
 4275 0254 6420     		movs	r0, #100
 4276 0256 0D4B     		ldr	r3, .L206+4
 4277 0258 9847     		blx	r3
 4278              	.LVL149:
 708:src/modem.c   **** 
 709:src/modem.c   **** 	i_OPEN = 5;
 4279              		.loc 1 709 9
 4280 025a 1F4B     		ldr	r3, .L206+80
 4281 025c 0522     		movs	r2, #5
 4282 025e 1A60     		str	r2, [r3]
 710:src/modem.c   **** 
 711:src/modem.c   **** 	while (!ATOPEN()) // открытие и старт TCPсервера
 4283              		.loc 1 711 8
 4284 0260 08E0     		b	.L199
 4285              	.L202:
 712:src/modem.c   **** 	{
 713:src/modem.c   **** 		if (i_OPEN == 0) {
 4286              		.loc 1 713 14
 4287 0262 1D4B     		ldr	r3, .L206+80
 4288 0264 1B68     		ldr	r3, [r3]
 4289              		.loc 1 713 6
 4290 0266 002B     		cmp	r3, #0
 4291 0268 3AD0     		beq	.L205
 714:src/modem.c   **** 			break;
 715:src/modem.c   **** 		}
 716:src/modem.c   **** 		i_OPEN--;
 4292              		.loc 1 716 9
 4293 026a 1B4B     		ldr	r3, .L206+80
 4294 026c 1B68     		ldr	r3, [r3]
 4295 026e 013B     		subs	r3, r3, #1
 4296 0270 194A     		ldr	r2, .L206+80
 4297 0272 1360     		str	r3, [r2]
 4298              	.L199:
 711:src/modem.c   **** 	{
 4299              		.loc 1 711 10
 4300 0274 194B     		ldr	r3, .L206+84
 4301 0276 9847     		blx	r3
 4302              	.LVL150:
 4303 0278 0346     		mov	r3, r0
 711:src/modem.c   **** 	{
 4304              		.loc 1 711 9
 4305 027a 83F00103 		eor	r3, r3, #1
 4306 027e DBB2     		uxtb	r3, r3
 711:src/modem.c   **** 	{
 4307              		.loc 1 711 8
 4308 0280 002B     		cmp	r3, #0
 4309 0282 EED1     		bne	.L202
 4310 0284 2DE0     		b	.L201
 4311              	.L207:
 4312 0286 00BF     		.align	2
 4313              	.L206:
 4314 0288 00B00208 		.word	134393856
 4315 028c 00000000 		.word	vTaskDelay
 4316 0290 B4010000 		.word	.LC30
 4317 0294 00000000 		.word	ModemWrite
 4318 0298 00000000 		.word	BKP_WriteBackupRegister
 4319 029c 00000000 		.word	strlen
 4320 02a0 C4010000 		.word	.LC31
 4321 02a4 34020000 		.word	.LC39
 4322 02a8 D4010000 		.word	.LC32
 4323 02ac 4C020000 		.word	.LC40
 4324 02b0 D8010000 		.word	.LC33
 4325 02b4 00000000 		.word	strcat
 4326 02b8 00000000 		.word	WaitAnsver
 4327 02bc 00000000 		.word	LedAPN_Journal
 4328 02c0 E0010000 		.word	.LC34
 4329 02c4 00000000 		.word	JrnlWrite
 4330 02c8 00000000 		.word	LedAPN
 4331 02cc F4010000 		.word	.LC35
 4332 02d0 00020000 		.word	.LC36
 4333 02d4 14020000 		.word	.LC37
 4334 02d8 00000000 		.word	i_OPEN
 4335 02dc 00000000 		.word	ATOPEN
 4336              	.L205:
 714:src/modem.c   **** 			break;
 4337              		.loc 1 714 4
 4338 02e0 00BF     		nop
 4339              	.L201:
 717:src/modem.c   **** 	}
 718:src/modem.c   **** 
 719:src/modem.c   **** 	i_OPEN = 0;
 4340              		.loc 1 719 9
 4341 02e2 0F4B     		ldr	r3, .L208
 4342 02e4 0022     		movs	r2, #0
 4343 02e6 1A60     		str	r2, [r3]
 720:src/modem.c   **** 
 721:src/modem.c   **** 	ModemWrite("AT+QILOCIP\r\n"); //локальный IP
 4344              		.loc 1 721 2
 4345 02e8 0E48     		ldr	r0, .L208+4
 4346 02ea 0F4B     		ldr	r3, .L208+8
 4347 02ec 9847     		blx	r3
 4348              	.LVL151:
 722:src/modem.c   **** 	WaitAnsver(MA_UNKNOWN, 10);
 4349              		.loc 1 722 2
 4350 02ee 0A21     		movs	r1, #10
 4351 02f0 0020     		movs	r0, #0
 4352 02f2 0E4B     		ldr	r3, .L208+12
 4353 02f4 9847     		blx	r3
 4354              	.LVL152:
 723:src/modem.c   **** 	vTaskDelay(100);
 4355              		.loc 1 723 2
 4356 02f6 6420     		movs	r0, #100
 4357 02f8 0D4B     		ldr	r3, .L208+16
 4358 02fa 9847     		blx	r3
 4359              	.LVL153:
 724:src/modem.c   **** 
 725:src/modem.c   **** 	/*	ModemWrite("AT+QISERVER=0\r\n"); // сервер  (=0 - это TCP сервер)
 726:src/modem.c   **** 	 vTaskDelay(100);
 727:src/modem.c   **** 	 if (WaitAnsver(MA_OK,50) == false)
 728:src/modem.c   **** 	 return false;
 729:src/modem.c   **** 	 vTaskDelay(100);
 730:src/modem.c   **** 
 731:src/modem.c   **** 
 732:src/modem.c   **** 	 ModemWrite("AT+QISRVC=2\r\n"); //роль соединения
 733:src/modem.c   **** 	 if (WaitAnsver(MA_OK,10) == false)
 734:src/modem.c   **** 	 return false;*/
 735:src/modem.c   **** 
 736:src/modem.c   **** 	//vTaskDelay(200);
 737:src/modem.c   **** 	if (pxConfig->devcfg.GSMtime == 1)  //если включена синхронизация времени
 4360              		.loc 1 737 22
 4361 02fc D7F85431 		ldr	r3, [r7, #340]
 4362 0300 B3F80031 		ldrh	r3, [r3, #256]	@ unaligned
 4363 0304 9BB2     		uxth	r3, r3
 4364              		.loc 1 737 5
 4365 0306 012B     		cmp	r3, #1
 4366 0308 04D1     		bne	.L203
 738:src/modem.c   **** 			{
 739:src/modem.c   **** 
 740:src/modem.c   **** 		GSM_clock();
 4367              		.loc 1 740 3
 4368 030a 0A4B     		ldr	r3, .L208+20
 4369 030c 9847     		blx	r3
 4370              	.LVL154:
 741:src/modem.c   **** 		FlagGSMtime = 0;
 4371              		.loc 1 741 15
 4372 030e 0A4B     		ldr	r3, .L208+24
 4373 0310 0022     		movs	r2, #0
 4374 0312 1A70     		strb	r2, [r3]
 4375              	.L203:
 742:src/modem.c   **** 
 743:src/modem.c   **** 	}
 744:src/modem.c   **** 
 745:src/modem.c   **** 	return true;
 4376              		.loc 1 745 9
 4377 0314 0123     		movs	r3, #1
 4378              	.L204:
 746:src/modem.c   **** }
 4379              		.loc 1 746 1 discriminator 1
 4380 0316 1846     		mov	r0, r3
 4381 0318 07F5AC77 		add	r7, r7, #344
 4382              	.LCFI108:
 4383              		.cfi_def_cfa_offset 16
 4384 031c BD46     		mov	sp, r7
 4385              	.LCFI109:
 4386              		.cfi_def_cfa_register 13
 4387              		@ sp needed
 4388 031e B0BD     		pop	{r4, r5, r7, pc}
 4389              	.L209:
 4390              		.align	2
 4391              	.L208:
 4392 0320 00000000 		.word	i_OPEN
 4393 0324 24020000 		.word	.LC38
 4394 0328 00000000 		.word	ModemWrite
 4395 032c 00000000 		.word	WaitAnsver
 4396 0330 00000000 		.word	vTaskDelay
 4397 0334 00000000 		.word	GSM_clock
 4398 0338 00000000 		.word	FlagGSMtime
 4399              		.cfi_endproc
 4400              	.LFE55:
 4402              		.section	.rodata
 4403 024e 0000     		.align	2
 4404              	.LC41:
 4405 0250 41542B51 		.ascii	"AT+QIDEACT\015\012\000"
 4405      49444541 
 4405      43540D0A 
 4405      00
 4406 025d 000000   		.align	2
 4407              	.LC42:
 4408 0260 41542B51 		.ascii	"AT+QIMODE=0\015\012\000"
 4408      494D4F44 
 4408      453D300D 
 4408      0A00
 4409 026e 0000     		.align	2
 4410              	.LC43:
 4411 0270 41542B51 		.ascii	"AT+QIREGAPP=\"\000"
 4411      49524547 
 4411      4150503D 
 4411      2200
 4412 027e 0000     		.align	2
 4413              	.LC44:
 4414 0280 220D0A00 		.ascii	"\"\015\012\000"
 4415              		.align	2
 4416              	.LC45:
 4417 0284 41542B51 		.ascii	"AT+QIPROMPT=2\015\012\000"
 4417      4950524F 
 4417      4D50543D 
 4417      320D0A00 
 4418              		.align	2
 4419              	.LC46:
 4420 0294 41542B51 		.ascii	"AT+QIHEAD=1\015\012\000"
 4420      49484541 
 4420      443D310D 
 4420      0A00
 4421 02a2 0000     		.align	2
 4422              	.LC47:
 4423 02a4 41542B51 		.ascii	"AT+QIACT\015\012\000"
 4423      49414354 
 4423      0D0A00
 4424 02af 00       		.align	2
 4425              	.LC48:
 4426 02b0 41542B51 		.ascii	"AT+QICSGP=1,\"CMNET\"\015\012\000"
 4426      49435347 
 4426      503D312C 
 4426      22434D4E 
 4426      4554220D 
 4427 02c6 0000     		.align	2
 4428              	.LC49:
 4429 02c8 41542B51 		.ascii	"AT+QILPORT=\"TCP\",\"4444\"\015\012\000"
 4429      494C504F 
 4429      52543D22 
 4429      54435022 
 4429      2C223434 
 4430 02e2 0000     		.align	2
 4431              	.LC50:
 4432 02e4 41542B51 		.ascii	"AT+QISERVER\015\012\000"
 4432      49534552 
 4432      5645520D 
 4432      0A00
 4433 02f2 0000     		.align	2
 4434              	.LC51:
 4435 02f4 41542B51 		.ascii	"AT+QISRVC=2\015\012\000"
 4435      49535256 
 4435      433D320D 
 4435      0A00
 4436              		.section	.text.WaitGprsConnectM66,"ax",%progbits
 4437              		.align	1
 4438              		.global	WaitGprsConnectM66
 4439              		.syntax unified
 4440              		.thumb
 4441              		.thumb_func
 4443              	WaitGprsConnectM66:
 4444              	.LFB56:
 747:src/modem.c   **** //======================================================
 748:src/modem.c   **** bool WaitGprsConnectM66() {
 4445              		.loc 1 748 27
 4446              		.cfi_startproc
 4447              		@ args = 0, pretend = 0, frame = 352
 4448              		@ frame_needed = 1, uses_anonymous_args = 0
 4449 0000 B0B5     		push	{r4, r5, r7, lr}
 4450              	.LCFI110:
 4451              		.cfi_def_cfa_offset 16
 4452              		.cfi_offset 4, -16
 4453              		.cfi_offset 5, -12
 4454              		.cfi_offset 7, -8
 4455              		.cfi_offset 14, -4
 4456 0002 D8B0     		sub	sp, sp, #352
 4457              	.LCFI111:
 4458              		.cfi_def_cfa_offset 368
 4459 0004 00AF     		add	r7, sp, #0
 4460              	.LCFI112:
 4461              		.cfi_def_cfa_register 7
 749:src/modem.c   **** 	char myIp[17];
 750:src/modem.c   **** 	char strsipstart[256];
 751:src/modem.c   **** 	char buf[64];
 752:src/modem.c   **** 	char header[] = "IPD";
 4462              		.loc 1 752 7
 4463 0006 07F5B073 		add	r3, r7, #352
 4464 000a A3F5AE73 		sub	r3, r3, #348
 4465 000e AB4A     		ldr	r2, .L227
 4466 0010 1A60     		str	r2, [r3]
 753:src/modem.c   **** 	int packSize;
 754:src/modem.c   **** 	int headerSize;
 755:src/modem.c   **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 4467              		.loc 1 755 12
 4468 0012 AB4B     		ldr	r3, .L227+4
 4469 0014 C7F85C31 		str	r3, [r7, #348]
 756:src/modem.c   **** 	int i;
 757:src/modem.c   **** 	//		vTaskDelay(100);
 758:src/modem.c   **** 	//		BKP_WriteBackupRegister(BKP_DR7, 31);
 759:src/modem.c   **** 	//		if (!WaitAte())
 760:src/modem.c   **** 	//			continue;
 761:src/modem.c   **** 	//		vTaskDelay(100);
 762:src/modem.c   **** 	//		BKP_WriteBackupRegister(BKP_DR7, 32);
 763:src/modem.c   **** 	vTaskDelay(100);
 4470              		.loc 1 763 2
 4471 0018 6420     		movs	r0, #100
 4472 001a AA4B     		ldr	r3, .L227+8
 4473 001c 9847     		blx	r3
 4474              	.LVL155:
 764:src/modem.c   **** 	ModemWrite("AT+QIDEACT\r\n");    // деактивация
 4475              		.loc 1 764 2
 4476 001e AA48     		ldr	r0, .L227+12
 4477 0020 AA4B     		ldr	r3, .L227+16
 4478 0022 9847     		blx	r3
 4479              	.LVL156:
 765:src/modem.c   **** 	vTaskDelay(4000);
 4480              		.loc 1 765 2
 4481 0024 4FF47A60 		mov	r0, #4000
 4482 0028 A64B     		ldr	r3, .L227+8
 4483 002a 9847     		blx	r3
 4484              	.LVL157:
 766:src/modem.c   **** 	/*if (WaitAnsver(MA_OK,400) == false)
 767:src/modem.c   **** 	 return false;
 768:src/modem.c   **** 	 vTaskDelay(100);*/
 769:src/modem.c   **** 	ModemWrite("AT+QIMODE=0\r\n");  //режим
 4485              		.loc 1 769 2
 4486 002c A848     		ldr	r0, .L227+20
 4487 002e A74B     		ldr	r3, .L227+16
 4488 0030 9847     		blx	r3
 4489              	.LVL158:
 770:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4490              		.loc 1 770 6
 4491 0032 3221     		movs	r1, #50
 4492 0034 0220     		movs	r0, #2
 4493 0036 A74B     		ldr	r3, .L227+24
 4494 0038 9847     		blx	r3
 4495              	.LVL159:
 4496 003a 0346     		mov	r3, r0
 4497              		.loc 1 770 28
 4498 003c 83F00103 		eor	r3, r3, #1
 4499 0040 DBB2     		uxtb	r3, r3
 4500              		.loc 1 770 5
 4501 0042 002B     		cmp	r3, #0
 4502 0044 01D0     		beq	.L211
 771:src/modem.c   **** 		return false;
 4503              		.loc 1 771 10
 4504 0046 0023     		movs	r3, #0
 4505 0048 B5E1     		b	.L226
 4506              	.L211:
 772:src/modem.c   **** 
 773:src/modem.c   **** //	if (strlen(pxConfig->devcfg.gprs.login) > 16
 774:src/modem.c   **** //			|| strlen(pxConfig->devcfg.gprs.password) > 16
 775:src/modem.c   **** //			|| strlen(pxConfig->devcfg.gprs.adparam) > 32) {
 776:src/modem.c   **** //		strcpy(buf, "AT+CGDCONT=1,\"IP\",\""); //AT+CGDCONT=1,IP,"vmi.velcom.by"," "," ",1
 777:src/modem.c   **** //		strcat(buf, PPP_ADPARAM);
 778:src/modem.c   **** //		strcat(buf, "\"\r\n");
 779:src/modem.c   **** //	} else {
 780:src/modem.c   **** //		strcpy(buf, "AT+CGDCONT=1,\"IP\",\"");
 781:src/modem.c   **** //		strcat(buf, pxConfig->devcfg.gprs.adparam);
 782:src/modem.c   **** //		strcat(buf, "\"\r\n");
 783:src/modem.c   **** //	}
 784:src/modem.c   **** 	/*strcpy(buf, "AT+CGDCONT=1,\"IP\",\"");
 785:src/modem.c   **** 	 strcat(buf, PPP_ADPARAM);
 786:src/modem.c   **** 	 strcat(buf, "\"\r");*/
 787:src/modem.c   **** //	vTaskDelay(100);
 788:src/modem.c   **** //	ModemWrite(buf);
 789:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4507              		.loc 1 789 6
 4508 004a 3221     		movs	r1, #50
 4509 004c 0220     		movs	r0, #2
 4510 004e A14B     		ldr	r3, .L227+24
 4511 0050 9847     		blx	r3
 4512              	.LVL160:
 4513 0052 0346     		mov	r3, r0
 4514              		.loc 1 789 28
 4515 0054 83F00103 		eor	r3, r3, #1
 4516 0058 DBB2     		uxtb	r3, r3
 4517              		.loc 1 789 5
 4518 005a 002B     		cmp	r3, #0
 4519 005c 01D0     		beq	.L213
 790:src/modem.c   **** 		return false;
 4520              		.loc 1 790 10
 4521 005e 0023     		movs	r3, #0
 4522 0060 A9E1     		b	.L226
 4523              	.L213:
 791:src/modem.c   **** 
 792:src/modem.c   **** //LedAPN = 1;
 793:src/modem.c   **** 	if (strlen(pxConfig->devcfg.gprs.login) > 16
 4524              		.loc 1 793 34
 4525 0062 D7F85C31 		ldr	r3, [r7, #348]
 4526 0066 8033     		adds	r3, r3, #128
 4527              		.loc 1 793 6
 4528 0068 1846     		mov	r0, r3
 4529 006a 9B4B     		ldr	r3, .L227+28
 4530 006c 9847     		blx	r3
 4531              	.LVL161:
 4532 006e 0346     		mov	r3, r0
 4533              		.loc 1 793 5
 4534 0070 102B     		cmp	r3, #16
 4535 0072 10D8     		bhi	.L214
 794:src/modem.c   **** 			|| strlen(pxConfig->devcfg.gprs.password) > 16
 4536              		.loc 1 794 35
 4537 0074 D7F85C31 		ldr	r3, [r7, #348]
 4538 0078 C033     		adds	r3, r3, #192
 4539              		.loc 1 794 7
 4540 007a 1846     		mov	r0, r3
 4541 007c 964B     		ldr	r3, .L227+28
 4542 007e 9847     		blx	r3
 4543              	.LVL162:
 4544 0080 0346     		mov	r3, r0
 4545              		.loc 1 794 4
 4546 0082 102B     		cmp	r3, #16
 4547 0084 07D8     		bhi	.L214
 795:src/modem.c   **** 			|| strlen(pxConfig->devcfg.gprs.adparam) > 32) {
 4548              		.loc 1 795 35
 4549 0086 D7F85C31 		ldr	r3, [r7, #348]
 4550              		.loc 1 795 7
 4551 008a 1846     		mov	r0, r3
 4552 008c 924B     		ldr	r3, .L227+28
 4553 008e 9847     		blx	r3
 4554              	.LVL163:
 4555 0090 0346     		mov	r3, r0
 4556              		.loc 1 795 4
 4557 0092 202B     		cmp	r3, #32
 4558 0094 63D9     		bls	.L215
 4559              	.L214:
 796:src/modem.c   **** 		strcpy(buf, "AT+QIREGAPP=\"");
 4560              		.loc 1 796 3
 4561 0096 07F10803 		add	r3, r7, #8
 4562 009a 904A     		ldr	r2, .L227+32
 4563 009c 1C46     		mov	r4, r3
 4564 009e 1346     		mov	r3, r2
 4565 00a0 0FCB     		ldm	r3, {r0, r1, r2, r3}
 4566 00a2 07C4     		stmia	r4!, {r0, r1, r2}
 4567 00a4 2380     		strh	r3, [r4]	@ movhi
 797:src/modem.c   **** 		strcat(buf, PPP_ADPARAM);
 4568              		.loc 1 797 3
 4569 00a6 07F10803 		add	r3, r7, #8
 4570 00aa 1846     		mov	r0, r3
 4571 00ac 8A4B     		ldr	r3, .L227+28
 4572 00ae 9847     		blx	r3
 4573              	.LVL164:
 4574 00b0 0346     		mov	r3, r0
 4575 00b2 1A46     		mov	r2, r3
 4576 00b4 07F10803 		add	r3, r7, #8
 4577 00b8 1344     		add	r3, r3, r2
 4578 00ba 894A     		ldr	r2, .L227+36
 4579 00bc 1D46     		mov	r5, r3
 4580 00be 1446     		mov	r4, r2
 4581 00c0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 4582 00c2 2860     		str	r0, [r5]	@ unaligned
 4583 00c4 6960     		str	r1, [r5, #4]	@ unaligned
 4584 00c6 AA60     		str	r2, [r5, #8]	@ unaligned
 4585 00c8 EB60     		str	r3, [r5, #12]	@ unaligned
 4586 00ca 2068     		ldr	r0, [r4]
 4587 00cc 2861     		str	r0, [r5, #16]	@ unaligned
 4588 00ce 2379     		ldrb	r3, [r4, #4]
 4589 00d0 2B75     		strb	r3, [r5, #20]
 798:src/modem.c   **** 		strcat(buf, "\",\"");
 4590              		.loc 1 798 3
 4591 00d2 07F10803 		add	r3, r7, #8
 4592 00d6 1846     		mov	r0, r3
 4593 00d8 7F4B     		ldr	r3, .L227+28
 4594 00da 9847     		blx	r3
 4595              	.LVL165:
 4596 00dc 0346     		mov	r3, r0
 4597 00de 1A46     		mov	r2, r3
 4598 00e0 07F10803 		add	r3, r7, #8
 4599 00e4 1344     		add	r3, r3, r2
 4600 00e6 7F4A     		ldr	r2, .L227+40
 4601 00e8 1068     		ldr	r0, [r2]
 4602 00ea 1860     		str	r0, [r3]	@ unaligned
 799:src/modem.c   **** 		strcat(buf, PPP_USER);
 4603              		.loc 1 799 3
 4604 00ec 07F10803 		add	r3, r7, #8
 4605 00f0 1846     		mov	r0, r3
 4606 00f2 794B     		ldr	r3, .L227+28
 4607 00f4 9847     		blx	r3
 4608              	.LVL166:
 4609 00f6 0346     		mov	r3, r0
 4610 00f8 1A46     		mov	r2, r3
 4611 00fa 07F10803 		add	r3, r7, #8
 4612 00fe 1344     		add	r3, r3, r2
 4613 0100 7949     		ldr	r1, .L227+44
 4614 0102 1A46     		mov	r2, r3
 4615 0104 0B46     		mov	r3, r1
 4616 0106 1B88     		ldrh	r3, [r3]	@ unaligned
 4617 0108 1380     		strh	r3, [r2]	@ unaligned
 800:src/modem.c   **** 		strcat(buf, "\",\"");
 4618              		.loc 1 800 3
 4619 010a 07F10803 		add	r3, r7, #8
 4620 010e 1846     		mov	r0, r3
 4621 0110 714B     		ldr	r3, .L227+28
 4622 0112 9847     		blx	r3
 4623              	.LVL167:
 4624 0114 0346     		mov	r3, r0
 4625 0116 1A46     		mov	r2, r3
 4626 0118 07F10803 		add	r3, r7, #8
 4627 011c 1344     		add	r3, r3, r2
 4628 011e 714A     		ldr	r2, .L227+40
 4629 0120 1068     		ldr	r0, [r2]
 4630 0122 1860     		str	r0, [r3]	@ unaligned
 801:src/modem.c   **** 		strcat(buf, PPP_PASS);
 4631              		.loc 1 801 3
 4632 0124 07F10803 		add	r3, r7, #8
 4633 0128 1846     		mov	r0, r3
 4634 012a 6B4B     		ldr	r3, .L227+28
 4635 012c 9847     		blx	r3
 4636              	.LVL168:
 4637 012e 0346     		mov	r3, r0
 4638 0130 1A46     		mov	r2, r3
 4639 0132 07F10803 		add	r3, r7, #8
 4640 0136 1344     		add	r3, r3, r2
 4641 0138 6B49     		ldr	r1, .L227+44
 4642 013a 1A46     		mov	r2, r3
 4643 013c 0B46     		mov	r3, r1
 4644 013e 1B88     		ldrh	r3, [r3]	@ unaligned
 4645 0140 1380     		strh	r3, [r2]	@ unaligned
 802:src/modem.c   **** 		strcat(buf, "\"\r\n");
 4646              		.loc 1 802 3
 4647 0142 07F10803 		add	r3, r7, #8
 4648 0146 1846     		mov	r0, r3
 4649 0148 634B     		ldr	r3, .L227+28
 4650 014a 9847     		blx	r3
 4651              	.LVL169:
 4652 014c 0346     		mov	r3, r0
 4653 014e 1A46     		mov	r2, r3
 4654 0150 07F10803 		add	r3, r7, #8
 4655 0154 1344     		add	r3, r3, r2
 4656 0156 654A     		ldr	r2, .L227+48
 4657 0158 1068     		ldr	r0, [r2]
 4658 015a 1860     		str	r0, [r3]	@ unaligned
 4659 015c 4AE0     		b	.L216
 4660              	.L215:
 803:src/modem.c   **** 	} else {
 804:src/modem.c   **** 		strcpy(buf, "AT+QIREGAPP=\"");
 4661              		.loc 1 804 3
 4662 015e 07F10803 		add	r3, r7, #8
 4663 0162 5E4A     		ldr	r2, .L227+32
 4664 0164 1C46     		mov	r4, r3
 4665 0166 1346     		mov	r3, r2
 4666 0168 0FCB     		ldm	r3, {r0, r1, r2, r3}
 4667 016a 07C4     		stmia	r4!, {r0, r1, r2}
 4668 016c 2380     		strh	r3, [r4]	@ movhi
 805:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.adparam);
 4669              		.loc 1 805 36
 4670 016e D7F85C21 		ldr	r2, [r7, #348]
 4671              		.loc 1 805 3
 4672 0172 07F10803 		add	r3, r7, #8
 4673 0176 1146     		mov	r1, r2
 4674 0178 1846     		mov	r0, r3
 4675 017a 5D4B     		ldr	r3, .L227+52
 4676 017c 9847     		blx	r3
 4677              	.LVL170:
 806:src/modem.c   **** 		strcat(buf, "\",\"");
 4678              		.loc 1 806 3
 4679 017e 07F10803 		add	r3, r7, #8
 4680 0182 1846     		mov	r0, r3
 4681 0184 544B     		ldr	r3, .L227+28
 4682 0186 9847     		blx	r3
 4683              	.LVL171:
 4684 0188 0346     		mov	r3, r0
 4685 018a 1A46     		mov	r2, r3
 4686 018c 07F10803 		add	r3, r7, #8
 4687 0190 1344     		add	r3, r3, r2
 4688 0192 544A     		ldr	r2, .L227+40
 4689 0194 1068     		ldr	r0, [r2]
 4690 0196 1860     		str	r0, [r3]	@ unaligned
 807:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.login);
 4691              		.loc 1 807 36
 4692 0198 D7F85C31 		ldr	r3, [r7, #348]
 4693 019c 03F18002 		add	r2, r3, #128
 4694              		.loc 1 807 3
 4695 01a0 07F10803 		add	r3, r7, #8
 4696 01a4 1146     		mov	r1, r2
 4697 01a6 1846     		mov	r0, r3
 4698 01a8 514B     		ldr	r3, .L227+52
 4699 01aa 9847     		blx	r3
 4700              	.LVL172:
 808:src/modem.c   **** 		strcat(buf, "\",\"");
 4701              		.loc 1 808 3
 4702 01ac 07F10803 		add	r3, r7, #8
 4703 01b0 1846     		mov	r0, r3
 4704 01b2 494B     		ldr	r3, .L227+28
 4705 01b4 9847     		blx	r3
 4706              	.LVL173:
 4707 01b6 0346     		mov	r3, r0
 4708 01b8 1A46     		mov	r2, r3
 4709 01ba 07F10803 		add	r3, r7, #8
 4710 01be 1344     		add	r3, r3, r2
 4711 01c0 484A     		ldr	r2, .L227+40
 4712 01c2 1068     		ldr	r0, [r2]
 4713 01c4 1860     		str	r0, [r3]	@ unaligned
 809:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.password);
 4714              		.loc 1 809 36
 4715 01c6 D7F85C31 		ldr	r3, [r7, #348]
 4716 01ca 03F1C002 		add	r2, r3, #192
 4717              		.loc 1 809 3
 4718 01ce 07F10803 		add	r3, r7, #8
 4719 01d2 1146     		mov	r1, r2
 4720 01d4 1846     		mov	r0, r3
 4721 01d6 464B     		ldr	r3, .L227+52
 4722 01d8 9847     		blx	r3
 4723              	.LVL174:
 810:src/modem.c   **** 		strcat(buf, "\"\r\n");
 4724              		.loc 1 810 3
 4725 01da 07F10803 		add	r3, r7, #8
 4726 01de 1846     		mov	r0, r3
 4727 01e0 3D4B     		ldr	r3, .L227+28
 4728 01e2 9847     		blx	r3
 4729              	.LVL175:
 4730 01e4 0346     		mov	r3, r0
 4731 01e6 1A46     		mov	r2, r3
 4732 01e8 07F10803 		add	r3, r7, #8
 4733 01ec 1344     		add	r3, r3, r2
 4734 01ee 3F4A     		ldr	r2, .L227+48
 4735 01f0 1068     		ldr	r0, [r2]
 4736 01f2 1860     		str	r0, [r3]	@ unaligned
 4737              	.L216:
 811:src/modem.c   **** 	}
 812:src/modem.c   **** 	vTaskDelay(100);
 4738              		.loc 1 812 2
 4739 01f4 6420     		movs	r0, #100
 4740 01f6 334B     		ldr	r3, .L227+8
 4741 01f8 9847     		blx	r3
 4742              	.LVL176:
 813:src/modem.c   **** 	ModemWrite(buf);
 4743              		.loc 1 813 2
 4744 01fa 07F10803 		add	r3, r7, #8
 4745 01fe 1846     		mov	r0, r3
 4746 0200 324B     		ldr	r3, .L227+16
 4747 0202 9847     		blx	r3
 4748              	.LVL177:
 814:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false) {
 4749              		.loc 1 814 6
 4750 0204 3221     		movs	r1, #50
 4751 0206 0220     		movs	r0, #2
 4752 0208 324B     		ldr	r3, .L227+24
 4753 020a 9847     		blx	r3
 4754              	.LVL178:
 4755 020c 0346     		mov	r3, r0
 4756              		.loc 1 814 28
 4757 020e 83F00103 		eor	r3, r3, #1
 4758 0212 DBB2     		uxtb	r3, r3
 4759              		.loc 1 814 5
 4760 0214 002B     		cmp	r3, #0
 4761 0216 01D0     		beq	.L217
 815:src/modem.c   **** 		/*	if (!LedAPN_Journal)
 816:src/modem.c   **** 		 {
 817:src/modem.c   **** 		 JrnlWrite("GSM:ошибка инициал.");
 818:src/modem.c   **** 		 LedAPN_Journal=1;
 819:src/modem.c   **** 		 }*/
 820:src/modem.c   **** 		return false;
 4762              		.loc 1 820 10
 4763 0218 0023     		movs	r3, #0
 4764 021a CCE0     		b	.L226
 4765              	.L217:
 821:src/modem.c   **** 	}
 822:src/modem.c   **** 	vTaskDelay(200);
 4766              		.loc 1 822 2
 4767 021c C820     		movs	r0, #200
 4768 021e 294B     		ldr	r3, .L227+8
 4769 0220 9847     		blx	r3
 4770              	.LVL179:
 823:src/modem.c   **** 	LedAPN = 0;
 4771              		.loc 1 823 9
 4772 0222 344B     		ldr	r3, .L227+56
 4773 0224 0022     		movs	r2, #0
 4774 0226 1A70     		strb	r2, [r3]
 824:src/modem.c   **** 	ModemWrite("AT+CMGF=1\r\n");
 4775              		.loc 1 824 2
 4776 0228 3348     		ldr	r0, .L227+60
 4777 022a 284B     		ldr	r3, .L227+16
 4778 022c 9847     		blx	r3
 4779              	.LVL180:
 825:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4780              		.loc 1 825 6
 4781 022e 3221     		movs	r1, #50
 4782 0230 0220     		movs	r0, #2
 4783 0232 284B     		ldr	r3, .L227+24
 4784 0234 9847     		blx	r3
 4785              	.LVL181:
 4786 0236 0346     		mov	r3, r0
 4787              		.loc 1 825 28
 4788 0238 83F00103 		eor	r3, r3, #1
 4789 023c DBB2     		uxtb	r3, r3
 4790              		.loc 1 825 5
 4791 023e 002B     		cmp	r3, #0
 4792 0240 01D0     		beq	.L218
 826:src/modem.c   **** 		return false;
 4793              		.loc 1 826 10
 4794 0242 0023     		movs	r3, #0
 4795 0244 B7E0     		b	.L226
 4796              	.L218:
 827:src/modem.c   **** 	vTaskDelay(200);
 4797              		.loc 1 827 2
 4798 0246 C820     		movs	r0, #200
 4799 0248 1E4B     		ldr	r3, .L227+8
 4800 024a 9847     		blx	r3
 4801              	.LVL182:
 828:src/modem.c   **** 	ModemWrite("AT+QIPROMPT=2\r\n");
 4802              		.loc 1 828 2
 4803 024c 2B48     		ldr	r0, .L227+64
 4804 024e 1F4B     		ldr	r3, .L227+16
 4805 0250 9847     		blx	r3
 4806              	.LVL183:
 829:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4807              		.loc 1 829 6
 4808 0252 3221     		movs	r1, #50
 4809 0254 0220     		movs	r0, #2
 4810 0256 1F4B     		ldr	r3, .L227+24
 4811 0258 9847     		blx	r3
 4812              	.LVL184:
 4813 025a 0346     		mov	r3, r0
 4814              		.loc 1 829 28
 4815 025c 83F00103 		eor	r3, r3, #1
 4816 0260 DBB2     		uxtb	r3, r3
 4817              		.loc 1 829 5
 4818 0262 002B     		cmp	r3, #0
 4819 0264 01D0     		beq	.L219
 830:src/modem.c   **** 		return false;
 4820              		.loc 1 830 10
 4821 0266 0023     		movs	r3, #0
 4822 0268 A5E0     		b	.L226
 4823              	.L219:
 831:src/modem.c   **** 	vTaskDelay(200);
 4824              		.loc 1 831 2
 4825 026a C820     		movs	r0, #200
 4826 026c 154B     		ldr	r3, .L227+8
 4827 026e 9847     		blx	r3
 4828              	.LVL185:
 832:src/modem.c   **** 	ModemWrite("AT+QIHEAD=1\r\n");
 4829              		.loc 1 832 2
 4830 0270 2348     		ldr	r0, .L227+68
 4831 0272 164B     		ldr	r3, .L227+16
 4832 0274 9847     		blx	r3
 4833              	.LVL186:
 833:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4834              		.loc 1 833 6
 4835 0276 3221     		movs	r1, #50
 4836 0278 0220     		movs	r0, #2
 4837 027a 164B     		ldr	r3, .L227+24
 4838 027c 9847     		blx	r3
 4839              	.LVL187:
 4840 027e 0346     		mov	r3, r0
 4841              		.loc 1 833 28
 4842 0280 83F00103 		eor	r3, r3, #1
 4843 0284 DBB2     		uxtb	r3, r3
 4844              		.loc 1 833 5
 4845 0286 002B     		cmp	r3, #0
 4846 0288 01D0     		beq	.L220
 834:src/modem.c   **** 		return false;
 4847              		.loc 1 834 10
 4848 028a 0023     		movs	r3, #0
 4849 028c 93E0     		b	.L226
 4850              	.L220:
 835:src/modem.c   **** 
 836:src/modem.c   **** 	vTaskDelay(200);
 4851              		.loc 1 836 2
 4852 028e C820     		movs	r0, #200
 4853 0290 0C4B     		ldr	r3, .L227+8
 4854 0292 9847     		blx	r3
 4855              	.LVL188:
 837:src/modem.c   **** 	ModemWrite("AT+QIACT\r\n"); // активация
 4856              		.loc 1 837 2
 4857 0294 1B48     		ldr	r0, .L227+72
 4858 0296 0D4B     		ldr	r3, .L227+16
 4859 0298 9847     		blx	r3
 4860              	.LVL189:
 838:src/modem.c   **** 	vTaskDelay(100);
 4861              		.loc 1 838 2
 4862 029a 6420     		movs	r0, #100
 4863 029c 094B     		ldr	r3, .L227+8
 4864 029e 9847     		blx	r3
 4865              	.LVL190:
 839:src/modem.c   **** 	if (WaitAnsver(MA_OK, 1500) == false)
 4866              		.loc 1 839 6
 4867 02a0 40F2DC51 		movw	r1, #1500
 4868 02a4 0220     		movs	r0, #2
 4869 02a6 0B4B     		ldr	r3, .L227+24
 4870 02a8 9847     		blx	r3
 4871              	.LVL191:
 4872 02aa 0346     		mov	r3, r0
 4873              		.loc 1 839 30
 4874 02ac 83F00103 		eor	r3, r3, #1
 4875 02b0 DBB2     		uxtb	r3, r3
 4876              		.loc 1 839 5
 4877 02b2 002B     		cmp	r3, #0
 4878 02b4 28D0     		beq	.L221
 840:src/modem.c   **** 		return false;
 4879              		.loc 1 840 10
 4880 02b6 0023     		movs	r3, #0
 4881 02b8 7DE0     		b	.L226
 4882              	.L228:
 4883 02ba 00BF     		.align	2
 4884              	.L227:
 4885 02bc 49504400 		.word	4477001
 4886 02c0 00B00208 		.word	134393856
 4887 02c4 00000000 		.word	vTaskDelay
 4888 02c8 50020000 		.word	.LC41
 4889 02cc 00000000 		.word	ModemWrite
 4890 02d0 60020000 		.word	.LC42
 4891 02d4 00000000 		.word	WaitAnsver
 4892 02d8 00000000 		.word	strlen
 4893 02dc 70020000 		.word	.LC43
 4894 02e0 34020000 		.word	.LC39
 4895 02e4 D4010000 		.word	.LC32
 4896 02e8 4C020000 		.word	.LC40
 4897 02ec 80020000 		.word	.LC44
 4898 02f0 00000000 		.word	strcat
 4899 02f4 00000000 		.word	LedAPN
 4900 02f8 F4010000 		.word	.LC35
 4901 02fc 84020000 		.word	.LC45
 4902 0300 94020000 		.word	.LC46
 4903 0304 A4020000 		.word	.LC47
 4904              	.L221:
 841:src/modem.c   **** 	vTaskDelay(500);
 4905              		.loc 1 841 2
 4906 0308 4FF4FA70 		mov	r0, #500
 4907 030c 2C4B     		ldr	r3, .L229
 4908 030e 9847     		blx	r3
 4909              	.LVL192:
 842:src/modem.c   **** 
 843:src/modem.c   **** 	ModemWrite("AT+QICSGP=1,\"CMNET\"\r\n");
 4910              		.loc 1 843 2
 4911 0310 2C48     		ldr	r0, .L229+4
 4912 0312 2D4B     		ldr	r3, .L229+8
 4913 0314 9847     		blx	r3
 4914              	.LVL193:
 844:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4915              		.loc 1 844 6
 4916 0316 3221     		movs	r1, #50
 4917 0318 0220     		movs	r0, #2
 4918 031a 2C4B     		ldr	r3, .L229+12
 4919 031c 9847     		blx	r3
 4920              	.LVL194:
 4921 031e 0346     		mov	r3, r0
 4922              		.loc 1 844 28
 4923 0320 83F00103 		eor	r3, r3, #1
 4924 0324 DBB2     		uxtb	r3, r3
 4925              		.loc 1 844 5
 4926 0326 002B     		cmp	r3, #0
 4927 0328 01D0     		beq	.L222
 845:src/modem.c   **** 		return false;
 4928              		.loc 1 845 10
 4929 032a 0023     		movs	r3, #0
 4930 032c 43E0     		b	.L226
 4931              	.L222:
 846:src/modem.c   **** 	vTaskDelay(200);
 4932              		.loc 1 846 2
 4933 032e C820     		movs	r0, #200
 4934 0330 234B     		ldr	r3, .L229
 4935 0332 9847     		blx	r3
 4936              	.LVL195:
 847:src/modem.c   **** 	ModemWrite("AT+QILPORT=\"TCP\",\"4444\"\r\n");
 4937              		.loc 1 847 2
 4938 0334 2648     		ldr	r0, .L229+16
 4939 0336 244B     		ldr	r3, .L229+8
 4940 0338 9847     		blx	r3
 4941              	.LVL196:
 848:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4942              		.loc 1 848 6
 4943 033a 3221     		movs	r1, #50
 4944 033c 0220     		movs	r0, #2
 4945 033e 234B     		ldr	r3, .L229+12
 4946 0340 9847     		blx	r3
 4947              	.LVL197:
 4948 0342 0346     		mov	r3, r0
 4949              		.loc 1 848 28
 4950 0344 83F00103 		eor	r3, r3, #1
 4951 0348 DBB2     		uxtb	r3, r3
 4952              		.loc 1 848 5
 4953 034a 002B     		cmp	r3, #0
 4954 034c 01D0     		beq	.L223
 849:src/modem.c   **** 		return false;
 4955              		.loc 1 849 10
 4956 034e 0023     		movs	r3, #0
 4957 0350 31E0     		b	.L226
 4958              	.L223:
 850:src/modem.c   **** 	vTaskDelay(200);
 4959              		.loc 1 850 2
 4960 0352 C820     		movs	r0, #200
 4961 0354 1A4B     		ldr	r3, .L229
 4962 0356 9847     		blx	r3
 4963              	.LVL198:
 851:src/modem.c   **** 	ModemWrite("AT+QILOCIP\r\n");
 4964              		.loc 1 851 2
 4965 0358 1E48     		ldr	r0, .L229+20
 4966 035a 1B4B     		ldr	r3, .L229+8
 4967 035c 9847     		blx	r3
 4968              	.LVL199:
 852:src/modem.c   **** 	WaitAnsver(MA_UNKNOWN, 50);
 4969              		.loc 1 852 2
 4970 035e 3221     		movs	r1, #50
 4971 0360 0020     		movs	r0, #0
 4972 0362 1A4B     		ldr	r3, .L229+12
 4973 0364 9847     		blx	r3
 4974              	.LVL200:
 853:src/modem.c   **** 	vTaskDelay(200);
 4975              		.loc 1 853 2
 4976 0366 C820     		movs	r0, #200
 4977 0368 154B     		ldr	r3, .L229
 4978 036a 9847     		blx	r3
 4979              	.LVL201:
 854:src/modem.c   **** 	ModemWrite("AT+QISERVER\r\n"); // сервер  (=0 - это TCP сервер)
 4980              		.loc 1 854 2
 4981 036c 1A48     		ldr	r0, .L229+24
 4982 036e 164B     		ldr	r3, .L229+8
 4983 0370 9847     		blx	r3
 4984              	.LVL202:
 855:src/modem.c   **** 	vTaskDelay(200);
 4985              		.loc 1 855 2
 4986 0372 C820     		movs	r0, #200
 4987 0374 124B     		ldr	r3, .L229
 4988 0376 9847     		blx	r3
 4989              	.LVL203:
 856:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 4990              		.loc 1 856 6
 4991 0378 3221     		movs	r1, #50
 4992 037a 0220     		movs	r0, #2
 4993 037c 134B     		ldr	r3, .L229+12
 4994 037e 9847     		blx	r3
 4995              	.LVL204:
 4996 0380 0346     		mov	r3, r0
 4997              		.loc 1 856 28
 4998 0382 83F00103 		eor	r3, r3, #1
 4999 0386 DBB2     		uxtb	r3, r3
 5000              		.loc 1 856 5
 5001 0388 002B     		cmp	r3, #0
 5002 038a 01D0     		beq	.L224
 857:src/modem.c   **** 		return false;
 5003              		.loc 1 857 10
 5004 038c 0023     		movs	r3, #0
 5005 038e 12E0     		b	.L226
 5006              	.L224:
 858:src/modem.c   **** 	vTaskDelay(200);
 5007              		.loc 1 858 2
 5008 0390 C820     		movs	r0, #200
 5009 0392 0B4B     		ldr	r3, .L229
 5010 0394 9847     		blx	r3
 5011              	.LVL205:
 859:src/modem.c   **** 
 860:src/modem.c   **** 	ModemWrite("AT+QISRVC=2\r\n"); //роль соединения
 5012              		.loc 1 860 2
 5013 0396 1148     		ldr	r0, .L229+28
 5014 0398 0B4B     		ldr	r3, .L229+8
 5015 039a 9847     		blx	r3
 5016              	.LVL206:
 861:src/modem.c   **** 	if (WaitAnsver(MA_OK, 50) == false)
 5017              		.loc 1 861 6
 5018 039c 3221     		movs	r1, #50
 5019 039e 0220     		movs	r0, #2
 5020 03a0 0A4B     		ldr	r3, .L229+12
 5021 03a2 9847     		blx	r3
 5022              	.LVL207:
 5023 03a4 0346     		mov	r3, r0
 5024              		.loc 1 861 28
 5025 03a6 83F00103 		eor	r3, r3, #1
 5026 03aa DBB2     		uxtb	r3, r3
 5027              		.loc 1 861 5
 5028 03ac 002B     		cmp	r3, #0
 5029 03ae 01D0     		beq	.L225
 862:src/modem.c   **** 		return false;
 5030              		.loc 1 862 10
 5031 03b0 0023     		movs	r3, #0
 5032 03b2 00E0     		b	.L226
 5033              	.L225:
 863:src/modem.c   **** 
 864:src/modem.c   **** 	/*if (pxConfig->devcfg.GSMtime == 1)  //если включена синхронизация времени
 865:src/modem.c   **** 
 866:src/modem.c   **** 
 867:src/modem.c   **** 
 868:src/modem.c   **** 
 869:src/modem.c   **** 
 870:src/modem.c   **** 	 {
 871:src/modem.c   **** 
 872:src/modem.c   **** 	 GSM_clock();
 873:src/modem.c   **** 	 FlagGSMtime = 0;
 874:src/modem.c   **** 
 875:src/modem.c   **** 	 }*/
 876:src/modem.c   **** 
 877:src/modem.c   **** 	return true;
 5034              		.loc 1 877 9
 5035 03b4 0123     		movs	r3, #1
 5036              	.L226:
 878:src/modem.c   **** }
 5037              		.loc 1 878 1 discriminator 1
 5038 03b6 1846     		mov	r0, r3
 5039 03b8 07F5B077 		add	r7, r7, #352
 5040              	.LCFI113:
 5041              		.cfi_def_cfa_offset 16
 5042 03bc BD46     		mov	sp, r7
 5043              	.LCFI114:
 5044              		.cfi_def_cfa_register 13
 5045              		@ sp needed
 5046 03be B0BD     		pop	{r4, r5, r7, pc}
 5047              	.L230:
 5048              		.align	2
 5049              	.L229:
 5050 03c0 00000000 		.word	vTaskDelay
 5051 03c4 B0020000 		.word	.LC48
 5052 03c8 00000000 		.word	ModemWrite
 5053 03cc 00000000 		.word	WaitAnsver
 5054 03d0 C8020000 		.word	.LC49
 5055 03d4 24020000 		.word	.LC38
 5056 03d8 E4020000 		.word	.LC50
 5057 03dc F4020000 		.word	.LC51
 5058              		.cfi_endproc
 5059              	.LFE56:
 5061              		.section	.rodata
 5062 0302 0000     		.align	2
 5063              	.LC52:
 5064 0304 41542B58 		.ascii	"AT+XISP=0\015\012\000"
 5064      4953503D 
 5064      300D0A00 
 5065              		.align	2
 5066              	.LC53:
 5067 0310 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"\000"
 5067      4744434F 
 5067      4E543D31 
 5067      2C224950 
 5067      222C2200 
 5068              		.align	2
 5069              	.LC54:
 5070 0324 41542B43 		.ascii	"AT+CGDCONT=1,\"PPP\",\"\000"
 5070      4744434F 
 5070      4E543D31 
 5070      2C225050 
 5070      50222C22 
 5071 0339 000000   		.align	2
 5072              	.LC55:
 5073 033c 41542B58 		.ascii	"AT+XIIC=1\015\012\000"
 5073      4949433D 
 5073      310D0A00 
 5074              		.align	2
 5075              	.LC56:
 5076 0348 41542B58 		.ascii	"AT+XIIC?\015\012\000"
 5076      4949433F 
 5076      0D0A00
 5077 0353 00       		.align	2
 5078              	.LC57:
 5079 0354 41542B54 		.ascii	"AT+TCPLISTEN=4444\015\012\000"
 5079      43504C49 
 5079      5354454E 
 5079      3D343434 
 5079      340D0A00 
 5080              		.align	2
 5081              	.LC58:
 5082 0368 41542B49 		.ascii	"AT+IPSTATUS=0\015\012\000"
 5082      50535441 
 5082      5455533D 
 5082      300D0A00 
 5083              		.section	.text.WaitGprsConnectN715,"ax",%progbits
 5084              		.align	1
 5085              		.global	WaitGprsConnectN715
 5086              		.syntax unified
 5087              		.thumb
 5088              		.thumb_func
 5090              	WaitGprsConnectN715:
 5091              	.LFB57:
 879:src/modem.c   **** bool WaitGprsConnectN715() {
 5092              		.loc 1 879 28
 5093              		.cfi_startproc
 5094              		@ args = 0, pretend = 0, frame = 376
 5095              		@ frame_needed = 1, uses_anonymous_args = 0
 5096 0000 B0B5     		push	{r4, r5, r7, lr}
 5097              	.LCFI115:
 5098              		.cfi_def_cfa_offset 16
 5099              		.cfi_offset 4, -16
 5100              		.cfi_offset 5, -12
 5101              		.cfi_offset 7, -8
 5102              		.cfi_offset 14, -4
 5103 0002 DEB0     		sub	sp, sp, #376
 5104              	.LCFI116:
 5105              		.cfi_def_cfa_offset 392
 5106 0004 00AF     		add	r7, sp, #0
 5107              	.LCFI117:
 5108              		.cfi_def_cfa_register 7
 880:src/modem.c   **** 	char myIp[17];
 881:src/modem.c   **** 	char strsipstart[256];
 882:src/modem.c   **** 	char buf[64];
 883:src/modem.c   **** 	char header[] = "IPD";
 5109              		.loc 1 883 7
 5110 0006 07F5BC73 		add	r3, r7, #376
 5111 000a A3F5BC73 		sub	r3, r3, #376
 5112 000e AB4A     		ldr	r2, .L288
 5113 0010 1A60     		str	r2, [r3]
 884:src/modem.c   **** 	int packSize;
 885:src/modem.c   **** 	int headerSize;
 886:src/modem.c   **** 	int fl = 0, con = 10;
 5114              		.loc 1 886 6
 5115 0012 0023     		movs	r3, #0
 5116 0014 C7F87431 		str	r3, [r7, #372]
 5117              		.loc 1 886 14
 5118 0018 0A23     		movs	r3, #10
 5119 001a C7F87031 		str	r3, [r7, #368]
 887:src/modem.c   **** 	FLASHMEM *pxConfig = (FLASHMEM*) DEVICE_FLASHMEM_LOCATION;
 5120              		.loc 1 887 12
 5121 001e A84B     		ldr	r3, .L288+4
 5122 0020 C7F85831 		str	r3, [r7, #344]
 888:src/modem.c   **** 	int i;
 889:src/modem.c   **** 
 890:src/modem.c   **** 	vTaskDelay(100);
 5123              		.loc 1 890 2
 5124 0024 6420     		movs	r0, #100
 5125 0026 A74B     		ldr	r3, .L288+8
 5126 0028 9847     		blx	r3
 5127              	.LVL208:
 891:src/modem.c   **** 	ModemWrite("AT+XISP=0\r\n");   // выбор TCP
 5128              		.loc 1 891 2
 5129 002a A748     		ldr	r0, .L288+12
 5130 002c A74B     		ldr	r3, .L288+16
 5131 002e 9847     		blx	r3
 5132              	.LVL209:
 892:src/modem.c   **** 	vTaskDelay(100);
 5133              		.loc 1 892 2
 5134 0030 6420     		movs	r0, #100
 5135 0032 A44B     		ldr	r3, .L288+8
 5136 0034 9847     		blx	r3
 5137              	.LVL210:
 893:src/modem.c   **** 	if (WaitAnsver(MA_OK, 400) == false)
 5138              		.loc 1 893 6
 5139 0036 4FF4C871 		mov	r1, #400
 5140 003a 0220     		movs	r0, #2
 5141 003c A44B     		ldr	r3, .L288+20
 5142 003e 9847     		blx	r3
 5143              	.LVL211:
 5144 0040 0346     		mov	r3, r0
 5145              		.loc 1 893 29
 5146 0042 83F00103 		eor	r3, r3, #1
 5147 0046 DBB2     		uxtb	r3, r3
 5148              		.loc 1 893 5
 5149 0048 002B     		cmp	r3, #0
 5150 004a 01D0     		beq	.L232
 894:src/modem.c   **** 		return false;
 5151              		.loc 1 894 10
 5152 004c 0023     		movs	r3, #0
 5153 004e 23E2     		b	.L277
 5154              	.L232:
 895:src/modem.c   **** 	vTaskDelay(100);
 5155              		.loc 1 895 2
 5156 0050 6420     		movs	r0, #100
 5157 0052 9C4B     		ldr	r3, .L288+8
 5158 0054 9847     		blx	r3
 5159              	.LVL212:
 896:src/modem.c   **** 
 897:src/modem.c   **** 	if (strlen(pxConfig->devcfg.gprs.login) > 16
 5160              		.loc 1 897 34
 5161 0056 D7F85831 		ldr	r3, [r7, #344]
 5162 005a 8033     		adds	r3, r3, #128
 5163              		.loc 1 897 6
 5164 005c 1846     		mov	r0, r3
 5165 005e 9D4B     		ldr	r3, .L288+24
 5166 0060 9847     		blx	r3
 5167              	.LVL213:
 5168 0062 0346     		mov	r3, r0
 5169              		.loc 1 897 5
 5170 0064 102B     		cmp	r3, #16
 5171 0066 10D8     		bhi	.L234
 898:src/modem.c   **** 			|| strlen(pxConfig->devcfg.gprs.password) > 16
 5172              		.loc 1 898 35
 5173 0068 D7F85831 		ldr	r3, [r7, #344]
 5174 006c C033     		adds	r3, r3, #192
 5175              		.loc 1 898 7
 5176 006e 1846     		mov	r0, r3
 5177 0070 984B     		ldr	r3, .L288+24
 5178 0072 9847     		blx	r3
 5179              	.LVL214:
 5180 0074 0346     		mov	r3, r0
 5181              		.loc 1 898 4
 5182 0076 102B     		cmp	r3, #16
 5183 0078 07D8     		bhi	.L234
 899:src/modem.c   **** 			|| strlen(pxConfig->devcfg.gprs.adparam) > 32) {
 5184              		.loc 1 899 35
 5185 007a D7F85831 		ldr	r3, [r7, #344]
 5186              		.loc 1 899 7
 5187 007e 1846     		mov	r0, r3
 5188 0080 944B     		ldr	r3, .L288+24
 5189 0082 9847     		blx	r3
 5190              	.LVL215:
 5191 0084 0346     		mov	r3, r0
 5192              		.loc 1 899 4
 5193 0086 202B     		cmp	r3, #32
 5194 0088 27D9     		bls	.L235
 5195              	.L234:
 900:src/modem.c   **** 		strcpy(buf, "AT+CGDCONT=1,\"IP\",\""); //AT+CGDCONT=1,IP,"vmi.velcom.by"," "," ",1
 5196              		.loc 1 900 3
 5197 008a 3B1D     		adds	r3, r7, #4
 5198 008c 924A     		ldr	r2, .L288+28
 5199 008e 1C46     		mov	r4, r3
 5200 0090 1546     		mov	r5, r2
 5201 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5202 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5203 0096 2B68     		ldr	r3, [r5]
 5204 0098 2360     		str	r3, [r4]
 901:src/modem.c   **** 		strcat(buf, PPP_ADPARAM);
 5205              		.loc 1 901 3
 5206 009a 3B1D     		adds	r3, r7, #4
 5207 009c 1846     		mov	r0, r3
 5208 009e 8D4B     		ldr	r3, .L288+24
 5209 00a0 9847     		blx	r3
 5210              	.LVL216:
 5211 00a2 0346     		mov	r3, r0
 5212 00a4 1A46     		mov	r2, r3
 5213 00a6 3B1D     		adds	r3, r7, #4
 5214 00a8 1344     		add	r3, r3, r2
 5215 00aa 8C4A     		ldr	r2, .L288+32
 5216 00ac 1D46     		mov	r5, r3
 5217 00ae 1446     		mov	r4, r2
 5218 00b0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5219 00b2 2860     		str	r0, [r5]	@ unaligned
 5220 00b4 6960     		str	r1, [r5, #4]	@ unaligned
 5221 00b6 AA60     		str	r2, [r5, #8]	@ unaligned
 5222 00b8 EB60     		str	r3, [r5, #12]	@ unaligned
 5223 00ba 2068     		ldr	r0, [r4]
 5224 00bc 2861     		str	r0, [r5, #16]	@ unaligned
 5225 00be 2379     		ldrb	r3, [r4, #4]
 5226 00c0 2B75     		strb	r3, [r5, #20]
 902:src/modem.c   **** 		strcat(buf, "\"\r\n");
 5227              		.loc 1 902 3
 5228 00c2 3B1D     		adds	r3, r7, #4
 5229 00c4 1846     		mov	r0, r3
 5230 00c6 834B     		ldr	r3, .L288+24
 5231 00c8 9847     		blx	r3
 5232              	.LVL217:
 5233 00ca 0346     		mov	r3, r0
 5234 00cc 1A46     		mov	r2, r3
 5235 00ce 3B1D     		adds	r3, r7, #4
 5236 00d0 1344     		add	r3, r3, r2
 5237 00d2 834A     		ldr	r2, .L288+36
 5238 00d4 1068     		ldr	r0, [r2]
 5239 00d6 1860     		str	r0, [r3]	@ unaligned
 5240 00d8 1CE0     		b	.L236
 5241              	.L235:
 903:src/modem.c   **** 	} else {
 904:src/modem.c   **** 		strcpy(buf, "AT+CGDCONT=1,\"PPP\",\"");
 5242              		.loc 1 904 3
 5243 00da 3B1D     		adds	r3, r7, #4
 5244 00dc 814A     		ldr	r2, .L288+40
 5245 00de 1C46     		mov	r4, r3
 5246 00e0 1546     		mov	r5, r2
 5247 00e2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5248 00e4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 5249 00e6 95E80300 		ldm	r5, {r0, r1}
 5250 00ea 2060     		str	r0, [r4]
 5251 00ec 0434     		adds	r4, r4, #4
 5252 00ee 2170     		strb	r1, [r4]
 905:src/modem.c   **** 		strcat(buf, pxConfig->devcfg.gprs.adparam);
 5253              		.loc 1 905 36
 5254 00f0 D7F85821 		ldr	r2, [r7, #344]
 5255              		.loc 1 905 3
 5256 00f4 3B1D     		adds	r3, r7, #4
 5257 00f6 1146     		mov	r1, r2
 5258 00f8 1846     		mov	r0, r3
 5259 00fa 7B4B     		ldr	r3, .L288+44
 5260 00fc 9847     		blx	r3
 5261              	.LVL218:
 906:src/modem.c   **** 		strcat(buf, "\"\r\n");
 5262              		.loc 1 906 3
 5263 00fe 3B1D     		adds	r3, r7, #4
 5264 0100 1846     		mov	r0, r3
 5265 0102 744B     		ldr	r3, .L288+24
 5266 0104 9847     		blx	r3
 5267              	.LVL219:
 5268 0106 0346     		mov	r3, r0
 5269 0108 1A46     		mov	r2, r3
 5270 010a 3B1D     		adds	r3, r7, #4
 5271 010c 1344     		add	r3, r3, r2
 5272 010e 744A     		ldr	r2, .L288+36
 5273 0110 1068     		ldr	r0, [r2]
 5274 0112 1860     		str	r0, [r3]	@ unaligned
 5275              	.L236:
 907:src/modem.c   **** 	}
 908:src/modem.c   **** 
 909:src/modem.c   **** 	vTaskDelay(100);
 5276              		.loc 1 909 2
 5277 0114 6420     		movs	r0, #100
 5278 0116 6B4B     		ldr	r3, .L288+8
 5279 0118 9847     		blx	r3
 5280              	.LVL220:
 5281              	.L244:
 910:src/modem.c   **** 
 911:src/modem.c   **** 	while (1) {
 912:src/modem.c   **** 		ModemWrite(buf);
 5282              		.loc 1 912 3
 5283 011a 3B1D     		adds	r3, r7, #4
 5284 011c 1846     		mov	r0, r3
 5285 011e 6B4B     		ldr	r3, .L288+16
 5286 0120 9847     		blx	r3
 5287              	.LVL221:
 913:src/modem.c   **** 		vTaskDelay(100);
 5288              		.loc 1 913 3
 5289 0122 6420     		movs	r0, #100
 5290 0124 674B     		ldr	r3, .L288+8
 5291 0126 9847     		blx	r3
 5292              	.LVL222:
 914:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 5293              		.loc 1 914 14
 5294 0128 4FF48071 		mov	r1, #256
 5295 012c 6F48     		ldr	r0, .L288+48
 5296 012e 704B     		ldr	r3, .L288+52
 5297 0130 9847     		blx	r3
 5298              	.LVL223:
 5299 0132 0346     		mov	r3, r0
 5300              		.loc 1 914 12
 5301 0134 9AB2     		uxth	r2, r3
 5302 0136 6F4B     		ldr	r3, .L288+56
 5303 0138 1A80     		strh	r2, [r3]	@ movhi
 5304              	.LBB11:
 915:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 5305              		.loc 1 915 12
 5306 013a 0023     		movs	r3, #0
 5307 013c C7F86C31 		str	r3, [r7, #364]
 5308              		.loc 1 915 3
 5309 0140 16E0     		b	.L237
 5310              	.L240:
 916:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5311              		.loc 1 916 17
 5312 0142 6A4A     		ldr	r2, .L288+48
 5313 0144 D7F86C31 		ldr	r3, [r7, #364]
 5314 0148 1344     		add	r3, r3, r2
 5315 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5316              		.loc 1 916 7
 5317 014c 4F2B     		cmp	r3, #79
 5318 014e 0AD1     		bne	.L238
 5319              		.loc 1 916 44 discriminator 1
 5320 0150 D7F86C31 		ldr	r3, [r7, #364]
 5321 0154 0133     		adds	r3, r3, #1
 5322              		.loc 1 916 41 discriminator 1
 5323 0156 654A     		ldr	r2, .L288+48
 5324 0158 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5325              		.loc 1 916 29 discriminator 1
 5326 015a 4B2B     		cmp	r3, #75
 5327 015c 03D1     		bne	.L238
 917:src/modem.c   **** 				fl = 1;
 5328              		.loc 1 917 8
 5329 015e 0123     		movs	r3, #1
 5330 0160 C7F87431 		str	r3, [r7, #372]
 918:src/modem.c   **** 				break;
 5331              		.loc 1 918 5
 5332 0164 0CE0     		b	.L239
 5333              	.L238:
 915:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5334              		.loc 1 915 34 discriminator 2
 5335 0166 D7F86C31 		ldr	r3, [r7, #364]
 5336 016a 0133     		adds	r3, r3, #1
 5337 016c C7F86C31 		str	r3, [r7, #364]
 5338              	.L237:
 915:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5339              		.loc 1 915 21 discriminator 1
 5340 0170 604B     		ldr	r3, .L288+56
 5341 0172 1B88     		ldrh	r3, [r3]	@ movhi
 5342 0174 9BB2     		uxth	r3, r3
 5343 0176 1A46     		mov	r2, r3
 915:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5344              		.loc 1 915 3 discriminator 1
 5345 0178 D7F86C31 		ldr	r3, [r7, #364]
 5346 017c 9342     		cmp	r3, r2
 5347 017e E0DB     		blt	.L240
 5348              	.L239:
 5349              	.LBE11:
 919:src/modem.c   **** 			}
 920:src/modem.c   **** 
 921:src/modem.c   **** 		}
 922:src/modem.c   **** 		con--;
 5350              		.loc 1 922 6
 5351 0180 D7F87031 		ldr	r3, [r7, #368]
 5352 0184 013B     		subs	r3, r3, #1
 5353 0186 C7F87031 		str	r3, [r7, #368]
 923:src/modem.c   **** 		if (!con)
 5354              		.loc 1 923 6
 5355 018a D7F87031 		ldr	r3, [r7, #368]
 5356 018e 002B     		cmp	r3, #0
 5357 0190 01D1     		bne	.L241
 924:src/modem.c   **** 			return false;
 5358              		.loc 1 924 11
 5359 0192 0023     		movs	r3, #0
 5360 0194 80E1     		b	.L277
 5361              	.L241:
 925:src/modem.c   **** 		else if (fl)
 5362              		.loc 1 925 11
 5363 0196 D7F87431 		ldr	r3, [r7, #372]
 5364 019a 002B     		cmp	r3, #0
 5365 019c 00D1     		bne	.L283
 912:src/modem.c   **** 		vTaskDelay(100);
 5366              		.loc 1 912 3
 5367 019e BCE7     		b	.L244
 5368              	.L283:
 926:src/modem.c   **** 			break;
 5369              		.loc 1 926 4
 5370 01a0 00BF     		nop
 927:src/modem.c   **** 	}
 928:src/modem.c   **** 	fl = 0;
 5371              		.loc 1 928 5
 5372 01a2 0023     		movs	r3, #0
 5373 01a4 C7F87431 		str	r3, [r7, #372]
 929:src/modem.c   **** 	vTaskDelay(200);
 5374              		.loc 1 929 2
 5375 01a8 C820     		movs	r0, #200
 5376 01aa 464B     		ldr	r3, .L288+8
 5377 01ac 9847     		blx	r3
 5378              	.LVL224:
 5379              	.L252:
 930:src/modem.c   **** 	while (1) {
 931:src/modem.c   **** 		vTaskDelay(100);
 5380              		.loc 1 931 3
 5381 01ae 6420     		movs	r0, #100
 5382 01b0 444B     		ldr	r3, .L288+8
 5383 01b2 9847     		blx	r3
 5384              	.LVL225:
 932:src/modem.c   **** 		ModemWrite("AT+XIIC=1\r\n");
 5385              		.loc 1 932 3
 5386 01b4 5048     		ldr	r0, .L288+60
 5387 01b6 454B     		ldr	r3, .L288+16
 5388 01b8 9847     		blx	r3
 5389              	.LVL226:
 933:src/modem.c   **** 		vTaskDelay(100);
 5390              		.loc 1 933 3
 5391 01ba 6420     		movs	r0, #100
 5392 01bc 414B     		ldr	r3, .L288+8
 5393 01be 9847     		blx	r3
 5394              	.LVL227:
 934:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 5395              		.loc 1 934 14
 5396 01c0 4FF48071 		mov	r1, #256
 5397 01c4 4948     		ldr	r0, .L288+48
 5398 01c6 4A4B     		ldr	r3, .L288+52
 5399 01c8 9847     		blx	r3
 5400              	.LVL228:
 5401 01ca 0346     		mov	r3, r0
 5402              		.loc 1 934 12
 5403 01cc 9AB2     		uxth	r2, r3
 5404 01ce 494B     		ldr	r3, .L288+56
 5405 01d0 1A80     		strh	r2, [r3]	@ movhi
 5406              	.LBB12:
 935:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 5407              		.loc 1 935 12
 5408 01d2 0023     		movs	r3, #0
 5409 01d4 C7F86831 		str	r3, [r7, #360]
 5410              		.loc 1 935 3
 5411 01d8 16E0     		b	.L245
 5412              	.L248:
 936:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5413              		.loc 1 936 17
 5414 01da 444A     		ldr	r2, .L288+48
 5415 01dc D7F86831 		ldr	r3, [r7, #360]
 5416 01e0 1344     		add	r3, r3, r2
 5417 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5418              		.loc 1 936 7
 5419 01e4 4F2B     		cmp	r3, #79
 5420 01e6 0AD1     		bne	.L246
 5421              		.loc 1 936 44 discriminator 1
 5422 01e8 D7F86831 		ldr	r3, [r7, #360]
 5423 01ec 0133     		adds	r3, r3, #1
 5424              		.loc 1 936 41 discriminator 1
 5425 01ee 3F4A     		ldr	r2, .L288+48
 5426 01f0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5427              		.loc 1 936 29 discriminator 1
 5428 01f2 4B2B     		cmp	r3, #75
 5429 01f4 03D1     		bne	.L246
 937:src/modem.c   **** 				fl = 1;
 5430              		.loc 1 937 8
 5431 01f6 0123     		movs	r3, #1
 5432 01f8 C7F87431 		str	r3, [r7, #372]
 938:src/modem.c   **** 				break;
 5433              		.loc 1 938 5
 5434 01fc 0CE0     		b	.L247
 5435              	.L246:
 935:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5436              		.loc 1 935 34 discriminator 2
 5437 01fe D7F86831 		ldr	r3, [r7, #360]
 5438 0202 0133     		adds	r3, r3, #1
 5439 0204 C7F86831 		str	r3, [r7, #360]
 5440              	.L245:
 935:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5441              		.loc 1 935 21 discriminator 1
 5442 0208 3A4B     		ldr	r3, .L288+56
 5443 020a 1B88     		ldrh	r3, [r3]	@ movhi
 5444 020c 9BB2     		uxth	r3, r3
 5445 020e 1A46     		mov	r2, r3
 935:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5446              		.loc 1 935 3 discriminator 1
 5447 0210 D7F86831 		ldr	r3, [r7, #360]
 5448 0214 9342     		cmp	r3, r2
 5449 0216 E0DB     		blt	.L248
 5450              	.L247:
 5451              	.LBE12:
 939:src/modem.c   **** 			}
 940:src/modem.c   **** 
 941:src/modem.c   **** 		}
 942:src/modem.c   **** 		con--;
 5452              		.loc 1 942 6
 5453 0218 D7F87031 		ldr	r3, [r7, #368]
 5454 021c 013B     		subs	r3, r3, #1
 5455 021e C7F87031 		str	r3, [r7, #368]
 943:src/modem.c   **** 		if (!con)
 5456              		.loc 1 943 6
 5457 0222 D7F87031 		ldr	r3, [r7, #368]
 5458 0226 002B     		cmp	r3, #0
 5459 0228 01D1     		bne	.L249
 944:src/modem.c   **** 			return false;
 5460              		.loc 1 944 11
 5461 022a 0023     		movs	r3, #0
 5462 022c 34E1     		b	.L277
 5463              	.L249:
 945:src/modem.c   **** 		if (fl)
 5464              		.loc 1 945 6
 5465 022e D7F87431 		ldr	r3, [r7, #372]
 5466 0232 002B     		cmp	r3, #0
 5467 0234 00D1     		bne	.L284
 931:src/modem.c   **** 		ModemWrite("AT+XIIC=1\r\n");
 5468              		.loc 1 931 3
 5469 0236 BAE7     		b	.L252
 5470              	.L284:
 946:src/modem.c   **** 			break;
 5471              		.loc 1 946 4
 5472 0238 00BF     		nop
 947:src/modem.c   **** 	}
 948:src/modem.c   **** 
 949:src/modem.c   **** 	fl = 0;
 5473              		.loc 1 949 5
 5474 023a 0023     		movs	r3, #0
 5475 023c C7F87431 		str	r3, [r7, #372]
 950:src/modem.c   **** 	con = 15;
 5476              		.loc 1 950 6
 5477 0240 0F23     		movs	r3, #15
 5478 0242 C7F87031 		str	r3, [r7, #368]
 5479              	.L259:
 951:src/modem.c   **** 	while (1) {
 952:src/modem.c   **** 		vTaskDelay(100);
 5480              		.loc 1 952 3
 5481 0246 6420     		movs	r0, #100
 5482 0248 1E4B     		ldr	r3, .L288+8
 5483 024a 9847     		blx	r3
 5484              	.LVL229:
 953:src/modem.c   **** 		ModemWrite("AT+XIIC?\r\n");
 5485              		.loc 1 953 3
 5486 024c 2B48     		ldr	r0, .L288+64
 5487 024e 1F4B     		ldr	r3, .L288+16
 5488 0250 9847     		blx	r3
 5489              	.LVL230:
 954:src/modem.c   **** 		vTaskDelay(100);
 5490              		.loc 1 954 3
 5491 0252 6420     		movs	r0, #100
 5492 0254 1B4B     		ldr	r3, .L288+8
 5493 0256 9847     		blx	r3
 5494              	.LVL231:
 955:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 5495              		.loc 1 955 14
 5496 0258 4FF48071 		mov	r1, #256
 5497 025c 2348     		ldr	r0, .L288+48
 5498 025e 244B     		ldr	r3, .L288+52
 5499 0260 9847     		blx	r3
 5500              	.LVL232:
 5501 0262 0346     		mov	r3, r0
 5502              		.loc 1 955 12
 5503 0264 9AB2     		uxth	r2, r3
 5504 0266 234B     		ldr	r3, .L288+56
 5505 0268 1A80     		strh	r2, [r3]	@ movhi
 5506              	.LBB13:
 956:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 5507              		.loc 1 956 12
 5508 026a 0023     		movs	r3, #0
 5509 026c C7F86431 		str	r3, [r7, #356]
 5510              		.loc 1 956 3
 5511 0270 16E0     		b	.L253
 5512              	.L256:
 957:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5513              		.loc 1 957 17
 5514 0272 1E4A     		ldr	r2, .L288+48
 5515 0274 D7F86431 		ldr	r3, [r7, #356]
 5516 0278 1344     		add	r3, r3, r2
 5517 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5518              		.loc 1 957 7
 5519 027c 4F2B     		cmp	r3, #79
 5520 027e 0AD1     		bne	.L254
 5521              		.loc 1 957 44 discriminator 1
 5522 0280 D7F86431 		ldr	r3, [r7, #356]
 5523 0284 0133     		adds	r3, r3, #1
 5524              		.loc 1 957 41 discriminator 1
 5525 0286 194A     		ldr	r2, .L288+48
 5526 0288 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5527              		.loc 1 957 29 discriminator 1
 5528 028a 4B2B     		cmp	r3, #75
 5529 028c 03D1     		bne	.L254
 958:src/modem.c   **** 				fl = 1;
 5530              		.loc 1 958 8
 5531 028e 0123     		movs	r3, #1
 5532 0290 C7F87431 		str	r3, [r7, #372]
 959:src/modem.c   **** 				break;
 5533              		.loc 1 959 5
 5534 0294 0CE0     		b	.L255
 5535              	.L254:
 956:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5536              		.loc 1 956 34 discriminator 2
 5537 0296 D7F86431 		ldr	r3, [r7, #356]
 5538 029a 0133     		adds	r3, r3, #1
 5539 029c C7F86431 		str	r3, [r7, #356]
 5540              	.L253:
 956:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5541              		.loc 1 956 21 discriminator 1
 5542 02a0 144B     		ldr	r3, .L288+56
 5543 02a2 1B88     		ldrh	r3, [r3]	@ movhi
 5544 02a4 9BB2     		uxth	r3, r3
 5545 02a6 1A46     		mov	r2, r3
 956:src/modem.c   **** 			if ((sio_buf2[i] == 'O') && (sio_buf2[i + 1] == 'K')) {
 5546              		.loc 1 956 3 discriminator 1
 5547 02a8 D7F86431 		ldr	r3, [r7, #356]
 5548 02ac 9342     		cmp	r3, r2
 5549 02ae E0DB     		blt	.L256
 5550              	.L255:
 5551              	.LBE13:
 960:src/modem.c   **** 			}
 961:src/modem.c   **** 
 962:src/modem.c   **** 		}
 963:src/modem.c   **** 		if (fl)
 5552              		.loc 1 963 6
 5553 02b0 D7F87431 		ldr	r3, [r7, #372]
 5554 02b4 002B     		cmp	r3, #0
 5555 02b6 23D1     		bne	.L285
 952:src/modem.c   **** 		ModemWrite("AT+XIIC?\r\n");
 5556              		.loc 1 952 3
 5557 02b8 C5E7     		b	.L259
 5558              	.L289:
 5559 02ba 00BF     		.align	2
 5560              	.L288:
 5561 02bc 49504400 		.word	4477001
 5562 02c0 00B00208 		.word	134393856
 5563 02c4 00000000 		.word	vTaskDelay
 5564 02c8 04030000 		.word	.LC52
 5565 02cc 00000000 		.word	ModemWrite
 5566 02d0 00000000 		.word	WaitAnsver
 5567 02d4 00000000 		.word	strlen
 5568 02d8 10030000 		.word	.LC53
 5569 02dc 34020000 		.word	.LC39
 5570 02e0 80020000 		.word	.LC44
 5571 02e4 24030000 		.word	.LC54
 5572 02e8 00000000 		.word	strcat
 5573 02ec 00000000 		.word	sio_buf2
 5574 02f0 00000000 		.word	uart2Read
 5575 02f4 00000000 		.word	bufsize2
 5576 02f8 3C030000 		.word	.LC55
 5577 02fc 48030000 		.word	.LC56
 5578              	.L285:
 964:src/modem.c   **** 			break;
 5579              		.loc 1 964 4
 5580 0300 00BF     		nop
 965:src/modem.c   **** 	}
 966:src/modem.c   **** 
 967:src/modem.c   **** 	vTaskDelay(200);
 5581              		.loc 1 967 2
 5582 0302 C820     		movs	r0, #200
 5583 0304 674B     		ldr	r3, .L290
 5584 0306 9847     		blx	r3
 5585              	.LVL233:
 968:src/modem.c   **** 	fl = 0;
 5586              		.loc 1 968 5
 5587 0308 0023     		movs	r3, #0
 5588 030a C7F87431 		str	r3, [r7, #372]
 5589              	.L268:
 969:src/modem.c   **** 
 970:src/modem.c   **** 	while (1) {
 971:src/modem.c   **** 		ModemWrite("AT+TCPLISTEN=4444\r\n");
 5590              		.loc 1 971 3
 5591 030e 6648     		ldr	r0, .L290+4
 5592 0310 664B     		ldr	r3, .L290+8
 5593 0312 9847     		blx	r3
 5594              	.LVL234:
 972:src/modem.c   **** 		vTaskDelay(200);
 5595              		.loc 1 972 3
 5596 0314 C820     		movs	r0, #200
 5597 0316 634B     		ldr	r3, .L290
 5598 0318 9847     		blx	r3
 5599              	.LVL235:
 973:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 5600              		.loc 1 973 14
 5601 031a 4FF48071 		mov	r1, #256
 5602 031e 6448     		ldr	r0, .L290+12
 5603 0320 644B     		ldr	r3, .L290+16
 5604 0322 9847     		blx	r3
 5605              	.LVL236:
 5606 0324 0346     		mov	r3, r0
 5607              		.loc 1 973 12
 5608 0326 9AB2     		uxth	r2, r3
 5609 0328 634B     		ldr	r3, .L290+20
 5610 032a 1A80     		strh	r2, [r3]	@ movhi
 5611              	.LBB14:
 974:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 5612              		.loc 1 974 12
 5613 032c 0023     		movs	r3, #0
 5614 032e C7F86031 		str	r3, [r7, #352]
 5615              		.loc 1 974 3
 5616 0332 44E0     		b	.L260
 5617              	.L264:
 975:src/modem.c   **** 			if ((sio_buf2[i] == '0') && (sio_buf2[i + 1] == ',')
 5618              		.loc 1 975 17
 5619 0334 5E4A     		ldr	r2, .L290+12
 5620 0336 D7F86031 		ldr	r3, [r7, #352]
 5621 033a 1344     		add	r3, r3, r2
 5622 033c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5623              		.loc 1 975 7
 5624 033e 302B     		cmp	r3, #48
 5625 0340 18D1     		bne	.L261
 5626              		.loc 1 975 44 discriminator 1
 5627 0342 D7F86031 		ldr	r3, [r7, #352]
 5628 0346 0133     		adds	r3, r3, #1
 5629              		.loc 1 975 41 discriminator 1
 5630 0348 594A     		ldr	r2, .L290+12
 5631 034a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5632              		.loc 1 975 29 discriminator 1
 5633 034c 2C2B     		cmp	r3, #44
 5634 034e 11D1     		bne	.L261
 976:src/modem.c   **** 					&& (sio_buf2[i + 2] == 'O') && (sio_buf2[i + 3] == 'K')) {
 5635              		.loc 1 976 21
 5636 0350 D7F86031 		ldr	r3, [r7, #352]
 5637 0354 0233     		adds	r3, r3, #2
 5638              		.loc 1 976 18
 5639 0356 564A     		ldr	r2, .L290+12
 5640 0358 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5641              		.loc 1 976 6
 5642 035a 4F2B     		cmp	r3, #79
 5643 035c 0AD1     		bne	.L261
 5644              		.loc 1 976 49 discriminator 1
 5645 035e D7F86031 		ldr	r3, [r7, #352]
 5646 0362 0333     		adds	r3, r3, #3
 5647              		.loc 1 976 46 discriminator 1
 5648 0364 524A     		ldr	r2, .L290+12
 5649 0366 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5650              		.loc 1 976 34 discriminator 1
 5651 0368 4B2B     		cmp	r3, #75
 5652 036a 03D1     		bne	.L261
 977:src/modem.c   **** 				fl = 1;
 5653              		.loc 1 977 8
 5654 036c 0123     		movs	r3, #1
 5655 036e C7F87431 		str	r3, [r7, #372]
 978:src/modem.c   **** 				break;
 5656              		.loc 1 978 5
 5657 0372 2CE0     		b	.L262
 5658              	.L261:
 979:src/modem.c   **** 			}
 980:src/modem.c   **** 			if ((sio_buf2[i] == 'L') && (sio_buf2[i + 1] == 'i')
 5659              		.loc 1 980 17
 5660 0374 4E4A     		ldr	r2, .L290+12
 5661 0376 D7F86031 		ldr	r3, [r7, #352]
 5662 037a 1344     		add	r3, r3, r2
 5663 037c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5664              		.loc 1 980 7
 5665 037e 4C2B     		cmp	r3, #76
 5666 0380 18D1     		bne	.L263
 5667              		.loc 1 980 44 discriminator 1
 5668 0382 D7F86031 		ldr	r3, [r7, #352]
 5669 0386 0133     		adds	r3, r3, #1
 5670              		.loc 1 980 41 discriminator 1
 5671 0388 494A     		ldr	r2, .L290+12
 5672 038a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5673              		.loc 1 980 29 discriminator 1
 5674 038c 692B     		cmp	r3, #105
 5675 038e 11D1     		bne	.L263
 981:src/modem.c   **** 					&& (sio_buf2[i + 2] == 's') && (sio_buf2[i + 3] == 't')) {
 5676              		.loc 1 981 21
 5677 0390 D7F86031 		ldr	r3, [r7, #352]
 5678 0394 0233     		adds	r3, r3, #2
 5679              		.loc 1 981 18
 5680 0396 464A     		ldr	r2, .L290+12
 5681 0398 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5682              		.loc 1 981 6
 5683 039a 732B     		cmp	r3, #115
 5684 039c 0AD1     		bne	.L263
 5685              		.loc 1 981 49 discriminator 1
 5686 039e D7F86031 		ldr	r3, [r7, #352]
 5687 03a2 0333     		adds	r3, r3, #3
 5688              		.loc 1 981 46 discriminator 1
 5689 03a4 424A     		ldr	r2, .L290+12
 5690 03a6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5691              		.loc 1 981 34 discriminator 1
 5692 03a8 742B     		cmp	r3, #116
 5693 03aa 03D1     		bne	.L263
 982:src/modem.c   **** 				fl = 1;
 5694              		.loc 1 982 8
 5695 03ac 0123     		movs	r3, #1
 5696 03ae C7F87431 		str	r3, [r7, #372]
 983:src/modem.c   **** 				break;
 5697              		.loc 1 983 5
 5698 03b2 0CE0     		b	.L262
 5699              	.L263:
 974:src/modem.c   **** 			if ((sio_buf2[i] == '0') && (sio_buf2[i + 1] == ',')
 5700              		.loc 1 974 34 discriminator 2
 5701 03b4 D7F86031 		ldr	r3, [r7, #352]
 5702 03b8 0133     		adds	r3, r3, #1
 5703 03ba C7F86031 		str	r3, [r7, #352]
 5704              	.L260:
 974:src/modem.c   **** 			if ((sio_buf2[i] == '0') && (sio_buf2[i + 1] == ',')
 5705              		.loc 1 974 21 discriminator 1
 5706 03be 3E4B     		ldr	r3, .L290+20
 5707 03c0 1B88     		ldrh	r3, [r3]	@ movhi
 5708 03c2 9BB2     		uxth	r3, r3
 5709 03c4 1A46     		mov	r2, r3
 974:src/modem.c   **** 			if ((sio_buf2[i] == '0') && (sio_buf2[i + 1] == ',')
 5710              		.loc 1 974 3 discriminator 1
 5711 03c6 D7F86031 		ldr	r3, [r7, #352]
 5712 03ca 9342     		cmp	r3, r2
 5713 03cc B2DB     		blt	.L264
 5714              	.L262:
 5715              	.LBE14:
 984:src/modem.c   **** 			}
 985:src/modem.c   **** 
 986:src/modem.c   **** 		}
 987:src/modem.c   **** 		con--;
 5716              		.loc 1 987 6
 5717 03ce D7F87031 		ldr	r3, [r7, #368]
 5718 03d2 013B     		subs	r3, r3, #1
 5719 03d4 C7F87031 		str	r3, [r7, #368]
 988:src/modem.c   **** 		if (!con)
 5720              		.loc 1 988 6
 5721 03d8 D7F87031 		ldr	r3, [r7, #368]
 5722 03dc 002B     		cmp	r3, #0
 5723 03de 01D1     		bne	.L265
 989:src/modem.c   **** 			return false;
 5724              		.loc 1 989 11
 5725 03e0 0023     		movs	r3, #0
 5726 03e2 59E0     		b	.L277
 5727              	.L265:
 990:src/modem.c   **** 		if (fl)
 5728              		.loc 1 990 6
 5729 03e4 D7F87431 		ldr	r3, [r7, #372]
 5730 03e8 002B     		cmp	r3, #0
 5731 03ea 00D1     		bne	.L286
 971:src/modem.c   **** 		vTaskDelay(200);
 5732              		.loc 1 971 3
 5733 03ec 8FE7     		b	.L268
 5734              	.L286:
 991:src/modem.c   **** 			break;
 5735              		.loc 1 991 4
 5736 03ee 00BF     		nop
 992:src/modem.c   **** 	}
 993:src/modem.c   **** 	vTaskDelay(200);
 5737              		.loc 1 993 2
 5738 03f0 C820     		movs	r0, #200
 5739 03f2 2C4B     		ldr	r3, .L290
 5740 03f4 9847     		blx	r3
 5741              	.LVL237:
 994:src/modem.c   **** 	fl = 0;
 5742              		.loc 1 994 5
 5743 03f6 0023     		movs	r3, #0
 5744 03f8 C7F87431 		str	r3, [r7, #372]
 995:src/modem.c   **** 	con = 15;
 5745              		.loc 1 995 6
 5746 03fc 0F23     		movs	r3, #15
 5747 03fe C7F87031 		str	r3, [r7, #368]
 5748              	.L276:
 996:src/modem.c   **** 	while (1) {
 997:src/modem.c   **** 		vTaskDelay(200);
 5749              		.loc 1 997 3
 5750 0402 C820     		movs	r0, #200
 5751 0404 274B     		ldr	r3, .L290
 5752 0406 9847     		blx	r3
 5753              	.LVL238:
 998:src/modem.c   **** 		ModemWrite("AT+IPSTATUS=0\r\n");
 5754              		.loc 1 998 3
 5755 0408 2C48     		ldr	r0, .L290+24
 5756 040a 284B     		ldr	r3, .L290+8
 5757 040c 9847     		blx	r3
 5758              	.LVL239:
 999:src/modem.c   **** 		bufsize2 = uart2Read(sio_buf2, 256);
 5759              		.loc 1 999 14
 5760 040e 4FF48071 		mov	r1, #256
 5761 0412 2748     		ldr	r0, .L290+12
 5762 0414 274B     		ldr	r3, .L290+16
 5763 0416 9847     		blx	r3
 5764              	.LVL240:
 5765 0418 0346     		mov	r3, r0
 5766              		.loc 1 999 12
 5767 041a 9AB2     		uxth	r2, r3
 5768 041c 264B     		ldr	r3, .L290+20
 5769 041e 1A80     		strh	r2, [r3]	@ movhi
 5770              	.LBB15:
1000:src/modem.c   **** 		for (int i = 0; i < bufsize2; i++) {
 5771              		.loc 1 1000 12
 5772 0420 0023     		movs	r3, #0
 5773 0422 C7F85C31 		str	r3, [r7, #348]
 5774              		.loc 1 1000 3
 5775 0426 1DE0     		b	.L269
 5776              	.L272:
1001:src/modem.c   **** 			if ((sio_buf2[i] == 'S') && (sio_buf2[i + 1] == 'R')
 5777              		.loc 1 1001 17
 5778 0428 214A     		ldr	r2, .L290+12
 5779 042a D7F85C31 		ldr	r3, [r7, #348]
 5780 042e 1344     		add	r3, r3, r2
 5781 0430 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5782              		.loc 1 1001 7
 5783 0432 532B     		cmp	r3, #83
 5784 0434 11D1     		bne	.L270
 5785              		.loc 1 1001 44 discriminator 1
 5786 0436 D7F85C31 		ldr	r3, [r7, #348]
 5787 043a 0133     		adds	r3, r3, #1
 5788              		.loc 1 1001 41 discriminator 1
 5789 043c 1C4A     		ldr	r2, .L290+12
 5790 043e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5791              		.loc 1 1001 29 discriminator 1
 5792 0440 522B     		cmp	r3, #82
 5793 0442 0AD1     		bne	.L270
1002:src/modem.c   **** 					&& (sio_buf2[i + 2] == 'V')) {
 5794              		.loc 1 1002 21
 5795 0444 D7F85C31 		ldr	r3, [r7, #348]
 5796 0448 0233     		adds	r3, r3, #2
 5797              		.loc 1 1002 18
 5798 044a 194A     		ldr	r2, .L290+12
 5799 044c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5800              		.loc 1 1002 6
 5801 044e 562B     		cmp	r3, #86
 5802 0450 03D1     		bne	.L270
1003:src/modem.c   **** 				fl = 1;
 5803              		.loc 1 1003 8
 5804 0452 0123     		movs	r3, #1
 5805 0454 C7F87431 		str	r3, [r7, #372]
1004:src/modem.c   **** 				break;
 5806              		.loc 1 1004 5
 5807 0458 0CE0     		b	.L271
 5808              	.L270:
1000:src/modem.c   **** 			if ((sio_buf2[i] == 'S') && (sio_buf2[i + 1] == 'R')
 5809              		.loc 1 1000 34 discriminator 2
 5810 045a D7F85C31 		ldr	r3, [r7, #348]
 5811 045e 0133     		adds	r3, r3, #1
 5812 0460 C7F85C31 		str	r3, [r7, #348]
 5813              	.L269:
1000:src/modem.c   **** 			if ((sio_buf2[i] == 'S') && (sio_buf2[i + 1] == 'R')
 5814              		.loc 1 1000 21 discriminator 1
 5815 0464 144B     		ldr	r3, .L290+20
 5816 0466 1B88     		ldrh	r3, [r3]	@ movhi
 5817 0468 9BB2     		uxth	r3, r3
 5818 046a 1A46     		mov	r2, r3
1000:src/modem.c   **** 			if ((sio_buf2[i] == 'S') && (sio_buf2[i + 1] == 'R')
 5819              		.loc 1 1000 3 discriminator 1
 5820 046c D7F85C31 		ldr	r3, [r7, #348]
 5821 0470 9342     		cmp	r3, r2
 5822 0472 D9DB     		blt	.L272
 5823              	.L271:
 5824              	.LBE15:
1005:src/modem.c   **** 			}
1006:src/modem.c   **** 
1007:src/modem.c   **** 		}
1008:src/modem.c   **** 		con--;
 5825              		.loc 1 1008 6
 5826 0474 D7F87031 		ldr	r3, [r7, #368]
 5827 0478 013B     		subs	r3, r3, #1
 5828 047a C7F87031 		str	r3, [r7, #368]
1009:src/modem.c   **** 		if (!con)
 5829              		.loc 1 1009 6
 5830 047e D7F87031 		ldr	r3, [r7, #368]
 5831 0482 002B     		cmp	r3, #0
 5832 0484 01D1     		bne	.L273
1010:src/modem.c   **** 			return false;
 5833              		.loc 1 1010 11
 5834 0486 0023     		movs	r3, #0
 5835 0488 06E0     		b	.L277
 5836              	.L273:
1011:src/modem.c   **** 		if (fl)
 5837              		.loc 1 1011 6
 5838 048a D7F87431 		ldr	r3, [r7, #372]
 5839 048e 002B     		cmp	r3, #0
 5840 0490 00D1     		bne	.L287
 997:src/modem.c   **** 		ModemWrite("AT+IPSTATUS=0\r\n");
 5841              		.loc 1 997 3
 5842 0492 B6E7     		b	.L276
 5843              	.L287:
1012:src/modem.c   **** 			break;
 5844              		.loc 1 1012 4
 5845 0494 00BF     		nop
1013:src/modem.c   **** 	}
1014:src/modem.c   **** 
1015:src/modem.c   **** 	return true;
 5846              		.loc 1 1015 9
 5847 0496 0123     		movs	r3, #1
 5848              	.L277:
1016:src/modem.c   **** }
 5849              		.loc 1 1016 1 discriminator 1
 5850 0498 1846     		mov	r0, r3
 5851 049a 07F5BC77 		add	r7, r7, #376
 5852              	.LCFI118:
 5853              		.cfi_def_cfa_offset 16
 5854 049e BD46     		mov	sp, r7
 5855              	.LCFI119:
 5856              		.cfi_def_cfa_register 13
 5857              		@ sp needed
 5858 04a0 B0BD     		pop	{r4, r5, r7, pc}
 5859              	.L291:
 5860 04a2 00BF     		.align	2
 5861              	.L290:
 5862 04a4 00000000 		.word	vTaskDelay
 5863 04a8 54030000 		.word	.LC57
 5864 04ac 00000000 		.word	ModemWrite
 5865 04b0 00000000 		.word	sio_buf2
 5866 04b4 00000000 		.word	uart2Read
 5867 04b8 00000000 		.word	bufsize2
 5868 04bc 68030000 		.word	.LC58
 5869              		.cfi_endproc
 5870              	.LFE57:
 5872              		.section	.rodata
 5873              		.align	2
 5874              	.LC59:
 5875 0378 41542B47 		.ascii	"AT+GMM\015\012\000"
 5875      4D4D0D0A 
 5875      00
 5876              		.section	.text.SelectModem,"ax",%progbits
 5877              		.align	1
 5878              		.global	SelectModem
 5879              		.syntax unified
 5880              		.thumb
 5881              		.thumb_func
 5883              	SelectModem:
 5884              	.LFB58:
1017:src/modem.c   **** //==========================================================================
1018:src/modem.c   **** bool SelectModem() {
 5885              		.loc 1 1018 20
 5886              		.cfi_startproc
 5887              		@ args = 0, pretend = 0, frame = 8
 5888              		@ frame_needed = 1, uses_anonymous_args = 0
 5889 0000 80B5     		push	{r7, lr}
 5890              	.LCFI120:
 5891              		.cfi_def_cfa_offset 8
 5892              		.cfi_offset 7, -8
 5893              		.cfi_offset 14, -4
 5894 0002 82B0     		sub	sp, sp, #8
 5895              	.LCFI121:
 5896              		.cfi_def_cfa_offset 16
 5897 0004 00AF     		add	r7, sp, #0
 5898              	.LCFI122:
 5899              		.cfi_def_cfa_register 7
1019:src/modem.c   **** 	int count = 0;
 5900              		.loc 1 1019 6
 5901 0006 0023     		movs	r3, #0
 5902 0008 7B60     		str	r3, [r7, #4]
1020:src/modem.c   **** 
1021:src/modem.c   **** 	vTaskDelay(100);
 5903              		.loc 1 1021 2
 5904 000a 6420     		movs	r0, #100
 5905 000c 7E4B     		ldr	r3, .L314
 5906 000e 9847     		blx	r3
 5907              	.LVL241:
1022:src/modem.c   **** 	while (count < 50) {
 5908              		.loc 1 1022 8
 5909 0010 16E0     		b	.L293
 5910              	.L296:
1023:src/modem.c   **** 		ModemWrite("AT+GMM\r\n");
 5911              		.loc 1 1023 3
 5912 0012 7E48     		ldr	r0, .L314+4
 5913 0014 7E4B     		ldr	r3, .L314+8
 5914 0016 9847     		blx	r3
 5915              	.LVL242:
1024:src/modem.c   **** 		bufsize4 = uart2Read(sio_buf4, 256);
 5916              		.loc 1 1024 14
 5917 0018 4FF48071 		mov	r1, #256
 5918 001c 7D48     		ldr	r0, .L314+12
 5919 001e 7E4B     		ldr	r3, .L314+16
 5920 0020 9847     		blx	r3
 5921              	.LVL243:
 5922 0022 0346     		mov	r3, r0
 5923              		.loc 1 1024 12
 5924 0024 9AB2     		uxth	r2, r3
 5925 0026 7D4B     		ldr	r3, .L314+20
 5926 0028 1A80     		strh	r2, [r3]	@ movhi
1025:src/modem.c   **** 		if (bufsize4 > 4)
 5927              		.loc 1 1025 16
 5928 002a 7C4B     		ldr	r3, .L314+20
 5929 002c 1B88     		ldrh	r3, [r3]	@ movhi
 5930 002e 9BB2     		uxth	r3, r3
 5931              		.loc 1 1025 6
 5932 0030 042B     		cmp	r3, #4
 5933 0032 09D8     		bhi	.L309
1026:src/modem.c   **** 			break;
1027:src/modem.c   **** 		count++;
 5934              		.loc 1 1027 8
 5935 0034 7B68     		ldr	r3, [r7, #4]
 5936 0036 0133     		adds	r3, r3, #1
 5937 0038 7B60     		str	r3, [r7, #4]
1028:src/modem.c   **** 		vTaskDelay(100);
 5938              		.loc 1 1028 3
 5939 003a 6420     		movs	r0, #100
 5940 003c 724B     		ldr	r3, .L314
 5941 003e 9847     		blx	r3
 5942              	.LVL244:
 5943              	.L293:
1022:src/modem.c   **** 		ModemWrite("AT+GMM\r\n");
 5944              		.loc 1 1022 8
 5945 0040 7B68     		ldr	r3, [r7, #4]
 5946 0042 312B     		cmp	r3, #49
 5947 0044 E5DD     		ble	.L296
 5948 0046 00E0     		b	.L295
 5949              	.L309:
1026:src/modem.c   **** 			break;
 5950              		.loc 1 1026 4
 5951 0048 00BF     		nop
 5952              	.L295:
1029:src/modem.c   **** 	}
1030:src/modem.c   **** 	if (bufsize4 != 0) {
 5953              		.loc 1 1030 15
 5954 004a 744B     		ldr	r3, .L314+20
 5955 004c 1B88     		ldrh	r3, [r3]	@ movhi
 5956 004e 9BB2     		uxth	r3, r3
 5957              		.loc 1 1030 5
 5958 0050 002B     		cmp	r3, #0
 5959 0052 00F0D480 		beq	.L297
 5960              	.LBB16:
1031:src/modem.c   **** 		for (int i = 0; i < bufsize4; i++) {
 5961              		.loc 1 1031 12
 5962 0056 0023     		movs	r3, #0
 5963 0058 3B60     		str	r3, [r7]
 5964              		.loc 1 1031 3
 5965 005a C8E0     		b	.L298
 5966              	.L308:
1032:src/modem.c   **** 			if ((sio_buf4[i] == 'U') && (sio_buf4[i + 1] == 'C')
 5967              		.loc 1 1032 17
 5968 005c 6D4A     		ldr	r2, .L314+12
 5969 005e 3B68     		ldr	r3, [r7]
 5970 0060 1344     		add	r3, r3, r2
 5971 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5972              		.loc 1 1032 7
 5973 0064 552B     		cmp	r3, #85
 5974 0066 22D1     		bne	.L299
 5975              		.loc 1 1032 44 discriminator 1
 5976 0068 3B68     		ldr	r3, [r7]
 5977 006a 0133     		adds	r3, r3, #1
 5978              		.loc 1 1032 41 discriminator 1
 5979 006c 694A     		ldr	r2, .L314+12
 5980 006e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5981              		.loc 1 1032 29 discriminator 1
 5982 0070 432B     		cmp	r3, #67
 5983 0072 1CD1     		bne	.L299
1033:src/modem.c   **** 					&& (sio_buf4[i + 2] == '2') && (sio_buf4[i + 3] == '0')) //UC20
 5984              		.loc 1 1033 21
 5985 0074 3B68     		ldr	r3, [r7]
 5986 0076 0233     		adds	r3, r3, #2
 5987              		.loc 1 1033 18
 5988 0078 664A     		ldr	r2, .L314+12
 5989 007a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5990              		.loc 1 1033 6
 5991 007c 322B     		cmp	r3, #50
 5992 007e 16D1     		bne	.L299
 5993              		.loc 1 1033 49 discriminator 1
 5994 0080 3B68     		ldr	r3, [r7]
 5995 0082 0333     		adds	r3, r3, #3
 5996              		.loc 1 1033 46 discriminator 1
 5997 0084 634A     		ldr	r2, .L314+12
 5998 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5999              		.loc 1 1033 34 discriminator 1
 6000 0088 302B     		cmp	r3, #48
 6001 008a 10D1     		bne	.L299
1034:src/modem.c   **** 					{
1035:src/modem.c   **** 				DeviceID = 1;
 6002              		.loc 1 1035 14
 6003 008c 644B     		ldr	r3, .L314+24
 6004 008e 0122     		movs	r2, #1
 6005 0090 1A60     		str	r2, [r3]
1036:src/modem.c   **** 
1037:src/modem.c   **** 				/*if (!WaitGprsTime())
1038:src/modem.c   **** 				 continue;
1039:src/modem.c   **** 				 if (flag_first==2)
1040:src/modem.c   **** 				 {
1041:src/modem.c   **** 
1042:src/modem.c   **** 				 break;
1043:src/modem.c   **** 				 }
1044:src/modem.c   **** 				 else
1045:src/modem.c   **** 				 {*/
1046:src/modem.c   **** 				if (!WaitGprsConnectUC20()) // подключение UC20
 6006              		.loc 1 1046 10
 6007 0092 644B     		ldr	r3, .L314+28
 6008 0094 9847     		blx	r3
 6009              	.LVL245:
 6010 0096 0346     		mov	r3, r0
 6011              		.loc 1 1046 9
 6012 0098 83F00103 		eor	r3, r3, #1
 6013 009c DBB2     		uxtb	r3, r3
 6014              		.loc 1 1046 8
 6015 009e 002B     		cmp	r3, #0
 6016 00a0 40F09B80 		bne	.L310
1047:src/modem.c   **** 					continue;
1048:src/modem.c   **** 				vTaskDelay(50);
 6017              		.loc 1 1048 5
 6018 00a4 3220     		movs	r0, #50
 6019 00a6 584B     		ldr	r3, .L314
 6020 00a8 9847     		blx	r3
 6021              	.LVL246:
1049:src/modem.c   **** 				return true;
 6022              		.loc 1 1049 12
 6023 00aa 0123     		movs	r3, #1
 6024 00ac A8E0     		b	.L302
 6025              	.L299:
1050:src/modem.c   **** 				//}
1051:src/modem.c   **** 			} else if ((sio_buf4[i] == 'U') && (sio_buf4[i + 1] == 'C')
 6026              		.loc 1 1051 24
 6027 00ae 594A     		ldr	r2, .L314+12
 6028 00b0 3B68     		ldr	r3, [r7]
 6029 00b2 1344     		add	r3, r3, r2
 6030 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6031              		.loc 1 1051 14
 6032 00b6 552B     		cmp	r3, #85
 6033 00b8 21D1     		bne	.L303
 6034              		.loc 1 1051 51 discriminator 1
 6035 00ba 3B68     		ldr	r3, [r7]
 6036 00bc 0133     		adds	r3, r3, #1
 6037              		.loc 1 1051 48 discriminator 1
 6038 00be 554A     		ldr	r2, .L314+12
 6039 00c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6040              		.loc 1 1051 36 discriminator 1
 6041 00c2 432B     		cmp	r3, #67
 6042 00c4 1BD1     		bne	.L303
1052:src/modem.c   **** 					&& (sio_buf4[i + 2] == '1') && (sio_buf4[i + 3] == '5')) //UC15
 6043              		.loc 1 1052 21
 6044 00c6 3B68     		ldr	r3, [r7]
 6045 00c8 0233     		adds	r3, r3, #2
 6046              		.loc 1 1052 18
 6047 00ca 524A     		ldr	r2, .L314+12
 6048 00cc D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6049              		.loc 1 1052 6
 6050 00ce 312B     		cmp	r3, #49
 6051 00d0 15D1     		bne	.L303
 6052              		.loc 1 1052 49 discriminator 1
 6053 00d2 3B68     		ldr	r3, [r7]
 6054 00d4 0333     		adds	r3, r3, #3
 6055              		.loc 1 1052 46 discriminator 1
 6056 00d6 4F4A     		ldr	r2, .L314+12
 6057 00d8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6058              		.loc 1 1052 34 discriminator 1
 6059 00da 352B     		cmp	r3, #53
 6060 00dc 0FD1     		bne	.L303
1053:src/modem.c   **** 					{
1054:src/modem.c   **** 				//if (DeviceID != 3)
1055:src/modem.c   **** 
1056:src/modem.c   **** 				//{
1057:src/modem.c   **** 				DeviceID = 3;
 6061              		.loc 1 1057 14
 6062 00de 504B     		ldr	r3, .L314+24
 6063 00e0 0322     		movs	r2, #3
 6064 00e2 1A60     		str	r2, [r3]
1058:src/modem.c   **** 				/*if (!WaitGprsTime())
1059:src/modem.c   **** 				 continue;
1060:src/modem.c   **** 				 if (flag_first==2)
1061:src/modem.c   **** 				 {
1062:src/modem.c   **** 				 flag_first = 1;
1063:src/modem.c   **** 				 i_Select = 0;
1064:src/modem.c   **** 				 break;
1065:src/modem.c   **** 				 }
1066:src/modem.c   **** 				 else
1067:src/modem.c   **** 				 {*/
1068:src/modem.c   **** 				if (!WaitGprsConnectUC15()) // подключение UC15
 6065              		.loc 1 1068 10
 6066 00e4 504B     		ldr	r3, .L314+32
 6067 00e6 9847     		blx	r3
 6068              	.LVL247:
 6069 00e8 0346     		mov	r3, r0
 6070              		.loc 1 1068 9
 6071 00ea 83F00103 		eor	r3, r3, #1
 6072 00ee DBB2     		uxtb	r3, r3
 6073              		.loc 1 1068 8
 6074 00f0 002B     		cmp	r3, #0
 6075 00f2 74D1     		bne	.L311
1069:src/modem.c   **** 					continue;
1070:src/modem.c   **** 				vTaskDelay(50);
 6076              		.loc 1 1070 5
 6077 00f4 3220     		movs	r0, #50
 6078 00f6 444B     		ldr	r3, .L314
 6079 00f8 9847     		blx	r3
 6080              	.LVL248:
1071:src/modem.c   **** 				return true;
 6081              		.loc 1 1071 12
 6082 00fa 0123     		movs	r3, #1
 6083 00fc 80E0     		b	.L302
 6084              	.L303:
1072:src/modem.c   **** 				//	}
1073:src/modem.c   **** 				/*	}
1074:src/modem.c   **** 				 else
1075:src/modem.c   **** 				 {
1076:src/modem.c   **** 				 int i_GprsCon = 50;
1077:src/modem.c   **** 
1078:src/modem.c   **** 				 while (!WaitGprsConnectUC15())
1079:src/modem.c   **** 				 {
1080:src/modem.c   **** 				 if (i_GprsCon == 0)
1081:src/modem.c   **** 				 {
1082:src/modem.c   **** 				 break;
1083:src/modem.c   **** 				 }
1084:src/modem.c   **** 				 i_GprsCon--;
1085:src/modem.c   **** 				 }// подключение UC15
1086:src/modem.c   **** 
1087:src/modem.c   **** 				 i_GprsCon = 0;
1088:src/modem.c   **** 
1089:src/modem.c   **** 				 vTaskDelay(50);
1090:src/modem.c   **** 				 return true;
1091:src/modem.c   **** 				 }*/
1092:src/modem.c   **** 
1093:src/modem.c   **** 			} else if ((sio_buf4[i] == 'Q')
 6085              		.loc 1 1093 24
 6086 00fe 454A     		ldr	r2, .L314+12
 6087 0100 3B68     		ldr	r3, [r7]
 6088 0102 1344     		add	r3, r3, r2
 6089 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6090              		.loc 1 1093 14
 6091 0106 512B     		cmp	r3, #81
 6092 0108 3FD1     		bne	.L305
1094:src/modem.c   **** 					&& (sio_buf4[i + 1] == 'u')  			//Quectel_M66
 6093              		.loc 1 1094 21
 6094 010a 3B68     		ldr	r3, [r7]
 6095 010c 0133     		adds	r3, r3, #1
 6096              		.loc 1 1094 18
 6097 010e 414A     		ldr	r2, .L314+12
 6098 0110 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6099              		.loc 1 1094 6
 6100 0112 752B     		cmp	r3, #117
 6101 0114 39D1     		bne	.L305
1095:src/modem.c   **** 					&& (sio_buf4[i + 2] == 'e') && (sio_buf4[i + 3] == 'c')
 6102              		.loc 1 1095 21
 6103 0116 3B68     		ldr	r3, [r7]
 6104 0118 0233     		adds	r3, r3, #2
 6105              		.loc 1 1095 18
 6106 011a 3E4A     		ldr	r2, .L314+12
 6107 011c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6108              		.loc 1 1095 6
 6109 011e 652B     		cmp	r3, #101
 6110 0120 33D1     		bne	.L305
 6111              		.loc 1 1095 49 discriminator 1
 6112 0122 3B68     		ldr	r3, [r7]
 6113 0124 0333     		adds	r3, r3, #3
 6114              		.loc 1 1095 46 discriminator 1
 6115 0126 3B4A     		ldr	r2, .L314+12
 6116 0128 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6117              		.loc 1 1095 34 discriminator 1
 6118 012a 632B     		cmp	r3, #99
 6119 012c 2DD1     		bne	.L305
1096:src/modem.c   **** 					&& (sio_buf4[i + 4] == 't') && (sio_buf4[i + 5] == 'e')
 6120              		.loc 1 1096 21
 6121 012e 3B68     		ldr	r3, [r7]
 6122 0130 0433     		adds	r3, r3, #4
 6123              		.loc 1 1096 18
 6124 0132 384A     		ldr	r2, .L314+12
 6125 0134 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6126              		.loc 1 1096 6
 6127 0136 742B     		cmp	r3, #116
 6128 0138 27D1     		bne	.L305
 6129              		.loc 1 1096 49 discriminator 1
 6130 013a 3B68     		ldr	r3, [r7]
 6131 013c 0533     		adds	r3, r3, #5
 6132              		.loc 1 1096 46 discriminator 1
 6133 013e 354A     		ldr	r2, .L314+12
 6134 0140 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6135              		.loc 1 1096 34 discriminator 1
 6136 0142 652B     		cmp	r3, #101
 6137 0144 21D1     		bne	.L305
1097:src/modem.c   **** 					&& (sio_buf4[i + 6] == 'l') && (sio_buf4[i + 7] == '_')
 6138              		.loc 1 1097 21
 6139 0146 3B68     		ldr	r3, [r7]
 6140 0148 0633     		adds	r3, r3, #6
 6141              		.loc 1 1097 18
 6142 014a 324A     		ldr	r2, .L314+12
 6143 014c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6144              		.loc 1 1097 6
 6145 014e 6C2B     		cmp	r3, #108
 6146 0150 1BD1     		bne	.L305
 6147              		.loc 1 1097 49 discriminator 1
 6148 0152 3B68     		ldr	r3, [r7]
 6149 0154 0733     		adds	r3, r3, #7
 6150              		.loc 1 1097 46 discriminator 1
 6151 0156 2F4A     		ldr	r2, .L314+12
 6152 0158 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6153              		.loc 1 1097 34 discriminator 1
 6154 015a 5F2B     		cmp	r3, #95
 6155 015c 15D1     		bne	.L305
1098:src/modem.c   **** 					&& (sio_buf4[i + 8] == 'M')/*&&(sio_buf4[i + 9] == '6')
 6156              		.loc 1 1098 21
 6157 015e 3B68     		ldr	r3, [r7]
 6158 0160 0833     		adds	r3, r3, #8
 6159              		.loc 1 1098 18
 6160 0162 2C4A     		ldr	r2, .L314+12
 6161 0164 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6162              		.loc 1 1098 6
 6163 0166 4D2B     		cmp	r3, #77
 6164 0168 0FD1     		bne	.L305
1099:src/modem.c   **** 					 && (sio_buf4[i + 10] == '6')*/) // в 4.49.0 убрать М66, чтоб подтягивался М12 тоже
1100:src/modem.c   **** 					{
1101:src/modem.c   **** 				DeviceID = 2;
 6165              		.loc 1 1101 14
 6166 016a 2D4B     		ldr	r3, .L314+24
 6167 016c 0222     		movs	r2, #2
 6168 016e 1A60     		str	r2, [r3]
1102:src/modem.c   **** 				/*if (!WaitGprsTime())
1103:src/modem.c   **** 				 continue;
1104:src/modem.c   **** 				 if (flag_first==2)
1105:src/modem.c   **** 				 {
1106:src/modem.c   **** 				 break;
1107:src/modem.c   **** 				 }
1108:src/modem.c   **** 				 else
1109:src/modem.c   **** 				 {*/
1110:src/modem.c   **** 
1111:src/modem.c   **** 				/*int i_GprsCon = 50;
1112:src/modem.c   **** 
1113:src/modem.c   **** 				 while (!WaitGprsConnectM66()) // подключение M66
1114:src/modem.c   **** 				 {
1115:src/modem.c   **** 				 if (i_GprsCon == 0)
1116:src/modem.c   **** 				 {
1117:src/modem.c   **** 				 break;
1118:src/modem.c   **** 				 }
1119:src/modem.c   **** 				 i_GprsCon--;
1120:src/modem.c   **** 				 }
1121:src/modem.c   **** 				 i_GprsCon = 0;*/
1122:src/modem.c   **** 				if (!WaitGprsConnectM66()) // подключение M66
 6169              		.loc 1 1122 10
 6170 0170 2E4B     		ldr	r3, .L314+36
 6171 0172 9847     		blx	r3
 6172              	.LVL249:
 6173 0174 0346     		mov	r3, r0
 6174              		.loc 1 1122 9
 6175 0176 83F00103 		eor	r3, r3, #1
 6176 017a DBB2     		uxtb	r3, r3
 6177              		.loc 1 1122 8
 6178 017c 002B     		cmp	r3, #0
 6179 017e 30D1     		bne	.L312
1123:src/modem.c   **** 					continue;
1124:src/modem.c   **** 
1125:src/modem.c   **** 				vTaskDelay(50);
 6180              		.loc 1 1125 5
 6181 0180 3220     		movs	r0, #50
 6182 0182 214B     		ldr	r3, .L314
 6183 0184 9847     		blx	r3
 6184              	.LVL250:
1126:src/modem.c   **** 				return true;
 6185              		.loc 1 1126 12
 6186 0186 0123     		movs	r3, #1
 6187 0188 3AE0     		b	.L302
 6188              	.L305:
1127:src/modem.c   **** 				//}
1128:src/modem.c   **** 			} else if ((sio_buf4[i] == 'N') && (sio_buf4[i + 1] == '7')
 6189              		.loc 1 1128 24
 6190 018a 224A     		ldr	r2, .L314+12
 6191 018c 3B68     		ldr	r3, [r7]
 6192 018e 1344     		add	r3, r3, r2
 6193 0190 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6194              		.loc 1 1128 14
 6195 0192 4E2B     		cmp	r3, #78
 6196 0194 28D1     		bne	.L301
 6197              		.loc 1 1128 51 discriminator 1
 6198 0196 3B68     		ldr	r3, [r7]
 6199 0198 0133     		adds	r3, r3, #1
 6200              		.loc 1 1128 48 discriminator 1
 6201 019a 1E4A     		ldr	r2, .L314+12
 6202 019c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6203              		.loc 1 1128 36 discriminator 1
 6204 019e 372B     		cmp	r3, #55
 6205 01a0 22D1     		bne	.L301
1129:src/modem.c   **** 					&& (sio_buf4[i + 2] == '1') && (sio_buf4[i + 3] == '5')) //UC15
 6206              		.loc 1 1129 21
 6207 01a2 3B68     		ldr	r3, [r7]
 6208 01a4 0233     		adds	r3, r3, #2
 6209              		.loc 1 1129 18
 6210 01a6 1B4A     		ldr	r2, .L314+12
 6211 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6212              		.loc 1 1129 6
 6213 01aa 312B     		cmp	r3, #49
 6214 01ac 1CD1     		bne	.L301
 6215              		.loc 1 1129 49 discriminator 1
 6216 01ae 3B68     		ldr	r3, [r7]
 6217 01b0 0333     		adds	r3, r3, #3
 6218              		.loc 1 1129 46 discriminator 1
 6219 01b2 184A     		ldr	r2, .L314+12
 6220 01b4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6221              		.loc 1 1129 34 discriminator 1
 6222 01b6 352B     		cmp	r3, #53
 6223 01b8 16D1     		bne	.L301
1130:src/modem.c   **** 					{
1131:src/modem.c   **** 				DeviceID = 4;
 6224              		.loc 1 1131 14
 6225 01ba 194B     		ldr	r3, .L314+24
 6226 01bc 0422     		movs	r2, #4
 6227 01be 1A60     		str	r2, [r3]
1132:src/modem.c   **** 				if (!WaitGprsConnectN715()) // подключение M66
 6228              		.loc 1 1132 10
 6229 01c0 1B4B     		ldr	r3, .L314+40
 6230 01c2 9847     		blx	r3
 6231              	.LVL251:
 6232 01c4 0346     		mov	r3, r0
 6233              		.loc 1 1132 9
 6234 01c6 83F00103 		eor	r3, r3, #1
 6235 01ca DBB2     		uxtb	r3, r3
 6236              		.loc 1 1132 8
 6237 01cc 002B     		cmp	r3, #0
 6238 01ce 0AD1     		bne	.L313
1133:src/modem.c   **** 					continue;
1134:src/modem.c   **** 
1135:src/modem.c   **** 				vTaskDelay(50);
 6239              		.loc 1 1135 5
 6240 01d0 3220     		movs	r0, #50
 6241 01d2 0D4B     		ldr	r3, .L314
 6242 01d4 9847     		blx	r3
 6243              	.LVL252:
1136:src/modem.c   **** 				return true;
 6244              		.loc 1 1136 12
 6245 01d6 0123     		movs	r3, #1
 6246 01d8 12E0     		b	.L302
 6247              	.L310:
1047:src/modem.c   **** 				vTaskDelay(50);
 6248              		.loc 1 1047 6
 6249 01da 00BF     		nop
 6250 01dc 04E0     		b	.L301
 6251              	.L311:
1069:src/modem.c   **** 				vTaskDelay(50);
 6252              		.loc 1 1069 6
 6253 01de 00BF     		nop
 6254 01e0 02E0     		b	.L301
 6255              	.L312:
1123:src/modem.c   **** 
 6256              		.loc 1 1123 6
 6257 01e2 00BF     		nop
 6258 01e4 00E0     		b	.L301
 6259              	.L313:
1133:src/modem.c   **** 
 6260              		.loc 1 1133 6
 6261 01e6 00BF     		nop
 6262              	.L301:
1031:src/modem.c   **** 			if ((sio_buf4[i] == 'U') && (sio_buf4[i + 1] == 'C')
 6263              		.loc 1 1031 34 discriminator 2
 6264 01e8 3B68     		ldr	r3, [r7]
 6265 01ea 0133     		adds	r3, r3, #1
 6266 01ec 3B60     		str	r3, [r7]
 6267              	.L298:
1031:src/modem.c   **** 			if ((sio_buf4[i] == 'U') && (sio_buf4[i + 1] == 'C')
 6268              		.loc 1 1031 21 discriminator 1
 6269 01ee 0B4B     		ldr	r3, .L314+20
 6270 01f0 1B88     		ldrh	r3, [r3]	@ movhi
 6271 01f2 9BB2     		uxth	r3, r3
 6272 01f4 1A46     		mov	r2, r3
1031:src/modem.c   **** 			if ((sio_buf4[i] == 'U') && (sio_buf4[i + 1] == 'C')
 6273              		.loc 1 1031 3 discriminator 1
 6274 01f6 3B68     		ldr	r3, [r7]
 6275 01f8 9342     		cmp	r3, r2
 6276 01fa FFF62FAF 		blt	.L308
 6277              	.L297:
 6278              	.LBE16:
1137:src/modem.c   **** 
1138:src/modem.c   **** 			}
1139:src/modem.c   **** 		}
1140:src/modem.c   **** 	}
1141:src/modem.c   **** 
1142:src/modem.c   **** 	return false;
 6279              		.loc 1 1142 9
 6280 01fe 0023     		movs	r3, #0
 6281              	.L302:
1143:src/modem.c   **** 
1144:src/modem.c   **** }
 6282              		.loc 1 1144 1
 6283 0200 1846     		mov	r0, r3
 6284 0202 0837     		adds	r7, r7, #8
 6285              	.LCFI123:
 6286              		.cfi_def_cfa_offset 8
 6287 0204 BD46     		mov	sp, r7
 6288              	.LCFI124:
 6289              		.cfi_def_cfa_register 13
 6290              		@ sp needed
 6291 0206 80BD     		pop	{r7, pc}
 6292              	.L315:
 6293              		.align	2
 6294              	.L314:
 6295 0208 00000000 		.word	vTaskDelay
 6296 020c 78030000 		.word	.LC59
 6297 0210 00000000 		.word	ModemWrite
 6298 0214 00000000 		.word	sio_buf4
 6299 0218 00000000 		.word	uart2Read
 6300 021c 00000000 		.word	bufsize4
 6301 0220 00000000 		.word	DeviceID
 6302 0224 00000000 		.word	WaitGprsConnectUC20
 6303 0228 00000000 		.word	WaitGprsConnectUC15
 6304 022c 00000000 		.word	WaitGprsConnectM66
 6305 0230 00000000 		.word	WaitGprsConnectN715
 6306              		.cfi_endproc
 6307              	.LFE58:
 6309              		.section	.rodata
 6310 0381 000000   		.align	2
 6311              	.LC60:
 6312 0384 47534D3A 		.ascii	"GSM:\356\370\350\341\352\340 \361\350\354-\352\340\360"
 6312      EEF8E8E1 
 6312      EAE020F1 
 6312      E8EC2DEA 
 6312      E0F0
 6313 0396 F2FB00   		.ascii	"\362\373\000"
 6314              		.section	.text.ModemInit,"ax",%progbits
 6315              		.align	1
 6316              		.global	ModemInit
 6317              		.syntax unified
 6318              		.thumb
 6319              		.thumb_func
 6321              	ModemInit:
 6322              	.LFB59:
1145:src/modem.c   **** 
1146:src/modem.c   **** void ModemInit() {
 6323              		.loc 1 1146 18
 6324              		.cfi_startproc
 6325              		@ args = 0, pretend = 0, frame = 16
 6326              		@ frame_needed = 1, uses_anonymous_args = 0
 6327 0000 80B5     		push	{r7, lr}
 6328              	.LCFI125:
 6329              		.cfi_def_cfa_offset 8
 6330              		.cfi_offset 7, -8
 6331              		.cfi_offset 14, -4
 6332 0002 84B0     		sub	sp, sp, #16
 6333              	.LCFI126:
 6334              		.cfi_def_cfa_offset 24
 6335 0004 00AF     		add	r7, sp, #0
 6336              	.LCFI127:
 6337              		.cfi_def_cfa_register 7
1147:src/modem.c   **** 
1148:src/modem.c   **** 	/*USART_DeInit(USART3);
1149:src/modem.c   **** 	 DMA_DeInit(DMA1_Channel2);
1150:src/modem.c   **** 	 DMA_DeInit(DMA1_Channel3);*/
1151:src/modem.c   **** 	uart2Init(115200);
 6338              		.loc 1 1151 2
 6339 0006 4FF4E130 		mov	r0, #115200
 6340 000a 784B     		ldr	r3, .L344
 6341 000c 9847     		blx	r3
 6342              	.LVL253:
1152:src/modem.c   **** 
1153:src/modem.c   **** 	USART2TIMConfigure(50);
 6343              		.loc 1 1153 2
 6344 000e 3220     		movs	r0, #50
 6345 0010 774B     		ldr	r3, .L344+4
 6346 0012 9847     		blx	r3
 6347              	.LVL254:
1154:src/modem.c   **** 
1155:src/modem.c   **** //------------------------------------------------------------
1156:src/modem.c   **** 	BKP_WriteBackupRegister(BKP_DR7, 30);
 6348              		.loc 1 1156 2
 6349 0014 1E21     		movs	r1, #30
 6350 0016 1C20     		movs	r0, #28
 6351 0018 764B     		ldr	r3, .L344+8
 6352 001a 9847     		blx	r3
 6353              	.LVL255:
 6354              	.L338:
 6355              	.LBB17:
1157:src/modem.c   **** 	while (1) {
1158:src/modem.c   **** 		int heapSize = 0;
 6356              		.loc 1 1158 7
 6357 001c 0023     		movs	r3, #0
 6358 001e 7B60     		str	r3, [r7, #4]
1159:src/modem.c   **** 		heapSize = xPortGetFreeHeapSize();
 6359              		.loc 1 1159 14
 6360 0020 754B     		ldr	r3, .L344+12
 6361 0022 9847     		blx	r3
 6362              	.LVL256:
 6363 0024 0346     		mov	r3, r0
 6364              		.loc 1 1159 12
 6365 0026 7B60     		str	r3, [r7, #4]
1160:src/modem.c   **** 		heapSize += 0;
1161:src/modem.c   **** 
1162:src/modem.c   **** 		LedNoModem = 1;
 6366              		.loc 1 1162 14
 6367 0028 744B     		ldr	r3, .L344+16
 6368 002a 0122     		movs	r2, #1
 6369 002c 1A70     		strb	r2, [r3]
1163:src/modem.c   **** 		if (initMK == 1) {
 6370              		.loc 1 1163 14
 6371 002e 744B     		ldr	r3, .L344+20
 6372 0030 1B68     		ldr	r3, [r3]
 6373              		.loc 1 1163 6
 6374 0032 012B     		cmp	r3, #1
 6375 0034 18D1     		bne	.L317
1164:src/modem.c   **** 			MODEM_ENABLE
 6376              		.loc 1 1164 4
 6377 0036 0121     		movs	r1, #1
 6378 0038 7248     		ldr	r0, .L344+24
 6379 003a 734B     		ldr	r3, .L344+28
 6380 003c 9847     		blx	r3
 6381              	.LVL257:
1165:src/modem.c   **** 			;
1166:src/modem.c   **** 			vTaskDelay(4000);
 6382              		.loc 1 1166 4
 6383 003e 4FF47A60 		mov	r0, #4000
 6384 0042 724B     		ldr	r3, .L344+32
 6385 0044 9847     		blx	r3
 6386              	.LVL258:
1167:src/modem.c   **** 			MODEM_DISABLE
 6387              		.loc 1 1167 4
 6388 0046 0121     		movs	r1, #1
 6389 0048 6E48     		ldr	r0, .L344+24
 6390 004a 714B     		ldr	r3, .L344+36
 6391 004c 9847     		blx	r3
 6392              	.LVL259:
1168:src/modem.c   **** 			;
1169:src/modem.c   **** 			vTaskDelay(5000);
 6393              		.loc 1 1169 4
 6394 004e 41F28830 		movw	r0, #5000
 6395 0052 6E4B     		ldr	r3, .L344+32
 6396 0054 9847     		blx	r3
 6397              	.LVL260:
1170:src/modem.c   **** 			MODEM_ENABLE
 6398              		.loc 1 1170 4
 6399 0056 0121     		movs	r1, #1
 6400 0058 6A48     		ldr	r0, .L344+24
 6401 005a 6B4B     		ldr	r3, .L344+28
 6402 005c 9847     		blx	r3
 6403              	.LVL261:
1171:src/modem.c   **** 			;
1172:src/modem.c   **** 			vTaskDelay(10000);
 6404              		.loc 1 1172 4
 6405 005e 42F21070 		movw	r0, #10000
 6406 0062 6A4B     		ldr	r3, .L344+32
 6407 0064 9847     		blx	r3
 6408              	.LVL262:
 6409 0066 17E0     		b	.L318
 6410              	.L317:
1173:src/modem.c   **** 		} else {
1174:src/modem.c   **** 			MODEM_ENABLE
 6411              		.loc 1 1174 4
 6412 0068 0121     		movs	r1, #1
 6413 006a 6648     		ldr	r0, .L344+24
 6414 006c 664B     		ldr	r3, .L344+28
 6415 006e 9847     		blx	r3
 6416              	.LVL263:
1175:src/modem.c   **** 			;
1176:src/modem.c   **** 			vTaskDelay(3000);
 6417              		.loc 1 1176 4
 6418 0070 40F6B830 		movw	r0, #3000
 6419 0074 654B     		ldr	r3, .L344+32
 6420 0076 9847     		blx	r3
 6421              	.LVL264:
1177:src/modem.c   **** 			MODEM_DISABLE
 6422              		.loc 1 1177 4
 6423 0078 0121     		movs	r1, #1
 6424 007a 6248     		ldr	r0, .L344+24
 6425 007c 644B     		ldr	r3, .L344+36
 6426 007e 9847     		blx	r3
 6427              	.LVL265:
1178:src/modem.c   **** 			;
1179:src/modem.c   **** 			vTaskDelay(2500);
 6428              		.loc 1 1179 4
 6429 0080 40F6C410 		movw	r0, #2500
 6430 0084 614B     		ldr	r3, .L344+32
 6431 0086 9847     		blx	r3
 6432              	.LVL266:
1180:src/modem.c   **** 			MODEM_ENABLE
 6433              		.loc 1 1180 4
 6434 0088 0121     		movs	r1, #1
 6435 008a 5E48     		ldr	r0, .L344+24
 6436 008c 5E4B     		ldr	r3, .L344+28
 6437 008e 9847     		blx	r3
 6438              	.LVL267:
1181:src/modem.c   **** 			;
1182:src/modem.c   **** 			vTaskDelay(5000);
 6439              		.loc 1 1182 4
 6440 0090 41F28830 		movw	r0, #5000
 6441 0094 5D4B     		ldr	r3, .L344+32
 6442 0096 9847     		blx	r3
 6443              	.LVL268:
 6444              	.L318:
1183:src/modem.c   **** 		}
1184:src/modem.c   **** 
1185:src/modem.c   **** 		//LedNoModem = 1;
1186:src/modem.c   **** 
1187:src/modem.c   **** 		if (!WaitAtd()) {
 6445              		.loc 1 1187 8
 6446 0098 5E4B     		ldr	r3, .L344+40
 6447 009a 9847     		blx	r3
 6448              	.LVL269:
 6449 009c 0346     		mov	r3, r0
 6450              		.loc 1 1187 7
 6451 009e 83F00103 		eor	r3, r3, #1
 6452 00a2 DBB2     		uxtb	r3, r3
 6453              		.loc 1 1187 6
 6454 00a4 002B     		cmp	r3, #0
 6455 00a6 08D0     		beq	.L319
1188:src/modem.c   **** 			if (!WaitAtd1())
 6456              		.loc 1 1188 9
 6457 00a8 5B4B     		ldr	r3, .L344+44
 6458 00aa 9847     		blx	r3
 6459              	.LVL270:
 6460 00ac 0346     		mov	r3, r0
 6461              		.loc 1 1188 8
 6462 00ae 83F00103 		eor	r3, r3, #1
 6463 00b2 DBB2     		uxtb	r3, r3
 6464              		.loc 1 1188 7
 6465 00b4 002B     		cmp	r3, #0
 6466 00b6 40F09180 		bne	.L340
 6467              	.L319:
1189:src/modem.c   **** 				continue;
1190:src/modem.c   **** 		}
1191:src/modem.c   **** 
1192:src/modem.c   **** 		if (!WaitOk())
 6468              		.loc 1 1192 8
 6469 00ba 584B     		ldr	r3, .L344+48
 6470 00bc 9847     		blx	r3
 6471              	.LVL271:
 6472 00be 0346     		mov	r3, r0
 6473              		.loc 1 1192 7
 6474 00c0 83F00103 		eor	r3, r3, #1
 6475 00c4 DBB2     		uxtb	r3, r3
 6476              		.loc 1 1192 6
 6477 00c6 002B     		cmp	r3, #0
 6478 00c8 40F08A80 		bne	.L341
1193:src/modem.c   **** 			continue;
1194:src/modem.c   **** 		vTaskDelay(100);
 6479              		.loc 1 1194 3
 6480 00cc 6420     		movs	r0, #100
 6481 00ce 4F4B     		ldr	r3, .L344+32
 6482 00d0 9847     		blx	r3
 6483              	.LVL272:
1195:src/modem.c   **** 
1196:src/modem.c   **** 		LedNoModem = 0;
 6484              		.loc 1 1196 14
 6485 00d2 4A4B     		ldr	r3, .L344+16
 6486 00d4 0022     		movs	r2, #0
 6487 00d6 1A70     		strb	r2, [r3]
1197:src/modem.c   **** 
1198:src/modem.c   **** 		int i_CPIN = 50;
 6488              		.loc 1 1198 7
 6489 00d8 3223     		movs	r3, #50
 6490 00da FB60     		str	r3, [r7, #12]
1199:src/modem.c   **** 
1200:src/modem.c   **** 		vTaskDelay(100);
 6491              		.loc 1 1200 3
 6492 00dc 6420     		movs	r0, #100
 6493 00de 4B4B     		ldr	r3, .L344+32
 6494 00e0 9847     		blx	r3
 6495              	.LVL273:
1201:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 32);
 6496              		.loc 1 1201 3
 6497 00e2 2021     		movs	r1, #32
 6498 00e4 1C20     		movs	r0, #28
 6499 00e6 434B     		ldr	r3, .L344+8
 6500 00e8 9847     		blx	r3
 6501              	.LVL274:
1202:src/modem.c   **** 
1203:src/modem.c   **** 		while (!ATCPIN()) // проверка сим-карты
 6502              		.loc 1 1203 9
 6503 00ea 15E0     		b	.L322
 6504              	.L325:
1204:src/modem.c   **** 		{
1205:src/modem.c   **** 			if (i_CPIN == 0) {
 6505              		.loc 1 1205 7
 6506 00ec FB68     		ldr	r3, [r7, #12]
 6507 00ee 002B     		cmp	r3, #0
 6508 00f0 0FD1     		bne	.L323
1206:src/modem.c   **** 				if (!LedSIM_Journal) {
 6509              		.loc 1 1206 9
 6510 00f2 4B4B     		ldr	r3, .L344+52
 6511 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6512 00f6 83F00103 		eor	r3, r3, #1
 6513 00fa DBB2     		uxtb	r3, r3
 6514              		.loc 1 1206 8
 6515 00fc 002B     		cmp	r3, #0
 6516 00fe 05D0     		beq	.L324
1207:src/modem.c   **** 					JrnlWrite("GSM:ошибка сим-карты");
 6517              		.loc 1 1207 6
 6518 0100 4848     		ldr	r0, .L344+56
 6519 0102 494B     		ldr	r3, .L344+60
 6520 0104 9847     		blx	r3
 6521              	.LVL275:
1208:src/modem.c   **** 					LedSIM_Journal = 1;
 6522              		.loc 1 1208 21
 6523 0106 464B     		ldr	r3, .L344+52
 6524 0108 0122     		movs	r2, #1
 6525 010a 1A70     		strb	r2, [r3]
 6526              	.L324:
1209:src/modem.c   **** 				}
1210:src/modem.c   **** 				LedSIM = 1;
 6527              		.loc 1 1210 12
 6528 010c 474B     		ldr	r3, .L344+64
 6529 010e 0122     		movs	r2, #1
 6530 0110 1A70     		strb	r2, [r3]
 6531              	.L323:
1211:src/modem.c   **** 				// break;
1212:src/modem.c   **** 			}
1213:src/modem.c   **** 			i_CPIN--;
 6532              		.loc 1 1213 10
 6533 0112 FB68     		ldr	r3, [r7, #12]
 6534 0114 013B     		subs	r3, r3, #1
 6535 0116 FB60     		str	r3, [r7, #12]
 6536              	.L322:
1203:src/modem.c   **** 		{
 6537              		.loc 1 1203 11
 6538 0118 454B     		ldr	r3, .L344+68
 6539 011a 9847     		blx	r3
 6540              	.LVL276:
 6541 011c 0346     		mov	r3, r0
1203:src/modem.c   **** 		{
 6542              		.loc 1 1203 10
 6543 011e 83F00103 		eor	r3, r3, #1
 6544 0122 DBB2     		uxtb	r3, r3
1203:src/modem.c   **** 		{
 6545              		.loc 1 1203 9
 6546 0124 002B     		cmp	r3, #0
 6547 0126 E1D1     		bne	.L325
1214:src/modem.c   **** 		}
1215:src/modem.c   **** 		if (!LedSIM) {
 6548              		.loc 1 1215 7
 6549 0128 404B     		ldr	r3, .L344+64
 6550 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6551 012c 83F00103 		eor	r3, r3, #1
 6552 0130 DBB2     		uxtb	r3, r3
 6553              		.loc 1 1215 6
 6554 0132 002B     		cmp	r3, #0
 6555 0134 4DD0     		beq	.L326
 6556              	.LBB18:
1216:src/modem.c   **** 			i_CPIN = 0;
 6557              		.loc 1 1216 11
 6558 0136 0023     		movs	r3, #0
 6559 0138 FB60     		str	r3, [r7, #12]
1217:src/modem.c   **** 
1218:src/modem.c   **** 			LedReg = 1;
 6560              		.loc 1 1218 11
 6561 013a 3E4B     		ldr	r3, .L344+72
 6562 013c 0122     		movs	r2, #1
 6563 013e 1A70     		strb	r2, [r3]
1219:src/modem.c   **** 			vTaskDelay(50);
 6564              		.loc 1 1219 4
 6565 0140 3220     		movs	r0, #50
 6566 0142 324B     		ldr	r3, .L344+32
 6567 0144 9847     		blx	r3
 6568              	.LVL277:
1220:src/modem.c   **** 
1221:src/modem.c   **** 			while (!CSQ())
 6569              		.loc 1 1221 10
 6570 0146 00E0     		b	.L327
 6571              	.L328:
1222:src/modem.c   **** 				continue; // уровень сигнала
 6572              		.loc 1 1222 5
 6573 0148 00BF     		nop
 6574              	.L327:
1221:src/modem.c   **** 				continue; // уровень сигнала
 6575              		.loc 1 1221 12
 6576 014a 3B4B     		ldr	r3, .L344+76
 6577 014c 9847     		blx	r3
 6578              	.LVL278:
 6579 014e 0346     		mov	r3, r0
1221:src/modem.c   **** 				continue; // уровень сигнала
 6580              		.loc 1 1221 11
 6581 0150 83F00103 		eor	r3, r3, #1
 6582 0154 DBB2     		uxtb	r3, r3
1221:src/modem.c   **** 				continue; // уровень сигнала
 6583              		.loc 1 1221 10
 6584 0156 002B     		cmp	r3, #0
 6585 0158 F6D1     		bne	.L328
1223:src/modem.c   **** 
1224:src/modem.c   **** 			vTaskDelay(50);
 6586              		.loc 1 1224 4
 6587 015a 3220     		movs	r0, #50
 6588 015c 2B4B     		ldr	r3, .L344+32
 6589 015e 9847     		blx	r3
 6590              	.LVL279:
1225:src/modem.c   **** 			BKP_WriteBackupRegister(BKP_DR7, 33);
 6591              		.loc 1 1225 4
 6592 0160 2121     		movs	r1, #33
 6593 0162 1C20     		movs	r0, #28
 6594 0164 234B     		ldr	r3, .L344+8
 6595 0166 9847     		blx	r3
 6596              	.LVL280:
1226:src/modem.c   **** 
1227:src/modem.c   **** 			int i_CREG = 60;
 6597              		.loc 1 1227 8
 6598 0168 3C23     		movs	r3, #60
 6599 016a BB60     		str	r3, [r7, #8]
1228:src/modem.c   **** 
1229:src/modem.c   **** 			while (!ATCREG()) // проверка регистрации в сети
 6600              		.loc 1 1229 10
 6601 016c 05E0     		b	.L329
 6602              	.L332:
1230:src/modem.c   **** 			{
1231:src/modem.c   **** 				if (i_CREG == 0) {
 6603              		.loc 1 1231 8
 6604 016e BB68     		ldr	r3, [r7, #8]
 6605 0170 002B     		cmp	r3, #0
 6606 0172 0BD0     		beq	.L342
1232:src/modem.c   **** 					break;
1233:src/modem.c   **** 				}
1234:src/modem.c   **** 				i_CREG--;
 6607              		.loc 1 1234 11
 6608 0174 BB68     		ldr	r3, [r7, #8]
 6609 0176 013B     		subs	r3, r3, #1
 6610 0178 BB60     		str	r3, [r7, #8]
 6611              	.L329:
1229:src/modem.c   **** 			{
 6612              		.loc 1 1229 12
 6613 017a 304B     		ldr	r3, .L344+80
 6614 017c 9847     		blx	r3
 6615              	.LVL281:
 6616 017e 0346     		mov	r3, r0
1229:src/modem.c   **** 			{
 6617              		.loc 1 1229 11
 6618 0180 83F00103 		eor	r3, r3, #1
 6619 0184 DBB2     		uxtb	r3, r3
1229:src/modem.c   **** 			{
 6620              		.loc 1 1229 10
 6621 0186 002B     		cmp	r3, #0
 6622 0188 F1D1     		bne	.L332
 6623 018a 00E0     		b	.L331
 6624              	.L342:
1232:src/modem.c   **** 					break;
 6625              		.loc 1 1232 6
 6626 018c 00BF     		nop
 6627              	.L331:
1235:src/modem.c   **** 			}
1236:src/modem.c   **** 
1237:src/modem.c   **** 			i_CREG = 0;
 6628              		.loc 1 1237 11
 6629 018e 0023     		movs	r3, #0
 6630 0190 BB60     		str	r3, [r7, #8]
1238:src/modem.c   **** 
1239:src/modem.c   **** 			vTaskDelay(50);
 6631              		.loc 1 1239 4
 6632 0192 3220     		movs	r0, #50
 6633 0194 1D4B     		ldr	r3, .L344+32
 6634 0196 9847     		blx	r3
 6635              	.LVL282:
1240:src/modem.c   **** 
1241:src/modem.c   **** 			i_Select = 100;
 6636              		.loc 1 1241 13
 6637 0198 294B     		ldr	r3, .L344+84
 6638 019a 6422     		movs	r2, #100
 6639 019c 1A60     		str	r2, [r3]
1242:src/modem.c   **** 
1243:src/modem.c   **** 			while (!SelectModem()) {
 6640              		.loc 1 1243 10
 6641 019e 08E0     		b	.L333
 6642              	.L336:
1244:src/modem.c   **** 
1245:src/modem.c   **** 				if (i_Select == 0) {
 6643              		.loc 1 1245 18
 6644 01a0 274B     		ldr	r3, .L344+84
 6645 01a2 1B68     		ldr	r3, [r3]
 6646              		.loc 1 1245 8
 6647 01a4 002B     		cmp	r3, #0
 6648 01a6 0DD0     		beq	.L343
1246:src/modem.c   **** 					break;
1247:src/modem.c   **** 				}
1248:src/modem.c   **** 				i_Select--;
 6649              		.loc 1 1248 13
 6650 01a8 254B     		ldr	r3, .L344+84
 6651 01aa 1B68     		ldr	r3, [r3]
 6652 01ac 013B     		subs	r3, r3, #1
 6653 01ae 244A     		ldr	r2, .L344+84
 6654 01b0 1360     		str	r3, [r2]
 6655              	.L333:
1243:src/modem.c   **** 
 6656              		.loc 1 1243 12
 6657 01b2 244B     		ldr	r3, .L344+88
 6658 01b4 9847     		blx	r3
 6659              	.LVL283:
 6660 01b6 0346     		mov	r3, r0
1243:src/modem.c   **** 
 6661              		.loc 1 1243 11
 6662 01b8 83F00103 		eor	r3, r3, #1
 6663 01bc DBB2     		uxtb	r3, r3
1243:src/modem.c   **** 
 6664              		.loc 1 1243 10
 6665 01be 002B     		cmp	r3, #0
 6666 01c0 EED1     		bne	.L336
 6667 01c2 00E0     		b	.L335
 6668              	.L343:
1246:src/modem.c   **** 					break;
 6669              		.loc 1 1246 6
 6670 01c4 00BF     		nop
 6671              	.L335:
1249:src/modem.c   **** 			}
1250:src/modem.c   **** 			i_Select = 0;
 6672              		.loc 1 1250 13
 6673 01c6 1E4B     		ldr	r3, .L344+84
 6674 01c8 0022     		movs	r2, #0
 6675 01ca 1A60     		str	r2, [r3]
1251:src/modem.c   **** 
1252:src/modem.c   **** 			vTaskDelay(50);
 6676              		.loc 1 1252 4
 6677 01cc 3220     		movs	r0, #50
 6678 01ce 0F4B     		ldr	r3, .L344+32
 6679 01d0 9847     		blx	r3
 6680              	.LVL284:
 6681              	.L326:
 6682              	.LBE18:
1253:src/modem.c   **** 		}
1254:src/modem.c   **** 
1255:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 34);
 6683              		.loc 1 1255 3
 6684 01d2 2221     		movs	r1, #34
 6685 01d4 1C20     		movs	r0, #28
 6686 01d6 074B     		ldr	r3, .L344+8
 6687 01d8 9847     		blx	r3
 6688              	.LVL285:
1256:src/modem.c   **** 		return;
 6689              		.loc 1 1256 3
 6690 01da 03E0     		b	.L339
 6691              	.L340:
1189:src/modem.c   **** 		}
 6692              		.loc 1 1189 5
 6693 01dc 00BF     		nop
 6694 01de 1DE7     		b	.L338
 6695              	.L341:
1193:src/modem.c   **** 		vTaskDelay(100);
 6696              		.loc 1 1193 4
 6697 01e0 00BF     		nop
 6698              	.LBE17:
1157:src/modem.c   **** 		int heapSize = 0;
 6699              		.loc 1 1157 12
 6700 01e2 1BE7     		b	.L338
 6701              	.L339:
1257:src/modem.c   **** 	}
1258:src/modem.c   **** }
 6702              		.loc 1 1258 1
 6703 01e4 1037     		adds	r7, r7, #16
 6704              	.LCFI128:
 6705              		.cfi_def_cfa_offset 8
 6706 01e6 BD46     		mov	sp, r7
 6707              	.LCFI129:
 6708              		.cfi_def_cfa_register 13
 6709              		@ sp needed
 6710 01e8 80BD     		pop	{r7, pc}
 6711              	.L345:
 6712 01ea 00BF     		.align	2
 6713              	.L344:
 6714 01ec 00000000 		.word	uart2Init
 6715 01f0 00000000 		.word	USART2TIMConfigure
 6716 01f4 00000000 		.word	BKP_WriteBackupRegister
 6717 01f8 00000000 		.word	xPortGetFreeHeapSize
 6718 01fc 00000000 		.word	LedNoModem
 6719 0200 00000000 		.word	initMK
 6720 0204 000C0140 		.word	1073810432
 6721 0208 00000000 		.word	GPIO_ResetBits
 6722 020c 00000000 		.word	vTaskDelay
 6723 0210 00000000 		.word	GPIO_SetBits
 6724 0214 00000000 		.word	WaitAtd
 6725 0218 00000000 		.word	WaitAtd1
 6726 021c 00000000 		.word	WaitOk
 6727 0220 00000000 		.word	LedSIM_Journal
 6728 0224 84030000 		.word	.LC60
 6729 0228 00000000 		.word	JrnlWrite
 6730 022c 00000000 		.word	LedSIM
 6731 0230 00000000 		.word	ATCPIN
 6732 0234 00000000 		.word	LedReg
 6733 0238 00000000 		.word	CSQ
 6734 023c 00000000 		.word	ATCREG
 6735 0240 00000000 		.word	i_Select
 6736 0244 00000000 		.word	SelectModem
 6737              		.cfi_endproc
 6738              	.LFE59:
 6740              		.section	.rodata
 6741 0399 000000   		.align	2
 6742              	.LC61:
 6743 039c 41542B51 		.ascii	"AT+QIRD=\000"
 6743      4952443D 
 6743      00
 6744 03a5 000000   		.align	2
 6745              	.LC62:
 6746 03a8 2B514952 		.ascii	"+QIRD\000"
 6746      4400
 6747 03ae 0000     		.align	2
 6748              	.LC63:
 6749 03b0 49504400 		.ascii	"IPD\000"
 6750              		.section	.text.ModemReceiveData,"ax",%progbits
 6751              		.align	1
 6752              		.global	ModemReceiveData
 6753              		.syntax unified
 6754              		.thumb
 6755              		.thumb_func
 6757              	ModemReceiveData:
 6758              	.LFB60:
1259:src/modem.c   **** //=========================================================================
1260:src/modem.c   **** int ModemReceiveData(uint8 *buf, int maxsize) {
 6759              		.loc 1 1260 47
 6760              		.cfi_startproc
 6761              		@ args = 0, pretend = 0, frame = 424
 6762              		@ frame_needed = 1, uses_anonymous_args = 0
 6763 0000 80B5     		push	{r7, lr}
 6764              	.LCFI130:
 6765              		.cfi_def_cfa_offset 8
 6766              		.cfi_offset 7, -8
 6767              		.cfi_offset 14, -4
 6768 0002 EAB0     		sub	sp, sp, #424
 6769              	.LCFI131:
 6770              		.cfi_def_cfa_offset 432
 6771 0004 00AF     		add	r7, sp, #0
 6772              	.LCFI132:
 6773              		.cfi_def_cfa_register 7
 6774 0006 07F5D473 		add	r3, r7, #424
 6775 000a A3F5D273 		sub	r3, r3, #420
 6776 000e 1860     		str	r0, [r3]
 6777 0010 07F5D473 		add	r3, r7, #424
 6778 0014 A3F5D473 		sub	r3, r3, #424
 6779 0018 1960     		str	r1, [r3]
1261:src/modem.c   **** 
1262:src/modem.c   **** 	int packSize;
1263:src/modem.c   **** 	int headerSize;
1264:src/modem.c   **** 	int i;
1265:src/modem.c   **** 	int res = 0;
 6780              		.loc 1 1265 6
 6781 001a 0023     		movs	r3, #0
 6782 001c C7F89C31 		str	r3, [r7, #412]
1266:src/modem.c   **** 
1267:src/modem.c   **** 	BKP_WriteBackupRegister(BKP_DR7, 35);
 6783              		.loc 1 1267 2
 6784 0020 2321     		movs	r1, #35
 6785 0022 1C20     		movs	r0, #28
 6786 0024 B44B     		ldr	r3, .L426
 6787 0026 9847     		blx	r3
 6788              	.LVL286:
1268:src/modem.c   **** 	if (DeviceID == 4) {
1269:src/modem.c   **** 		//ModemWrite("+TCPRECV: 1,12\r\n");
1270:src/modem.c   **** 	}
1271:src/modem.c   **** 	FillBuf();
 6789              		.loc 1 1271 2
 6790 0028 B44B     		ldr	r3, .L426+4
 6791 002a 9847     		blx	r3
 6792              	.LVL287:
1272:src/modem.c   **** 	if (bufsize == 0)
 6793              		.loc 1 1272 14
 6794 002c B44B     		ldr	r3, .L426+8
 6795 002e 1B88     		ldrh	r3, [r3]	@ movhi
 6796 0030 9BB2     		uxth	r3, r3
 6797              		.loc 1 1272 5
 6798 0032 002B     		cmp	r3, #0
 6799 0034 02D1     		bne	.L347
1273:src/modem.c   **** 		return 0;
 6800              		.loc 1 1273 10
 6801 0036 0023     		movs	r3, #0
 6802 0038 00F0E8BC 		b	.L346
 6803              	.L347:
1274:src/modem.c   **** 
1275:src/modem.c   **** 	int k = 0;
 6804              		.loc 1 1275 6
 6805 003c 0023     		movs	r3, #0
 6806 003e C7F89831 		str	r3, [r7, #408]
1276:src/modem.c   **** 	//-------------UC15-----------------------
1277:src/modem.c   **** 	//-------------UC20-----------------------
1278:src/modem.c   **** 	if ((DeviceID == 1) || (DeviceID == 3)) {
 6807              		.loc 1 1278 16
 6808 0042 B04B     		ldr	r3, .L426+12
 6809 0044 1B68     		ldr	r3, [r3]
 6810              		.loc 1 1278 5
 6811 0046 012B     		cmp	r3, #1
 6812 0048 04D0     		beq	.L349
 6813              		.loc 1 1278 35 discriminator 1
 6814 004a AE4B     		ldr	r3, .L426+12
 6815 004c 1B68     		ldr	r3, [r3]
 6816              		.loc 1 1278 22 discriminator 1
 6817 004e 032B     		cmp	r3, #3
 6818 0050 40F0C881 		bne	.L350
 6819              	.L349:
 6820              	.LBB19:
1279:src/modem.c   **** 
1280:src/modem.c   **** 		if ((bufsize > 0)) {
 6821              		.loc 1 1280 16
 6822 0054 AA4B     		ldr	r3, .L426+8
 6823 0056 1B88     		ldrh	r3, [r3]	@ movhi
 6824 0058 9BB2     		uxth	r3, r3
 6825              		.loc 1 1280 6
 6826 005a 002B     		cmp	r3, #0
 6827 005c 00F04681 		beq	.L351
1281:src/modem.c   **** 			for (i = 0; i < bufsize; i++) {
 6828              		.loc 1 1281 11
 6829 0060 0023     		movs	r3, #0
 6830 0062 C7F8A431 		str	r3, [r7, #420]
 6831              		.loc 1 1281 4
 6832 0066 D7E0     		b	.L352
 6833              	.L359:
1282:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 6834              		.loc 1 1282 17
 6835 0068 A74A     		ldr	r2, .L426+16
 6836 006a D7F8A431 		ldr	r3, [r7, #420]
 6837 006e 1344     		add	r3, r3, r2
 6838 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6839              		.loc 1 1282 8
 6840 0072 2B2B     		cmp	r3, #43
 6841 0074 40F0CB80 		bne	.L353
 6842              		.loc 1 1282 43 discriminator 1
 6843 0078 D7F8A431 		ldr	r3, [r7, #420]
 6844 007c 0133     		adds	r3, r3, #1
 6845              		.loc 1 1282 40 discriminator 1
 6846 007e A24A     		ldr	r2, .L426+16
 6847 0080 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6848              		.loc 1 1282 29 discriminator 1
 6849 0082 512B     		cmp	r3, #81
 6850 0084 40F0C380 		bne	.L353
1283:src/modem.c   **** 						&& (sio_buf[i + 2] == 'I') && (sio_buf[i + 3] == 'U')
 6851              		.loc 1 1283 21
 6852 0088 D7F8A431 		ldr	r3, [r7, #420]
 6853 008c 0233     		adds	r3, r3, #2
 6854              		.loc 1 1283 18
 6855 008e 9E4A     		ldr	r2, .L426+16
 6856 0090 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6857              		.loc 1 1283 7
 6858 0092 492B     		cmp	r3, #73
 6859 0094 40F0BB80 		bne	.L353
 6860              		.loc 1 1283 48 discriminator 1
 6861 0098 D7F8A431 		ldr	r3, [r7, #420]
 6862 009c 0333     		adds	r3, r3, #3
 6863              		.loc 1 1283 45 discriminator 1
 6864 009e 9A4A     		ldr	r2, .L426+16
 6865 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6866              		.loc 1 1283 34 discriminator 1
 6867 00a2 552B     		cmp	r3, #85
 6868 00a4 40F0B380 		bne	.L353
1284:src/modem.c   **** 						&& (sio_buf[i + 4] == 'R') && (sio_buf[i + 5] == 'C')
 6869              		.loc 1 1284 21
 6870 00a8 D7F8A431 		ldr	r3, [r7, #420]
 6871 00ac 0433     		adds	r3, r3, #4
 6872              		.loc 1 1284 18
 6873 00ae 964A     		ldr	r2, .L426+16
 6874 00b0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6875              		.loc 1 1284 7
 6876 00b2 522B     		cmp	r3, #82
 6877 00b4 40F0AB80 		bne	.L353
 6878              		.loc 1 1284 48 discriminator 1
 6879 00b8 D7F8A431 		ldr	r3, [r7, #420]
 6880 00bc 0533     		adds	r3, r3, #5
 6881              		.loc 1 1284 45 discriminator 1
 6882 00be 924A     		ldr	r2, .L426+16
 6883 00c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6884              		.loc 1 1284 34 discriminator 1
 6885 00c2 432B     		cmp	r3, #67
 6886 00c4 40F0A380 		bne	.L353
1285:src/modem.c   **** 						&& (sio_buf[i + 6] == ':') && (sio_buf[i + 7] == ' ')
 6887              		.loc 1 1285 21
 6888 00c8 D7F8A431 		ldr	r3, [r7, #420]
 6889 00cc 0633     		adds	r3, r3, #6
 6890              		.loc 1 1285 18
 6891 00ce 8E4A     		ldr	r2, .L426+16
 6892 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6893              		.loc 1 1285 7
 6894 00d2 3A2B     		cmp	r3, #58
 6895 00d4 40F09B80 		bne	.L353
 6896              		.loc 1 1285 48 discriminator 1
 6897 00d8 D7F8A431 		ldr	r3, [r7, #420]
 6898 00dc 0733     		adds	r3, r3, #7
 6899              		.loc 1 1285 45 discriminator 1
 6900 00de 8A4A     		ldr	r2, .L426+16
 6901 00e0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6902              		.loc 1 1285 34 discriminator 1
 6903 00e2 202B     		cmp	r3, #32
 6904 00e4 40F09380 		bne	.L353
1286:src/modem.c   **** 						&& (sio_buf[i + 8] == '"') && (sio_buf[i + 9] == 'r')
 6905              		.loc 1 1286 21
 6906 00e8 D7F8A431 		ldr	r3, [r7, #420]
 6907 00ec 0833     		adds	r3, r3, #8
 6908              		.loc 1 1286 18
 6909 00ee 864A     		ldr	r2, .L426+16
 6910 00f0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6911              		.loc 1 1286 7
 6912 00f2 222B     		cmp	r3, #34
 6913 00f4 40F08B80 		bne	.L353
 6914              		.loc 1 1286 48 discriminator 1
 6915 00f8 D7F8A431 		ldr	r3, [r7, #420]
 6916 00fc 0933     		adds	r3, r3, #9
 6917              		.loc 1 1286 45 discriminator 1
 6918 00fe 824A     		ldr	r2, .L426+16
 6919 0100 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6920              		.loc 1 1286 34 discriminator 1
 6921 0102 722B     		cmp	r3, #114
 6922 0104 40F08380 		bne	.L353
1287:src/modem.c   **** 						&& (sio_buf[i + 10] == 'e') && (sio_buf[i + 11] == 'c')
 6923              		.loc 1 1287 21
 6924 0108 D7F8A431 		ldr	r3, [r7, #420]
 6925 010c 0A33     		adds	r3, r3, #10
 6926              		.loc 1 1287 18
 6927 010e 7E4A     		ldr	r2, .L426+16
 6928 0110 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6929              		.loc 1 1287 7
 6930 0112 652B     		cmp	r3, #101
 6931 0114 7BD1     		bne	.L353
 6932              		.loc 1 1287 49 discriminator 1
 6933 0116 D7F8A431 		ldr	r3, [r7, #420]
 6934 011a 0B33     		adds	r3, r3, #11
 6935              		.loc 1 1287 46 discriminator 1
 6936 011c 7A4A     		ldr	r2, .L426+16
 6937 011e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6938              		.loc 1 1287 35 discriminator 1
 6939 0120 632B     		cmp	r3, #99
 6940 0122 74D1     		bne	.L353
1288:src/modem.c   **** 						&& (sio_buf[i + 12] == 'v')
 6941              		.loc 1 1288 21
 6942 0124 D7F8A431 		ldr	r3, [r7, #420]
 6943 0128 0C33     		adds	r3, r3, #12
 6944              		.loc 1 1288 18
 6945 012a 774A     		ldr	r2, .L426+16
 6946 012c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6947              		.loc 1 1288 7
 6948 012e 762B     		cmp	r3, #118
 6949 0130 6DD1     		bne	.L353
1289:src/modem.c   **** 						&& (sio_buf[i + 13] == '"')) {
 6950              		.loc 1 1289 21
 6951 0132 D7F8A431 		ldr	r3, [r7, #420]
 6952 0136 0D33     		adds	r3, r3, #13
 6953              		.loc 1 1289 18
 6954 0138 734A     		ldr	r2, .L426+16
 6955 013a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6956              		.loc 1 1289 7
 6957 013c 222B     		cmp	r3, #34
 6958 013e 66D1     		bne	.L353
 6959              	.LBB20:
1290:src/modem.c   **** 					numRD = 0; //ID сервер
 6960              		.loc 1 1290 12
 6961 0140 724B     		ldr	r3, .L426+20
 6962 0142 0022     		movs	r2, #0
 6963 0144 1A60     		str	r2, [r3]
1291:src/modem.c   **** 
1292:src/modem.c   **** 					while (sio_buf[i + 15] != '\r') {
 6964              		.loc 1 1292 12
 6965 0146 14E0     		b	.L354
 6966              	.L355:
1293:src/modem.c   **** 						numRD = numRD * 10 + sio_buf[i + 15] - '0';
 6967              		.loc 1 1293 21
 6968 0148 704B     		ldr	r3, .L426+20
 6969 014a 1A68     		ldr	r2, [r3]
 6970 014c 1346     		mov	r3, r2
 6971 014e 9B00     		lsls	r3, r3, #2
 6972 0150 1344     		add	r3, r3, r2
 6973 0152 5B00     		lsls	r3, r3, #1
 6974 0154 1946     		mov	r1, r3
 6975              		.loc 1 1293 38
 6976 0156 D7F8A431 		ldr	r3, [r7, #420]
 6977 015a 0F33     		adds	r3, r3, #15
 6978              		.loc 1 1293 35
 6979 015c 6A4A     		ldr	r2, .L426+16
 6980 015e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6981              		.loc 1 1293 26
 6982 0160 0B44     		add	r3, r3, r1
 6983              		.loc 1 1293 44
 6984 0162 303B     		subs	r3, r3, #48
 6985              		.loc 1 1293 13
 6986 0164 694A     		ldr	r2, .L426+20
 6987 0166 1360     		str	r3, [r2]
1294:src/modem.c   **** 						i++;
 6988              		.loc 1 1294 8
 6989 0168 D7F8A431 		ldr	r3, [r7, #420]
 6990 016c 0133     		adds	r3, r3, #1
 6991 016e C7F8A431 		str	r3, [r7, #420]
 6992              	.L354:
1292:src/modem.c   **** 						numRD = numRD * 10 + sio_buf[i + 15] - '0';
 6993              		.loc 1 1292 23
 6994 0172 D7F8A431 		ldr	r3, [r7, #420]
 6995 0176 0F33     		adds	r3, r3, #15
1292:src/modem.c   **** 						numRD = numRD * 10 + sio_buf[i + 15] - '0';
 6996              		.loc 1 1292 20
 6997 0178 634A     		ldr	r2, .L426+16
 6998 017a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1292:src/modem.c   **** 						numRD = numRD * 10 + sio_buf[i + 15] - '0';
 6999              		.loc 1 1292 12
 7000 017c 0D2B     		cmp	r3, #13
 7001 017e E3D1     		bne	.L355
 7002              	.LBB21:
1295:src/modem.c   **** 					}
1296:src/modem.c   **** 
1297:src/modem.c   **** 					char buffer[256];
1298:src/modem.c   **** 					char minbuf[32];
1299:src/modem.c   **** 					for (int k = 0; k <= 32; k++) {
 7003              		.loc 1 1299 15
 7004 0180 0023     		movs	r3, #0
 7005 0182 C7F89431 		str	r3, [r7, #404]
 7006              		.loc 1 1299 6
 7007 0186 0DE0     		b	.L356
 7008              	.L357:
1300:src/modem.c   **** 						minbuf[k] = '0';
 7009              		.loc 1 1300 17 discriminator 3
 7010 0188 07F5D473 		add	r3, r7, #424
 7011 018c A3F5CE72 		sub	r2, r3, #412
 7012 0190 D7F89431 		ldr	r3, [r7, #404]
 7013 0194 1344     		add	r3, r3, r2
 7014 0196 3022     		movs	r2, #48
 7015 0198 1A70     		strb	r2, [r3]
1299:src/modem.c   **** 						minbuf[k] = '0';
 7016              		.loc 1 1299 32 discriminator 3
 7017 019a D7F89431 		ldr	r3, [r7, #404]
 7018 019e 0133     		adds	r3, r3, #1
 7019 01a0 C7F89431 		str	r3, [r7, #404]
 7020              	.L356:
1299:src/modem.c   **** 						minbuf[k] = '0';
 7021              		.loc 1 1299 6 discriminator 1
 7022 01a4 D7F89431 		ldr	r3, [r7, #404]
 7023 01a8 202B     		cmp	r3, #32
 7024 01aa EDDD     		ble	.L357
 7025              	.LBE21:
1301:src/modem.c   **** 					}
1302:src/modem.c   **** 
1303:src/modem.c   **** 					itoa1(numRD, minbuf);
 7026              		.loc 1 1303 6
 7027 01ac 574B     		ldr	r3, .L426+20
 7028 01ae 1B68     		ldr	r3, [r3]
 7029 01b0 07F10C02 		add	r2, r7, #12
 7030 01b4 1146     		mov	r1, r2
 7031 01b6 1846     		mov	r0, r3
 7032 01b8 554B     		ldr	r3, .L426+24
 7033 01ba 9847     		blx	r3
 7034              	.LVL288:
1304:src/modem.c   **** 					strcpy(buffer, "AT+QIRD="); // для чтения входящего сообщения
 7035              		.loc 1 1304 6
 7036 01bc 07F12C03 		add	r3, r7, #44
 7037 01c0 544A     		ldr	r2, .L426+28
 7038 01c2 07CA     		ldm	r2, {r0, r1, r2}
 7039 01c4 03C3     		stmia	r3!, {r0, r1}
 7040 01c6 1A70     		strb	r2, [r3]
1305:src/modem.c   **** 					strcat(buffer, minbuf);
 7041              		.loc 1 1305 6
 7042 01c8 07F10C02 		add	r2, r7, #12
 7043 01cc 07F12C03 		add	r3, r7, #44
 7044 01d0 1146     		mov	r1, r2
 7045 01d2 1846     		mov	r0, r3
 7046 01d4 504B     		ldr	r3, .L426+32
 7047 01d6 9847     		blx	r3
 7048              	.LVL289:
1306:src/modem.c   **** 					strcat(buffer, "\r\n");
 7049              		.loc 1 1306 6
 7050 01d8 07F12C03 		add	r3, r7, #44
 7051 01dc 1846     		mov	r0, r3
 7052 01de 4F4B     		ldr	r3, .L426+36
 7053 01e0 9847     		blx	r3
 7054              	.LVL290:
 7055 01e2 0346     		mov	r3, r0
 7056 01e4 1A46     		mov	r2, r3
 7057 01e6 07F12C03 		add	r3, r7, #44
 7058 01ea 1344     		add	r3, r3, r2
 7059 01ec 4C4A     		ldr	r2, .L426+40
 7060 01ee 1188     		ldrh	r1, [r2]	@ unaligned
 7061 01f0 9278     		ldrb	r2, [r2, #2]
 7062 01f2 1980     		strh	r1, [r3]	@ unaligned
 7063 01f4 9A70     		strb	r2, [r3, #2]
1307:src/modem.c   **** 					ModemWrite(buffer);
 7064              		.loc 1 1307 6
 7065 01f6 07F12C03 		add	r3, r7, #44
 7066 01fa 1846     		mov	r0, r3
 7067 01fc 494B     		ldr	r3, .L426+44
 7068 01fe 9847     		blx	r3
 7069              	.LVL291:
1308:src/modem.c   **** 					vTaskDelay(10);
 7070              		.loc 1 1308 6
 7071 0200 0A20     		movs	r0, #10
 7072 0202 494B     		ldr	r3, .L426+48
 7073 0204 9847     		blx	r3
 7074              	.LVL292:
1309:src/modem.c   **** 					k = 0;
 7075              		.loc 1 1309 8
 7076 0206 0023     		movs	r3, #0
 7077 0208 C7F89831 		str	r3, [r7, #408]
1310:src/modem.c   **** 					break;
 7078              		.loc 1 1310 6
 7079 020c 0DE0     		b	.L358
 7080              	.L353:
 7081              	.LBE20:
1281:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7082              		.loc 1 1281 30 discriminator 2
 7083 020e D7F8A431 		ldr	r3, [r7, #420]
 7084 0212 0133     		adds	r3, r3, #1
 7085 0214 C7F8A431 		str	r3, [r7, #420]
 7086              	.L352:
1281:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7087              		.loc 1 1281 18 discriminator 1
 7088 0218 394B     		ldr	r3, .L426+8
 7089 021a 1B88     		ldrh	r3, [r3]	@ movhi
 7090 021c 9BB2     		uxth	r3, r3
 7091 021e 1A46     		mov	r2, r3
1281:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7092              		.loc 1 1281 4 discriminator 1
 7093 0220 D7F8A431 		ldr	r3, [r7, #420]
 7094 0224 9342     		cmp	r3, r2
 7095 0226 FFF61FAF 		blt	.L359
 7096              	.L358:
1311:src/modem.c   **** 				}
1312:src/modem.c   **** 			}
1313:src/modem.c   **** 			for (i = 0; i < bufsize; i++) { //само входящее сообщение (нету заголовка IPD) +QRD:<len>\r<data
 7097              		.loc 1 1313 11
 7098 022a 0023     		movs	r3, #0
 7099 022c C7F8A431 		str	r3, [r7, #420]
 7100              		.loc 1 1313 4
 7101 0230 54E0     		b	.L360
 7102              	.L364:
1314:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7103              		.loc 1 1314 17
 7104 0232 354A     		ldr	r2, .L426+16
 7105 0234 D7F8A431 		ldr	r3, [r7, #420]
 7106 0238 1344     		add	r3, r3, r2
 7107 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7108              		.loc 1 1314 8
 7109 023c 2B2B     		cmp	r3, #43
 7110 023e 48D1     		bne	.L361
 7111              		.loc 1 1314 43 discriminator 1
 7112 0240 D7F8A431 		ldr	r3, [r7, #420]
 7113 0244 0133     		adds	r3, r3, #1
 7114              		.loc 1 1314 40 discriminator 1
 7115 0246 304A     		ldr	r2, .L426+16
 7116 0248 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7117              		.loc 1 1314 29 discriminator 1
 7118 024a 512B     		cmp	r3, #81
 7119 024c 41D1     		bne	.L361
1315:src/modem.c   **** 						&& (sio_buf[i + 2] == 'I') && (sio_buf[i + 3] == 'R')
 7120              		.loc 1 1315 21
 7121 024e D7F8A431 		ldr	r3, [r7, #420]
 7122 0252 0233     		adds	r3, r3, #2
 7123              		.loc 1 1315 18
 7124 0254 2C4A     		ldr	r2, .L426+16
 7125 0256 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7126              		.loc 1 1315 7
 7127 0258 492B     		cmp	r3, #73
 7128 025a 3AD1     		bne	.L361
 7129              		.loc 1 1315 48 discriminator 1
 7130 025c D7F8A431 		ldr	r3, [r7, #420]
 7131 0260 0333     		adds	r3, r3, #3
 7132              		.loc 1 1315 45 discriminator 1
 7133 0262 294A     		ldr	r2, .L426+16
 7134 0264 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7135              		.loc 1 1315 34 discriminator 1
 7136 0266 522B     		cmp	r3, #82
 7137 0268 33D1     		bne	.L361
1316:src/modem.c   **** 						&& (sio_buf[i + 4] == 'D') && (sio_buf[i + 5] == ':')) {
 7138              		.loc 1 1316 21
 7139 026a D7F8A431 		ldr	r3, [r7, #420]
 7140 026e 0433     		adds	r3, r3, #4
 7141              		.loc 1 1316 18
 7142 0270 254A     		ldr	r2, .L426+16
 7143 0272 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7144              		.loc 1 1316 7
 7145 0274 442B     		cmp	r3, #68
 7146 0276 2CD1     		bne	.L361
 7147              		.loc 1 1316 48 discriminator 1
 7148 0278 D7F8A431 		ldr	r3, [r7, #420]
 7149 027c 0533     		adds	r3, r3, #5
 7150              		.loc 1 1316 45 discriminator 1
 7151 027e 224A     		ldr	r2, .L426+16
 7152 0280 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7153              		.loc 1 1316 34 discriminator 1
 7154 0282 3A2B     		cmp	r3, #58
 7155 0284 25D1     		bne	.L361
1317:src/modem.c   **** 					k = 1;
 7156              		.loc 1 1317 8
 7157 0286 0123     		movs	r3, #1
 7158 0288 C7F89831 		str	r3, [r7, #408]
1318:src/modem.c   **** 					while (sio_buf[i + 7] != '\r') {
 7159              		.loc 1 1318 12
 7160 028c 14E0     		b	.L362
 7161              	.L363:
1319:src/modem.c   **** 						res = res * 10 + sio_buf[i + 7] - '0'; //<len>
 7162              		.loc 1 1319 17
 7163 028e D7F89C21 		ldr	r2, [r7, #412]
 7164 0292 1346     		mov	r3, r2
 7165 0294 9B00     		lsls	r3, r3, #2
 7166 0296 1344     		add	r3, r3, r2
 7167 0298 5B00     		lsls	r3, r3, #1
 7168 029a 1946     		mov	r1, r3
 7169              		.loc 1 1319 34
 7170 029c D7F8A431 		ldr	r3, [r7, #420]
 7171 02a0 0733     		adds	r3, r3, #7
 7172              		.loc 1 1319 31
 7173 02a2 194A     		ldr	r2, .L426+16
 7174 02a4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7175              		.loc 1 1319 22
 7176 02a6 0B44     		add	r3, r3, r1
 7177              		.loc 1 1319 11
 7178 02a8 303B     		subs	r3, r3, #48
 7179 02aa C7F89C31 		str	r3, [r7, #412]
1320:src/modem.c   **** 						i++;
 7180              		.loc 1 1320 8
 7181 02ae D7F8A431 		ldr	r3, [r7, #420]
 7182 02b2 0133     		adds	r3, r3, #1
 7183 02b4 C7F8A431 		str	r3, [r7, #420]
 7184              	.L362:
1318:src/modem.c   **** 					while (sio_buf[i + 7] != '\r') {
 7185              		.loc 1 1318 23
 7186 02b8 D7F8A431 		ldr	r3, [r7, #420]
 7187 02bc 0733     		adds	r3, r3, #7
1318:src/modem.c   **** 					while (sio_buf[i + 7] != '\r') {
 7188              		.loc 1 1318 20
 7189 02be 124A     		ldr	r2, .L426+16
 7190 02c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1318:src/modem.c   **** 					while (sio_buf[i + 7] != '\r') {
 7191              		.loc 1 1318 12
 7192 02c2 0D2B     		cmp	r3, #13
 7193 02c4 E3D1     		bne	.L363
1321:src/modem.c   **** 					}
1322:src/modem.c   **** 					headerSize = i + 9;
 7194              		.loc 1 1322 17
 7195 02c6 D7F8A431 		ldr	r3, [r7, #420]
 7196 02ca 0933     		adds	r3, r3, #9
 7197 02cc C7F8A031 		str	r3, [r7, #416]
1323:src/modem.c   **** 
1324:src/modem.c   **** 					break;
 7198              		.loc 1 1324 6
 7199 02d0 0CE0     		b	.L351
 7200              	.L361:
1313:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7201              		.loc 1 1313 30 discriminator 2
 7202 02d2 D7F8A431 		ldr	r3, [r7, #420]
 7203 02d6 0133     		adds	r3, r3, #1
 7204 02d8 C7F8A431 		str	r3, [r7, #420]
 7205              	.L360:
1313:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7206              		.loc 1 1313 18 discriminator 1
 7207 02dc 084B     		ldr	r3, .L426+8
 7208 02de 1B88     		ldrh	r3, [r3]	@ movhi
 7209 02e0 9BB2     		uxth	r3, r3
 7210 02e2 1A46     		mov	r2, r3
1313:src/modem.c   **** 				if ((sio_buf[i] == '+') && (sio_buf[i + 1] == 'Q')
 7211              		.loc 1 1313 4 discriminator 1
 7212 02e4 D7F8A431 		ldr	r3, [r7, #420]
 7213 02e8 9342     		cmp	r3, r2
 7214 02ea A2DB     		blt	.L364
 7215              	.L351:
1325:src/modem.c   **** 				}
1326:src/modem.c   **** 			}
1327:src/modem.c   **** 		}
1328:src/modem.c   **** 
1329:src/modem.c   **** 		if (k == 0)
 7216              		.loc 1 1329 6
 7217 02ec D7F89831 		ldr	r3, [r7, #408]
 7218 02f0 002B     		cmp	r3, #0
 7219 02f2 1BD1     		bne	.L365
1330:src/modem.c   **** 			return 0;
 7220              		.loc 1 1330 11
 7221 02f4 0023     		movs	r3, #0
 7222 02f6 89E3     		b	.L346
 7223              	.L427:
 7224              		.align	2
 7225              	.L426:
 7226 02f8 00000000 		.word	BKP_WriteBackupRegister
 7227 02fc 00000000 		.word	FillBuf
 7228 0300 00000000 		.word	bufsize
 7229 0304 00000000 		.word	DeviceID
 7230 0308 00000000 		.word	sio_buf
 7231 030c 00000000 		.word	numRD
 7232 0310 00000000 		.word	itoa1
 7233 0314 9C030000 		.word	.LC61
 7234 0318 00000000 		.word	strcat
 7235 031c 00000000 		.word	strlen
 7236 0320 6C010000 		.word	.LC24
 7237 0324 00000000 		.word	ModemWrite
 7238 0328 00000000 		.word	vTaskDelay
 7239              	.L365:
1331:src/modem.c   **** 
1332:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 36);
 7240              		.loc 1 1332 3
 7241 032c 2421     		movs	r1, #36
 7242 032e 1C20     		movs	r0, #28
 7243 0330 B94B     		ldr	r3, .L428
 7244 0332 9847     		blx	r3
 7245              	.LVL293:
1333:src/modem.c   **** 		char *cmpbuf = "+QIRD";
 7246              		.loc 1 1333 9
 7247 0334 B94B     		ldr	r3, .L428+4
 7248 0336 C7F84C31 		str	r3, [r7, #332]
1334:src/modem.c   **** 		char *strbufsize[16];
1335:src/modem.c   **** 		int cmpPoint = 0;
 7249              		.loc 1 1335 7
 7250 033a 0023     		movs	r3, #0
 7251 033c C7F84831 		str	r3, [r7, #328]
1336:src/modem.c   **** 		int strbufsizePoint = 0;
 7252              		.loc 1 1336 7
 7253 0340 0023     		movs	r3, #0
 7254 0342 C7F84431 		str	r3, [r7, #324]
1337:src/modem.c   **** 
1338:src/modem.c   **** 		packSize = res;
 7255              		.loc 1 1338 12
 7256 0346 D7F89C31 		ldr	r3, [r7, #412]
 7257 034a C7F85831 		str	r3, [r7, #344]
1339:src/modem.c   **** 
1340:src/modem.c   **** 		//headerSize++;
1341:src/modem.c   **** 		while (bufsize < (packSize + headerSize)) {
 7258              		.loc 1 1341 9
 7259 034e 00BF     		nop
 7260              		.loc 1 1341 18
 7261 0350 B34B     		ldr	r3, .L428+8
 7262 0352 1B88     		ldrh	r3, [r3]	@ movhi
 7263 0354 9BB2     		uxth	r3, r3
 7264 0356 1946     		mov	r1, r3
 7265              		.loc 1 1341 30
 7266 0358 D7F85821 		ldr	r2, [r7, #344]
 7267 035c D7F8A031 		ldr	r3, [r7, #416]
 7268 0360 1344     		add	r3, r3, r2
 7269              		.loc 1 1341 9
 7270 0362 9942     		cmp	r1, r3
1342:src/modem.c   **** 
1343:src/modem.c   **** 			break;
1344:src/modem.c   **** 			int tmpsize;
1345:src/modem.c   **** 			FillBufEx((uint8*) (&sio_buf[bufsize]), tmpsize);
1346:src/modem.c   **** //********************************************************
1347:src/modem.c   **** 
1348:src/modem.c   **** 			if (tmpsize == 0) {
1349:src/modem.c   **** 				break;
1350:src/modem.c   **** 			}
1351:src/modem.c   **** 			bufsize += tmpsize;
1352:src/modem.c   **** 		}
1353:src/modem.c   **** 		i = 0;
 7271              		.loc 1 1353 5
 7272 0364 0023     		movs	r3, #0
 7273 0366 C7F8A431 		str	r3, [r7, #420]
1354:src/modem.c   **** 
1355:src/modem.c   **** 		bufsize = res;
 7274              		.loc 1 1355 11
 7275 036a D7F89C31 		ldr	r3, [r7, #412]
 7276 036e 9AB2     		uxth	r2, r3
 7277 0370 AB4B     		ldr	r3, .L428+8
 7278 0372 1A80     		strh	r2, [r3]	@ movhi
1356:src/modem.c   **** 
1357:src/modem.c   **** 		while (bufsize) {
 7279              		.loc 1 1357 9
 7280 0374 2EE0     		b	.L370
 7281              	.L372:
1358:src/modem.c   **** 			if (i >= maxsize) {
 7282              		.loc 1 1358 7
 7283 0376 07F5D473 		add	r3, r7, #424
 7284 037a A3F5D473 		sub	r3, r3, #424
 7285 037e D7F8A421 		ldr	r2, [r7, #420]
 7286 0382 1B68     		ldr	r3, [r3]
 7287 0384 9A42     		cmp	r2, r3
 7288 0386 01DB     		blt	.L371
1359:src/modem.c   **** 				return 0;
 7289              		.loc 1 1359 12
 7290 0388 0023     		movs	r3, #0
 7291 038a 3FE3     		b	.L346
 7292              	.L371:
1360:src/modem.c   **** 			}
1361:src/modem.c   **** 			*buf = sio_buf[i + headerSize];
 7293              		.loc 1 1361 21
 7294 038c D7F8A421 		ldr	r2, [r7, #420]
 7295 0390 D7F8A031 		ldr	r3, [r7, #416]
 7296 0394 1344     		add	r3, r3, r2
 7297              		.loc 1 1361 18
 7298 0396 A34A     		ldr	r2, .L428+12
 7299 0398 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7300              		.loc 1 1361 9
 7301 039a 07F5D473 		add	r3, r7, #424
 7302 039e A3F5D273 		sub	r3, r3, #420
 7303 03a2 1B68     		ldr	r3, [r3]
 7304 03a4 1A70     		strb	r2, [r3]
1362:src/modem.c   **** 			buf++;
 7305              		.loc 1 1362 7
 7306 03a6 07F5D473 		add	r3, r7, #424
 7307 03aa A3F5D273 		sub	r3, r3, #420
 7308 03ae 07F5D472 		add	r2, r7, #424
 7309 03b2 A2F5D272 		sub	r2, r2, #420
 7310 03b6 1268     		ldr	r2, [r2]
 7311 03b8 0132     		adds	r2, r2, #1
 7312 03ba 1A60     		str	r2, [r3]
1363:src/modem.c   **** 			i++;
 7313              		.loc 1 1363 5
 7314 03bc D7F8A431 		ldr	r3, [r7, #420]
 7315 03c0 0133     		adds	r3, r3, #1
 7316 03c2 C7F8A431 		str	r3, [r7, #420]
1364:src/modem.c   **** 			bufsize--;
 7317              		.loc 1 1364 11
 7318 03c6 964B     		ldr	r3, .L428+8
 7319 03c8 1B88     		ldrh	r3, [r3]	@ movhi
 7320 03ca 9BB2     		uxth	r3, r3
 7321 03cc 013B     		subs	r3, r3, #1
 7322 03ce 9AB2     		uxth	r2, r3
 7323 03d0 934B     		ldr	r3, .L428+8
 7324 03d2 1A80     		strh	r2, [r3]	@ movhi
 7325              	.L370:
1357:src/modem.c   **** 			if (i >= maxsize) {
 7326              		.loc 1 1357 10
 7327 03d4 924B     		ldr	r3, .L428+8
 7328 03d6 1B88     		ldrh	r3, [r3]	@ movhi
 7329 03d8 9BB2     		uxth	r3, r3
1357:src/modem.c   **** 			if (i >= maxsize) {
 7330              		.loc 1 1357 9
 7331 03da 002B     		cmp	r3, #0
 7332 03dc CBD1     		bne	.L372
1365:src/modem.c   **** 		}
1366:src/modem.c   **** 
1367:src/modem.c   **** 		return packSize;
 7333              		.loc 1 1367 10
 7334 03de D7F85831 		ldr	r3, [r7, #344]
 7335 03e2 13E3     		b	.L346
 7336              	.L350:
 7337              	.LBE19:
1368:src/modem.c   **** 	}
1369:src/modem.c   **** 	//-------------N715-----------------------
1370:src/modem.c   **** 	else if (DeviceID == 4) {
 7338              		.loc 1 1370 20
 7339 03e4 904B     		ldr	r3, .L428+16
 7340 03e6 1B68     		ldr	r3, [r3]
 7341              		.loc 1 1370 10
 7342 03e8 042B     		cmp	r3, #4
 7343 03ea 40F0B681 		bne	.L373
 7344              	.LBB22:
1371:src/modem.c   **** 		char header[] = "IPD";
 7345              		.loc 1 1371 8
 7346 03ee 8F4B     		ldr	r3, .L428+20
 7347 03f0 C7F84031 		str	r3, [r7, #320]
1372:src/modem.c   **** 		int numIPD = 0;
 7348              		.loc 1 1372 7
 7349 03f4 0023     		movs	r3, #0
 7350 03f6 C7F89031 		str	r3, [r7, #400]
1373:src/modem.c   **** 		int k = 1;
 7351              		.loc 1 1373 7
 7352 03fa 0123     		movs	r3, #1
 7353 03fc C7F88C31 		str	r3, [r7, #396]
1374:src/modem.c   **** 
1375:src/modem.c   **** 		for (i = 0; i < 3; i++) {
 7354              		.loc 1 1375 10
 7355 0400 0023     		movs	r3, #0
 7356 0402 C7F8A431 		str	r3, [r7, #420]
 7357              		.loc 1 1375 3
 7358 0406 83E0     		b	.L374
 7359              	.L379:
1376:src/modem.c   **** 			if (sio_buf[i] != header[i]) {
 7360              		.loc 1 1376 15
 7361 0408 864A     		ldr	r2, .L428+12
 7362 040a D7F8A431 		ldr	r3, [r7, #420]
 7363 040e 1344     		add	r3, r3, r2
 7364 0410 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7365              		.loc 1 1376 28
 7366 0412 07F5A071 		add	r1, r7, #320
 7367 0416 D7F8A431 		ldr	r3, [r7, #420]
 7368 041a 0B44     		add	r3, r3, r1
 7369 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7370              		.loc 1 1376 7
 7371 041e 9A42     		cmp	r2, r3
 7372 0420 71D0     		beq	.L375
1377:src/modem.c   **** 				for (i = 0; i < bufsize; i++) {
 7373              		.loc 1 1377 12
 7374 0422 0023     		movs	r3, #0
 7375 0424 C7F8A431 		str	r3, [r7, #420]
 7376              		.loc 1 1377 5
 7377 0428 65E0     		b	.L376
 7378              	.L378:
1378:src/modem.c   **** 					if ((sio_buf[i] == 'P') && (sio_buf[i + 1] == 'R')
 7379              		.loc 1 1378 18
 7380 042a 7E4A     		ldr	r2, .L428+12
 7381 042c D7F8A431 		ldr	r3, [r7, #420]
 7382 0430 1344     		add	r3, r3, r2
 7383 0432 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7384              		.loc 1 1378 9
 7385 0434 502B     		cmp	r3, #80
 7386 0436 56D1     		bne	.L377
 7387              		.loc 1 1378 44 discriminator 1
 7388 0438 D7F8A431 		ldr	r3, [r7, #420]
 7389 043c 0133     		adds	r3, r3, #1
 7390              		.loc 1 1378 41 discriminator 1
 7391 043e 794A     		ldr	r2, .L428+12
 7392 0440 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7393              		.loc 1 1378 30 discriminator 1
 7394 0442 522B     		cmp	r3, #82
 7395 0444 4FD1     		bne	.L377
1379:src/modem.c   **** 							&& (sio_buf[i + 2] == 'E')
 7396              		.loc 1 1379 22
 7397 0446 D7F8A431 		ldr	r3, [r7, #420]
 7398 044a 0233     		adds	r3, r3, #2
 7399              		.loc 1 1379 19
 7400 044c 754A     		ldr	r2, .L428+12
 7401 044e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7402              		.loc 1 1379 8
 7403 0450 452B     		cmp	r3, #69
 7404 0452 48D1     		bne	.L377
1380:src/modem.c   **** 							&& (sio_buf[i + 3] == 'C')
 7405              		.loc 1 1380 22
 7406 0454 D7F8A431 		ldr	r3, [r7, #420]
 7407 0458 0333     		adds	r3, r3, #3
 7408              		.loc 1 1380 19
 7409 045a 724A     		ldr	r2, .L428+12
 7410 045c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7411              		.loc 1 1380 8
 7412 045e 432B     		cmp	r3, #67
 7413 0460 41D1     		bne	.L377
1381:src/modem.c   **** 							&& (sio_buf[i + 4] == 'V')
 7414              		.loc 1 1381 22
 7415 0462 D7F8A431 		ldr	r3, [r7, #420]
 7416 0466 0433     		adds	r3, r3, #4
 7417              		.loc 1 1381 19
 7418 0468 6E4A     		ldr	r2, .L428+12
 7419 046a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7420              		.loc 1 1381 8
 7421 046c 562B     		cmp	r3, #86
 7422 046e 3AD1     		bne	.L377
1382:src/modem.c   **** 							&& (sio_buf[i + 5] == '(')
 7423              		.loc 1 1382 22
 7424 0470 D7F8A431 		ldr	r3, [r7, #420]
 7425 0474 0533     		adds	r3, r3, #5
 7426              		.loc 1 1382 19
 7427 0476 6B4A     		ldr	r2, .L428+12
 7428 0478 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7429              		.loc 1 1382 8
 7430 047a 282B     		cmp	r3, #40
 7431 047c 33D1     		bne	.L377
1383:src/modem.c   **** 							&& (sio_buf[i + 6] == 'S')
 7432              		.loc 1 1383 22
 7433 047e D7F8A431 		ldr	r3, [r7, #420]
 7434 0482 0633     		adds	r3, r3, #6
 7435              		.loc 1 1383 19
 7436 0484 674A     		ldr	r2, .L428+12
 7437 0486 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7438              		.loc 1 1383 8
 7439 0488 532B     		cmp	r3, #83
 7440 048a 2CD1     		bne	.L377
1384:src/modem.c   **** 							&& (sio_buf[i + 7] == ')')
 7441              		.loc 1 1384 22
 7442 048c D7F8A431 		ldr	r3, [r7, #420]
 7443 0490 0733     		adds	r3, r3, #7
 7444              		.loc 1 1384 19
 7445 0492 644A     		ldr	r2, .L428+12
 7446 0494 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7447              		.loc 1 1384 8
 7448 0496 292B     		cmp	r3, #41
 7449 0498 25D1     		bne	.L377
1385:src/modem.c   **** 							&& (sio_buf[i + 8] == ':')
 7450              		.loc 1 1385 22
 7451 049a D7F8A431 		ldr	r3, [r7, #420]
 7452 049e 0833     		adds	r3, r3, #8
 7453              		.loc 1 1385 19
 7454 04a0 604A     		ldr	r2, .L428+12
 7455 04a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7456              		.loc 1 1385 8
 7457 04a4 3A2B     		cmp	r3, #58
 7458 04a6 1ED1     		bne	.L377
1386:src/modem.c   **** 							&& (sio_buf[i + 9] == ' ')
 7459              		.loc 1 1386 22
 7460 04a8 D7F8A431 		ldr	r3, [r7, #420]
 7461 04ac 0933     		adds	r3, r3, #9
 7462              		.loc 1 1386 19
 7463 04ae 5D4A     		ldr	r2, .L428+12
 7464 04b0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7465              		.loc 1 1386 8
 7466 04b2 202B     		cmp	r3, #32
 7467 04b4 17D1     		bne	.L377
1387:src/modem.c   **** 							&& (sio_buf[i + 11] == ',')) {
 7468              		.loc 1 1387 22
 7469 04b6 D7F8A431 		ldr	r3, [r7, #420]
 7470 04ba 0B33     		adds	r3, r3, #11
 7471              		.loc 1 1387 19
 7472 04bc 594A     		ldr	r2, .L428+12
 7473 04be D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7474              		.loc 1 1387 8
 7475 04c0 2C2B     		cmp	r3, #44
 7476 04c2 10D1     		bne	.L377
1388:src/modem.c   **** 						numIPD = i + 12;
 7477              		.loc 1 1388 14
 7478 04c4 D7F8A431 		ldr	r3, [r7, #420]
 7479 04c8 0C33     		adds	r3, r3, #12
 7480 04ca C7F89031 		str	r3, [r7, #400]
1389:src/modem.c   **** 						numRD = sio_buf[i + 10] - 48;
 7481              		.loc 1 1389 25
 7482 04ce D7F8A431 		ldr	r3, [r7, #420]
 7483 04d2 0A33     		adds	r3, r3, #10
 7484              		.loc 1 1389 22
 7485 04d4 534A     		ldr	r2, .L428+12
 7486 04d6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7487              		.loc 1 1389 31
 7488 04d8 303B     		subs	r3, r3, #48
 7489              		.loc 1 1389 13
 7490 04da 554A     		ldr	r2, .L428+24
 7491 04dc 1360     		str	r3, [r2]
1390:src/modem.c   **** 						k = 1;
 7492              		.loc 1 1390 9
 7493 04de 0123     		movs	r3, #1
 7494 04e0 C7F88C31 		str	r3, [r7, #396]
1391:src/modem.c   **** 						break;
 7495              		.loc 1 1391 7
 7496 04e4 0FE0     		b	.L375
 7497              	.L377:
1392:src/modem.c   **** 					} else
1393:src/modem.c   **** 						k = 0;
 7498              		.loc 1 1393 9 discriminator 2
 7499 04e6 0023     		movs	r3, #0
 7500 04e8 C7F88C31 		str	r3, [r7, #396]
1377:src/modem.c   **** 					if ((sio_buf[i] == 'P') && (sio_buf[i + 1] == 'R')
 7501              		.loc 1 1377 31 discriminator 2
 7502 04ec D7F8A431 		ldr	r3, [r7, #420]
 7503 04f0 0133     		adds	r3, r3, #1
 7504 04f2 C7F8A431 		str	r3, [r7, #420]
 7505              	.L376:
1377:src/modem.c   **** 					if ((sio_buf[i] == 'P') && (sio_buf[i + 1] == 'R')
 7506              		.loc 1 1377 19 discriminator 1
 7507 04f6 4A4B     		ldr	r3, .L428+8
 7508 04f8 1B88     		ldrh	r3, [r3]	@ movhi
 7509 04fa 9BB2     		uxth	r3, r3
 7510 04fc 1A46     		mov	r2, r3
1377:src/modem.c   **** 					if ((sio_buf[i] == 'P') && (sio_buf[i + 1] == 'R')
 7511              		.loc 1 1377 5 discriminator 1
 7512 04fe D7F8A431 		ldr	r3, [r7, #420]
 7513 0502 9342     		cmp	r3, r2
 7514 0504 91DB     		blt	.L378
 7515              	.L375:
1375:src/modem.c   **** 			if (sio_buf[i] != header[i]) {
 7516              		.loc 1 1375 23 discriminator 2
 7517 0506 D7F8A431 		ldr	r3, [r7, #420]
 7518 050a 0133     		adds	r3, r3, #1
 7519 050c C7F8A431 		str	r3, [r7, #420]
 7520              	.L374:
1375:src/modem.c   **** 			if (sio_buf[i] != header[i]) {
 7521              		.loc 1 1375 3 discriminator 1
 7522 0510 D7F8A431 		ldr	r3, [r7, #420]
 7523 0514 022B     		cmp	r3, #2
 7524 0516 7FF777AF 		ble	.L379
1394:src/modem.c   **** 				}
1395:src/modem.c   **** 			}
1396:src/modem.c   **** 
1397:src/modem.c   **** 		};
1398:src/modem.c   **** 
1399:src/modem.c   **** 		if (k == 0)
 7525              		.loc 1 1399 6
 7526 051a D7F88C31 		ldr	r3, [r7, #396]
 7527 051e 002B     		cmp	r3, #0
 7528 0520 01D1     		bne	.L380
1400:src/modem.c   **** 			return 0;
 7529              		.loc 1 1400 11
 7530 0522 0023     		movs	r3, #0
 7531 0524 72E2     		b	.L346
 7532              	.L380:
1401:src/modem.c   **** 		if (numIPD != 0) {
 7533              		.loc 1 1401 6
 7534 0526 D7F89031 		ldr	r3, [r7, #400]
 7535 052a 002B     		cmp	r3, #0
 7536 052c 1CD0     		beq	.L382
1402:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7537              		.loc 1 1402 11
 7538 052e 0023     		movs	r3, #0
 7539 0530 C7F8A431 		str	r3, [r7, #420]
 7540              		.loc 1 1402 4
 7541 0534 11E0     		b	.L383
 7542              	.L384:
1403:src/modem.c   **** 				sio_buf[i] = sio_buf[i + numIPD];
 7543              		.loc 1 1403 28 discriminator 3
 7544 0536 D7F8A421 		ldr	r2, [r7, #420]
 7545 053a D7F89031 		ldr	r3, [r7, #400]
 7546 053e 1344     		add	r3, r3, r2
 7547              		.loc 1 1403 25 discriminator 3
 7548 0540 384A     		ldr	r2, .L428+12
 7549 0542 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 7550              		.loc 1 1403 16 discriminator 3
 7551 0544 374A     		ldr	r2, .L428+12
 7552 0546 D7F8A431 		ldr	r3, [r7, #420]
 7553 054a 1344     		add	r3, r3, r2
 7554 054c 0A46     		mov	r2, r1
 7555 054e 1A70     		strb	r2, [r3]
1402:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7556              		.loc 1 1402 34 discriminator 3
 7557 0550 D7F8A431 		ldr	r3, [r7, #420]
 7558 0554 0133     		adds	r3, r3, #1
 7559 0556 C7F8A431 		str	r3, [r7, #420]
 7560              	.L383:
1402:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7561              		.loc 1 1402 18 discriminator 1
 7562 055a D7F89031 		ldr	r3, [r7, #400]
 7563 055e 2733     		adds	r3, r3, #39
1402:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7564              		.loc 1 1402 4 discriminator 1
 7565 0560 D7F8A421 		ldr	r2, [r7, #420]
 7566 0564 9A42     		cmp	r2, r3
 7567 0566 E6DD     		ble	.L384
 7568              	.L382:
1404:src/modem.c   **** 		}
1405:src/modem.c   **** 		int len_pack = 0;
 7569              		.loc 1 1405 7
 7570 0568 0023     		movs	r3, #0
 7571 056a C7F88831 		str	r3, [r7, #392]
1406:src/modem.c   **** 		while (sio_buf[len_pack] != ',') {
 7572              		.loc 1 1406 9
 7573 056e 04E0     		b	.L385
 7574              	.L386:
1407:src/modem.c   **** 			len_pack++;
 7575              		.loc 1 1407 12
 7576 0570 D7F88831 		ldr	r3, [r7, #392]
 7577 0574 0133     		adds	r3, r3, #1
 7578 0576 C7F88831 		str	r3, [r7, #392]
 7579              	.L385:
1406:src/modem.c   **** 		while (sio_buf[len_pack] != ',') {
 7580              		.loc 1 1406 17
 7581 057a 2A4A     		ldr	r2, .L428+12
 7582 057c D7F88831 		ldr	r3, [r7, #392]
 7583 0580 1344     		add	r3, r3, r2
 7584 0582 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1406:src/modem.c   **** 		while (sio_buf[len_pack] != ',') {
 7585              		.loc 1 1406 9
 7586 0584 2C2B     		cmp	r3, #44
 7587 0586 F3D1     		bne	.L386
1408:src/modem.c   **** 		}
1409:src/modem.c   **** 
1410:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 36);
 7588              		.loc 1 1410 3
 7589 0588 2421     		movs	r1, #36
 7590 058a 1C20     		movs	r0, #28
 7591 058c 224B     		ldr	r3, .L428
 7592 058e 9847     		blx	r3
 7593              	.LVL294:
1411:src/modem.c   **** 		char *cmpbuf = "IPD";
 7594              		.loc 1 1411 9
 7595 0590 284B     		ldr	r3, .L428+28
 7596 0592 C7F85431 		str	r3, [r7, #340]
1412:src/modem.c   **** 		char strbufsize[16];
1413:src/modem.c   **** 		int cmpPoint = 0;
 7597              		.loc 1 1413 7
 7598 0596 0023     		movs	r3, #0
 7599 0598 C7F85031 		str	r3, [r7, #336]
1414:src/modem.c   **** 		int strbufsizePoint = 0;
 7600              		.loc 1 1414 7
 7601 059c 0023     		movs	r3, #0
 7602 059e C7F88431 		str	r3, [r7, #388]
1415:src/modem.c   **** 
1416:src/modem.c   **** 		headerSize = 0;
 7603              		.loc 1 1416 14
 7604 05a2 0023     		movs	r3, #0
 7605 05a4 C7F8A031 		str	r3, [r7, #416]
 7606              	.LBB23:
1417:src/modem.c   **** 		for (int k = 0; k <= 16; k++) {
 7607              		.loc 1 1417 12
 7608 05a8 0023     		movs	r3, #0
 7609 05aa C7F88031 		str	r3, [r7, #384]
 7610              		.loc 1 1417 3
 7611 05ae 0BE0     		b	.L387
 7612              	.L388:
1418:src/modem.c   **** 			strbufsize[k] = '0';
 7613              		.loc 1 1418 18 discriminator 3
 7614 05b0 07F59872 		add	r2, r7, #304
 7615 05b4 D7F88031 		ldr	r3, [r7, #384]
 7616 05b8 1344     		add	r3, r3, r2
 7617 05ba 3022     		movs	r2, #48
 7618 05bc 1A70     		strb	r2, [r3]
1417:src/modem.c   **** 		for (int k = 0; k <= 16; k++) {
 7619              		.loc 1 1417 29 discriminator 3
 7620 05be D7F88031 		ldr	r3, [r7, #384]
 7621 05c2 0133     		adds	r3, r3, #1
 7622 05c4 C7F88031 		str	r3, [r7, #384]
 7623              	.L387:
1417:src/modem.c   **** 		for (int k = 0; k <= 16; k++) {
 7624              		.loc 1 1417 3 discriminator 1
 7625 05c8 D7F88031 		ldr	r3, [r7, #384]
 7626 05cc 102B     		cmp	r3, #16
 7627 05ce EFDD     		ble	.L388
 7628              	.LBE23:
1419:src/modem.c   **** 		}
1420:src/modem.c   **** 		while (sio_buf[headerSize] != ',') {
 7629              		.loc 1 1420 9
 7630 05d0 13E0     		b	.L389
 7631              	.L390:
1421:src/modem.c   **** 
1422:src/modem.c   **** 			strbufsize[strbufsizePoint++] = sio_buf[headerSize];
 7632              		.loc 1 1422 30
 7633 05d2 D7F88431 		ldr	r3, [r7, #388]
 7634 05d6 5A1C     		adds	r2, r3, #1
 7635 05d8 C7F88421 		str	r2, [r7, #388]
 7636              		.loc 1 1422 43
 7637 05dc 1149     		ldr	r1, .L428+12
 7638 05de D7F8A021 		ldr	r2, [r7, #416]
 7639 05e2 0A44     		add	r2, r2, r1
 7640 05e4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7641              		.loc 1 1422 34
 7642 05e6 03F5D473 		add	r3, r3, #424
 7643 05ea 3B44     		add	r3, r3, r7
 7644 05ec 03F8782C 		strb	r2, [r3, #-120]
1423:src/modem.c   **** 			headerSize++;
 7645              		.loc 1 1423 14
 7646 05f0 D7F8A031 		ldr	r3, [r7, #416]
 7647 05f4 0133     		adds	r3, r3, #1
 7648 05f6 C7F8A031 		str	r3, [r7, #416]
 7649              	.L389:
1420:src/modem.c   **** 
 7650              		.loc 1 1420 17
 7651 05fa 0A4A     		ldr	r2, .L428+12
 7652 05fc D7F8A031 		ldr	r3, [r7, #416]
 7653 0600 1344     		add	r3, r3, r2
 7654 0602 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1420:src/modem.c   **** 
 7655              		.loc 1 1420 9
 7656 0604 2C2B     		cmp	r3, #44
 7657 0606 E4D1     		bne	.L390
1424:src/modem.c   **** 		}
1425:src/modem.c   **** 		int it = 0;
 7658              		.loc 1 1425 7
 7659 0608 0023     		movs	r3, #0
 7660 060a C7F87C31 		str	r3, [r7, #380]
1426:src/modem.c   **** 		int res = 0;
 7661              		.loc 1 1426 7
 7662 060e 0023     		movs	r3, #0
 7663 0610 C7F87831 		str	r3, [r7, #376]
1427:src/modem.c   **** 		while (strbufsize[it] >= '0' && strbufsize[it] <= '9') {
 7664              		.loc 1 1427 9
 7665 0614 2CE0     		b	.L391
 7666              	.L429:
 7667 0616 00BF     		.align	2
 7668              	.L428:
 7669 0618 00000000 		.word	BKP_WriteBackupRegister
 7670 061c A8030000 		.word	.LC62
 7671 0620 00000000 		.word	bufsize
 7672 0624 00000000 		.word	sio_buf
 7673 0628 00000000 		.word	DeviceID
 7674 062c 49504400 		.word	4477001
 7675 0630 00000000 		.word	numRD
 7676 0634 B0030000 		.word	.LC63
 7677              	.L393:
1428:src/modem.c   **** 			res = res * 10 + (strbufsize[it] - '0');
 7678              		.loc 1 1428 14
 7679 0638 D7F87821 		ldr	r2, [r7, #376]
 7680 063c 1346     		mov	r3, r2
 7681 063e 9B00     		lsls	r3, r3, #2
 7682 0640 1344     		add	r3, r3, r2
 7683 0642 5B00     		lsls	r3, r3, #1
 7684 0644 1946     		mov	r1, r3
 7685              		.loc 1 1428 32
 7686 0646 07F59872 		add	r2, r7, #304
 7687 064a D7F87C31 		ldr	r3, [r7, #380]
 7688 064e 1344     		add	r3, r3, r2
 7689 0650 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7690              		.loc 1 1428 37
 7691 0652 303B     		subs	r3, r3, #48
 7692              		.loc 1 1428 8
 7693 0654 0B44     		add	r3, r3, r1
 7694 0656 C7F87831 		str	r3, [r7, #376]
1429:src/modem.c   **** 			it++;
 7695              		.loc 1 1429 6
 7696 065a D7F87C31 		ldr	r3, [r7, #380]
 7697 065e 0133     		adds	r3, r3, #1
 7698 0660 C7F87C31 		str	r3, [r7, #380]
1430:src/modem.c   **** 			if (it == headerSize)
 7699              		.loc 1 1430 7
 7700 0664 D7F87C21 		ldr	r2, [r7, #380]
 7701 0668 D7F8A031 		ldr	r3, [r7, #416]
 7702 066c 9A42     		cmp	r2, r3
 7703 066e 10D0     		beq	.L425
 7704              	.L391:
1427:src/modem.c   **** 			res = res * 10 + (strbufsize[it] - '0');
 7705              		.loc 1 1427 20
 7706 0670 07F59872 		add	r2, r7, #304
 7707 0674 D7F87C31 		ldr	r3, [r7, #380]
 7708 0678 1344     		add	r3, r3, r2
 7709 067a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1427:src/modem.c   **** 			res = res * 10 + (strbufsize[it] - '0');
 7710              		.loc 1 1427 9
 7711 067c 2F2B     		cmp	r3, #47
 7712 067e 09D9     		bls	.L392
1427:src/modem.c   **** 			res = res * 10 + (strbufsize[it] - '0');
 7713              		.loc 1 1427 45 discriminator 1
 7714 0680 07F59872 		add	r2, r7, #304
 7715 0684 D7F87C31 		ldr	r3, [r7, #380]
 7716 0688 1344     		add	r3, r3, r2
 7717 068a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1427:src/modem.c   **** 			res = res * 10 + (strbufsize[it] - '0');
 7718              		.loc 1 1427 32 discriminator 1
 7719 068c 392B     		cmp	r3, #57
 7720 068e D3D9     		bls	.L393
 7721 0690 00E0     		b	.L392
 7722              	.L425:
1431:src/modem.c   **** 				break;
 7723              		.loc 1 1431 5
 7724 0692 00BF     		nop
 7725              	.L392:
1432:src/modem.c   **** 		}
1433:src/modem.c   **** 
1434:src/modem.c   **** 		packSize = res;
 7726              		.loc 1 1434 12
 7727 0694 D7F87831 		ldr	r3, [r7, #376]
 7728 0698 C7F85831 		str	r3, [r7, #344]
1435:src/modem.c   **** 
1436:src/modem.c   **** 		headerSize++;
 7729              		.loc 1 1436 13
 7730 069c D7F8A031 		ldr	r3, [r7, #416]
 7731 06a0 0133     		adds	r3, r3, #1
 7732 06a2 C7F8A031 		str	r3, [r7, #416]
1437:src/modem.c   **** 
1438:src/modem.c   **** 		while (bufsize < (packSize + headerSize)) {
 7733              		.loc 1 1438 9
 7734 06a6 00BF     		nop
 7735              		.loc 1 1438 18
 7736 06a8 BC4B     		ldr	r3, .L430
 7737 06aa 1B88     		ldrh	r3, [r3]	@ movhi
 7738 06ac 9BB2     		uxth	r3, r3
 7739 06ae 1946     		mov	r1, r3
 7740              		.loc 1 1438 30
 7741 06b0 D7F85821 		ldr	r2, [r7, #344]
 7742 06b4 D7F8A031 		ldr	r3, [r7, #416]
 7743 06b8 1344     		add	r3, r3, r2
 7744              		.loc 1 1438 9
 7745 06ba 9942     		cmp	r1, r3
1439:src/modem.c   **** 
1440:src/modem.c   **** 			break;
1441:src/modem.c   **** 			int tmpsize;
1442:src/modem.c   **** 			FillBufEx((uint8*) (&sio_buf[bufsize]), tmpsize);
1443:src/modem.c   **** 			//********************************************************
1444:src/modem.c   **** 
1445:src/modem.c   **** 			if (tmpsize == 0) {
1446:src/modem.c   **** 				break;
1447:src/modem.c   **** 			}
1448:src/modem.c   **** 			bufsize += tmpsize;
1449:src/modem.c   **** 		}
1450:src/modem.c   **** 		i = 0;
 7746              		.loc 1 1450 5
 7747 06bc 0023     		movs	r3, #0
 7748 06be C7F8A431 		str	r3, [r7, #420]
1451:src/modem.c   **** 
1452:src/modem.c   **** 		bufsize -= headerSize;
 7749              		.loc 1 1452 11
 7750 06c2 B64B     		ldr	r3, .L430
 7751 06c4 1B88     		ldrh	r3, [r3]	@ movhi
 7752 06c6 9AB2     		uxth	r2, r3
 7753 06c8 D7F8A031 		ldr	r3, [r7, #416]
 7754 06cc 9BB2     		uxth	r3, r3
 7755 06ce D31A     		subs	r3, r2, r3
 7756 06d0 9AB2     		uxth	r2, r3
 7757 06d2 B24B     		ldr	r3, .L430
 7758 06d4 1A80     		strh	r2, [r3]	@ movhi
1453:src/modem.c   **** 		bufsize -= numIPD;
 7759              		.loc 1 1453 11
 7760 06d6 B14B     		ldr	r3, .L430
 7761 06d8 1B88     		ldrh	r3, [r3]	@ movhi
 7762 06da 9AB2     		uxth	r2, r3
 7763 06dc D7F89031 		ldr	r3, [r7, #400]
 7764 06e0 9BB2     		uxth	r3, r3
 7765 06e2 D31A     		subs	r3, r2, r3
 7766 06e4 9AB2     		uxth	r2, r3
 7767 06e6 AD4B     		ldr	r3, .L430
 7768 06e8 1A80     		strh	r2, [r3]	@ movhi
1454:src/modem.c   **** 
1455:src/modem.c   **** 		while (bufsize) {
 7769              		.loc 1 1455 9
 7770 06ea 2EE0     		b	.L397
 7771              	.L399:
1456:src/modem.c   **** 			if (i >= maxsize) {
 7772              		.loc 1 1456 7
 7773 06ec 07F5D473 		add	r3, r7, #424
 7774 06f0 A3F5D473 		sub	r3, r3, #424
 7775 06f4 D7F8A421 		ldr	r2, [r7, #420]
 7776 06f8 1B68     		ldr	r3, [r3]
 7777 06fa 9A42     		cmp	r2, r3
 7778 06fc 01DB     		blt	.L398
1457:src/modem.c   **** 				return 0;
 7779              		.loc 1 1457 12
 7780 06fe 0023     		movs	r3, #0
 7781 0700 84E1     		b	.L346
 7782              	.L398:
1458:src/modem.c   **** 			}
1459:src/modem.c   **** 			*buf = sio_buf[i + headerSize];
 7783              		.loc 1 1459 21
 7784 0702 D7F8A421 		ldr	r2, [r7, #420]
 7785 0706 D7F8A031 		ldr	r3, [r7, #416]
 7786 070a 1344     		add	r3, r3, r2
 7787              		.loc 1 1459 18
 7788 070c A44A     		ldr	r2, .L430+4
 7789 070e D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7790              		.loc 1 1459 9
 7791 0710 07F5D473 		add	r3, r7, #424
 7792 0714 A3F5D273 		sub	r3, r3, #420
 7793 0718 1B68     		ldr	r3, [r3]
 7794 071a 1A70     		strb	r2, [r3]
1460:src/modem.c   **** 			buf++;
 7795              		.loc 1 1460 7
 7796 071c 07F5D473 		add	r3, r7, #424
 7797 0720 A3F5D273 		sub	r3, r3, #420
 7798 0724 07F5D472 		add	r2, r7, #424
 7799 0728 A2F5D272 		sub	r2, r2, #420
 7800 072c 1268     		ldr	r2, [r2]
 7801 072e 0132     		adds	r2, r2, #1
 7802 0730 1A60     		str	r2, [r3]
1461:src/modem.c   **** 			i++;
 7803              		.loc 1 1461 5
 7804 0732 D7F8A431 		ldr	r3, [r7, #420]
 7805 0736 0133     		adds	r3, r3, #1
 7806 0738 C7F8A431 		str	r3, [r7, #420]
1462:src/modem.c   **** 			bufsize--;
 7807              		.loc 1 1462 11
 7808 073c 974B     		ldr	r3, .L430
 7809 073e 1B88     		ldrh	r3, [r3]	@ movhi
 7810 0740 9BB2     		uxth	r3, r3
 7811 0742 013B     		subs	r3, r3, #1
 7812 0744 9AB2     		uxth	r2, r3
 7813 0746 954B     		ldr	r3, .L430
 7814 0748 1A80     		strh	r2, [r3]	@ movhi
 7815              	.L397:
1455:src/modem.c   **** 			if (i >= maxsize) {
 7816              		.loc 1 1455 10
 7817 074a 944B     		ldr	r3, .L430
 7818 074c 1B88     		ldrh	r3, [r3]	@ movhi
 7819 074e 9BB2     		uxth	r3, r3
1455:src/modem.c   **** 			if (i >= maxsize) {
 7820              		.loc 1 1455 9
 7821 0750 002B     		cmp	r3, #0
 7822 0752 CBD1     		bne	.L399
1463:src/modem.c   **** 		}
1464:src/modem.c   **** 
1465:src/modem.c   **** 		return packSize;
 7823              		.loc 1 1465 10
 7824 0754 D7F85831 		ldr	r3, [r7, #344]
 7825 0758 58E1     		b	.L346
 7826              	.L373:
 7827              	.LBE22:
1466:src/modem.c   **** 	}
1467:src/modem.c   **** 	//-------------M66-----------------------
1468:src/modem.c   **** 	else if (DeviceID == 2) {
 7828              		.loc 1 1468 20
 7829 075a 924B     		ldr	r3, .L430+8
 7830 075c 1B68     		ldr	r3, [r3]
 7831              		.loc 1 1468 10
 7832 075e 022B     		cmp	r3, #2
 7833 0760 40F05481 		bne	.L400
 7834              	.LBB24:
1469:src/modem.c   **** 		char header[] = "IPD";
 7835              		.loc 1 1469 8
 7836 0764 904B     		ldr	r3, .L430+12
 7837 0766 C7F82C31 		str	r3, [r7, #300]
1470:src/modem.c   **** 		int numIPD = 0;
 7838              		.loc 1 1470 7
 7839 076a 0023     		movs	r3, #0
 7840 076c C7F87431 		str	r3, [r7, #372]
1471:src/modem.c   **** 		int k = 1;
 7841              		.loc 1 1471 7
 7842 0770 0123     		movs	r3, #1
 7843 0772 C7F87031 		str	r3, [r7, #368]
1472:src/modem.c   **** 
1473:src/modem.c   **** 		for (i = 0; i < 3; i++) {
 7844              		.loc 1 1473 10
 7845 0776 0023     		movs	r3, #0
 7846 0778 C7F8A431 		str	r3, [r7, #420]
 7847              		.loc 1 1473 3
 7848 077c 3EE0     		b	.L401
 7849              	.L406:
1474:src/modem.c   **** 			if (sio_buf[i] != header[i]) {
 7850              		.loc 1 1474 15
 7851 077e 884A     		ldr	r2, .L430+4
 7852 0780 D7F8A431 		ldr	r3, [r7, #420]
 7853 0784 1344     		add	r3, r3, r2
 7854 0786 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7855              		.loc 1 1474 28
 7856 0788 07F59671 		add	r1, r7, #300
 7857 078c D7F8A431 		ldr	r3, [r7, #420]
 7858 0790 0B44     		add	r3, r3, r1
 7859 0792 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7860              		.loc 1 1474 7
 7861 0794 9A42     		cmp	r2, r3
 7862 0796 2CD0     		beq	.L402
1475:src/modem.c   **** 				for (i = 0; i < 50; i++) {
 7863              		.loc 1 1475 12
 7864 0798 0023     		movs	r3, #0
 7865 079a C7F8A431 		str	r3, [r7, #420]
 7866              		.loc 1 1475 5
 7867 079e 24E0     		b	.L403
 7868              	.L405:
1476:src/modem.c   **** 					if ((sio_buf[i] == 'I') && (sio_buf[i + 1] == 'P')
 7869              		.loc 1 1476 18
 7870 07a0 7F4A     		ldr	r2, .L430+4
 7871 07a2 D7F8A431 		ldr	r3, [r7, #420]
 7872 07a6 1344     		add	r3, r3, r2
 7873 07a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7874              		.loc 1 1476 9
 7875 07aa 492B     		cmp	r3, #73
 7876 07ac 15D1     		bne	.L404
 7877              		.loc 1 1476 44 discriminator 1
 7878 07ae D7F8A431 		ldr	r3, [r7, #420]
 7879 07b2 0133     		adds	r3, r3, #1
 7880              		.loc 1 1476 41 discriminator 1
 7881 07b4 7A4A     		ldr	r2, .L430+4
 7882 07b6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7883              		.loc 1 1476 30 discriminator 1
 7884 07b8 502B     		cmp	r3, #80
 7885 07ba 0ED1     		bne	.L404
1477:src/modem.c   **** 							&& (sio_buf[i + 2] == 'D')) {
 7886              		.loc 1 1477 22
 7887 07bc D7F8A431 		ldr	r3, [r7, #420]
 7888 07c0 0233     		adds	r3, r3, #2
 7889              		.loc 1 1477 19
 7890 07c2 774A     		ldr	r2, .L430+4
 7891 07c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7892              		.loc 1 1477 8
 7893 07c6 442B     		cmp	r3, #68
 7894 07c8 07D1     		bne	.L404
1478:src/modem.c   **** 						numIPD = i;
 7895              		.loc 1 1478 14
 7896 07ca D7F8A431 		ldr	r3, [r7, #420]
 7897 07ce C7F87431 		str	r3, [r7, #372]
1479:src/modem.c   **** 						k = 1;
 7898              		.loc 1 1479 9
 7899 07d2 0123     		movs	r3, #1
 7900 07d4 C7F87031 		str	r3, [r7, #368]
1480:src/modem.c   **** 						break;
 7901              		.loc 1 1480 7
 7902 07d8 0BE0     		b	.L402
 7903              	.L404:
1481:src/modem.c   **** 					} else
1482:src/modem.c   **** 						k = 0;
 7904              		.loc 1 1482 9 discriminator 2
 7905 07da 0023     		movs	r3, #0
 7906 07dc C7F87031 		str	r3, [r7, #368]
1475:src/modem.c   **** 					if ((sio_buf[i] == 'I') && (sio_buf[i + 1] == 'P')
 7907              		.loc 1 1475 26 discriminator 2
 7908 07e0 D7F8A431 		ldr	r3, [r7, #420]
 7909 07e4 0133     		adds	r3, r3, #1
 7910 07e6 C7F8A431 		str	r3, [r7, #420]
 7911              	.L403:
1475:src/modem.c   **** 					if ((sio_buf[i] == 'I') && (sio_buf[i + 1] == 'P')
 7912              		.loc 1 1475 5 discriminator 1
 7913 07ea D7F8A431 		ldr	r3, [r7, #420]
 7914 07ee 312B     		cmp	r3, #49
 7915 07f0 D6DD     		ble	.L405
 7916              	.L402:
1473:src/modem.c   **** 			if (sio_buf[i] != header[i]) {
 7917              		.loc 1 1473 23 discriminator 2
 7918 07f2 D7F8A431 		ldr	r3, [r7, #420]
 7919 07f6 0133     		adds	r3, r3, #1
 7920 07f8 C7F8A431 		str	r3, [r7, #420]
 7921              	.L401:
1473:src/modem.c   **** 			if (sio_buf[i] != header[i]) {
 7922              		.loc 1 1473 3 discriminator 1
 7923 07fc D7F8A431 		ldr	r3, [r7, #420]
 7924 0800 022B     		cmp	r3, #2
 7925 0802 BCDD     		ble	.L406
1483:src/modem.c   **** 				}
1484:src/modem.c   **** 			}
1485:src/modem.c   **** 
1486:src/modem.c   **** 		};
1487:src/modem.c   **** 		if (k == 0)
 7926              		.loc 1 1487 6
 7927 0804 D7F87031 		ldr	r3, [r7, #368]
 7928 0808 002B     		cmp	r3, #0
 7929 080a 01D1     		bne	.L407
1488:src/modem.c   **** 			return 0;
 7930              		.loc 1 1488 11
 7931 080c 0023     		movs	r3, #0
 7932 080e FDE0     		b	.L346
 7933              	.L407:
1489:src/modem.c   **** 		if (numIPD != 0) {
 7934              		.loc 1 1489 6
 7935 0810 D7F87431 		ldr	r3, [r7, #372]
 7936 0814 002B     		cmp	r3, #0
 7937 0816 1CD0     		beq	.L409
1490:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7938              		.loc 1 1490 11
 7939 0818 0023     		movs	r3, #0
 7940 081a C7F8A431 		str	r3, [r7, #420]
 7941              		.loc 1 1490 4
 7942 081e 11E0     		b	.L410
 7943              	.L411:
1491:src/modem.c   **** 				sio_buf[i] = sio_buf[i + numIPD];
 7944              		.loc 1 1491 28 discriminator 3
 7945 0820 D7F8A421 		ldr	r2, [r7, #420]
 7946 0824 D7F87431 		ldr	r3, [r7, #372]
 7947 0828 1344     		add	r3, r3, r2
 7948              		.loc 1 1491 25 discriminator 3
 7949 082a 5D4A     		ldr	r2, .L430+4
 7950 082c D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 7951              		.loc 1 1491 16 discriminator 3
 7952 082e 5C4A     		ldr	r2, .L430+4
 7953 0830 D7F8A431 		ldr	r3, [r7, #420]
 7954 0834 1344     		add	r3, r3, r2
 7955 0836 0A46     		mov	r2, r1
 7956 0838 1A70     		strb	r2, [r3]
1490:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7957              		.loc 1 1490 34 discriminator 3
 7958 083a D7F8A431 		ldr	r3, [r7, #420]
 7959 083e 0133     		adds	r3, r3, #1
 7960 0840 C7F8A431 		str	r3, [r7, #420]
 7961              	.L410:
1490:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7962              		.loc 1 1490 18 discriminator 1
 7963 0844 D7F87431 		ldr	r3, [r7, #372]
 7964 0848 2733     		adds	r3, r3, #39
1490:src/modem.c   **** 			for (i = 0; i < numIPD + 40; i++)
 7965              		.loc 1 1490 4 discriminator 1
 7966 084a D7F8A421 		ldr	r2, [r7, #420]
 7967 084e 9A42     		cmp	r2, r3
 7968 0850 E6DD     		ble	.L411
 7969              	.L409:
1492:src/modem.c   **** 		}
1493:src/modem.c   **** 
1494:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 36);
 7970              		.loc 1 1494 3
 7971 0852 2421     		movs	r1, #36
 7972 0854 1C20     		movs	r0, #28
 7973 0856 554B     		ldr	r3, .L430+16
 7974 0858 9847     		blx	r3
 7975              	.LVL295:
1495:src/modem.c   **** 		char *cmpbuf = "IPD";
 7976              		.loc 1 1495 9
 7977 085a 554B     		ldr	r3, .L430+20
 7978 085c C7F85C31 		str	r3, [r7, #348]
1496:src/modem.c   **** 		char *strbufsize[16];
1497:src/modem.c   **** 		int cmpPoint = 0;
 7979              		.loc 1 1497 7
 7980 0860 0023     		movs	r3, #0
 7981 0862 C7F86C31 		str	r3, [r7, #364]
1498:src/modem.c   **** 		int strbufsizePoint = 0;
 7982              		.loc 1 1498 7
 7983 0866 0023     		movs	r3, #0
 7984 0868 C7F86831 		str	r3, [r7, #360]
1499:src/modem.c   **** 
1500:src/modem.c   **** 		headerSize = 0;
 7985              		.loc 1 1500 14
 7986 086c 0023     		movs	r3, #0
 7987 086e C7F8A031 		str	r3, [r7, #416]
1501:src/modem.c   **** 		while (sio_buf[headerSize] != ':') {
 7988              		.loc 1 1501 9
 7989 0872 2CE0     		b	.L412
 7990              	.L415:
1502:src/modem.c   **** 			if (cmpPoint < 3) {
 7991              		.loc 1 1502 7
 7992 0874 D7F86C31 		ldr	r3, [r7, #364]
 7993 0878 022B     		cmp	r3, #2
 7994 087a 12DC     		bgt	.L413
1503:src/modem.c   **** 				if (cmpbuf[cmpPoint] == sio_buf[headerSize]) {
 7995              		.loc 1 1503 15
 7996 087c D7F86C31 		ldr	r3, [r7, #364]
 7997 0880 D7F85C21 		ldr	r2, [r7, #348]
 7998 0884 1344     		add	r3, r3, r2
 7999 0886 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8000              		.loc 1 1503 36
 8001 0888 4549     		ldr	r1, .L430+4
 8002 088a D7F8A031 		ldr	r3, [r7, #416]
 8003 088e 0B44     		add	r3, r3, r1
 8004 0890 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8005              		.loc 1 1503 8
 8006 0892 9A42     		cmp	r2, r3
 8007 0894 16D1     		bne	.L414
1504:src/modem.c   **** 					cmpPoint++;
 8008              		.loc 1 1504 14
 8009 0896 D7F86C31 		ldr	r3, [r7, #364]
 8010 089a 0133     		adds	r3, r3, #1
 8011 089c C7F86C31 		str	r3, [r7, #364]
 8012 08a0 10E0     		b	.L414
 8013              	.L413:
1505:src/modem.c   **** 				}
1506:src/modem.c   **** 			} else {
1507:src/modem.c   **** 				strbufsize[strbufsizePoint++] = sio_buf[headerSize];
 8014              		.loc 1 1507 44
 8015 08a2 3F4A     		ldr	r2, .L430+4
 8016 08a4 D7F8A031 		ldr	r3, [r7, #416]
 8017 08a8 1344     		add	r3, r3, r2
 8018 08aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8019 08ac 1946     		mov	r1, r3
 8020              		.loc 1 1507 31
 8021 08ae D7F86831 		ldr	r3, [r7, #360]
 8022 08b2 5A1C     		adds	r2, r3, #1
 8023 08b4 C7F86821 		str	r2, [r7, #360]
 8024              		.loc 1 1507 35
 8025 08b8 07F5D472 		add	r2, r7, #424
 8026 08bc A2F5BE72 		sub	r2, r2, #380
 8027 08c0 42F82310 		str	r1, [r2, r3, lsl #2]
 8028              	.L414:
1508:src/modem.c   **** 			}
1509:src/modem.c   **** 			headerSize++;
 8029              		.loc 1 1509 14
 8030 08c4 D7F8A031 		ldr	r3, [r7, #416]
 8031 08c8 0133     		adds	r3, r3, #1
 8032 08ca C7F8A031 		str	r3, [r7, #416]
 8033              	.L412:
1501:src/modem.c   **** 			if (cmpPoint < 3) {
 8034              		.loc 1 1501 17
 8035 08ce 344A     		ldr	r2, .L430+4
 8036 08d0 D7F8A031 		ldr	r3, [r7, #416]
 8037 08d4 1344     		add	r3, r3, r2
 8038 08d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1501:src/modem.c   **** 			if (cmpPoint < 3) {
 8039              		.loc 1 1501 9
 8040 08d8 3A2B     		cmp	r3, #58
 8041 08da CBD1     		bne	.L415
1510:src/modem.c   **** 		}
1511:src/modem.c   **** 		int it = 0;
 8042              		.loc 1 1511 7
 8043 08dc 0023     		movs	r3, #0
 8044 08de C7F86431 		str	r3, [r7, #356]
1512:src/modem.c   **** 		int res = 0;
 8045              		.loc 1 1512 7
 8046 08e2 0023     		movs	r3, #0
 8047 08e4 C7F86031 		str	r3, [r7, #352]
1513:src/modem.c   **** 		while (strbufsize[it] >= '0' && strbufsize[it] <= '9') {
 8048              		.loc 1 1513 9
 8049 08e8 16E0     		b	.L416
 8050              	.L418:
1514:src/modem.c   **** 			res = res * 10 + strbufsize[it] - '0';
 8051              		.loc 1 1514 31
 8052 08ea 07F5D473 		add	r3, r7, #424
 8053 08ee A3F5BE73 		sub	r3, r3, #380
 8054 08f2 D7F86421 		ldr	r2, [r7, #356]
 8055 08f6 53F82210 		ldr	r1, [r3, r2, lsl #2]
 8056              		.loc 1 1514 14
 8057 08fa D7F86021 		ldr	r2, [r7, #352]
 8058 08fe 1346     		mov	r3, r2
 8059 0900 9B00     		lsls	r3, r3, #2
 8060 0902 1344     		add	r3, r3, r2
 8061 0904 5B00     		lsls	r3, r3, #1
 8062              		.loc 1 1514 36
 8063 0906 303B     		subs	r3, r3, #48
 8064 0908 0B44     		add	r3, r3, r1
 8065              		.loc 1 1514 8
 8066 090a C7F86031 		str	r3, [r7, #352]
1515:src/modem.c   **** 			it++;
 8067              		.loc 1 1515 6
 8068 090e D7F86431 		ldr	r3, [r7, #356]
 8069 0912 0133     		adds	r3, r3, #1
 8070 0914 C7F86431 		str	r3, [r7, #356]
 8071              	.L416:
1513:src/modem.c   **** 		while (strbufsize[it] >= '0' && strbufsize[it] <= '9') {
 8072              		.loc 1 1513 20
 8073 0918 07F5D473 		add	r3, r7, #424
 8074 091c A3F5BE73 		sub	r3, r3, #380
 8075 0920 D7F86421 		ldr	r2, [r7, #356]
 8076 0924 53F82230 		ldr	r3, [r3, r2, lsl #2]
1513:src/modem.c   **** 		while (strbufsize[it] >= '0' && strbufsize[it] <= '9') {
 8077              		.loc 1 1513 9
 8078 0928 2F2B     		cmp	r3, #47
 8079 092a 09D9     		bls	.L417
1513:src/modem.c   **** 		while (strbufsize[it] >= '0' && strbufsize[it] <= '9') {
 8080              		.loc 1 1513 45 discriminator 1
 8081 092c 07F5D473 		add	r3, r7, #424
 8082 0930 A3F5BE73 		sub	r3, r3, #380
 8083 0934 D7F86421 		ldr	r2, [r7, #356]
 8084 0938 53F82230 		ldr	r3, [r3, r2, lsl #2]
1513:src/modem.c   **** 		while (strbufsize[it] >= '0' && strbufsize[it] <= '9') {
 8085              		.loc 1 1513 32 discriminator 1
 8086 093c 392B     		cmp	r3, #57
 8087 093e D4D9     		bls	.L418
 8088              	.L417:
1516:src/modem.c   **** 		}
1517:src/modem.c   **** 
1518:src/modem.c   **** 		packSize = res;
 8089              		.loc 1 1518 12
 8090 0940 D7F86031 		ldr	r3, [r7, #352]
 8091 0944 C7F85831 		str	r3, [r7, #344]
1519:src/modem.c   **** 
1520:src/modem.c   **** 		headerSize++;
 8092              		.loc 1 1520 13
 8093 0948 D7F8A031 		ldr	r3, [r7, #416]
 8094 094c 0133     		adds	r3, r3, #1
 8095 094e C7F8A031 		str	r3, [r7, #416]
1521:src/modem.c   **** 		while (bufsize < (packSize + headerSize)) {
 8096              		.loc 1 1521 9
 8097 0952 00BF     		nop
 8098              		.loc 1 1521 18
 8099 0954 114B     		ldr	r3, .L430
 8100 0956 1B88     		ldrh	r3, [r3]	@ movhi
 8101 0958 9BB2     		uxth	r3, r3
 8102 095a 1946     		mov	r1, r3
 8103              		.loc 1 1521 30
 8104 095c D7F85821 		ldr	r2, [r7, #344]
 8105 0960 D7F8A031 		ldr	r3, [r7, #416]
 8106 0964 1344     		add	r3, r3, r2
 8107              		.loc 1 1521 9
 8108 0966 9942     		cmp	r1, r3
1522:src/modem.c   **** 
1523:src/modem.c   **** 			break;
1524:src/modem.c   **** 			int tmpsize;
1525:src/modem.c   **** 			FillBufEx((uint8*) (&sio_buf[bufsize]), tmpsize);
1526:src/modem.c   **** 			//********************************************************
1527:src/modem.c   **** 
1528:src/modem.c   **** 			if (tmpsize == 0) {
1529:src/modem.c   **** 				break;
1530:src/modem.c   **** 			}
1531:src/modem.c   **** 			bufsize += tmpsize;
1532:src/modem.c   **** 		}
1533:src/modem.c   **** 		i = 0;
 8109              		.loc 1 1533 5
 8110 0968 0023     		movs	r3, #0
 8111 096a C7F8A431 		str	r3, [r7, #420]
1534:src/modem.c   **** 
1535:src/modem.c   **** 		bufsize -= headerSize;
 8112              		.loc 1 1535 11
 8113 096e 0B4B     		ldr	r3, .L430
 8114 0970 1B88     		ldrh	r3, [r3]	@ movhi
 8115 0972 9AB2     		uxth	r2, r3
 8116 0974 D7F8A031 		ldr	r3, [r7, #416]
 8117 0978 9BB2     		uxth	r3, r3
 8118 097a D31A     		subs	r3, r2, r3
 8119 097c 9AB2     		uxth	r2, r3
 8120 097e 074B     		ldr	r3, .L430
 8121 0980 1A80     		strh	r2, [r3]	@ movhi
1536:src/modem.c   **** 
1537:src/modem.c   **** 		while (bufsize) {
 8122              		.loc 1 1537 9
 8123 0982 3BE0     		b	.L422
 8124              	.L424:
1538:src/modem.c   **** 			if (i >= maxsize) {
 8125              		.loc 1 1538 7
 8126 0984 07F5D473 		add	r3, r7, #424
 8127 0988 A3F5D473 		sub	r3, r3, #424
 8128 098c D7F8A421 		ldr	r2, [r7, #420]
 8129 0990 1B68     		ldr	r3, [r3]
 8130 0992 9A42     		cmp	r2, r3
 8131 0994 0EDB     		blt	.L423
1539:src/modem.c   **** 				return 0;
 8132              		.loc 1 1539 12
 8133 0996 0023     		movs	r3, #0
 8134 0998 38E0     		b	.L346
 8135              	.L431:
 8136 099a 00BF     		.align	2
 8137              	.L430:
 8138 099c 00000000 		.word	bufsize
 8139 09a0 00000000 		.word	sio_buf
 8140 09a4 00000000 		.word	DeviceID
 8141 09a8 49504400 		.word	4477001
 8142 09ac 00000000 		.word	BKP_WriteBackupRegister
 8143 09b0 B0030000 		.word	.LC63
 8144              	.L423:
1540:src/modem.c   **** 			}
1541:src/modem.c   **** 			*buf = sio_buf[i + headerSize];
 8145              		.loc 1 1541 21
 8146 09b4 D7F8A421 		ldr	r2, [r7, #420]
 8147 09b8 D7F8A031 		ldr	r3, [r7, #416]
 8148 09bc 1344     		add	r3, r3, r2
 8149              		.loc 1 1541 18
 8150 09be 164A     		ldr	r2, .L432
 8151 09c0 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8152              		.loc 1 1541 9
 8153 09c2 07F5D473 		add	r3, r7, #424
 8154 09c6 A3F5D273 		sub	r3, r3, #420
 8155 09ca 1B68     		ldr	r3, [r3]
 8156 09cc 1A70     		strb	r2, [r3]
1542:src/modem.c   **** 			buf++;
 8157              		.loc 1 1542 7
 8158 09ce 07F5D473 		add	r3, r7, #424
 8159 09d2 A3F5D273 		sub	r3, r3, #420
 8160 09d6 07F5D472 		add	r2, r7, #424
 8161 09da A2F5D272 		sub	r2, r2, #420
 8162 09de 1268     		ldr	r2, [r2]
 8163 09e0 0132     		adds	r2, r2, #1
 8164 09e2 1A60     		str	r2, [r3]
1543:src/modem.c   **** 			i++;
 8165              		.loc 1 1543 5
 8166 09e4 D7F8A431 		ldr	r3, [r7, #420]
 8167 09e8 0133     		adds	r3, r3, #1
 8168 09ea C7F8A431 		str	r3, [r7, #420]
1544:src/modem.c   **** 			bufsize--;
 8169              		.loc 1 1544 11
 8170 09ee 0B4B     		ldr	r3, .L432+4
 8171 09f0 1B88     		ldrh	r3, [r3]	@ movhi
 8172 09f2 9BB2     		uxth	r3, r3
 8173 09f4 013B     		subs	r3, r3, #1
 8174 09f6 9AB2     		uxth	r2, r3
 8175 09f8 084B     		ldr	r3, .L432+4
 8176 09fa 1A80     		strh	r2, [r3]	@ movhi
 8177              	.L422:
1537:src/modem.c   **** 			if (i >= maxsize) {
 8178              		.loc 1 1537 10
 8179 09fc 074B     		ldr	r3, .L432+4
 8180 09fe 1B88     		ldrh	r3, [r3]	@ movhi
 8181 0a00 9BB2     		uxth	r3, r3
1537:src/modem.c   **** 			if (i >= maxsize) {
 8182              		.loc 1 1537 9
 8183 0a02 002B     		cmp	r3, #0
 8184 0a04 BED1     		bne	.L424
1545:src/modem.c   **** 		}
1546:src/modem.c   **** 
1547:src/modem.c   **** 		return packSize;
 8185              		.loc 1 1547 10
 8186 0a06 D7F85831 		ldr	r3, [r7, #344]
 8187 0a0a FFE7     		b	.L346
 8188              	.L400:
 8189              	.L346:
 8190              	.LBE24:
1548:src/modem.c   **** 	}
1549:src/modem.c   **** 
1550:src/modem.c   **** }
 8191              		.loc 1 1550 1
 8192 0a0c 1846     		mov	r0, r3
 8193 0a0e 07F5D477 		add	r7, r7, #424
 8194              	.LCFI133:
 8195              		.cfi_def_cfa_offset 8
 8196 0a12 BD46     		mov	sp, r7
 8197              	.LCFI134:
 8198              		.cfi_def_cfa_register 13
 8199              		@ sp needed
 8200 0a14 80BD     		pop	{r7, pc}
 8201              	.L433:
 8202 0a16 00BF     		.align	2
 8203              	.L432:
 8204 0a18 00000000 		.word	sio_buf
 8205 0a1c 00000000 		.word	bufsize
 8206              		.cfi_endproc
 8207              	.LFE60:
 8209              		.section	.rodata
 8210              		.align	2
 8211              	.LC64:
 8212 03b4 41542B51 		.ascii	"AT+QISEND=\000"
 8212      4953454E 
 8212      443D00
 8213 03bf 00       		.align	2
 8214              	.LC65:
 8215 03c0 2C00     		.ascii	",\000"
 8216 03c2 0000     		.align	2
 8217              	.LC66:
 8218 03c4 0D0A3E00 		.ascii	"\015\012>\000"
 8219              		.align	2
 8220              	.LC67:
 8221 03c8 41542B54 		.ascii	"AT+TCPSENDS=\000"
 8221      43505345 
 8221      4E44533D 
 8221      00
 8222 03d5 000000   		.align	2
 8223              	.LC68:
 8224 03d8 0D00     		.ascii	"\015\000"
 8225              		.section	.text.ModemSendData,"ax",%progbits
 8226              		.align	1
 8227              		.global	ModemSendData
 8228              		.syntax unified
 8229              		.thumb
 8230              		.thumb_func
 8232              	ModemSendData:
 8233              	.LFB61:
1551:src/modem.c   **** 
1552:src/modem.c   **** //=========================================================================+QILOCIP
1553:src/modem.c   **** void ModemSendData(uint8 *buf, uint8 size, int IDserv) {
 8234              		.loc 1 1553 56
 8235              		.cfi_startproc
 8236              		@ args = 0, pretend = 0, frame = 72
 8237              		@ frame_needed = 1, uses_anonymous_args = 0
 8238 0000 90B5     		push	{r4, r7, lr}
 8239              	.LCFI135:
 8240              		.cfi_def_cfa_offset 12
 8241              		.cfi_offset 4, -12
 8242              		.cfi_offset 7, -8
 8243              		.cfi_offset 14, -4
 8244 0002 93B0     		sub	sp, sp, #76
 8245              	.LCFI136:
 8246              		.cfi_def_cfa_offset 88
 8247 0004 00AF     		add	r7, sp, #0
 8248              	.LCFI137:
 8249              		.cfi_def_cfa_register 7
 8250 0006 F860     		str	r0, [r7, #12]
 8251 0008 0B46     		mov	r3, r1
 8252 000a 7A60     		str	r2, [r7, #4]
 8253 000c FB72     		strb	r3, [r7, #11]
1554:src/modem.c   **** 	BKP_WriteBackupRegister(BKP_DR7, 37);
 8254              		.loc 1 1554 2
 8255 000e 2521     		movs	r1, #37
 8256 0010 1C20     		movs	r0, #28
 8257 0012 7E4B     		ldr	r3, .L442
 8258 0014 9847     		blx	r3
 8259              	.LVL296:
1555:src/modem.c   **** 	char *tempbuf[6];
1556:src/modem.c   **** 	char tempbuf1[2];
1557:src/modem.c   **** 	char tempbuf2[4];
1558:src/modem.c   **** 	char strCipsend[20];
1559:src/modem.c   **** 
1560:src/modem.c   **** 	//-------------UC15-----------------------
1561:src/modem.c   **** 	//-------------UC20-----------------------
1562:src/modem.c   **** 	if ((DeviceID == 1) || (DeviceID == 3))
 8260              		.loc 1 1562 16
 8261 0016 7E4B     		ldr	r3, .L442+4
 8262 0018 1B68     		ldr	r3, [r3]
 8263              		.loc 1 1562 5
 8264 001a 012B     		cmp	r3, #1
 8265 001c 03D0     		beq	.L435
 8266              		.loc 1 1562 35 discriminator 1
 8267 001e 7C4B     		ldr	r3, .L442+4
 8268 0020 1B68     		ldr	r3, [r3]
 8269              		.loc 1 1562 22 discriminator 1
 8270 0022 032B     		cmp	r3, #3
 8271 0024 4FD1     		bne	.L436
 8272              	.L435:
1563:src/modem.c   **** 
1564:src/modem.c   **** 	{
1565:src/modem.c   **** 		strcpy(strCipsend, "AT+QISEND=");
 8273              		.loc 1 1565 3
 8274 0026 07F11403 		add	r3, r7, #20
 8275 002a 7A4A     		ldr	r2, .L442+8
 8276 002c 07CA     		ldm	r2, {r0, r1, r2}
 8277 002e 03C3     		stmia	r3!, {r0, r1}
 8278 0030 1A80     		strh	r2, [r3]	@ movhi
 8279 0032 0233     		adds	r3, r3, #2
 8280 0034 120C     		lsrs	r2, r2, #16
 8281 0036 1A70     		strb	r2, [r3]
1566:src/modem.c   **** 		itoa1(IDserv, tempbuf1);
 8282              		.loc 1 1566 3
 8283 0038 07F12C03 		add	r3, r7, #44
 8284 003c 1946     		mov	r1, r3
 8285 003e 7868     		ldr	r0, [r7, #4]
 8286 0040 754B     		ldr	r3, .L442+12
 8287 0042 9847     		blx	r3
 8288              	.LVL297:
1567:src/modem.c   **** 		itoa1(size, tempbuf2);
 8289              		.loc 1 1567 3
 8290 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 8291 0046 07F12802 		add	r2, r7, #40
 8292 004a 1146     		mov	r1, r2
 8293 004c 1846     		mov	r0, r3
 8294 004e 724B     		ldr	r3, .L442+12
 8295 0050 9847     		blx	r3
 8296              	.LVL298:
1568:src/modem.c   **** 		strcat(strCipsend, tempbuf1);
 8297              		.loc 1 1568 3
 8298 0052 07F12C02 		add	r2, r7, #44
 8299 0056 07F11403 		add	r3, r7, #20
 8300 005a 1146     		mov	r1, r2
 8301 005c 1846     		mov	r0, r3
 8302 005e 6F4B     		ldr	r3, .L442+16
 8303 0060 9847     		blx	r3
 8304              	.LVL299:
1569:src/modem.c   **** 		strcat(strCipsend, ",");
 8305              		.loc 1 1569 3
 8306 0062 07F11403 		add	r3, r7, #20
 8307 0066 1846     		mov	r0, r3
 8308 0068 6D4B     		ldr	r3, .L442+20
 8309 006a 9847     		blx	r3
 8310              	.LVL300:
 8311 006c 0346     		mov	r3, r0
 8312 006e 1A46     		mov	r2, r3
 8313 0070 07F11403 		add	r3, r7, #20
 8314 0074 1344     		add	r3, r3, r2
 8315 0076 6B49     		ldr	r1, .L442+24
 8316 0078 1A46     		mov	r2, r3
 8317 007a 0B46     		mov	r3, r1
 8318 007c 1B88     		ldrh	r3, [r3]	@ unaligned
 8319 007e 1380     		strh	r3, [r2]	@ unaligned
1570:src/modem.c   **** 		strcat(strCipsend, tempbuf2);
 8320              		.loc 1 1570 3
 8321 0080 07F12802 		add	r2, r7, #40
 8322 0084 07F11403 		add	r3, r7, #20
 8323 0088 1146     		mov	r1, r2
 8324 008a 1846     		mov	r0, r3
 8325 008c 634B     		ldr	r3, .L442+16
 8326 008e 9847     		blx	r3
 8327              	.LVL301:
1571:src/modem.c   **** 		strcat(strCipsend, "\r\n>");
 8328              		.loc 1 1571 3
 8329 0090 07F11403 		add	r3, r7, #20
 8330 0094 1846     		mov	r0, r3
 8331 0096 624B     		ldr	r3, .L442+20
 8332 0098 9847     		blx	r3
 8333              	.LVL302:
 8334 009a 0346     		mov	r3, r0
 8335 009c 1A46     		mov	r2, r3
 8336 009e 07F11403 		add	r3, r7, #20
 8337 00a2 1344     		add	r3, r3, r2
 8338 00a4 604A     		ldr	r2, .L442+28
 8339 00a6 1068     		ldr	r0, [r2]
 8340 00a8 1860     		str	r0, [r3]	@ unaligned
1572:src/modem.c   **** 		ModemWrite(strCipsend);
 8341              		.loc 1 1572 3
 8342 00aa 07F11403 		add	r3, r7, #20
 8343 00ae 1846     		mov	r0, r3
 8344 00b0 5E4B     		ldr	r3, .L442+32
 8345 00b2 9847     		blx	r3
 8346              	.LVL303:
1573:src/modem.c   **** 		vTaskDelay(10);
 8347              		.loc 1 1573 3
 8348 00b4 0A20     		movs	r0, #10
 8349 00b6 5E4B     		ldr	r3, .L442+36
 8350 00b8 9847     		blx	r3
 8351              	.LVL304:
1574:src/modem.c   **** 		//BKP_WriteBackupRegister(BKP_DR7, 38);
1575:src/modem.c   **** 		uart2Write(buf, size);
 8352              		.loc 1 1575 3
 8353 00ba FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 8354 00bc 1946     		mov	r1, r3
 8355 00be F868     		ldr	r0, [r7, #12]
 8356 00c0 5C4B     		ldr	r3, .L442+40
 8357 00c2 9847     		blx	r3
 8358              	.LVL305:
 8359 00c4 9FE0     		b	.L434
 8360              	.L436:
1576:src/modem.c   **** 		//uart2Write(buf, size);
1577:src/modem.c   **** 	}
1578:src/modem.c   **** 	//-------------N715-----------------------
1579:src/modem.c   **** 	else if (DeviceID == 4) {
 8361              		.loc 1 1579 20
 8362 00c6 524B     		ldr	r3, .L442+4
 8363 00c8 1B68     		ldr	r3, [r3]
 8364              		.loc 1 1579 10
 8365 00ca 042B     		cmp	r3, #4
 8366 00cc 5DD1     		bne	.L438
1580:src/modem.c   **** 		//	ModemWrite("\r\n");
1581:src/modem.c   **** 		strcpy(strCipsend, "AT+TCPSENDS=");
 8367              		.loc 1 1581 3
 8368 00ce 07F11403 		add	r3, r7, #20
 8369 00d2 594A     		ldr	r2, .L442+44
 8370 00d4 1C46     		mov	r4, r3
 8371 00d6 1346     		mov	r3, r2
 8372 00d8 0FCB     		ldm	r3, {r0, r1, r2, r3}
 8373 00da 07C4     		stmia	r4!, {r0, r1, r2}
 8374 00dc 2370     		strb	r3, [r4]
1582:src/modem.c   **** 		itoa1(numRD, tempbuf1);
 8375              		.loc 1 1582 3
 8376 00de 574B     		ldr	r3, .L442+48
 8377 00e0 1B68     		ldr	r3, [r3]
 8378 00e2 07F12C02 		add	r2, r7, #44
 8379 00e6 1146     		mov	r1, r2
 8380 00e8 1846     		mov	r0, r3
 8381 00ea 4B4B     		ldr	r3, .L442+12
 8382 00ec 9847     		blx	r3
 8383              	.LVL306:
1583:src/modem.c   **** 		itoa1(size, tempbuf2);
 8384              		.loc 1 1583 3
 8385 00ee FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 8386 00f0 07F12802 		add	r2, r7, #40
 8387 00f4 1146     		mov	r1, r2
 8388 00f6 1846     		mov	r0, r3
 8389 00f8 474B     		ldr	r3, .L442+12
 8390 00fa 9847     		blx	r3
 8391              	.LVL307:
1584:src/modem.c   **** 		strcat(strCipsend, tempbuf1);
 8392              		.loc 1 1584 3
 8393 00fc 07F12C02 		add	r2, r7, #44
 8394 0100 07F11403 		add	r3, r7, #20
 8395 0104 1146     		mov	r1, r2
 8396 0106 1846     		mov	r0, r3
 8397 0108 444B     		ldr	r3, .L442+16
 8398 010a 9847     		blx	r3
 8399              	.LVL308:
1585:src/modem.c   **** 		strcat(strCipsend, ",");
 8400              		.loc 1 1585 3
 8401 010c 07F11403 		add	r3, r7, #20
 8402 0110 1846     		mov	r0, r3
 8403 0112 434B     		ldr	r3, .L442+20
 8404 0114 9847     		blx	r3
 8405              	.LVL309:
 8406 0116 0346     		mov	r3, r0
 8407 0118 1A46     		mov	r2, r3
 8408 011a 07F11403 		add	r3, r7, #20
 8409 011e 1344     		add	r3, r3, r2
 8410 0120 4049     		ldr	r1, .L442+24
 8411 0122 1A46     		mov	r2, r3
 8412 0124 0B46     		mov	r3, r1
 8413 0126 1B88     		ldrh	r3, [r3]	@ unaligned
 8414 0128 1380     		strh	r3, [r2]	@ unaligned
1586:src/modem.c   **** 		strcat(strCipsend, tempbuf2);
 8415              		.loc 1 1586 3
 8416 012a 07F12802 		add	r2, r7, #40
 8417 012e 07F11403 		add	r3, r7, #20
 8418 0132 1146     		mov	r1, r2
 8419 0134 1846     		mov	r0, r3
 8420 0136 394B     		ldr	r3, .L442+16
 8421 0138 9847     		blx	r3
 8422              	.LVL310:
1587:src/modem.c   **** 		strcat(strCipsend, "\r\n");
 8423              		.loc 1 1587 3
 8424 013a 07F11403 		add	r3, r7, #20
 8425 013e 1846     		mov	r0, r3
 8426 0140 374B     		ldr	r3, .L442+20
 8427 0142 9847     		blx	r3
 8428              	.LVL311:
 8429 0144 0346     		mov	r3, r0
 8430 0146 1A46     		mov	r2, r3
 8431 0148 07F11403 		add	r3, r7, #20
 8432 014c 1344     		add	r3, r3, r2
 8433 014e 3C4A     		ldr	r2, .L442+52
 8434 0150 1188     		ldrh	r1, [r2]	@ unaligned
 8435 0152 9278     		ldrb	r2, [r2, #2]
 8436 0154 1980     		strh	r1, [r3]	@ unaligned
 8437 0156 9A70     		strb	r2, [r3, #2]
1588:src/modem.c   **** 		ModemWrite(strCipsend);
 8438              		.loc 1 1588 3
 8439 0158 07F11403 		add	r3, r7, #20
 8440 015c 1846     		mov	r0, r3
 8441 015e 334B     		ldr	r3, .L442+32
 8442 0160 9847     		blx	r3
 8443              	.LVL312:
1589:src/modem.c   **** 		if (WaitAnsver(MA_CIPSENDREADY, 2) == false)
 8444              		.loc 1 1589 7
 8445 0162 0221     		movs	r1, #2
 8446 0164 0A20     		movs	r0, #10
 8447 0166 374B     		ldr	r3, .L442+56
 8448 0168 9847     		blx	r3
 8449              	.LVL313:
 8450 016a 0346     		mov	r3, r0
 8451              		.loc 1 1589 38
 8452 016c 83F00103 		eor	r3, r3, #1
 8453 0170 DBB2     		uxtb	r3, r3
 8454              		.loc 1 1589 6
 8455 0172 002B     		cmp	r3, #0
 8456 0174 46D1     		bne	.L441
1590:src/modem.c   **** 			return;
1591:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 38);
 8457              		.loc 1 1591 3
 8458 0176 2621     		movs	r1, #38
 8459 0178 1C20     		movs	r0, #28
 8460 017a 244B     		ldr	r3, .L442
 8461 017c 9847     		blx	r3
 8462              	.LVL314:
1592:src/modem.c   **** 		uart2Write(buf, size);
 8463              		.loc 1 1592 3
 8464 017e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 8465 0180 1946     		mov	r1, r3
 8466 0182 F868     		ldr	r0, [r7, #12]
 8467 0184 2B4B     		ldr	r3, .L442+40
 8468 0186 9847     		blx	r3
 8469              	.LVL315:
 8470 0188 3DE0     		b	.L434
 8471              	.L438:
1593:src/modem.c   **** 		//	uart2Write("\n", 1);
1594:src/modem.c   **** 		//-------------M66-----------------------
1595:src/modem.c   **** 	} else if (DeviceID == 2) {
 8472              		.loc 1 1595 22
 8473 018a 214B     		ldr	r3, .L442+4
 8474 018c 1B68     		ldr	r3, [r3]
 8475              		.loc 1 1595 12
 8476 018e 022B     		cmp	r3, #2
 8477 0190 39D1     		bne	.L434
1596:src/modem.c   **** 		strcpy(strCipsend, "AT+QISEND=");
 8478              		.loc 1 1596 3
 8479 0192 07F11403 		add	r3, r7, #20
 8480 0196 1F4A     		ldr	r2, .L442+8
 8481 0198 07CA     		ldm	r2, {r0, r1, r2}
 8482 019a 03C3     		stmia	r3!, {r0, r1}
 8483 019c 1A80     		strh	r2, [r3]	@ movhi
 8484 019e 0233     		adds	r3, r3, #2
 8485 01a0 120C     		lsrs	r2, r2, #16
 8486 01a2 1A70     		strb	r2, [r3]
1597:src/modem.c   **** 		itoa1(size, tempbuf);
 8487              		.loc 1 1597 3
 8488 01a4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 8489 01a6 07F13002 		add	r2, r7, #48
 8490 01aa 1146     		mov	r1, r2
 8491 01ac 1846     		mov	r0, r3
 8492 01ae 1A4B     		ldr	r3, .L442+12
 8493 01b0 9847     		blx	r3
 8494              	.LVL316:
1598:src/modem.c   **** 		strcat(strCipsend, tempbuf);
 8495              		.loc 1 1598 3
 8496 01b2 07F13002 		add	r2, r7, #48
 8497 01b6 07F11403 		add	r3, r7, #20
 8498 01ba 1146     		mov	r1, r2
 8499 01bc 1846     		mov	r0, r3
 8500 01be 174B     		ldr	r3, .L442+16
 8501 01c0 9847     		blx	r3
 8502              	.LVL317:
1599:src/modem.c   **** 		strcat(strCipsend, "\r");
 8503              		.loc 1 1599 3
 8504 01c2 07F11403 		add	r3, r7, #20
 8505 01c6 1846     		mov	r0, r3
 8506 01c8 154B     		ldr	r3, .L442+20
 8507 01ca 9847     		blx	r3
 8508              	.LVL318:
 8509 01cc 0346     		mov	r3, r0
 8510 01ce 1A46     		mov	r2, r3
 8511 01d0 07F11403 		add	r3, r7, #20
 8512 01d4 1344     		add	r3, r3, r2
 8513 01d6 1C49     		ldr	r1, .L442+60
 8514 01d8 1A46     		mov	r2, r3
 8515 01da 0B46     		mov	r3, r1
 8516 01dc 1B88     		ldrh	r3, [r3]	@ unaligned
 8517 01de 1380     		strh	r3, [r2]	@ unaligned
1600:src/modem.c   **** 		ModemWrite(strCipsend);
 8518              		.loc 1 1600 3
 8519 01e0 07F11403 		add	r3, r7, #20
 8520 01e4 1846     		mov	r0, r3
 8521 01e6 114B     		ldr	r3, .L442+32
 8522 01e8 9847     		blx	r3
 8523              	.LVL319:
1601:src/modem.c   **** 		vTaskDelay(50);
 8524              		.loc 1 1601 3
 8525 01ea 3220     		movs	r0, #50
 8526 01ec 104B     		ldr	r3, .L442+36
 8527 01ee 9847     		blx	r3
 8528              	.LVL320:
1602:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 38);
 8529              		.loc 1 1602 3
 8530 01f0 2621     		movs	r1, #38
 8531 01f2 1C20     		movs	r0, #28
 8532 01f4 054B     		ldr	r3, .L442
 8533 01f6 9847     		blx	r3
 8534              	.LVL321:
1603:src/modem.c   **** 		uart2Write(buf, size);
 8535              		.loc 1 1603 3
 8536 01f8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 8537 01fa 1946     		mov	r1, r3
 8538 01fc F868     		ldr	r0, [r7, #12]
 8539 01fe 0D4B     		ldr	r3, .L442+40
 8540 0200 9847     		blx	r3
 8541              	.LVL322:
 8542 0202 00E0     		b	.L434
 8543              	.L441:
1590:src/modem.c   **** 		BKP_WriteBackupRegister(BKP_DR7, 38);
 8544              		.loc 1 1590 4
 8545 0204 00BF     		nop
 8546              	.L434:
1604:src/modem.c   **** 	}
1605:src/modem.c   **** 
1606:src/modem.c   **** }
 8547              		.loc 1 1606 1
 8548 0206 4C37     		adds	r7, r7, #76
 8549              	.LCFI138:
 8550              		.cfi_def_cfa_offset 12
 8551 0208 BD46     		mov	sp, r7
 8552              	.LCFI139:
 8553              		.cfi_def_cfa_register 13
 8554              		@ sp needed
 8555 020a 90BD     		pop	{r4, r7, pc}
 8556              	.L443:
 8557              		.align	2
 8558              	.L442:
 8559 020c 00000000 		.word	BKP_WriteBackupRegister
 8560 0210 00000000 		.word	DeviceID
 8561 0214 B4030000 		.word	.LC64
 8562 0218 00000000 		.word	itoa1
 8563 021c 00000000 		.word	strcat
 8564 0220 00000000 		.word	strlen
 8565 0224 C0030000 		.word	.LC65
 8566 0228 C4030000 		.word	.LC66
 8567 022c 00000000 		.word	ModemWrite
 8568 0230 00000000 		.word	vTaskDelay
 8569 0234 00000000 		.word	uart2Write
 8570 0238 C8030000 		.word	.LC67
 8571 023c 00000000 		.word	numRD
 8572 0240 6C010000 		.word	.LC24
 8573 0244 00000000 		.word	WaitAnsver
 8574 0248 D8030000 		.word	.LC68
 8575              		.cfi_endproc
 8576              	.LFE61:
 8578              		.text
 8579              	.Letext0:
 8580              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 8581              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 8582              		.file 4 "common/lib.stm32/CMSIS/Core/CM3/stm32f10x.h"
 8583              		.file 5 "common/rtos/common/utils/typedef.h"
 8584              		.file 6 "src/modem.h"
 8585              		.file 7 "./board.h"
 8586              		.file 8 "src/usart2.h"
 8587              		.file 9 "src/usermemory.h"
 8588              		.file 10 "./tasks/led.h"
 8589              		.file 11 "common/rtos/common/driver/rtclock.h"
 8590              		.file 12 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
 8591              		.file 13 "src/journal.h"
 8592              		.file 14 "<built-in>"
 8593              		.file 15 "common/rtos/include/task.h"
 8594              		.file 16 "common/rtos/include/portable.h"
 8595              		.file 17 "common/lib.stm32/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 modem.c
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:22     .bss.GprsIdleMSec:00000000 GprsIdleMSec
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:19     .bss.GprsIdleMSec:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:29     .bss.sio_buf:00000000 sio_buf
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:26     .bss.sio_buf:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:36     .bss.sio_buf2:00000000 sio_buf2
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:33     .bss.sio_buf2:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:43     .bss.sio_buf3:00000000 sio_buf3
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:40     .bss.sio_buf3:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:50     .bss.sio_buf4:00000000 sio_buf4
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:47     .bss.sio_buf4:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:57     .bss.sio_fifo:00000000 sio_fifo
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:54     .bss.sio_fifo:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:64     .bss.bufpoint:00000000 bufpoint
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:61     .bss.bufpoint:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:71     .bss.bufsize:00000000 bufsize
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:68     .bss.bufsize:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:78     .bss.bufsize2:00000000 bufsize2
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:75     .bss.bufsize2:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:85     .bss.bufsize3:00000000 bufsize3
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:82     .bss.bufsize3:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:92     .bss.bufsize4:00000000 bufsize4
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:89     .bss.bufsize4:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:99     .bss.numRD:00000000 numRD
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:96     .bss.numRD:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:106    .bss.i_OPEN:00000000 i_OPEN
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:103    .bss.i_OPEN:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:113    .bss.i_Select:00000000 i_Select
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:110    .bss.i_Select:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:119    .bss.LedNoModem_Journal:00000000 LedNoModem_Journal
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:120    .bss.LedNoModem_Journal:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:125    .bss.LedSIM_Journal:00000000 LedSIM_Journal
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:126    .bss.LedSIM_Journal:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:131    .bss.LedAPN_Journal:00000000 LedAPN_Journal
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:132    .bss.LedAPN_Journal:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:138    .bss.flag_first:00000000 flag_first
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:135    .bss.flag_first:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:145    .bss.strbuf:00000000 strbuf
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:142    .bss.strbuf:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:189    .rodata.atset:00000000 atset
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:149    .rodata:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:186    .rodata.atset:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:227    .text.IsLiteral:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:233    .text.IsLiteral:00000000 IsLiteral
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:286    .text.InitSioBuf:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:292    .text.InitSioBuf:00000000 InitSioBuf
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:328    .text.InitSioBuf:00000018 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:334    .text.PopFromBuf:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:340    .text.PopFromBuf:00000000 PopFromBuf
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:406    .text.PopFromBuf:00000040 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:413    .text.FillBufEx:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:419    .text.FillBufEx:00000000 FillBufEx
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:544    .text.FillBufEx:00000094 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:551    .text.FillBuf:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:557    .text.FillBuf:00000000 FillBuf
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:679    .text.FillBuf:00000090 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:688    .text.ReadString:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:694    .text.ReadString:00000000 ReadString
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:813    .text.ReadString:0000008c $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:822    .text.GetModemAnswer:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:828    .text.GetModemAnswer:00000000 GetModemAnswer
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:909    .text.GetModemAnswer:00000054 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:915    .text.ReadModem:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:921    .text.ReadModem:00000000 ReadModem
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:965    .text.ReadModem:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:972    .text.ModemWrite:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:978    .text.ModemWrite:00000000 ModemWrite
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1048   .text.ModemWrite:00000040 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1053   .text.WaitAnsver:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1059   .text.WaitAnsver:00000000 WaitAnsver
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1121   .text.WaitAnsver:00000038 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1130   .text.WaitCallReady:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1136   .text.WaitCallReady:00000000 WaitCallReady
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1206   .text.WaitCallReady:0000003c $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1218   .text.WaitOk:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1224   .text.WaitOk:00000000 WaitOk
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1261   .text.WaitOk:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1273   .text.WaitAtd:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1279   .text.WaitAtd:00000000 WaitAtd
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1316   .text.WaitAtd:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1324   .text.WaitAtd1:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1330   .text.WaitAtd1:00000000 WaitAtd1
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1367   .text.WaitAtd1:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1379   .text.WaitAte:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1385   .text.WaitAte:00000000 WaitAte
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1422   .text.WaitAte:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1434   .text.CSQ:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1440   .text.CSQ:00000000 CSQ
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1620   .text.CSQ:000000d0 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1636   .text.GSM_clock:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:1642   .text.GSM_clock:00000000 GSM_clock
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2039   .text.GSM_clock:0000020c $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2057   .text.ATSTAT:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2063   .text.ATSTAT:00000000 ATSTAT
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2203   .text.ATSTAT:000000a0 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2221   .text.ATCPIN:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2227   .text.ATCPIN:00000000 ATCPIN
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2447   .text.ATCPIN:00000108 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2465   .text.ATCREG:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2471   .text.ATCREG:00000000 ATCREG
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2653   .text.ATCREG:000000d4 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2668   .text.ATOPEN:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:2674   .text.ATOPEN:00000000 ATOPEN
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3066   .text.ATOPEN:000001f4 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3201   .text.WaitCloseServer:00000000 WaitCloseServer
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3085   .text.WaitClose:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3091   .text.WaitClose:00000000 WaitClose
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3179   .text.WaitClose:00000084 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3195   .text.WaitCloseServer:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3238   .text.WaitCloseServer:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3259   .text.WaitGprsTime:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3265   .text.WaitGprsTime:00000000 WaitGprsTime
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3437   .text.WaitGprsTime:000000d0 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3480   .text.WaitGprsConnectUC20:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3486   .text.WaitGprsConnectUC20:00000000 WaitGprsConnectUC20
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3834   .text.WaitGprsConnectUC20:000001dc $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3868   .text.WaitGprsConnectUC15:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:3874   .text.WaitGprsConnectUC15:00000000 WaitGprsConnectUC15
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4314   .text.WaitGprsConnectUC15:00000288 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4338   .text.WaitGprsConnectUC15:000002e0 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4392   .text.WaitGprsConnectUC15:00000320 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4437   .text.WaitGprsConnectM66:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4443   .text.WaitGprsConnectM66:00000000 WaitGprsConnectM66
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4885   .text.WaitGprsConnectM66:000002bc $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:4906   .text.WaitGprsConnectM66:00000308 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5050   .text.WaitGprsConnectM66:000003c0 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5084   .text.WaitGprsConnectN715:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5090   .text.WaitGprsConnectN715:00000000 WaitGprsConnectN715
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5561   .text.WaitGprsConnectN715:000002bc $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5580   .text.WaitGprsConnectN715:00000300 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5862   .text.WaitGprsConnectN715:000004a4 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5877   .text.SelectModem:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:5883   .text.SelectModem:00000000 SelectModem
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:6295   .text.SelectModem:00000208 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:6315   .text.ModemInit:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:6321   .text.ModemInit:00000000 ModemInit
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:6714   .text.ModemInit:000001ec $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:6751   .text.ModemReceiveData:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:6757   .text.ModemReceiveData:00000000 ModemReceiveData
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:7226   .text.ModemReceiveData:000002f8 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:7241   .text.ModemReceiveData:0000032c $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:7669   .text.ModemReceiveData:00000618 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:7679   .text.ModemReceiveData:00000638 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:8138   .text.ModemReceiveData:0000099c $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:8146   .text.ModemReceiveData:000009b4 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:8204   .text.ModemReceiveData:00000a18 $d
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:8226   .text.ModemSendData:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:8232   .text.ModemSendData:00000000 ModemSendData
C:\Users\Admin\AppData\Local\Temp\ccd8gQvS.s:8559   .text.ModemSendData:0000020c $d

UNDEFINED SYMBOLS
vTaskDelay
ReceivedMsg
strcmp
uart2Write
dbgmessage
uart2Read
atoi1
RAM
DeviceID
rtcSetDataTime
FlagGSMtime
JrnlWrite
LedSIM
itoa1
strcat
strlen
LedNoModem
BKP_WriteBackupRegister
LedAPN
uart2Init
USART2TIMConfigure
xPortGetFreeHeapSize
initMK
GPIO_ResetBits
GPIO_SetBits
LedReg
