   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"heap_2.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.xHeap,"aw",%nobits
  18              		.align	3
  21              	xHeap:
  22 0000 00000000 		.space	20480
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.rodata.heapSTRUCT_SIZE,"a"
  24              		.align	1
  27              	heapSTRUCT_SIZE:
  28 0000 1000     		.short	16
  29              		.section	.bss.xStart,"aw",%nobits
  30              		.align	2
  33              	xStart:
  34 0000 00000000 		.space	8
  34      00000000 
  35              		.section	.bss.xEnd,"aw",%nobits
  36              		.align	2
  39              	xEnd:
  40 0000 00000000 		.space	8
  40      00000000 
  41              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
  42              		.align	2
  45              	xFreeBytesRemaining:
  46 0000 00000000 		.space	4
  47              		.section	.text.pvPortMalloc,"ax",%progbits
  48              		.align	1
  49              		.global	pvPortMalloc
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	pvPortMalloc:
  55              	.LFB27:
  56              		.file 1 "common/rtos/portable/MemMang/heap_2.c"
   1:common/rtos/portable/MemMang/heap_2.c **** /*
   2:common/rtos/portable/MemMang/heap_2.c ****     FreeRTOS V6.0.2 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:common/rtos/portable/MemMang/heap_2.c **** 
   4:common/rtos/portable/MemMang/heap_2.c ****     ***************************************************************************
   5:common/rtos/portable/MemMang/heap_2.c ****     *                                                                         *
   6:common/rtos/portable/MemMang/heap_2.c ****     * If you are:                                                             *
   7:common/rtos/portable/MemMang/heap_2.c ****     *                                                                         *
   8:common/rtos/portable/MemMang/heap_2.c ****     *    + New to FreeRTOS,                                                   *
   9:common/rtos/portable/MemMang/heap_2.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:common/rtos/portable/MemMang/heap_2.c ****     *    + Looking for basic training,                                        *
  11:common/rtos/portable/MemMang/heap_2.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:common/rtos/portable/MemMang/heap_2.c ****     *                                                                         *
  13:common/rtos/portable/MemMang/heap_2.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:common/rtos/portable/MemMang/heap_2.c ****     *                                                                         *
  15:common/rtos/portable/MemMang/heap_2.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:common/rtos/portable/MemMang/heap_2.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:common/rtos/portable/MemMang/heap_2.c ****     *                                                                         *
  18:common/rtos/portable/MemMang/heap_2.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:common/rtos/portable/MemMang/heap_2.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:common/rtos/portable/MemMang/heap_2.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:common/rtos/portable/MemMang/heap_2.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:common/rtos/portable/MemMang/heap_2.c ****     *                                                                         *
  23:common/rtos/portable/MemMang/heap_2.c ****     ***************************************************************************
  24:common/rtos/portable/MemMang/heap_2.c **** 
  25:common/rtos/portable/MemMang/heap_2.c ****     This file is part of the FreeRTOS distribution.
  26:common/rtos/portable/MemMang/heap_2.c **** 
  27:common/rtos/portable/MemMang/heap_2.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:common/rtos/portable/MemMang/heap_2.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:common/rtos/portable/MemMang/heap_2.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:common/rtos/portable/MemMang/heap_2.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:common/rtos/portable/MemMang/heap_2.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:common/rtos/portable/MemMang/heap_2.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:common/rtos/portable/MemMang/heap_2.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:common/rtos/portable/MemMang/heap_2.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:common/rtos/portable/MemMang/heap_2.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:common/rtos/portable/MemMang/heap_2.c ****     more details. You should have received a copy of the GNU General Public 
  37:common/rtos/portable/MemMang/heap_2.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:common/rtos/portable/MemMang/heap_2.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:common/rtos/portable/MemMang/heap_2.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:common/rtos/portable/MemMang/heap_2.c ****     FreeRTOS WEB site.
  41:common/rtos/portable/MemMang/heap_2.c **** 
  42:common/rtos/portable/MemMang/heap_2.c ****     1 tab == 4 spaces!
  43:common/rtos/portable/MemMang/heap_2.c **** 
  44:common/rtos/portable/MemMang/heap_2.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:common/rtos/portable/MemMang/heap_2.c ****     contact details.
  46:common/rtos/portable/MemMang/heap_2.c **** 
  47:common/rtos/portable/MemMang/heap_2.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:common/rtos/portable/MemMang/heap_2.c ****     critical systems.
  49:common/rtos/portable/MemMang/heap_2.c **** 
  50:common/rtos/portable/MemMang/heap_2.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:common/rtos/portable/MemMang/heap_2.c ****     licensing and training services.
  52:common/rtos/portable/MemMang/heap_2.c **** */
  53:common/rtos/portable/MemMang/heap_2.c **** 
  54:common/rtos/portable/MemMang/heap_2.c **** /*
  55:common/rtos/portable/MemMang/heap_2.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that permits
  56:common/rtos/portable/MemMang/heap_2.c ****  * allocated blocks to be freed, but does not combine adjacent free blocks
  57:common/rtos/portable/MemMang/heap_2.c ****  * into a single larger block.
  58:common/rtos/portable/MemMang/heap_2.c ****  *
  59:common/rtos/portable/MemMang/heap_2.c ****  * See heap_1.c and heap_3.c for alternative implementations, and the memory
  60:common/rtos/portable/MemMang/heap_2.c ****  * management pages of http://www.FreeRTOS.org for more information.
  61:common/rtos/portable/MemMang/heap_2.c ****  */
  62:common/rtos/portable/MemMang/heap_2.c **** #include <stdlib.h>
  63:common/rtos/portable/MemMang/heap_2.c **** 
  64:common/rtos/portable/MemMang/heap_2.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  65:common/rtos/portable/MemMang/heap_2.c **** all the API functions to use the MPU wrappers.  That should only be done when
  66:common/rtos/portable/MemMang/heap_2.c **** task.h is included from an application file. */
  67:common/rtos/portable/MemMang/heap_2.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  68:common/rtos/portable/MemMang/heap_2.c **** 
  69:common/rtos/portable/MemMang/heap_2.c **** #include "FreeRTOS.h"
  70:common/rtos/portable/MemMang/heap_2.c **** #include "task.h"
  71:common/rtos/portable/MemMang/heap_2.c **** 
  72:common/rtos/portable/MemMang/heap_2.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  73:common/rtos/portable/MemMang/heap_2.c **** 
  74:common/rtos/portable/MemMang/heap_2.c **** /* Allocate the memory for the heap.  The struct is used to force byte
  75:common/rtos/portable/MemMang/heap_2.c **** alignment without using any non-portable code. */
  76:common/rtos/portable/MemMang/heap_2.c **** static union xRTOS_HEAP
  77:common/rtos/portable/MemMang/heap_2.c **** {
  78:common/rtos/portable/MemMang/heap_2.c **** 	#if portBYTE_ALIGNMENT == 8
  79:common/rtos/portable/MemMang/heap_2.c **** 		volatile portDOUBLE dDummy;
  80:common/rtos/portable/MemMang/heap_2.c **** 	#else
  81:common/rtos/portable/MemMang/heap_2.c **** 		volatile unsigned long ulDummy;
  82:common/rtos/portable/MemMang/heap_2.c **** 	#endif
  83:common/rtos/portable/MemMang/heap_2.c **** 	unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];
  84:common/rtos/portable/MemMang/heap_2.c **** } xHeap;
  85:common/rtos/portable/MemMang/heap_2.c **** 
  86:common/rtos/portable/MemMang/heap_2.c **** /* Define the linked list structure.  This is used to link free blocks in order
  87:common/rtos/portable/MemMang/heap_2.c **** of their size. */
  88:common/rtos/portable/MemMang/heap_2.c **** typedef struct A_BLOCK_LINK
  89:common/rtos/portable/MemMang/heap_2.c **** {
  90:common/rtos/portable/MemMang/heap_2.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
  91:common/rtos/portable/MemMang/heap_2.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
  92:common/rtos/portable/MemMang/heap_2.c **** } xBlockLink;
  93:common/rtos/portable/MemMang/heap_2.c **** 
  94:common/rtos/portable/MemMang/heap_2.c **** 
  95:common/rtos/portable/MemMang/heap_2.c **** static const unsigned short  heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( size
  96:common/rtos/portable/MemMang/heap_2.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
  97:common/rtos/portable/MemMang/heap_2.c **** 
  98:common/rtos/portable/MemMang/heap_2.c **** /* Create a couple of list links to mark the start and end of the list. */
  99:common/rtos/portable/MemMang/heap_2.c **** static xBlockLink xStart, xEnd;
 100:common/rtos/portable/MemMang/heap_2.c **** 
 101:common/rtos/portable/MemMang/heap_2.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 102:common/rtos/portable/MemMang/heap_2.c **** fragmentation. */
 103:common/rtos/portable/MemMang/heap_2.c **** static size_t xFreeBytesRemaining;
 104:common/rtos/portable/MemMang/heap_2.c **** 
 105:common/rtos/portable/MemMang/heap_2.c **** /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
 106:common/rtos/portable/MemMang/heap_2.c **** 
 107:common/rtos/portable/MemMang/heap_2.c **** /*
 108:common/rtos/portable/MemMang/heap_2.c ****  * Insert a block into the list of free blocks - which is ordered by size of
 109:common/rtos/portable/MemMang/heap_2.c ****  * the block.  Small blocks at the start of the list and large blocks at the end
 110:common/rtos/portable/MemMang/heap_2.c ****  * of the list.
 111:common/rtos/portable/MemMang/heap_2.c ****  */
 112:common/rtos/portable/MemMang/heap_2.c **** #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
 113:common/rtos/portable/MemMang/heap_2.c **** {																					\
 114:common/rtos/portable/MemMang/heap_2.c **** xBlockLink *pxIterator;																\
 115:common/rtos/portable/MemMang/heap_2.c **** size_t xBlockSize;																	\
 116:common/rtos/portable/MemMang/heap_2.c **** 																					\
 117:common/rtos/portable/MemMang/heap_2.c **** 	xBlockSize = pxBlockToInsert->xBlockSize;										\
 118:common/rtos/portable/MemMang/heap_2.c **** 																					\
 119:common/rtos/portable/MemMang/heap_2.c **** 	/* Iterate through the list until a block is found that has a larger size */	\
 120:common/rtos/portable/MemMang/heap_2.c **** 	/* than the block we are inserting. */											\
 121:common/rtos/portable/MemMang/heap_2.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIt
 122:common/rtos/portable/MemMang/heap_2.c **** 	{																				\
 123:common/rtos/portable/MemMang/heap_2.c **** 		/* There is nothing to do here - just iterate to the correct position. */	\
 124:common/rtos/portable/MemMang/heap_2.c **** 	}																				\
 125:common/rtos/portable/MemMang/heap_2.c **** 																					\
 126:common/rtos/portable/MemMang/heap_2.c **** 	/* Update the list to include the block being inserted in the correct */		\
 127:common/rtos/portable/MemMang/heap_2.c **** 	/* position. */																	\
 128:common/rtos/portable/MemMang/heap_2.c **** 	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
 129:common/rtos/portable/MemMang/heap_2.c **** 	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
 130:common/rtos/portable/MemMang/heap_2.c **** }
 131:common/rtos/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 132:common/rtos/portable/MemMang/heap_2.c **** 
 133:common/rtos/portable/MemMang/heap_2.c **** #define prvHeapInit()																\
 134:common/rtos/portable/MemMang/heap_2.c **** {																					\
 135:common/rtos/portable/MemMang/heap_2.c **** xBlockLink *pxFirstFreeBlock;														\
 136:common/rtos/portable/MemMang/heap_2.c **** 																					\
 137:common/rtos/portable/MemMang/heap_2.c **** 	/* xStart is used to hold a pointer to the first item in the list of free */	\
 138:common/rtos/portable/MemMang/heap_2.c **** 	/* blocks.  The void cast is used to prevent compiler warnings. */				\
 139:common/rtos/portable/MemMang/heap_2.c **** 	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;								\
 140:common/rtos/portable/MemMang/heap_2.c **** 	xStart.xBlockSize = ( size_t ) 0;												\
 141:common/rtos/portable/MemMang/heap_2.c **** 																					\
 142:common/rtos/portable/MemMang/heap_2.c **** 	/* xEnd is used to mark the end of the list of free blocks. */					\
 143:common/rtos/portable/MemMang/heap_2.c **** 	xEnd.xBlockSize = configTOTAL_HEAP_SIZE;										\
 144:common/rtos/portable/MemMang/heap_2.c **** 	xEnd.pxNextFreeBlock = NULL;													\
 145:common/rtos/portable/MemMang/heap_2.c **** 																					\
 146:common/rtos/portable/MemMang/heap_2.c **** 	/* To start with there is a single free block that is sized to take up the		\
 147:common/rtos/portable/MemMang/heap_2.c **** 	entire heap space. */															\
 148:common/rtos/portable/MemMang/heap_2.c **** 	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;										\
 149:common/rtos/portable/MemMang/heap_2.c **** 	pxFirstFreeBlock->xBlockSize = configTOTAL_HEAP_SIZE;							\
 150:common/rtos/portable/MemMang/heap_2.c **** 	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
 151:common/rtos/portable/MemMang/heap_2.c **** 																					\
 152:common/rtos/portable/MemMang/heap_2.c **** 	xFreeBytesRemaining = configTOTAL_HEAP_SIZE;									\
 153:common/rtos/portable/MemMang/heap_2.c **** }
 154:common/rtos/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 155:common/rtos/portable/MemMang/heap_2.c **** 
 156:common/rtos/portable/MemMang/heap_2.c **** void *pvPortMalloc( size_t xWantedSize )
 157:common/rtos/portable/MemMang/heap_2.c **** {
  57              		.loc 1 157 1
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 40
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61 0000 80B5     		push	{r7, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 8AB0     		sub	sp, sp, #40
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 48
  69 0004 00AF     		add	r7, sp, #0
  70              	.LCFI2:
  71              		.cfi_def_cfa_register 7
  72 0006 7860     		str	r0, [r7, #4]
 158:common/rtos/portable/MemMang/heap_2.c **** xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 159:common/rtos/portable/MemMang/heap_2.c **** static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
 160:common/rtos/portable/MemMang/heap_2.c **** void *pvReturn = NULL;
  73              		.loc 1 160 7
  74 0008 0023     		movs	r3, #0
  75 000a FB61     		str	r3, [r7, #28]
 161:common/rtos/portable/MemMang/heap_2.c **** 
 162:common/rtos/portable/MemMang/heap_2.c **** 	vTaskSuspendAll();
  76              		.loc 1 162 2
  77 000c 4A4B     		ldr	r3, .L12
  78 000e 9847     		blx	r3
  79              	.LVL0:
 163:common/rtos/portable/MemMang/heap_2.c **** 	{
 164:common/rtos/portable/MemMang/heap_2.c **** 		/* If this is the first call to malloc then the heap will require
 165:common/rtos/portable/MemMang/heap_2.c **** 		initialisation to setup the list of free blocks. */
 166:common/rtos/portable/MemMang/heap_2.c **** 		if( xHeapHasBeenInitialised == pdFALSE )
  80              		.loc 1 166 31
  81 0010 4A4B     		ldr	r3, .L12+4
  82 0012 1B68     		ldr	r3, [r3]
  83              		.loc 1 166 5
  84 0014 002B     		cmp	r3, #0
  85 0016 1CD1     		bne	.L2
  86              	.LBB2:
 167:common/rtos/portable/MemMang/heap_2.c **** 		{
 168:common/rtos/portable/MemMang/heap_2.c **** 			prvHeapInit();
  87              		.loc 1 168 4
  88 0018 494B     		ldr	r3, .L12+8
  89 001a 4A4A     		ldr	r2, .L12+12
  90 001c 1A60     		str	r2, [r3]
  91 001e 484B     		ldr	r3, .L12+8
  92 0020 0022     		movs	r2, #0
  93 0022 5A60     		str	r2, [r3, #4]
  94 0024 484B     		ldr	r3, .L12+16
  95 0026 4FF4A042 		mov	r2, #20480
  96 002a 5A60     		str	r2, [r3, #4]
  97 002c 464B     		ldr	r3, .L12+16
  98 002e 0022     		movs	r2, #0
  99 0030 1A60     		str	r2, [r3]
 100 0032 444B     		ldr	r3, .L12+12
 101 0034 7B61     		str	r3, [r7, #20]
 102 0036 7B69     		ldr	r3, [r7, #20]
 103 0038 4FF4A042 		mov	r2, #20480
 104 003c 5A60     		str	r2, [r3, #4]
 105 003e 7B69     		ldr	r3, [r7, #20]
 106 0040 414A     		ldr	r2, .L12+16
 107 0042 1A60     		str	r2, [r3]
 108 0044 414B     		ldr	r3, .L12+20
 109 0046 4FF4A042 		mov	r2, #20480
 110 004a 1A60     		str	r2, [r3]
 111              	.LBE2:
 169:common/rtos/portable/MemMang/heap_2.c **** 			xHeapHasBeenInitialised = pdTRUE;
 112              		.loc 1 169 28
 113 004c 3B4B     		ldr	r3, .L12+4
 114 004e 0122     		movs	r2, #1
 115 0050 1A60     		str	r2, [r3]
 116              	.L2:
 170:common/rtos/portable/MemMang/heap_2.c **** 		}
 171:common/rtos/portable/MemMang/heap_2.c **** 
 172:common/rtos/portable/MemMang/heap_2.c **** 		/* The wanted size is increased so it can contain a xBlockLink
 173:common/rtos/portable/MemMang/heap_2.c **** 		structure in addition to the requested amount of bytes. */
 174:common/rtos/portable/MemMang/heap_2.c **** 		if( xWantedSize > 0 )
 117              		.loc 1 174 5
 118 0052 7B68     		ldr	r3, [r7, #4]
 119 0054 002B     		cmp	r3, #0
 120 0056 0ED0     		beq	.L3
 175:common/rtos/portable/MemMang/heap_2.c **** 		{
 176:common/rtos/portable/MemMang/heap_2.c **** 			xWantedSize += heapSTRUCT_SIZE;
 121              		.loc 1 176 16
 122 0058 1023     		movs	r3, #16
 123 005a 1A46     		mov	r2, r3
 124 005c 7B68     		ldr	r3, [r7, #4]
 125 005e 1344     		add	r3, r3, r2
 126 0060 7B60     		str	r3, [r7, #4]
 177:common/rtos/portable/MemMang/heap_2.c **** 
 178:common/rtos/portable/MemMang/heap_2.c **** 			/* Ensure that blocks are always aligned to the required number of bytes. */
 179:common/rtos/portable/MemMang/heap_2.c **** 			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 127              		.loc 1 179 20
 128 0062 7B68     		ldr	r3, [r7, #4]
 129 0064 03F00703 		and	r3, r3, #7
 130              		.loc 1 179 6
 131 0068 002B     		cmp	r3, #0
 132 006a 04D0     		beq	.L3
 180:common/rtos/portable/MemMang/heap_2.c **** 			{
 181:common/rtos/portable/MemMang/heap_2.c **** 				/* Byte alignment required. */
 182:common/rtos/portable/MemMang/heap_2.c **** 				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 133              		.loc 1 182 17
 134 006c 7B68     		ldr	r3, [r7, #4]
 135 006e 23F00703 		bic	r3, r3, #7
 136 0072 0833     		adds	r3, r3, #8
 137 0074 7B60     		str	r3, [r7, #4]
 138              	.L3:
 183:common/rtos/portable/MemMang/heap_2.c **** 			}
 184:common/rtos/portable/MemMang/heap_2.c **** 		}
 185:common/rtos/portable/MemMang/heap_2.c **** 
 186:common/rtos/portable/MemMang/heap_2.c **** 		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
 139              		.loc 1 186 5
 140 0076 7B68     		ldr	r3, [r7, #4]
 141 0078 002B     		cmp	r3, #0
 142 007a 55D0     		beq	.L4
 143              		.loc 1 186 27 discriminator 1
 144 007c 7B68     		ldr	r3, [r7, #4]
 145 007e B3F5A04F 		cmp	r3, #20480
 146 0082 51D2     		bcs	.L4
 187:common/rtos/portable/MemMang/heap_2.c **** 		{
 188:common/rtos/portable/MemMang/heap_2.c **** 			/* Blocks are stored in byte order - traverse the list from the start
 189:common/rtos/portable/MemMang/heap_2.c **** 			(smallest) block until one of adequate size is found. */
 190:common/rtos/portable/MemMang/heap_2.c **** 			pxPreviousBlock = &xStart;
 147              		.loc 1 190 20
 148 0084 2E4B     		ldr	r3, .L12+8
 149 0086 3B62     		str	r3, [r7, #32]
 191:common/rtos/portable/MemMang/heap_2.c **** 			pxBlock = xStart.pxNextFreeBlock;
 150              		.loc 1 191 12
 151 0088 2D4B     		ldr	r3, .L12+8
 152 008a 1B68     		ldr	r3, [r3]
 153 008c 7B62     		str	r3, [r7, #36]
 192:common/rtos/portable/MemMang/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 154              		.loc 1 192 9
 155 008e 04E0     		b	.L5
 156              	.L7:
 193:common/rtos/portable/MemMang/heap_2.c **** 			{
 194:common/rtos/portable/MemMang/heap_2.c **** 				pxPreviousBlock = pxBlock;
 157              		.loc 1 194 21
 158 0090 7B6A     		ldr	r3, [r7, #36]
 159 0092 3B62     		str	r3, [r7, #32]
 195:common/rtos/portable/MemMang/heap_2.c **** 				pxBlock = pxBlock->pxNextFreeBlock;
 160              		.loc 1 195 13
 161 0094 7B6A     		ldr	r3, [r7, #36]
 162 0096 1B68     		ldr	r3, [r3]
 163 0098 7B62     		str	r3, [r7, #36]
 164              	.L5:
 192:common/rtos/portable/MemMang/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 165              		.loc 1 192 20
 166 009a 7B6A     		ldr	r3, [r7, #36]
 167 009c 5B68     		ldr	r3, [r3, #4]
 192:common/rtos/portable/MemMang/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 168              		.loc 1 192 9
 169 009e 7A68     		ldr	r2, [r7, #4]
 170 00a0 9A42     		cmp	r2, r3
 171 00a2 03D9     		bls	.L6
 192:common/rtos/portable/MemMang/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 172              		.loc 1 192 61 discriminator 1
 173 00a4 7B6A     		ldr	r3, [r7, #36]
 174 00a6 1B68     		ldr	r3, [r3]
 192:common/rtos/portable/MemMang/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 175              		.loc 1 192 49 discriminator 1
 176 00a8 002B     		cmp	r3, #0
 177 00aa F1D1     		bne	.L7
 178              	.L6:
 196:common/rtos/portable/MemMang/heap_2.c **** 			}
 197:common/rtos/portable/MemMang/heap_2.c **** 
 198:common/rtos/portable/MemMang/heap_2.c **** 			/* If we found the end marker then a block of adequate size was not found. */
 199:common/rtos/portable/MemMang/heap_2.c **** 			if( pxBlock != &xEnd )
 179              		.loc 1 199 6
 180 00ac 7B6A     		ldr	r3, [r7, #36]
 181 00ae 264A     		ldr	r2, .L12+16
 182 00b0 9342     		cmp	r3, r2
 183 00b2 39D0     		beq	.L4
 200:common/rtos/portable/MemMang/heap_2.c **** 			{
 201:common/rtos/portable/MemMang/heap_2.c **** 				/* Return the memory space - jumping over the xBlockLink structure
 202:common/rtos/portable/MemMang/heap_2.c **** 				at its start. */
 203:common/rtos/portable/MemMang/heap_2.c **** 				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_S
 184              		.loc 1 203 66
 185 00b4 3B6A     		ldr	r3, [r7, #32]
 186 00b6 1B68     		ldr	r3, [r3]
 187              		.loc 1 203 16
 188 00b8 1022     		movs	r2, #16
 189              		.loc 1 203 14
 190 00ba 1344     		add	r3, r3, r2
 191 00bc FB61     		str	r3, [r7, #28]
 204:common/rtos/portable/MemMang/heap_2.c **** 
 205:common/rtos/portable/MemMang/heap_2.c **** 				/* This block is being returned for use so must be taken our of the
 206:common/rtos/portable/MemMang/heap_2.c **** 				list of free blocks. */
 207:common/rtos/portable/MemMang/heap_2.c **** 				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 192              		.loc 1 207 47
 193 00be 7B6A     		ldr	r3, [r7, #36]
 194 00c0 1A68     		ldr	r2, [r3]
 195              		.loc 1 207 38
 196 00c2 3B6A     		ldr	r3, [r7, #32]
 197 00c4 1A60     		str	r2, [r3]
 208:common/rtos/portable/MemMang/heap_2.c **** 
 209:common/rtos/portable/MemMang/heap_2.c **** 				/* If the block is larger than required it can be split into two. */
 210:common/rtos/portable/MemMang/heap_2.c **** 				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 198              		.loc 1 210 18
 199 00c6 7B6A     		ldr	r3, [r7, #36]
 200 00c8 5A68     		ldr	r2, [r3, #4]
 201              		.loc 1 210 31
 202 00ca 7B68     		ldr	r3, [r7, #4]
 203 00cc D31A     		subs	r3, r2, r3
 204              		.loc 1 210 49
 205 00ce 1022     		movs	r2, #16
 206 00d0 5200     		lsls	r2, r2, #1
 207              		.loc 1 210 7
 208 00d2 9342     		cmp	r3, r2
 209 00d4 22D9     		bls	.L8
 211:common/rtos/portable/MemMang/heap_2.c **** 				{
 212:common/rtos/portable/MemMang/heap_2.c **** 					/* This block is to be split into two.  Create a new block
 213:common/rtos/portable/MemMang/heap_2.c **** 					following the number of bytes requested. The void cast is
 214:common/rtos/portable/MemMang/heap_2.c **** 					used to prevent byte alignment warnings from the compiler. */
 215:common/rtos/portable/MemMang/heap_2.c **** 					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 210              		.loc 1 215 21
 211 00d6 7A6A     		ldr	r2, [r7, #36]
 212 00d8 7B68     		ldr	r3, [r7, #4]
 213 00da 1344     		add	r3, r3, r2
 214 00dc 3B61     		str	r3, [r7, #16]
 216:common/rtos/portable/MemMang/heap_2.c **** 
 217:common/rtos/portable/MemMang/heap_2.c **** 					/* Calculate the sizes of two blocks split from the single
 218:common/rtos/portable/MemMang/heap_2.c **** 					block. */
 219:common/rtos/portable/MemMang/heap_2.c **** 					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 215              		.loc 1 219 42
 216 00de 7B6A     		ldr	r3, [r7, #36]
 217 00e0 5A68     		ldr	r2, [r3, #4]
 218              		.loc 1 219 55
 219 00e2 7B68     		ldr	r3, [r7, #4]
 220 00e4 D21A     		subs	r2, r2, r3
 221              		.loc 1 219 33
 222 00e6 3B69     		ldr	r3, [r7, #16]
 223 00e8 5A60     		str	r2, [r3, #4]
 220:common/rtos/portable/MemMang/heap_2.c **** 					pxBlock->xBlockSize = xWantedSize;
 224              		.loc 1 220 26
 225 00ea 7B6A     		ldr	r3, [r7, #36]
 226 00ec 7A68     		ldr	r2, [r7, #4]
 227 00ee 5A60     		str	r2, [r3, #4]
 228              	.LBB3:
 221:common/rtos/portable/MemMang/heap_2.c **** 
 222:common/rtos/portable/MemMang/heap_2.c **** 					/* Insert the new block into the list of free blocks. */
 223:common/rtos/portable/MemMang/heap_2.c **** 					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 229              		.loc 1 223 6
 230 00f0 3B69     		ldr	r3, [r7, #16]
 231 00f2 5B68     		ldr	r3, [r3, #4]
 232 00f4 FB60     		str	r3, [r7, #12]
 233 00f6 124B     		ldr	r3, .L12+8
 234 00f8 BB61     		str	r3, [r7, #24]
 235 00fa 02E0     		b	.L9
 236              	.L10:
 237              		.loc 1 223 6 is_stmt 0 discriminator 3
 238 00fc BB69     		ldr	r3, [r7, #24]
 239 00fe 1B68     		ldr	r3, [r3]
 240 0100 BB61     		str	r3, [r7, #24]
 241              	.L9:
 242              		.loc 1 223 6 discriminator 1
 243 0102 BB69     		ldr	r3, [r7, #24]
 244 0104 1B68     		ldr	r3, [r3]
 245 0106 5B68     		ldr	r3, [r3, #4]
 246 0108 FA68     		ldr	r2, [r7, #12]
 247 010a 9A42     		cmp	r2, r3
 248 010c F6D8     		bhi	.L10
 249              		.loc 1 223 6 discriminator 4
 250 010e BB69     		ldr	r3, [r7, #24]
 251 0110 1A68     		ldr	r2, [r3]
 252 0112 3B69     		ldr	r3, [r7, #16]
 253 0114 1A60     		str	r2, [r3]
 254 0116 BB69     		ldr	r3, [r7, #24]
 255 0118 3A69     		ldr	r2, [r7, #16]
 256 011a 1A60     		str	r2, [r3]
 257              	.L8:
 258              	.LBE3:
 224:common/rtos/portable/MemMang/heap_2.c **** 				}
 225:common/rtos/portable/MemMang/heap_2.c **** 				
 226:common/rtos/portable/MemMang/heap_2.c **** 				xFreeBytesRemaining -= xWantedSize;
 259              		.loc 1 226 25 is_stmt 1
 260 011c 0B4B     		ldr	r3, .L12+20
 261 011e 1A68     		ldr	r2, [r3]
 262 0120 7B68     		ldr	r3, [r7, #4]
 263 0122 D31A     		subs	r3, r2, r3
 264 0124 094A     		ldr	r2, .L12+20
 265 0126 1360     		str	r3, [r2]
 266              	.L4:
 227:common/rtos/portable/MemMang/heap_2.c **** 			}
 228:common/rtos/portable/MemMang/heap_2.c **** 		}
 229:common/rtos/portable/MemMang/heap_2.c **** 	}
 230:common/rtos/portable/MemMang/heap_2.c **** 	xTaskResumeAll();
 267              		.loc 1 230 2
 268 0128 094B     		ldr	r3, .L12+24
 269 012a 9847     		blx	r3
 270              	.LVL1:
 231:common/rtos/portable/MemMang/heap_2.c **** 
 232:common/rtos/portable/MemMang/heap_2.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 233:common/rtos/portable/MemMang/heap_2.c **** 	{
 234:common/rtos/portable/MemMang/heap_2.c **** 		if( pvReturn == NULL )
 235:common/rtos/portable/MemMang/heap_2.c **** 		{
 236:common/rtos/portable/MemMang/heap_2.c **** 			extern void vApplicationMallocFailedHook( void );
 237:common/rtos/portable/MemMang/heap_2.c **** 			vApplicationMallocFailedHook();
 238:common/rtos/portable/MemMang/heap_2.c **** 		}
 239:common/rtos/portable/MemMang/heap_2.c **** 	}
 240:common/rtos/portable/MemMang/heap_2.c **** 	#endif
 241:common/rtos/portable/MemMang/heap_2.c **** 
 242:common/rtos/portable/MemMang/heap_2.c **** 	return pvReturn;
 271              		.loc 1 242 9
 272 012c FB69     		ldr	r3, [r7, #28]
 243:common/rtos/portable/MemMang/heap_2.c **** }
 273              		.loc 1 243 1
 274 012e 1846     		mov	r0, r3
 275 0130 2837     		adds	r7, r7, #40
 276              	.LCFI3:
 277              		.cfi_def_cfa_offset 8
 278 0132 BD46     		mov	sp, r7
 279              	.LCFI4:
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 0134 80BD     		pop	{r7, pc}
 283              	.L13:
 284 0136 00BF     		.align	2
 285              	.L12:
 286 0138 00000000 		.word	vTaskSuspendAll
 287 013c 00000000 		.word	xHeapHasBeenInitialised.0
 288 0140 00000000 		.word	xStart
 289 0144 00000000 		.word	xHeap
 290 0148 00000000 		.word	xEnd
 291 014c 00000000 		.word	xFreeBytesRemaining
 292 0150 00000000 		.word	xTaskResumeAll
 293              		.cfi_endproc
 294              	.LFE27:
 296              		.section	.text.vPortFree,"ax",%progbits
 297              		.align	1
 298              		.global	vPortFree
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 303              	vPortFree:
 304              	.LFB28:
 244:common/rtos/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 245:common/rtos/portable/MemMang/heap_2.c **** 
 246:common/rtos/portable/MemMang/heap_2.c **** void vPortFree( void *pv )
 247:common/rtos/portable/MemMang/heap_2.c **** {
 305              		.loc 1 247 1
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 24
 308              		@ frame_needed = 1, uses_anonymous_args = 0
 309 0000 80B5     		push	{r7, lr}
 310              	.LCFI5:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 86B0     		sub	sp, sp, #24
 315              	.LCFI6:
 316              		.cfi_def_cfa_offset 32
 317 0004 00AF     		add	r7, sp, #0
 318              	.LCFI7:
 319              		.cfi_def_cfa_register 7
 320 0006 7860     		str	r0, [r7, #4]
 248:common/rtos/portable/MemMang/heap_2.c **** unsigned char *puc = ( unsigned char * ) pv;
 321              		.loc 1 248 16
 322 0008 7B68     		ldr	r3, [r7, #4]
 323 000a 3B61     		str	r3, [r7, #16]
 249:common/rtos/portable/MemMang/heap_2.c **** xBlockLink *pxLink;
 250:common/rtos/portable/MemMang/heap_2.c **** 
 251:common/rtos/portable/MemMang/heap_2.c **** 	if( pv )
 324              		.loc 1 251 4
 325 000c 7B68     		ldr	r3, [r7, #4]
 326 000e 002B     		cmp	r3, #0
 327 0010 27D0     		beq	.L18
 252:common/rtos/portable/MemMang/heap_2.c **** 	{
 253:common/rtos/portable/MemMang/heap_2.c **** 		/* The memory being freed will have an xBlockLink structure immediately
 254:common/rtos/portable/MemMang/heap_2.c **** 		before it. */
 255:common/rtos/portable/MemMang/heap_2.c **** 		puc -= heapSTRUCT_SIZE;
 328              		.loc 1 255 7
 329 0012 1023     		movs	r3, #16
 330 0014 5B42     		rsbs	r3, r3, #0
 331 0016 3A69     		ldr	r2, [r7, #16]
 332 0018 1344     		add	r3, r3, r2
 333 001a 3B61     		str	r3, [r7, #16]
 256:common/rtos/portable/MemMang/heap_2.c **** 
 257:common/rtos/portable/MemMang/heap_2.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 258:common/rtos/portable/MemMang/heap_2.c **** 		pxLink = ( void * ) puc;
 334              		.loc 1 258 10
 335 001c 3B69     		ldr	r3, [r7, #16]
 336 001e FB60     		str	r3, [r7, #12]
 259:common/rtos/portable/MemMang/heap_2.c **** 
 260:common/rtos/portable/MemMang/heap_2.c **** 		vTaskSuspendAll();
 337              		.loc 1 260 3
 338 0020 124B     		ldr	r3, .L19
 339 0022 9847     		blx	r3
 340              	.LVL2:
 341              	.LBB4:
 261:common/rtos/portable/MemMang/heap_2.c **** 		{
 262:common/rtos/portable/MemMang/heap_2.c **** 			/* Add this block to the list of free blocks. */
 263:common/rtos/portable/MemMang/heap_2.c **** 			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 342              		.loc 1 263 4
 343 0024 FB68     		ldr	r3, [r7, #12]
 344 0026 5B68     		ldr	r3, [r3, #4]
 345 0028 BB60     		str	r3, [r7, #8]
 346 002a 114B     		ldr	r3, .L19+4
 347 002c 7B61     		str	r3, [r7, #20]
 348 002e 02E0     		b	.L16
 349              	.L17:
 350              		.loc 1 263 4 is_stmt 0 discriminator 3
 351 0030 7B69     		ldr	r3, [r7, #20]
 352 0032 1B68     		ldr	r3, [r3]
 353 0034 7B61     		str	r3, [r7, #20]
 354              	.L16:
 355              		.loc 1 263 4 discriminator 1
 356 0036 7B69     		ldr	r3, [r7, #20]
 357 0038 1B68     		ldr	r3, [r3]
 358 003a 5B68     		ldr	r3, [r3, #4]
 359 003c BA68     		ldr	r2, [r7, #8]
 360 003e 9A42     		cmp	r2, r3
 361 0040 F6D8     		bhi	.L17
 362              		.loc 1 263 4 discriminator 4
 363 0042 7B69     		ldr	r3, [r7, #20]
 364 0044 1A68     		ldr	r2, [r3]
 365 0046 FB68     		ldr	r3, [r7, #12]
 366 0048 1A60     		str	r2, [r3]
 367 004a 7B69     		ldr	r3, [r7, #20]
 368 004c FA68     		ldr	r2, [r7, #12]
 369 004e 1A60     		str	r2, [r3]
 370              	.LBE4:
 264:common/rtos/portable/MemMang/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 371              		.loc 1 264 33 is_stmt 1 discriminator 4
 372 0050 FB68     		ldr	r3, [r7, #12]
 373 0052 5A68     		ldr	r2, [r3, #4]
 374              		.loc 1 264 24 discriminator 4
 375 0054 074B     		ldr	r3, .L19+8
 376 0056 1B68     		ldr	r3, [r3]
 377 0058 1344     		add	r3, r3, r2
 378 005a 064A     		ldr	r2, .L19+8
 379 005c 1360     		str	r3, [r2]
 265:common/rtos/portable/MemMang/heap_2.c **** 		}
 266:common/rtos/portable/MemMang/heap_2.c **** 		xTaskResumeAll();
 380              		.loc 1 266 3 discriminator 4
 381 005e 064B     		ldr	r3, .L19+12
 382 0060 9847     		blx	r3
 383              	.LVL3:
 384              	.L18:
 267:common/rtos/portable/MemMang/heap_2.c **** 	}
 268:common/rtos/portable/MemMang/heap_2.c **** }
 385              		.loc 1 268 1
 386 0062 00BF     		nop
 387 0064 1837     		adds	r7, r7, #24
 388              	.LCFI8:
 389              		.cfi_def_cfa_offset 8
 390 0066 BD46     		mov	sp, r7
 391              	.LCFI9:
 392              		.cfi_def_cfa_register 13
 393              		@ sp needed
 394 0068 80BD     		pop	{r7, pc}
 395              	.L20:
 396 006a 00BF     		.align	2
 397              	.L19:
 398 006c 00000000 		.word	vTaskSuspendAll
 399 0070 00000000 		.word	xStart
 400 0074 00000000 		.word	xFreeBytesRemaining
 401 0078 00000000 		.word	xTaskResumeAll
 402              		.cfi_endproc
 403              	.LFE28:
 405              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 406              		.align	1
 407              		.global	xPortGetFreeHeapSize
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 412              	xPortGetFreeHeapSize:
 413              	.LFB29:
 269:common/rtos/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 270:common/rtos/portable/MemMang/heap_2.c **** 
 271:common/rtos/portable/MemMang/heap_2.c **** size_t xPortGetFreeHeapSize( void )
 272:common/rtos/portable/MemMang/heap_2.c **** {
 414              		.loc 1 272 1
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419 0000 80B4     		push	{r7}
 420              	.LCFI10:
 421              		.cfi_def_cfa_offset 4
 422              		.cfi_offset 7, -4
 423 0002 00AF     		add	r7, sp, #0
 424              	.LCFI11:
 425              		.cfi_def_cfa_register 7
 273:common/rtos/portable/MemMang/heap_2.c **** 	return xFreeBytesRemaining;
 426              		.loc 1 273 9
 427 0004 024B     		ldr	r3, .L23
 428 0006 1B68     		ldr	r3, [r3]
 274:common/rtos/portable/MemMang/heap_2.c **** }
 429              		.loc 1 274 1
 430 0008 1846     		mov	r0, r3
 431 000a BD46     		mov	sp, r7
 432              	.LCFI12:
 433              		.cfi_def_cfa_register 13
 434              		@ sp needed
 435 000c 80BC     		pop	{r7}
 436              	.LCFI13:
 437              		.cfi_restore 7
 438              		.cfi_def_cfa_offset 0
 439 000e 7047     		bx	lr
 440              	.L24:
 441              		.align	2
 442              	.L23:
 443 0010 00000000 		.word	xFreeBytesRemaining
 444              		.cfi_endproc
 445              	.LFE29:
 447              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 448              		.align	1
 449              		.global	vPortInitialiseBlocks
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 454              	vPortInitialiseBlocks:
 455              	.LFB30:
 275:common/rtos/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 276:common/rtos/portable/MemMang/heap_2.c **** 
 277:common/rtos/portable/MemMang/heap_2.c **** void vPortInitialiseBlocks( void )
 278:common/rtos/portable/MemMang/heap_2.c **** {
 456              		.loc 1 278 1
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 0000 80B4     		push	{r7}
 462              	.LCFI14:
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 0002 00AF     		add	r7, sp, #0
 466              	.LCFI15:
 467              		.cfi_def_cfa_register 7
 279:common/rtos/portable/MemMang/heap_2.c **** 	/* This just exists to keep the linker quiet. */
 280:common/rtos/portable/MemMang/heap_2.c **** }
 468              		.loc 1 280 1
 469 0004 00BF     		nop
 470 0006 BD46     		mov	sp, r7
 471              	.LCFI16:
 472              		.cfi_def_cfa_register 13
 473              		@ sp needed
 474 0008 80BC     		pop	{r7}
 475              	.LCFI17:
 476              		.cfi_restore 7
 477              		.cfi_def_cfa_offset 0
 478 000a 7047     		bx	lr
 479              		.cfi_endproc
 480              	.LFE30:
 482              		.section	.bss.xHeapHasBeenInitialised.0,"aw",%nobits
 483              		.align	2
 486              	xHeapHasBeenInitialised.0:
 487 0000 00000000 		.space	4
 488              		.text
 489              	.Letext0:
 490              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 491              		.file 3 "common/rtos/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 heap_2.c
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:18     .bss.xHeap:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:21     .bss.xHeap:00000000 xHeap
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:24     .rodata.heapSTRUCT_SIZE:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:27     .rodata.heapSTRUCT_SIZE:00000000 heapSTRUCT_SIZE
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:30     .bss.xStart:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:33     .bss.xStart:00000000 xStart
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:36     .bss.xEnd:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:39     .bss.xEnd:00000000 xEnd
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:42     .bss.xFreeBytesRemaining:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:45     .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:48     .text.pvPortMalloc:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:54     .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:286    .text.pvPortMalloc:00000138 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:486    .bss.xHeapHasBeenInitialised.0:00000000 xHeapHasBeenInitialised.0
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:297    .text.vPortFree:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:303    .text.vPortFree:00000000 vPortFree
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:398    .text.vPortFree:0000006c $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:406    .text.xPortGetFreeHeapSize:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:412    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:443    .text.xPortGetFreeHeapSize:00000010 $d
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:448    .text.vPortInitialiseBlocks:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:454    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
C:\Users\Admin\AppData\Local\Temp\ccRpj9Dg.s:483    .bss.xHeapHasBeenInitialised.0:00000000 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
