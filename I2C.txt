bool I2C_EE_BufferRead(u8* pBuffer, u16 ReadAddr, u16 NumByteToRead)
{
	int counter = RETRY_NUMBER;
    /* While the bus is busy */

  while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY))
  {
	  if(counter-- <= 0) return I2C_EE_Relaunch();
  }


  /* Send START condition */
  I2C_GenerateSTART(I2C1, ENABLE);

  /* Test on EV5 and clear it */
  counter = RETRY_NUMBER;
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
  {
	  if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* Send EEPROM address for write */
  I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Transmitter);


  /* Test on EV6 and clear it */
  counter = RETRY_NUMBER;
 /* while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
  {
	  if(counter-- <= 0) return I2C_EE_Relaunch();
  }*/
  while(!I2C_GetFlagStatus(I2C1, I2C_FLAG_ADDR))
  {
  	  if(counter-- <= 0) return I2C_EE_Relaunch();
    }

  /* Read I2C1 SR1 register*/
  SR2_Tmp = I2C_ReadRegister(I2C1, I2C_Register_SR1);

  //I2C_ClearFlag(I2C1, I2C_FLAG_ADDR);


  /* Clear EV6 by setting again the PE bit */
  I2C_Cmd(I2C1, ENABLE);

  /* Send the EEPROM's internal address to write to */
  I2C_SendData(I2C1, (ReadAddr>>8) & 0xFF);

  counter = RETRY_NUMBER;
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
  {
	if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  I2C_SendData(I2C1, ReadAddr & 0xFF);

  /* Test on EV8 and clear it */
  counter = RETRY_NUMBER;
  while(! I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
  {
	if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* Send STRAT condition a second time */
  I2C_GenerateSTART(I2C1, ENABLE);

  /* Test on EV5 and clear it */
  counter = RETRY_NUMBER;
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
  {
	  if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* Send EEPROM address for read */
  I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Receiver);

  /* Test on EV6 and clear it */
  counter = RETRY_NUMBER;
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
  {
	  if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* While there is data to be read */
  counter = RETRY_NUMBER;

  while(NumByteToRead)
     {
       if(NumByteToRead == 1)
       {
         /* Disable Acknowledgement */
         I2C_AcknowledgeConfig(I2C1, DISABLE);

         /* Send STOP Condition */
         I2C_GenerateSTOP(I2C1, ENABLE);
       }

    /* Test on EV7 and clear it */
 if(I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
    {
      /* Read a byte from the EEPROM */
      *pBuffer = I2C_ReceiveData(I2C1);

      /* Point to the next location where the byte read will be saved */
      pBuffer++;

      /* Decrement the read bytes counter */
      NumByteToRead--;

    }


       if(counter-- <= 0)
       return I2C_EE_Relaunch();
  }

  /* Enable Acknowledgement to be ready for another reception */
  I2C_AcknowledgeConfig(I2C1, ENABLE);
  return true;
}

bool I2C_EE_ByteWrite(u8* pBuffer, u16 WriteAddr)
{
  int counter=RETRY_NUMBER;
  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
  BKP_WriteBackupRegister(BKP_DR7, 22);
  /* Test on EV5 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
  {
	if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* Send EEPROM address for write */
  I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Transmitter);


  /* Test on EV6 and clear it */
  counter = RETRY_NUMBER;

  while(!I2C_GetFlagStatus(I2C1, I2C_FLAG_ADDR))
  {
  	  if(counter-- <= 0) return I2C_EE_Relaunch();
    }
  //SR2_Tmp = I2C_ReadRegister(I2C1, I2C_Register_SR1);


  /* Send the EEPROM's internal address to write to */
  I2C_SendData(I2C1, (WriteAddr>>8) & 0xFF);
  counter = RETRY_NUMBER;
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
  {
	if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  I2C_SendData(I2C1, WriteAddr & 0xFF);

  /* Test on EV8 and clear it */
  counter = RETRY_NUMBER;
  while(! I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))

  {
	if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* Send the byte to be written */
  I2C_SendData(I2C1, *pBuffer);

  /* Test on EV8 and clear it */
  counter = RETRY_NUMBER;
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
  {
	if(counter-- <= 0) return I2C_EE_Relaunch();
  }

  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
  return true;
}